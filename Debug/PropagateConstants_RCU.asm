; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\PropagateConstants_RCU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
PUBLIC	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency
PUBLIC	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
PUBLIC	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
PUBLIC	?PropagateConstants_DECRc0@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_DECRc0
EXTRN	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z:PROC ; PropagateConstants_StoreMiscRegisterConstant
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\propagateconstants_rcu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_flagValues$ = -8					; size = 4
_counterValue$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_DECRc0@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_DECRc0

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 13   :   uint32 counterValue, flagValues;
; 14   : 
; 15   :   if(constants.IsMiscRegisterConstant(CONSTANT_REG_RC0) && ALLOW_RCU_PROPAGATION)

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC

; 16   :   {
; 17   :     counterValue = constants.GetMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _counterValue$[ebp], eax

; 18   :     flagValues = CC_COUNTER0_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 32		; 00000020H

; 19   :     if(counterValue)

	cmp	DWORD PTR _counterValue$[ebp], 0
	je	SHORT $LN3@PropagateC

; 20   :     {
; 21   :       counterValue--;

	mov	edx, DWORD PTR _counterValue$[ebp]
	sub	edx, 1
	mov	DWORD PTR _counterValue$[ebp], edx

; 22   :       if(counterValue)

	je	SHORT $LN3@PropagateC

; 23   :       {
; 24   :         flagValues &= ~CC_COUNTER0_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	and	eax, -33				; ffffffdfH
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC:

; 25   :       }
; 26   :     }
; 27   : 
; 28   :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 218			; 000000daH

; 29   :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_RC0;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 0

; 30   :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = counterValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _counterValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 31   :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_COUNTER0_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 32			; 00000020H

; 32   :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 33   :     constants.ClearMiscInputDependency(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 34   :     PropagateConstants_StoreMiscRegisterConstant(constants);

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 35   :   }
; 36   :   else

	jmp	SHORT $LN5@PropagateC
$LN4@PropagateC:

; 37   :   {
; 38   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 39   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 40   :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN5@PropagateC:

; 41   :   }
; 42   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_DECRc0@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_DECRc0
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearMiscInputDependency, COMDAT
; _this$ = ecx

; 117  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 118  :     pCurrentInstructionEntry->miscInputDependencies &= ~(1UL << index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+36], eax

; 119  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearMiscInputDependency
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearMiscRegisterConstant, COMDAT
; _this$ = ecx

; 157  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 158  :     if(index != CONSTANT_REG_ALLFLAGS)

	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN2@ClearMiscR

; 159  :     {
; 160  :       tempMiscRegisterConstantsStatus &= ~(1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+568]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], eax

; 161  :     }
; 162  :     else

	jmp	SHORT $LN3@ClearMiscR
$LN2@ClearMiscR:

; 163  :     {
; 164  :       tempMiscRegisterConstantsStatus &= ~DEPENDENCY_FLAG_ALLFLAGS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	and	ecx, -67076097				; fc007fffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], ecx
$LN3@ClearMiscR:

; 165  :     }
; 166  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z PROC ; SuperBlockConstants::IsMiscRegisterConstant, COMDAT
; _this$ = ecx

; 209  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 210  :     return (miscRegisterConstantsStatus & (1UL << index)) != 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+560]
	neg	eax
	sbb	eax, eax
	neg	eax

; 211  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ENDP ; SuperBlockConstants::IsMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z PROC ; SuperBlockConstants::GetMiscRegisterConstant, COMDAT
; _this$ = ecx

; 217  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  :     return miscRegisterConstants[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+428]

; 219  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ENDP ; SuperBlockConstants::GetMiscRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_DECRc1@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_DECRc1
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_rcu.cpp
_TEXT	SEGMENT
_flagValues$ = -8					; size = 4
_counterValue$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_DECRc1@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_DECRc1

; 45   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 46   :   uint32 counterValue, flagValues;
; 47   : 
; 48   :   if(constants.IsMiscRegisterConstant(CONSTANT_REG_RC1) && ALLOW_RCU_PROPAGATION)

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC@2
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC@2

; 49   :   {
; 50   :     counterValue = constants.GetMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _counterValue$[ebp], eax

; 51   :     flagValues = CC_COUNTER1_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 64		; 00000040H

; 52   :     if(counterValue)

	cmp	DWORD PTR _counterValue$[ebp], 0
	je	SHORT $LN3@PropagateC@2

; 53   :     {
; 54   :       counterValue--;

	mov	edx, DWORD PTR _counterValue$[ebp]
	sub	edx, 1
	mov	DWORD PTR _counterValue$[ebp], edx

; 55   :       if(counterValue)

	je	SHORT $LN3@PropagateC@2

; 56   :       {
; 57   :         flagValues &= ~CC_COUNTER1_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@2:

; 58   :       }
; 59   :     }
; 60   : 
; 61   :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 218			; 000000daH

; 62   :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_RC1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 1

; 63   :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = counterValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _counterValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 64   :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_COUNTER1_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 64			; 00000040H

; 65   :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 66   : 
; 67   :     constants.ClearMiscInputDependency(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 68   :     PropagateConstants_StoreMiscRegisterConstant(constants);

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 69   :   }
; 70   :   else

	jmp	SHORT $LN5@PropagateC@2
$LN4@PropagateC@2:

; 71   :   {
; 72   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 73   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 74   :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN5@PropagateC@2:

; 75   :   }
; 76   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_DECRc1@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_DECRc1
_TEXT	ENDS
PUBLIC	?PropagateConstants_DECBoth@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_DECBoth
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_constants$ = 8						; size = 4
?PropagateConstants_DECBoth@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_DECBoth

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 80   :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 81   :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 82   :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 83   :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 1

; 84   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?PropagateConstants_DECBoth@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_DECBoth
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRImmediateOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regIndex$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDRImmediateOnly

; 87   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 88   :   uint32 regIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regIndex$[ebp], edx

; 89   : 
; 90   :   if(constants.IsMiscRegisterConstant(regIndex) && ALLOW_RCU_PROPAGATION)

	mov	eax, DWORD PTR _regIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@3
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@3

; 91   :   {
; 92   : 
; 93   :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 218			; 000000daH

; 94   :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = regIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 95   :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = constants.GetMiscRegisterConstant(regIndex) + constants.nuance->fields[FIELD_RCU_SRC];

	mov	edx, DWORD PTR _regIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 96   :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = 0;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 0

; 97   : 
; 98   :     constants.ClearMiscInputDependency(regIndex);

	mov	edx, DWORD PTR _regIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 99   :     PropagateConstants_StoreMiscRegisterConstant(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 100  :   }
; 101  :   else

	jmp	SHORT $LN3@PropagateC@3
$LN2@PropagateC@3:

; 102  :   {
; 103  :     constants.ClearMiscRegisterConstant(regIndex);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 104  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN3@PropagateC@3:

; 105  :   }
; 106  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDRImmediateOnly
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDRImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regIndex$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDRImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDRImmediate

; 109  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 110  :   uint32 regIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regIndex$[ebp], edx

; 111  :   constants.ClearMiscRegisterConstant(regIndex);

	mov	eax, DWORD PTR _regIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 112  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 113  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 114  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 115  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 116  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 117  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDRImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDRImmediate
_TEXT	ENDS
PUBLIC	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
PUBLIC	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency
PUBLIC	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
PUBLIC	?PropagateConstants_ADDRScalarOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRScalarOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regSrcIndex$ = -8					; size = 4
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDRScalarOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDRScalarOnly

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 121  :   uint32 regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 122  :   uint32 regSrcIndex = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regSrcIndex$[ebp], edx

; 123  : 
; 124  :   if(constants.IsScalarRegisterConstant(regSrcIndex) && ALLOW_RCU_PROPAGATION)

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@4
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@4

; 125  :   {
; 126  :     constants.ClearScalarInputDependency(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 127  :     constants.nuance->fields[FIELD_RCU_HANDLER] = Handler_ADDRImmediateOnly;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 29			; 0000001dH

; 128  :     constants.nuance->fields[FIELD_RCU_SRC] = constants.GetScalarRegisterConstant(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 129  :     PropagateConstants_ADDRImmediateOnly(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ADDRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRImmediateOnly
	add	esp, 4

; 130  :   }
; 131  :   else

	jmp	SHORT $LN3@PropagateC@4
$LN2@PropagateC@4:

; 132  :   {
; 133  :     constants.ClearMiscRegisterConstant(regDestIndex);

	mov	ecx, DWORD PTR _regDestIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 134  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN3@PropagateC@4:

; 135  :   }
; 136  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDRScalarOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDRScalarOnly
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearScalarInputDependency, COMDAT
; _this$ = ecx

; 93   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 94   :     pCurrentInstructionEntry->scalarInputDependencies &= ~(1UL << index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+32], eax

; 95   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearScalarInputDependency
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z PROC ; SuperBlockConstants::IsScalarRegisterConstant, COMDAT
; _this$ = ecx

; 205  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 206  :     return (scalarRegisterConstantsStatus & (1UL << index)) != 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+556]
	neg	eax
	sbb	eax, eax
	neg	eax

; 207  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ENDP ; SuperBlockConstants::IsScalarRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z PROC ; SuperBlockConstants::GetScalarRegisterConstant, COMDAT
; _this$ = ecx

; 213  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 214  :     return scalarRegisterConstants[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+300]

; 215  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ENDP ; SuperBlockConstants::GetScalarRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDRScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_rcu.cpp
_TEXT	SEGMENT
_regSrcIndex$ = -8					; size = 4
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDRScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDRScalar

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 139  :   uint32 regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 140  :   uint32 regSrcIndex = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regSrcIndex$[ebp], edx

; 141  : 
; 142  :   if(constants.IsScalarRegisterConstant(regSrcIndex) && ALLOW_RCU_PROPAGATION)

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@5
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@5

; 143  :   {
; 144  :     constants.ClearScalarInputDependency(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 145  :     constants.nuance->fields[FIELD_RCU_HANDLER] = Handler_ADDRImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 30			; 0000001eH

; 146  :     constants.nuance->fields[FIELD_RCU_SRC] = constants.GetScalarRegisterConstant(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 147  :     PropagateConstants_ADDRImmediate(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ADDRImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDRImmediate
	add	esp, 4

; 148  :   }
; 149  :   else

	jmp	SHORT $LN3@PropagateC@5
$LN2@PropagateC@5:

; 150  :   {
; 151  :     constants.ClearMiscRegisterConstant(regDestIndex);

	mov	ecx, DWORD PTR _regDestIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 152  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 153  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 154  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 155  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 156  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN3@PropagateC@5:

; 157  :   }
; 158  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDRScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDRScalar
_TEXT	ENDS
PUBLIC	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant
PUBLIC	?PropagateConstants_MVRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRImmediateOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regValue$ = -8						; size = 4
_regIndex$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_MVRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_MVRImmediateOnly

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 161  :   uint32 regIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regIndex$[ebp], edx

; 162  :   uint32 regValue = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regValue$[ebp], edx

; 163  : 
; 164  :   if(ALLOW_RCU_PROPAGATION)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN1@PropagateC@6

; 165  :   {
; 166  :     constants.SetMiscRegisterConstant(regIndex,regValue);

	mov	ecx, DWORD PTR _regValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant
$LN1@PropagateC@6:

; 167  :   }
; 168  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 1

; 169  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_MVRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_MVRImmediateOnly
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z PROC ; SuperBlockConstants::SetMiscRegisterConstant, COMDAT
; _this$ = ecx

; 173  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  :     tempMiscRegisterConstantsStatus |= (1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+568]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], eax

; 175  :     tempMiscRegisterConstants[index] = value;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+eax*4+172], edx

; 176  :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ENDP ; SuperBlockConstants::SetMiscRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_MVRImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRImmediate
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_rcu.cpp
_TEXT	SEGMENT
_regValue$ = -8						; size = 4
_regIndex$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_MVRImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_MVRImmediate

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 172  :   uint32 regIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regIndex$[ebp], edx

; 173  :   uint32 regValue = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regValue$[ebp], edx

; 174  : 
; 175  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 176  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 177  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 178  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 179  :   if(ALLOW_RCU_PROPAGATION)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN1@PropagateC@7

; 180  :   {
; 181  :     constants.SetMiscRegisterConstant(regIndex,regValue);

	mov	ecx, DWORD PTR _regValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant
$LN1@PropagateC@7:

; 182  :   }
; 183  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 1

; 184  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_MVRImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_MVRImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_MVRScalarOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRScalarOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regSrcIndex$ = -8					; size = 4
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_MVRScalarOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_MVRScalarOnly

; 186  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 187  :   uint32 regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 188  :   uint32 regSrcIndex = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regSrcIndex$[ebp], edx

; 189  : 
; 190  :   if(constants.IsScalarRegisterConstant(regSrcIndex) && ALLOW_RCU_PROPAGATION)

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@8
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@8

; 191  :   {
; 192  :     constants.ClearScalarInputDependency(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 193  :     constants.nuance->fields[FIELD_RCU_HANDLER] = Handler_MVRImmediateOnly;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 33			; 00000021H

; 194  :     constants.nuance->fields[FIELD_RCU_SRC] = constants.GetScalarRegisterConstant(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 195  :     PropagateConstants_MVRImmediateOnly(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_MVRImmediateOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRImmediateOnly
	add	esp, 4

; 196  :   }
; 197  :   else

	jmp	SHORT $LN3@PropagateC@8
$LN2@PropagateC@8:

; 198  :   {
; 199  :     constants.ClearMiscRegisterConstant(regDestIndex);

	mov	ecx, DWORD PTR _regDestIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 200  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN3@PropagateC@8:

; 201  :   }
; 202  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_MVRScalarOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_MVRScalarOnly
_TEXT	ENDS
PUBLIC	?PropagateConstants_MVRScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regSrcIndex$ = -8					; size = 4
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_MVRScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_MVRScalar

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 205  :   uint32 regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 206  :   uint32 regSrcIndex = constants.nuance->fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _regSrcIndex$[ebp], edx

; 207  : 
; 208  :   if(constants.IsScalarRegisterConstant(regSrcIndex) && ALLOW_RCU_PROPAGATION)

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@9
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@9

; 209  :   {
; 210  :     constants.ClearScalarInputDependency(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 211  :     constants.nuance->fields[FIELD_RCU_HANDLER] = Handler_MVRImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 34			; 00000022H

; 212  :     constants.nuance->fields[FIELD_RCU_SRC] = constants.GetScalarRegisterConstant(regSrcIndex);

	mov	eax, DWORD PTR _regSrcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 213  :     PropagateConstants_MVRImmediate(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_MVRImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MVRImmediate
	add	esp, 4

; 214  :   }
; 215  :   else

	jmp	SHORT $LN3@PropagateC@9
$LN2@PropagateC@9:

; 216  :   {
; 217  :     constants.ClearMiscRegisterConstant(regDestIndex);

	mov	ecx, DWORD PTR _regDestIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 218  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 219  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 220  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 221  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 222  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 1
$LN3@PropagateC@9:

; 223  :   }
; 224  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_MVRScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_MVRScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_RangeOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_RangeOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_constants$ = 8						; size = 4
?PropagateConstants_RangeOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_RangeOnly

; 226  : {

	push	ebp
	mov	ebp, esp

; 227  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODMI);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 228  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODGE);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 229  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 1

; 230  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?PropagateConstants_RangeOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_RangeOnly
_TEXT	ENDS
PUBLIC	?PropagateConstants_Range@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_Range
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_constants$ = 8						; size = 4
?PropagateConstants_Range@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_Range

; 232  : {

	push	ebp
	mov	ebp, esp

; 233  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODMI);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 234  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODGE);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 235  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 236  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 237  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 238  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 239  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 1

; 240  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?PropagateConstants_Range@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_Range
_TEXT	ENDS
PUBLIC	?PropagateConstants_ModuloOnly@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ModuloOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ModuloOnly@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ModuloOnly

; 243  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 244  :   uint32 regDestIndex;
; 245  : 
; 246  :   regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 247  :   constants.ClearMiscRegisterConstant(regDestIndex);

	mov	eax, DWORD PTR _regDestIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 248  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODMI);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 249  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODGE);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 250  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 251  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ModuloOnly@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ModuloOnly
_TEXT	ENDS
PUBLIC	?PropagateConstants_Modulo@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_Modulo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_regDestIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_Modulo@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_Modulo

; 253  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 254  :   uint32 regDestIndex;
; 255  : 
; 256  :   regDestIndex = CONSTANT_REG_RX + constants.nuance->fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 2
	mov	DWORD PTR _regDestIndex$[ebp], edx

; 257  :   constants.ClearMiscRegisterConstant(regDestIndex);

	mov	eax, DWORD PTR _regDestIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 258  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODMI);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 259  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_MODGE);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 260  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC0);

	push	0
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 261  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_RC1);

	push	1
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 262  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C0Z);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 263  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C1Z);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 264  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_RCU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 265  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_Modulo@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_Modulo
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\NuonMemoryManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG10112
_DATA	ENDS
CONST	SEGMENT
$SG10112 DB	'bad allocation', 00H
	ORG $+1
$SG13664 DB	'Illegal Main Bus memory address allocation: %8.8lX', 00H
	ORG $+1
$SG13670 DB	'Illegal Other Bus memory address allocation: %8.8lX', 00H
CONST	ENDS
PUBLIC	??0NuonMemoryManager@@QAE@XZ			; NuonMemoryManager::NuonMemoryManager
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0MemoryManager@@QAE@II@Z:PROC			; MemoryManager::MemoryManager
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$??0NuonMemoryManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NuonMemoryManager@@QAE@XZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0NuonMemoryManager@@QAE@XZ$1
__ehfuncinfo$??0NuonMemoryManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0NuonMemoryManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\nuonmemorymanager.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv83 = -40						; size = 4
tv73 = -36						; size = 4
$T15787 = -32						; size = 4
$T15786 = -28						; size = 4
$T15783 = -24						; size = 4
$T15782 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0NuonMemoryManager@@QAE@XZ PROC			; NuonMemoryManager::NuonMemoryManager
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0NuonMemoryManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 9    :   mainBusMemoryManager = new MemoryManager(8*1024*1024,16);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15783[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T15783[ebp], 0
	je	SHORT $LN3@NuonMemory
	push	16					; 00000010H
	push	8388608					; 00800000H
	mov	ecx, DWORD PTR $T15783[ebp]
	call	??0MemoryManager@@QAE@II@Z		; MemoryManager::MemoryManager
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@NuonMemory
$LN3@NuonMemory:
	mov	DWORD PTR tv73[ebp], 0
$LN4@NuonMemory:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T15782[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T15782[ebp]
	mov	DWORD PTR [ecx], edx

; 10   :   otherBusMemoryManager = new MemoryManager(8*1024*1024,16);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T15787[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T15787[ebp], 0
	je	SHORT $LN5@NuonMemory
	push	16					; 00000010H
	push	8388608					; 00800000H
	mov	ecx, DWORD PTR $T15787[ebp]
	call	??0MemoryManager@@QAE@II@Z		; MemoryManager::MemoryManager
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN6@NuonMemory
$LN5@NuonMemory:
	mov	DWORD PTR tv83[ebp], 0
$LN6@NuonMemory:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T15786[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T15786[ebp]
	mov	DWORD PTR [ecx+4], edx

; 11   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0NuonMemoryManager@@QAE@XZ$0:
	mov	eax, DWORD PTR $T15783[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0NuonMemoryManager@@QAE@XZ$1:
	mov	eax, DWORD PTR $T15787[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0NuonMemoryManager@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0NuonMemoryManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0NuonMemoryManager@@QAE@XZ ENDP			; NuonMemoryManager::NuonMemoryManager
PUBLIC	??_GMemoryManager@@QAEPAXI@Z			; MemoryManager::`scalar deleting destructor'
PUBLIC	??1NuonMemoryManager@@QAE@XZ			; NuonMemoryManager::~NuonMemoryManager
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -28						; size = 4
tv68 = -24						; size = 4
$T15812 = -20						; size = 4
$T15811 = -16						; size = 4
$T15808 = -12						; size = 4
$T15807 = -8						; size = 4
_this$ = -4						; size = 4
??1NuonMemoryManager@@QAE@XZ PROC			; NuonMemoryManager::~NuonMemoryManager
; _this$ = ecx

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 15   :   delete mainBusMemoryManager;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T15808[ebp], ecx
	mov	edx, DWORD PTR $T15808[ebp]
	mov	DWORD PTR $T15807[ebp], edx
	cmp	DWORD PTR $T15807[ebp], 0
	je	SHORT $LN3@NuonMemory@2
	push	1
	mov	ecx, DWORD PTR $T15807[ebp]
	call	??_GMemoryManager@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@NuonMemory@2
$LN3@NuonMemory@2:
	mov	DWORD PTR tv68[ebp], 0
$LN4@NuonMemory@2:

; 16   :   delete otherBusMemoryManager;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T15812[ebp], ecx
	mov	edx, DWORD PTR $T15812[ebp]
	mov	DWORD PTR $T15811[ebp], edx
	cmp	DWORD PTR $T15811[ebp], 0
	je	SHORT $LN5@NuonMemory@2
	push	1
	mov	ecx, DWORD PTR $T15811[ebp]
	call	??_GMemoryManager@@QAEPAXI@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN1@NuonMemory@2
$LN5@NuonMemory@2:
	mov	DWORD PTR tv74[ebp], 0
$LN1@NuonMemory@2:

; 17   : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1NuonMemoryManager@@QAE@XZ ENDP			; NuonMemoryManager::~NuonMemoryManager
_TEXT	ENDS
PUBLIC	??1MemoryManager@@QAE@XZ			; MemoryManager::~MemoryManager
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GMemoryManager@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMemoryManager@@QAEPAXI@Z PROC			; MemoryManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemoryManager@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemoryManager@@QAEPAXI@Z ENDP			; MemoryManager::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
PUBLIC	??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1MemoryManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1MemoryManager@@QAE@XZ$0
__ehfuncinfo$??1MemoryManager@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1MemoryManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1MemoryManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MemoryManager@@QAE@XZ PROC				; MemoryManager::~MemoryManager, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MemoryManager@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1MemoryManager@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
__ehhandler$??1MemoryManager@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1MemoryManager@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MemoryManager@@QAE@XZ ENDP				; MemoryManager::~MemoryManager
PUBLIC	?Alloc@NuonMemoryManager@@QAEIIII@Z		; NuonMemoryManager::Alloc
EXTRN	_sprintf:PROC
EXTRN	?Allocate@MemoryManager@@QAEPAXII@Z:PROC	; MemoryManager::Allocate
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_UninitUse:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T15828 = -145						; size = 1
_address$ = -144					; size = 4
_msg$ = -136						; size = 128
_this$ = -4						; size = 4
_requestedBytes$ = 8					; size = 4
_requestedAlignment$ = 12				; size = 4
_flags$ = 16						; size = 4
?Alloc@NuonMemoryManager@@QAEIIII@Z PROC		; NuonMemoryManager::Alloc
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T15828[ebp], 0

; 21   :   char msg[128];
; 22   :   void *address;
; 23   : 
; 24   : 
; 25   :   if(flags & kMemSDRAM)

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 1
	je	$LN6@Alloc

; 26   :   {
; 27   :     address = mainBusMemoryManager->Allocate(requestedBytes,requestedAlignment);

	mov	ecx, DWORD PTR _requestedAlignment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _requestedBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Allocate@MemoryManager@@QAEPAXII@Z	; MemoryManager::Allocate
	mov	BYTE PTR $T15828[ebp], 1
	mov	DWORD PTR _address$[ebp], eax

; 28   :     if((address != 0) && (((uint32)address < MAIN_BUS_BASE) || ((uint32)address >= MAIN_BUS_BASE + MAIN_BUS_SIZE)))

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN9@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN9@Alloc:
	cmp	DWORD PTR _address$[ebp], 0
	je	SHORT $LN6@Alloc
	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN11@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN11@Alloc:
	cmp	DWORD PTR _address$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN4@Alloc
	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN12@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN12@Alloc:
	cmp	DWORD PTR _address$[ebp], 1082130432	; 40800000H
	jb	SHORT $LN6@Alloc
$LN4@Alloc:

; 29   :     {
; 30   :       sprintf(msg,"Illegal Main Bus memory address allocation: %8.8lX",address);

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN13@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN13@Alloc:
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	push	OFFSET $SG13664
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN6@Alloc:

; 31   :       //QMessageBox::warning(0,"MemAlloc Error",QString(msg));
; 32   :     }
; 33   :   }
; 34   :   
; 35   :   if((address == 0) && (flags & kMemSysRam))

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN14@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN14@Alloc:
	cmp	DWORD PTR _address$[ebp], 0
	jne	$LN3@Alloc
	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 2
	je	$LN3@Alloc

; 36   :   {
; 37   :     address = otherBusMemoryManager->Allocate(requestedBytes,requestedAlignment);

	mov	ecx, DWORD PTR _requestedAlignment$[ebp]
	push	ecx
	mov	edx, DWORD PTR _requestedBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Allocate@MemoryManager@@QAEPAXII@Z	; MemoryManager::Allocate
	mov	BYTE PTR $T15828[ebp], 1
	mov	DWORD PTR _address$[ebp], eax

; 38   :     if((address != 0) && (((uint32)address < SYSTEM_BUS_BASE) || ((uint32)address >= BIOS_FUNCTIONS_BASE)))

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN15@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN15@Alloc:
	cmp	DWORD PTR _address$[ebp], 0
	je	SHORT $LN3@Alloc
	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN16@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN16@Alloc:
	cmp	DWORD PTR _address$[ebp], -2147483648	; 80000000H
	jb	SHORT $LN1@Alloc
	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN17@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN17@Alloc:
	cmp	DWORD PTR _address$[ebp], -2139750400	; 80760000H
	jb	SHORT $LN3@Alloc
$LN1@Alloc:

; 39   :     {
; 40   :       sprintf(msg,"Illegal Other Bus memory address allocation: %8.8lX",address);

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN18@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN18@Alloc:
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	push	OFFSET $SG13670
	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH
$LN3@Alloc:

; 41   :       //QMessageBox::warning(0,"MemAlloc Error",QString(msg));
; 42   :     }
; 43   :   }
; 44   : 
; 45   : 
; 46   :   return (uint32)address;

	cmp	BYTE PTR $T15828[ebp], 0
	jne	SHORT $LN19@Alloc
	push	OFFSET $LN10@Alloc
	call	__RTC_UninitUse
	add	esp, 4
$LN19@Alloc:
	mov	eax, DWORD PTR _address$[ebp]

; 47   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@Alloc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN22@Alloc:
	DD	1
	DD	$LN21@Alloc
$LN21@Alloc:
	DD	-136					; ffffff78H
	DD	128					; 00000080H
	DD	$LN20@Alloc
$LN20@Alloc:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN10@Alloc:
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
?Alloc@NuonMemoryManager@@QAEIIII@Z ENDP		; NuonMemoryManager::Alloc
_TEXT	ENDS
PUBLIC	?Free@NuonMemoryManager@@QAEXI@Z		; NuonMemoryManager::Free
EXTRN	?Free@MemoryManager@@QAEXI@Z:PROC		; MemoryManager::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_address$ = 8						; size = 4
?Free@NuonMemoryManager@@QAEXI@Z PROC			; NuonMemoryManager::Free
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :   if((address >= MAIN_BUS_BASE) && (address < (MAIN_BUS_BASE + MAIN_BUS_SIZE)))

	cmp	DWORD PTR _address$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN3@Free
	cmp	DWORD PTR _address$[ebp], 1082130432	; 40800000H
	jae	SHORT $LN3@Free

; 52   :   {
; 53   :     mainBusMemoryManager->Free(address);

	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Free@MemoryManager@@QAEXI@Z		; MemoryManager::Free
	jmp	SHORT $LN4@Free
$LN3@Free:

; 54   :   }
; 55   :   else if((address >= SYSTEM_BUS_BASE) && (address < (SYSTEM_BUS_BASE + SYSTEM_BUS_SIZE)))

	cmp	DWORD PTR _address$[ebp], -2147483648	; 80000000H
	jb	SHORT $LN4@Free
	cmp	DWORD PTR _address$[ebp], -2139095040	; 80800000H
	jae	SHORT $LN4@Free

; 56   :   {
; 57   :     otherBusMemoryManager->Free(address);

	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Free@MemoryManager@@QAEXI@Z		; MemoryManager::Free
$LN4@Free:

; 58   :   }
; 59   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@NuonMemoryManager@@QAEXI@Z ENDP			; NuonMemoryManager::Free
_TEXT	ENDS
PUBLIC	?Reset@MemoryManager@@QAEXXZ			; MemoryManager::Reset
PUBLIC	?Init@NuonMemoryManager@@QAEXXZ			; NuonMemoryManager::Init
EXTRN	?AddAllocatedBlock@MemoryManager@@QAEXII@Z:PROC	; MemoryManager::AddAllocatedBlock
EXTRN	?Add@MemoryManager@@QAEXIII@Z:PROC		; MemoryManager::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@NuonMemoryManager@@QAEXXZ PROC			; NuonMemoryManager::Init
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 63   :   otherBusMemoryManager->Reset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Reset@MemoryManager@@QAEXXZ		; MemoryManager::Reset

; 64   :   mainBusMemoryManager->Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?Reset@MemoryManager@@QAEXXZ		; MemoryManager::Reset

; 65   : 
; 66   :   mainBusMemoryManager->Add(MAIN_BUS_BASE, MAIN_BUS_BASE + MAIN_BUS_SIZE - 1);

	push	0
	push	1082130431				; 407fffffH
	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?Add@MemoryManager@@QAEXIII@Z		; MemoryManager::Add

; 67   :   otherBusMemoryManager->Add(SYSTEM_BUS_BASE + BIOS_LOWMEM_SIZE, BIOS_FUNCTIONS_BASE - 1);

	push	0
	push	-2139750401				; 8075ffffH
	push	-2147418112				; 80010000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Add@MemoryManager@@QAEXIII@Z		; MemoryManager::Add

; 68   :   //Insert the 640K block of System Bus kernel memory into the allocated block list
; 69   :   otherBusMemoryManager->AddAllocatedBlock(BIOS_FUNCTIONS_BASE, BIOS_FUNCTIONS_SIZE);

	push	655360					; 000a0000H
	push	-2139750400				; 80760000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?AddAllocatedBlock@MemoryManager@@QAEXII@Z ; MemoryManager::AddAllocatedBlock

; 70   :   //Insert the 64K block of System Bus kernel memory into the allocated block list
; 71   :   otherBusMemoryManager->AddAllocatedBlock(SYSTEM_BUS_BASE, BIOS_LOWMEM_SIZE);

	push	65536					; 00010000H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?AddAllocatedBlock@MemoryManager@@QAEXII@Z ; MemoryManager::AddAllocatedBlock

; 72   : 
; 73   :   if(SYSTEM_BUS_SIZE > (8UL*1024UL*1024UL))

	xor	eax, eax
	je	SHORT $LN2@Init

; 74   :   {
; 75   :     //Main Bus DRAM is greater than 8 megs
; 76   :     otherBusMemoryManager->Add(BIOS_FUNCTIONS_BASE + BIOS_FUNCTIONS_SIZE, SYSTEM_BUS_SIZE - (8UL*1024UL*1024UL));

	push	0
	push	0
	push	-2139095040				; 80800000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?Add@MemoryManager@@QAEXIII@Z		; MemoryManager::Add
$LN2@Init:

; 77   :   }
; 78   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@NuonMemoryManager@@QAEXXZ ENDP			; NuonMemoryManager::Init
_TEXT	ENDS
PUBLIC	?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::clear
PUBLIC	?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::clear
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\memorymanager.h
;	COMDAT ?Reset@MemoryManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@MemoryManager@@QAEXXZ PROC			; MemoryManager::Reset, COMDAT
; _this$ = ecx

; 33   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :     freeBlockVector.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::clear

; 35   :     allocatedBlockVector.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::clear

; 36   :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@MemoryManager@@QAEXXZ ENDP			; MemoryManager::Reset
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
PUBLIC	?_Tidy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXXZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Tidy
;	COMDAT xdata$x
; File c:\microsoft visual studio 8\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 546  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXXZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Tidy

; 547  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
PUBLIC	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
PUBLIC	?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::erase
PUBLIC	?begin@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::begin
PUBLIC	?end@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::end
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ$0
__ehfuncinfo$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv129 = -52						; size = 4
tv132 = -48						; size = 4
tv128 = -44						; size = 4
tv134 = -40						; size = 4
$T15861 = -36						; size = 12
$T15860 = -24						; size = 4
$T15859 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::clear, COMDAT
; _this$ = ecx

; 1034 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1035 : 		erase(begin(), end());

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T15859[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::end
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T15860[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::begin
	mov	DWORD PTR tv132[ebp], eax
	lea	eax, DWORD PTR $T15861[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::erase
	mov	DWORD PTR tv129[ebp], eax
	lea	ecx, DWORD PTR $T15861[ebp]
	call	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ

; 1036 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ$0:
	mov	ecx, DWORD PTR $T15859[ebp]
	jmp	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAEXXZ ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::clear
PUBLIC	??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
PUBLIC	?_Tidy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXXZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx

; 545  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 546  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXXZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Tidy

; 547  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
PUBLIC	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
PUBLIC	?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::erase
PUBLIC	?begin@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::begin
PUBLIC	?end@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::end
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ$0
__ehfuncinfo$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv129 = -52						; size = 4
tv132 = -48						; size = 4
tv128 = -44						; size = 4
tv134 = -40						; size = 4
$T15884 = -36						; size = 12
$T15883 = -24						; size = 4
$T15882 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::clear, COMDAT
; _this$ = ecx

; 1034 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1035 : 		erase(begin(), end());

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR $T15882[ebp], esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?end@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::end
	mov	DWORD PTR tv134[ebp], eax
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR tv128[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR $T15883[ebp], esp
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::begin
	mov	DWORD PTR tv132[ebp], eax
	lea	eax, DWORD PTR $T15884[ebp]
	push	eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::erase
	mov	DWORD PTR tv129[ebp], eax
	lea	ecx, DWORD PTR $T15884[ebp]
	call	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ

; 1036 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ$0:
	mov	ecx, DWORD PTR $T15882[ebp]
	jmp	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
__ehhandler$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAEXXZ ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::clear
PUBLIC	??1_Container_base@std@@QAE@XZ			; std::_Container_base::~_Container_base
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base@std@@QAE@XZ		; std::_Container_base::~_Container_base
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_val<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base@std@@QBEXXZ	; std::_Container_base::_Orphan_all
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??1_Container_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Container_base@std@@QAE@XZ PROC			; std::_Container_base::~_Container_base, COMDAT
; _this$ = ecx

; 105  : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base@std@@QBEXXZ ; std::_Container_base::_Orphan_all

; 107  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base@std@@QAE@XZ ENDP			; std::_Container_base::~_Container_base
_TEXT	ENDS
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Orphan_all@_Container_base@std@@QBEXXZ
_TEXT	SEGMENT
__Pnext$6488 = -20					; size = 4
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
?_Orphan_all@_Container_base@std@@QBEXXZ PROC		; std::_Container_base::_Orphan_all, COMDAT
; _this$ = ecx

; 191  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 192  : 	_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 193  : 	if (_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN4@Orphan_all

; 194  : 		{
; 195  : 		for (_Iterator_base **_Pnext = (_Iterator_base **)&_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$6488[ebp], ecx
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:

; 196  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	edx, DWORD PTR __Pnext$6488[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Pnext$6488[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
$LN3@Orphan_all:
	mov	eax, DWORD PTR __Pnext$6488[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_all

; 197  : 			(*_Pnext)->_Mycont = 0;

	mov	ecx, DWORD PTR __Pnext$6488[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 198  : 		*(_Iterator_base **)&_Myfirstiter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@Orphan_all:

; 199  : 		}
; 200  : 	}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base@std@@QBEXXZ ENDP		; std::_Container_base::_Orphan_all
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base@std@@QAE@XZ		; std::_Container_base::~_Container_base
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_val@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_val<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??1?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::~_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::~_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
_TEXT	ENDS
PUBLIC	??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::~_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::~_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??1_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::~_Iterator_base
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ PROC ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::~_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ENDP ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::~_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>
_TEXT	ENDS
PUBLIC	?_Orphan_me@_Iterator_base@std@@QAEXXZ		; std::_Iterator_base::_Orphan_me
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1_Iterator_base@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
__ehfuncinfo$??1_Iterator_base@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1_Iterator_base@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::~_Iterator_base, COMDAT
; _this$ = ecx

; 148  : 		{	// destroy the iterator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Iterator_base@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 149  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 150  : 		_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 151  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Iterator_b
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Iterator_b:
	DD	1
	DD	$LN6@Iterator_b
$LN6@Iterator_b:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN4@Iterator_b
$LN4@Iterator_b:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::~_Iterator_base
PUBLIC	??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@ ; `string'
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
;	COMDAT ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ DB 'I'
	DB	00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'O', 00H
	DB	'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T', 00H, ' '
	DB	00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H, 'P', 00H
	DB	'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
CONST	SEGMENT
??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '8', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\'
	DB	00H, 'x', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?_Orphan_me@_Iterator_base@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$6473 = -8					; size = 4
_this$ = -4						; size = 4
?_Orphan_me@_Iterator_base@std@@QAEXXZ PROC		; std::_Iterator_base::_Orphan_me, COMDAT
; _this$ = ecx

; 169  : 		{	// cut ties with parent

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		if (_Mycont != 0 && _Mycont->_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_me
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx], -3			; fffffffdH
	je	SHORT $LN5@Orphan_me

; 171  : 			{	// adopted, remove self from list
; 172  : 			_Iterator_base **_Pnext =
; 173  : 				(_Iterator_base **)&_Mycont->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnext$6473[ebp], ecx
$LN3@Orphan_me:

; 174  : 			while (*_Pnext != 0 && *_Pnext != this)

	mov	edx, DWORD PTR __Pnext$6473[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN2@Orphan_me
	mov	eax, DWORD PTR __Pnext$6473[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN2@Orphan_me

; 175  : 				_Pnext = &(*_Pnext)->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$6473[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	DWORD PTR __Pnext$6473[ebp], eax
	jmp	SHORT $LN3@Orphan_me
$LN2@Orphan_me:

; 176  : 
; 177  : 			if (*_Pnext == 0)

	mov	ecx, DWORD PTR __Pnext$6473[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN1@Orphan_me

; 178  : 				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");

	push	178					; 000000b2H
	push	OFFSET ??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN1@Orphan_me:

; 179  : 			*_Pnext = _Mynextiter;

	mov	edx, DWORD PTR __Pnext$6473[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx

; 180  : 			_Mycont = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
$LN5@Orphan_me:

; 181  : 			}
; 182  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me@_Iterator_base@std@@QAEXXZ ENDP		; std::_Iterator_base::_Orphan_me
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ PROC ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::~_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::~_Iterator_base
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ENDP ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::~_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\vector
;	COMDAT ?begin@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ
_TEXT	SEGMENT
$T15943 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::begin, COMDAT
; _this$ = ecx

; 627  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15943[ebp], 0

; 628  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	mov	eax, DWORD PTR $T15943[ebp]
	or	eax, 1
	mov	DWORD PTR $T15943[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 629  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::begin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?end@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ
_TEXT	SEGMENT
$T15948 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::end, COMDAT
; _this$ = ecx

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15948[ebp], 0

; 638  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	mov	eax, DWORD PTR $T15948[ebp]
	or	eax, 1
	mov	DWORD PTR $T15948[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 639  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@XZ ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Destroy
PUBLIC	?_Orphan_range@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IBEXPAVFreeMemoryBlock@@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Orphan_range
PUBLIC	??$unchecked_copy@PAVFreeMemoryBlock@@PAV1@@stdext@@YAPAVFreeMemoryBlock@@PAV1@00@Z ; stdext::unchecked_copy<FreeMemoryBlock *,FreeMemoryBlock *>
PUBLIC	??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@ ; `string'
PUBLIC	??M?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator<
PUBLIC	??9?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator!=
;	COMDAT ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
CONST	SEGMENT
??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
CONST	SEGMENT
??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, '8', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$1
__ehfuncinfo$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
$T15955 = -24						; size = 4
__Ptr$14207 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::erase, COMDAT
; _this$ = ecx

; 1006 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15955[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1007 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase

; 1008 : 			{	// worth doing, copy down over hole
; 1009 : 
; 1010 :  #if _HAS_ITERATOR_DEBUGGING
; 1011 : 			if (_Last < _First || _First._Mycont != this
; 1012 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)

	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator<
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@erase
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __First$[ebp+8]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN1@erase
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase
$LN1@erase:

; 1013 : 				_DEBUG_ERROR("vector erase iterator outside range");

	push	1013					; 000003f5H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase:

; 1014 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1015 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$unchecked_copy@PAVFreeMemoryBlock@@PAV1@@stdext@@YAPAVFreeMemoryBlock@@PAV1@00@Z ; stdext::unchecked_copy<FreeMemoryBlock *,FreeMemoryBlock *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$14207[ebp], eax

; 1016 : 			_Orphan_range(_First._Myptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IBEXPAVFreeMemoryBlock@@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Orphan_range

; 1017 : 
; 1018 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1019 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1020 : 				_VEC_ITER_BASE(_First));
; 1021 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1022 : 
; 1023 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Ptr$14207[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Destroy

; 1024 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$14207[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@erase:

; 1025 : 			}
; 1026 : #if _HAS_ITERATOR_DEBUGGING
; 1027 :         return (iterator(_First._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	mov	edx, DWORD PTR $T15955[ebp]
	or	edx, 1
	mov	DWORD PTR $T15955[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1028 : #else
; 1029 : 		return (_First);
; 1030 : #endif
; 1031 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z$2:
	mov	eax, DWORD PTR $T15955[ebp]
	and	eax, 1
	je	$LN9@erase
	and	DWORD PTR $T15955[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@XZ
$LN9@erase:
	ret	0
__ehhandler$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@2@V32@0@Z ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::erase
PUBLIC	?deallocate@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@I@Z ; std::allocator<FreeMemoryBlock>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Tidy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXXZ PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Tidy, COMDAT
; _this$ = ecx

; 1087 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base@std@@QBEXXZ ; std::_Container_base::_Orphan_all

; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Destroy

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax+8]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@I@Z ; std::allocator<FreeMemoryBlock>::deallocate
$LN1@Tidy:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1099 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXXZ ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?begin@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ
_TEXT	SEGMENT
$T15968 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::begin, COMDAT
; _this$ = ecx

; 627  : 		{	// return iterator for beginning of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15968[ebp], 0

; 628  : 		return (iterator(_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	mov	eax, DWORD PTR $T15968[ebp]
	or	eax, 1
	mov	DWORD PTR $T15968[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 629  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::begin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?end@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ
_TEXT	SEGMENT
$T15973 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::end, COMDAT
; _this$ = ecx

; 637  : 		{	// return iterator for end of mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15973[ebp], 0

; 638  : 		return (iterator(_Mylast, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	mov	eax, DWORD PTR $T15973[ebp]
	or	eax, 1
	mov	DWORD PTR $T15973[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 639  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@XZ ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Destroy
PUBLIC	?_Orphan_range@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IBEXPAVAllocatedMemoryBlock@@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Orphan_range
PUBLIC	??$unchecked_copy@PAVAllocatedMemoryBlock@@PAV1@@stdext@@YAPAVAllocatedMemoryBlock@@PAV1@00@Z ; stdext::unchecked_copy<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
PUBLIC	??M?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator<
PUBLIC	??9?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator!=
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$1
__ehfuncinfo$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z
_TEXT	SEGMENT
$T15980 = -24						; size = 4
__Ptr$14233 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 12
__Last$ = 24						; size = 12
?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::erase, COMDAT
; _this$ = ecx

; 1006 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T15980[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1007 : 		if (_First != _Last)

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	call	??9?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@erase@2

; 1008 : 			{	// worth doing, copy down over hole
; 1009 : 
; 1010 :  #if _HAS_ITERATOR_DEBUGGING
; 1011 : 			if (_Last < _First || _First._Mycont != this
; 1012 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)

	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??M?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator<
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@erase@2
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR _this$[ebp]
	jne	SHORT $LN1@erase@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __First$[ebp+8]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN1@erase@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR __Last$[ebp+8]
	jae	SHORT $LN2@erase@2
$LN1@erase@2:

; 1013 : 				_DEBUG_ERROR("vector erase iterator outside range");

	push	1013					; 000003f5H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@erase@2:

; 1014 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1015 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp+8]
	push	eax
	call	??$unchecked_copy@PAVAllocatedMemoryBlock@@PAV1@@stdext@@YAPAVAllocatedMemoryBlock@@PAV1@00@Z ; stdext::unchecked_copy<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ptr$14233[ebp], eax

; 1016 : 			_Orphan_range(_First._Myptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __First$[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IBEXPAVAllocatedMemoryBlock@@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Orphan_range

; 1017 : 
; 1018 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1019 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1020 : 				_VEC_ITER_BASE(_First));
; 1021 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1022 : 
; 1023 : 			_Destroy(_Ptr, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR __Ptr$14233[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Destroy

; 1024 : 			_Mylast = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$14233[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN3@erase@2:

; 1025 : 			}
; 1026 : #if _HAS_ITERATOR_DEBUGGING
; 1027 :         return (iterator(_First._Myptr, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	mov	edx, DWORD PTR $T15980[ebp]
	or	edx, 1
	mov	DWORD PTR $T15980[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __First$[ebp]
	call	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Last$[ebp]
	call	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1028 : #else
; 1029 : 		return (_First);
; 1030 : #endif
; 1031 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$0:
	lea	ecx, DWORD PTR __Last$[ebp]
	jmp	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$1:
	lea	ecx, DWORD PTR __First$[ebp]
	jmp	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
__unwindfunclet$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z$2:
	mov	eax, DWORD PTR $T15980[ebp]
	and	eax, 1
	je	$LN9@erase@2
	and	DWORD PTR $T15980[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@XZ
$LN9@erase@2:
	ret	0
__ehhandler$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?erase@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE?AV?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@2@V32@0@Z ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::erase
PUBLIC	?deallocate@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@I@Z ; std::allocator<AllocatedMemoryBlock>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Tidy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXXZ PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Tidy, COMDAT
; _this$ = ecx

; 1087 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1088 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@Tidy@2

; 1089 : 			{	// something to free, destroy and deallocate it
; 1090 : 
; 1091 :  #if _HAS_ITERATOR_DEBUGGING
; 1092 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base@std@@QBEXXZ ; std::_Container_base::_Orphan_all

; 1093 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1094 : 
; 1095 : 			_Destroy(_Myfirst, _Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Destroy

; 1096 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	sub	ecx, DWORD PTR [eax+8]
	sar	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@I@Z ; std::allocator<AllocatedMemoryBlock>::deallocate
$LN1@Tidy@2:

; 1097 : 			}
; 1098 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1099 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXXZ ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@@Z ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Destroy, COMDAT
; _this$ = ecx

; 1082 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@@Z ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	add	esp, 12					; 0000000cH

; 1084 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IAEXPAVFreeMemoryBlock@@0@Z ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Destroy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IBEXPAVFreeMemoryBlock@@0@Z
_TEXT	SEGMENT
__Pnext$ = -20						; size = 4
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IBEXPAVFreeMemoryBlock@@0@Z PROC ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1229 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1230 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1231 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran:

; 1232 : 		while (*_Pnext != 0)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Orphan_ran

; 1233 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1234 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 1235 : 			else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1236 : 				{	// orphan the iterator
; 1237 : 				(*_Pnext)->_Mycont = 0;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 1238 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran:

; 1239 : 				}

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 1240 : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran:
	DD	1
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@Orphan_ran
$LN9@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@IBEXPAVFreeMemoryBlock@@0@Z ENDP ; std::vector<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@I@Z PROC ; std::allocator<FreeMemoryBlock>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@I@Z ENDP ; std::allocator<FreeMemoryBlock>::deallocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@@Z ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Destroy, COMDAT
; _this$ = ecx

; 1082 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1083 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@@Z ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	add	esp, 12					; 0000000cH

; 1084 : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IAEXPAVAllocatedMemoryBlock@@0@Z ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Destroy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?_Orphan_range@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IBEXPAVAllocatedMemoryBlock@@0@Z
_TEXT	SEGMENT
__Pnext$ = -20						; size = 4
__Lock$ = -12						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IBEXPAVAllocatedMemoryBlock@@0@Z PROC ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1229 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1230 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 1231 : 		const_iterator **_Pnext = (const_iterator **)&this->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$[ebp], eax
$LN5@Orphan_ran@2:

; 1232 : 		while (*_Pnext != 0)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@Orphan_ran@2

; 1233 : 			if ((*_Pnext)->_Myptr < _First || _Last < (*_Pnext)->_Myptr)

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@2
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Orphan_ran@2
$LN2@Orphan_ran@2:

; 1234 : 				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 1235 : 			else

	jmp	SHORT $LN1@Orphan_ran@2
$LN3@Orphan_ran@2:

; 1236 : 				{	// orphan the iterator
; 1237 : 				(*_Pnext)->_Mycont = 0;

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0

; 1238 : 				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN1@Orphan_ran@2:

; 1239 : 				}

	jmp	SHORT $LN5@Orphan_ran@2
$LN4@Orphan_ran@2:

; 1240 : 		}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ran@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@Orphan_ran@2:
	DD	1
	DD	$LN10@Orphan_ran@2
$LN10@Orphan_ran@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN9@Orphan_ran@2
$LN9@Orphan_ran@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_range@?$vector@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@IBEXPAVAllocatedMemoryBlock@@0@Z ENDP ; std::vector<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@I@Z PROC ; std::allocator<AllocatedMemoryBlock>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 142  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@I@Z ENDP ; std::allocator<AllocatedMemoryBlock>::deallocate
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z PROC ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx

; 308  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >

; 309  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ENDP ; std::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator==
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator!=, COMDAT
; _this$ = ecx

; 202  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 204  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator!=
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Compat
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??M?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator<, COMDAT
; _this$ = ecx

; 207  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 
; 209  :  #if _HAS_ITERATOR_DEBUGGING
; 210  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Compat

; 211  :  #else
; 212  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 213  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 214  : 
; 215  : 		return (_Myptr < _Right._Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	sbb	eax, eax
	neg	eax

; 216  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator<
_TEXT	ENDS
PUBLIC	??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z PROC ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx

; 308  : 		{	// construct with pointer _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >

; 309  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ENDP ; std::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??8?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator==
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator!=, COMDAT
; _this$ = ecx

; 202  : 		{	// test for iterator inequality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator==
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 204  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator!=
_TEXT	ENDS
PUBLIC	?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Compat
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??M?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??M?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator<, COMDAT
; _this$ = ecx

; 207  : 		{	// test if this < _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 
; 209  :  #if _HAS_ITERATOR_DEBUGGING
; 210  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Compat

; 211  :  #else
; 212  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 213  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 214  : 
; 215  : 		return (_Myptr < _Right._Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+8]
	sbb	eax, eax
	neg	eax

; 216  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??M?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator<
_TEXT	ENDS
PUBLIC	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1PA@HNBAMDIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ ; `string'
PUBLIC	??0?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>
EXTRN	__invalid_parameter:PROC
EXTRN	__CrtDbgReportW:PROC
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PA@HNBAMDIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1PA@HNBAMDIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'M', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'V', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
CONST	SEGMENT
??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@ DB '('
	DB	00H, '"', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, '(', 00H, '(', 00H, '_', 00H, 'M'
	DB	00H, 'y', 00H, 'v', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H
	DB	')', 00H, '_', 00H, 'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H
	DB	'M', 00H, 'y', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 't', 00H, 'r', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '_', 00H, 'M', 00H, 'y', 00H, 'v'
	DB	00H, 'e', 00H, 'c', 00H, ' ', 00H, '*', 00H, ')', 00H, '_', 00H
	DB	'P', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, '_', 00H, 'M', 00H, 'y', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, ')', 00H, '"', 00H, ','
	DB	00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT
; _this$ = ecx

; 69   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 		{	// construct with pointer _Ptr
; 71   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jbe	SHORT $LN2@Vector_con
$LN1@Vector_con:
	xor	ecx, ecx
	jne	SHORT $LN5@Vector_con
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con
	int	3
$LN5@Vector_con:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1PA@HNBAMDIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Vector_con:

; 72   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 73   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 74   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QAE@PAVFreeMemoryBlock@@PBV_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
;	COMDAT xdata$x
; File c:\microsoft visual studio 8\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0
__ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
_TEXT	SEGMENT
__Lock$6465 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z PROC ; std::_Iterator_base::_Adopt, COMDAT
; _this$ = ecx

; 154  : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 		if (_Mycont != _Parent)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent$[ebp]
	je	SHORT $LN3@Adopt

; 156  : 			{	// change parentage
; 157  : 			_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$6465[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 158  : 			_Orphan_me();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me@_Iterator_base@std@@QAEXXZ	; std::_Iterator_base::_Orphan_me

; 159  : 			if (_Parent != 0 && _Parent->_Myfirstiter != _IGNORE_MYITERLIST)

	cmp	DWORD PTR __Parent$[ebp], 0
	je	SHORT $LN1@Adopt
	mov	edx, DWORD PTR __Parent$[ebp]
	cmp	DWORD PTR [edx], -3			; fffffffdH
	je	SHORT $LN1@Adopt

; 160  : 				{	// switch to new parent
; 161  : 				_Mynextiter = _Parent->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 162  : 				((_Container_base *)_Parent)->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Adopt:

; 163  : 				}
; 164  : 			_Mycont = _Parent;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Parent$[ebp]
	mov	DWORD PTR [edx], eax

; 165  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$6465[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN3@Adopt:

; 166  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Adopt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@Adopt:
	DD	1
	DD	$LN8@Adopt
$LN8@Adopt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN6@Adopt
$LN6@Adopt:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z$0:
	lea	ecx, DWORD PTR __Lock$6465[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ENDP ; std::_Iterator_base::_Adopt
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\vector
;	COMDAT ??8?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator==, COMDAT
; _this$ = ecx

; 190  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 
; 192  :  #if _HAS_ITERATOR_DEBUGGING
; 193  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Compat

; 194  :  #else
; 195  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 196  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 197  : 
; 198  : 		return (_Myptr == _Right._Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+8]
	sete	cl
	mov	al, cl

; 199  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::operator==
_TEXT	ENDS
PUBLIC	??_C@_1NC@CBJKFKDD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ ; `string'
PUBLIC	??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1NC@CBJKFKDD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1NC@CBJKFKDD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'F', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'M', 00H, 'e'
	DB	00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'F', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, '>', 00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, '_', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
CONST	SEGMENT
??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@ DB '('
	DB	00H, '"', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H
	DB	'a', 00H, 'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+'
	DB	00H, ' ', 00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H
	DB	'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'A', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, '"', 00H, ',', 00H, ' ', 00H, '0', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Compat, COMDAT
; _this$ = ecx

; 235  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN3@Compat
$LN1@Compat:

; 237  : 			{
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	ecx, ecx
	jne	SHORT $LN5@Compat
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Compat
	int	3
$LN5@Compat:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1NC@CBJKFKDD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat:

; 240  : 			}
; 241  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >::_Compat
_TEXT	ENDS
PUBLIC	??_C@_1BAE@GLJHINLB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
PUBLIC	??0?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>
;	COMDAT ??_C@_1BAE@GLJHINLB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1BAE@GLJHINLB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'M'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z$0
__ehfuncinfo$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT
; _this$ = ecx

; 69   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 70   : 		{	// construct with pointer _Ptr
; 71   : 		_SCL_SECURE_VALIDATE(_Pvector == NULL || (((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast));

	cmp	DWORD PTR __Pvector$[ebp], 0
	je	SHORT $LN2@Vector_con@2
	mov	eax, DWORD PTR __Pvector$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN1@Vector_con@2
	mov	edx, DWORD PTR __Pvector$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	cmp	eax, DWORD PTR [edx+12]
	jbe	SHORT $LN2@Vector_con@2
$LN1@Vector_con@2:
	xor	ecx, ecx
	jne	SHORT $LN5@Vector_con@2
	push	OFFSET ??_C@_1NK@JLHOCNGO@?$AA?$CI?$AA?$CC?$AA_?$AAP?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?$CI?$AA?$CI?$AA_?$AAM?$AAy?$AAv?$AAe?$AAc?$AA?5@
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Vector_con@2
	int	3
$LN5@Vector_con@2:
	push	0
	push	71					; 00000047H
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1BAE@GLJHINLB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN2@Vector_con@2:

; 72   : 		this->_Adopt(_Pvector);

	mov	eax, DWORD PTR __Pvector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base@2@@Z ; std::_Iterator_base::_Adopt

; 73   : 		_Myptr = _Ptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 74   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
__ehhandler$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QAE@PAVAllocatedMemoryBlock@@PBV_Container_base@1@@Z ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator==, COMDAT
; _this$ = ecx

; 190  : 		{	// test for iterator equality

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 
; 192  :  #if _HAS_ITERATOR_DEBUGGING
; 193  : 		_Compat(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Compat

; 194  :  #else
; 195  : 		_SCL_SECURE_VALIDATE(this->_Mycont != NULL && this->_Mycont == _Right._Mycont);
; 196  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 197  : 
; 198  : 		return (_Myptr == _Right._Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edx+8]
	sete	cl
	mov	al, cl

; 199  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::operator==
_TEXT	ENDS
PUBLIC	??_C@_1OG@FMFLCIEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; `string'
;	COMDAT ??_C@_1OG@FMFLCIEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
CONST	SEGMENT
??_C@_1OG@FMFLCIEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, 'M', 00H, 'e', 00H, 'm', 00H
	DB	'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'A', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'M'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'B', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, '_', 00H, 'C', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Compat, COMDAT
; _this$ = ecx

; 235  : 		{	// test for compatible iterator pair

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 236  : 		if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Compat@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	je	SHORT $LN3@Compat@2
$LN1@Compat@2:

; 237  : 			{
; 238  : 			_DEBUG_ERROR("vector iterators incompatible");

	push	238					; 000000eeH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH

; 239  : 			_SCL_SECURE_INVALID_ARGUMENT;

	xor	ecx, ecx
	jne	SHORT $LN5@Compat@2
	push	OFFSET ??_C@_1FO@OCPOOAIA@?$AA?$CI?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	2
	call	__CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN5@Compat@2
	int	3
$LN5@Compat@2:
	push	0
	push	239					; 000000efH
	push	OFFSET ??_C@_1FO@LOAHDEOC@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	push	OFFSET ??_C@_1OG@FMFLCIEA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
$LN3@Compat@2:

; 240  : 			}
; 241  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Compat@?$_Vector_const_iterator@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >::_Compat
_TEXT	ENDS
PUBLIC	??0_Iterator_base@std@@QAE@XZ			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ PROC ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VFreeMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ENDP ; std::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>::_Ranit<FreeMemoryBlock,int,FreeMemoryBlock const *,FreeMemoryBlock const &>
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0_Iterator_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iterator_base@std@@QAE@XZ PROC			; std::_Iterator_base::_Iterator_base, COMDAT
; _this$ = ecx

; 127  : 		{	// construct orphaned iterator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 128  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base@std@@QAE@XZ ENDP			; std::_Iterator_base::_Iterator_base
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ PROC ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base@std@@QAE@XZ		; std::_Iterator_base::_Iterator_base
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Ranit@VAllocatedMemoryBlock@@HPBV1@ABV1@@std@@QAE@XZ ENDP ; std::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>::_Ranit<AllocatedMemoryBlock,int,AllocatedMemoryBlock const *,AllocatedMemoryBlock const &>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@@std@@YAPAVFreeMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *>
PUBLIC	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<FreeMemoryBlock *>
PUBLIC	??$_Iter_random@PAVFreeMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@0@Z ; std::_Iter_random<FreeMemoryBlock *,FreeMemoryBlock *>
PUBLIC	??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z ; std::_Ptr_cat<FreeMemoryBlock *,FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$unchecked_copy@PAVFreeMemoryBlock@@PAV1@@stdext@@YAPAVFreeMemoryBlock@@PAV1@00@Z
_TEXT	SEGMENT
$T16078 = -3						; size = 1
$T16077 = -2						; size = 1
$T16076 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAVFreeMemoryBlock@@PAV1@@stdext@@YAPAVFreeMemoryBlock@@PAV1@00@Z PROC ; stdext::unchecked_copy<FreeMemoryBlock *,FreeMemoryBlock *>, COMDAT

; 3407 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 3408 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3409 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T16076[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z ; std::_Ptr_cat<FreeMemoryBlock *,FreeMemoryBlock *>
	add	esp, 8
	mov	BYTE PTR $T16077[ebp], al
	mov	al, BYTE PTR $T16076[ebp]
	push	eax
	mov	cl, BYTE PTR $T16077[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T16078[ebp]
	push	ecx
	call	??$_Iter_random@PAVFreeMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@0@Z ; std::_Iter_random<FreeMemoryBlock *,FreeMemoryBlock *>
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<FreeMemoryBlock *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<FreeMemoryBlock *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@@std@@YAPAVFreeMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *>
	add	esp, 24					; 00000018H

; 3410 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAVFreeMemoryBlock@@PAV1@@stdext@@YAPAVFreeMemoryBlock@@PAV1@00@Z ENDP ; stdext::unchecked_copy<FreeMemoryBlock *,FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
PUBLIC	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
PUBLIC	??$_Iter_random@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@0@Z ; std::_Iter_random<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
PUBLIC	??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z ; std::_Ptr_cat<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$unchecked_copy@PAVAllocatedMemoryBlock@@PAV1@@stdext@@YAPAVAllocatedMemoryBlock@@PAV1@00@Z
_TEXT	SEGMENT
$T16083 = -3						; size = 1
$T16082 = -2						; size = 1
$T16081 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAVAllocatedMemoryBlock@@PAV1@@stdext@@YAPAVAllocatedMemoryBlock@@PAV1@00@Z PROC ; stdext::unchecked_copy<AllocatedMemoryBlock *,AllocatedMemoryBlock *>, COMDAT

; 3407 : 	{	// copy [_First, _Last) to [_Dest, ...)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 3408 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3409 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	xor	eax, eax
	mov	BYTE PTR $T16081[ebp], al
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z ; std::_Ptr_cat<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
	add	esp, 8
	mov	BYTE PTR $T16082[ebp], al
	mov	al, BYTE PTR $T16081[ebp]
	push	eax
	mov	cl, BYTE PTR $T16082[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T16083[ebp]
	push	ecx
	call	??$_Iter_random@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@0@Z ; std::_Iter_random<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
	add	esp, 12					; 0000000cH
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
	add	esp, 4
	push	eax
	call	??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
	add	esp, 24					; 00000018H

; 3410 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$unchecked_copy@PAVAllocatedMemoryBlock@@PAV1@@stdext@@YAPAVAllocatedMemoryBlock@@PAV1@00@Z ENDP ; stdext::unchecked_copy<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@@Z
_TEXT	SEGMENT
$T16086 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@@Z PROC ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z ; std::_Ptr_cat<FreeMemoryBlock *,FreeMemoryBlock *>
	add	esp, 8
	mov	BYTE PTR $T16086[ebp], al
	mov	dl, BYTE PTR $T16086[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
	add	esp, 16					; 00000010H

; 227  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@@Z ENDP ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@@Z
_TEXT	SEGMENT
$T16089 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@@Z PROC ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT

; 225  : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 226  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z ; std::_Ptr_cat<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
	add	esp, 8
	mov	BYTE PTR $T16089[ebp], al
	mov	dl, BYTE PTR $T16089[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
	add	esp, 16					; 00000010H

; 227  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@@Z ENDP ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z
_TEXT	SEGMENT
__Base_tag$ = -5					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z PROC ; std::_Checked_base<FreeMemoryBlock *>, COMDAT

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1010 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1011 : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<FreeMemoryBlock *>
	add	esp, 8

; 1012 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Checked_ba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Checked_ba:
	DD	1
	DD	$LN4@Checked_ba
$LN4@Checked_ba:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Checked_ba
$LN3@Checked_ba:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z ENDP ; std::_Checked_base<FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAVFreeMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAVFreeMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@0@Z PROC ; std::_Iter_random<FreeMemoryBlock *,FreeMemoryBlock *>, COMDAT

; 839  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 840  : 	typename _Iter_random_helper<
; 841  : 		iterator_traits<_Iter1>::iterator_category, 
; 842  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 843  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 844  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_rando
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iter_rando:
	DD	1
	DD	$LN4@Iter_rando
$LN4@Iter_rando:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_rando
$LN3@Iter_rando:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_random@PAVFreeMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@0@Z ENDP ; std::_Iter_random<FreeMemoryBlock *,FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z PROC ; std::_Ptr_cat<FreeMemoryBlock *,FreeMemoryBlock *>, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1330 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1331 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1332 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAVFreeMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVFreeMemoryBlock@@0@Z ENDP ; std::_Ptr_cat<FreeMemoryBlock *,FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVFreeMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *,std::forward_iterator_tag>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@@std@@YAPAVFreeMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T16109 = -7						; size = 1
$T16108 = -6						; size = 1
$T16107 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@@std@@YAPAVFreeMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *>, COMDAT

; 2275 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 2276 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2277 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 2278 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2279 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	edx, edx
	mov	BYTE PTR $T16107[ebp], dl
	xor	eax, eax
	mov	BYTE PTR $T16108[ebp], al
	mov	cl, BYTE PTR $T16107[ebp]
	push	ecx
	mov	dl, BYTE PTR $T16108[ebp]
	push	edx
	mov	al, BYTE PTR $T16109[ebp]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<FreeMemoryBlock *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVFreeMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2280 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2281 : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@@std@@YAPAVFreeMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z
_TEXT	SEGMENT
__Base_tag$ = -5					; size = 1
__It$ = 8						; size = 4
??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z PROC ; std::_Checked_base<AllocatedMemoryBlock *>, COMDAT

; 1009 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1010 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1011 : 		return _Checked_base(_It, _Base_tag);

	mov	al, BYTE PTR __Base_tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __It$[ebp]
	push	ecx
	call	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
	add	esp, 8

; 1012 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Checked_ba@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Checked_ba@2:
	DD	1
	DD	$LN4@Checked_ba@2
$LN4@Checked_ba@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Checked_ba@2
$LN3@Checked_ba@2:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z ENDP ; std::_Checked_base<AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@0@Z PROC ; std::_Iter_random<AllocatedMemoryBlock *,AllocatedMemoryBlock *>, COMDAT

; 839  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 840  : 	typename _Iter_random_helper<
; 841  : 		iterator_traits<_Iter1>::iterator_category, 
; 842  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 843  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 844  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_rando@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iter_rando@2:
	DD	1
	DD	$LN4@Iter_rando@2
$LN4@Iter_rando@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_rando@2
$LN3@Iter_rando@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_random@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@0@Z ENDP ; std::_Iter_random<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z PROC ; std::_Ptr_cat<AllocatedMemoryBlock *,AllocatedMemoryBlock *>, COMDAT

; 1329 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1330 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1331 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 1332 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAVAllocatedMemoryBlock@@PAV1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAVAllocatedMemoryBlock@@0@Z ENDP ; std::_Ptr_cat<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *,std::forward_iterator_tag>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T16129 = -7						; size = 1
$T16128 = -6						; size = 1
$T16127 = -5						; size = 1
__Result$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *>, COMDAT

; 2275 : 	{	// copy [_First, _Last) to [_Dest, ...), random_access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 2276 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2277 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 3
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR __Result$[ebp], edx

; 2278 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2279 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	xor	eax, eax
	mov	BYTE PTR $T16127[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T16128[ebp], cl
	mov	dl, BYTE PTR $T16127[ebp]
	push	edx
	mov	al, BYTE PTR $T16128[ebp]
	push	eax
	mov	cl, BYTE PTR $T16129[ebp]
	push	ecx
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@@Z ; std::_Checked_base<AllocatedMemoryBlock *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *,std::forward_iterator_tag>
	add	esp, 24					; 00000018H

; 2280 : 	return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2281 : 	}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@@Z ; std::allocator<FreeMemoryBlock>::destroy
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xmemory
;	COMDAT ??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >, COMDAT

; 233  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 234  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 235  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@@Z ; std::allocator<FreeMemoryBlock>::destroy
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 236  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Destroy_range@VFreeMemoryBlock@@V?$allocator@VFreeMemoryBlock@@@std@@@std@@YAXPAVFreeMemoryBlock@@0AAV?$allocator@VFreeMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<FreeMemoryBlock,std::allocator<FreeMemoryBlock> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@@Z ; std::allocator<AllocatedMemoryBlock>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >, COMDAT

; 233  : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp

; 234  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra@2
$LN2@Destroy_ra@2:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra@2

; 235  : 		_Al.destroy(_First);

	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?destroy@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@@Z ; std::allocator<AllocatedMemoryBlock>::destroy
	jmp	SHORT $LN2@Destroy_ra@2
$LN4@Destroy_ra@2:

; 236  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Destroy_range@VAllocatedMemoryBlock@@V?$allocator@VAllocatedMemoryBlock@@@std@@@std@@YAXPAVAllocatedMemoryBlock@@0AAV?$allocator@VAllocatedMemoryBlock@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<AllocatedMemoryBlock,std::allocator<AllocatedMemoryBlock> >
_TEXT	ENDS
PUBLIC	??$_Destroy@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@@Z ; std::_Destroy<FreeMemoryBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?destroy@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@@Z PROC ; std::allocator<FreeMemoryBlock>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@@Z ; std::_Destroy<FreeMemoryBlock>
	add	esp, 4

; 162  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VFreeMemoryBlock@@@std@@QAEXPAVFreeMemoryBlock@@@Z ENDP ; std::allocator<FreeMemoryBlock>::destroy
_TEXT	ENDS
PUBLIC	??$_Destroy@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@@Z ; std::_Destroy<AllocatedMemoryBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?destroy@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@@Z PROC ; std::allocator<AllocatedMemoryBlock>::destroy, COMDAT
; _this$ = ecx

; 160  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 161  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@@Z ; std::_Destroy<AllocatedMemoryBlock>
	add	esp, 4

; 162  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@VAllocatedMemoryBlock@@@std@@QAEXPAVAllocatedMemoryBlock@@@Z ENDP ; std::allocator<AllocatedMemoryBlock>::destroy
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<FreeMemoryBlock *>, COMDAT

; 992  : 	{

	push	ebp
	mov	ebp, esp

; 993  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 994  : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAVFreeMemoryBlock@@@std@@YAPAVFreeMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Debug_range@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WI@Z ; std::_Debug_range<FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVFreeMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVFreeMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *,std::forward_iterator_tag>, COMDAT

; 2263 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2264 : 	_DEBUG_RANGE(_First, _Last);

	push	2264					; 000008d8H
	push	OFFSET ??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WI@Z ; std::_Debug_range<FreeMemoryBlock *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Copy_opt
$LN2@Copy_opt:

; 2265 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	edx, DWORD PTR __Dest$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], eax
$LN3@Copy_opt:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt

; 2266 : 		*_Dest = *_First;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], edx
	jmp	SHORT $LN2@Copy_opt
$LN1@Copy_opt:

; 2267 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2268 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Copy_opt@PAVFreeMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVFreeMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<FreeMemoryBlock *,FreeMemoryBlock *,std::forward_iterator_tag>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<AllocatedMemoryBlock *>, COMDAT

; 992  : 	{

	push	ebp
	mov	ebp, esp

; 993  : 		return _It;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 994  : 	}

	pop	ebp
	ret	0
??$_Checked_base@PAVAllocatedMemoryBlock@@@std@@YAPAVAllocatedMemoryBlock@@AAPAV1@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Debug_range@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WI@Z ; std::_Debug_range<AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *,std::forward_iterator_tag>, COMDAT

; 2263 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	push	ebp
	mov	ebp, esp

; 2264 : 	_DEBUG_RANGE(_First, _Last);

	push	2264					; 000008d8H
	push	OFFSET ??_C@_1GC@BOCMKMKF@?$AAC?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi?$AAs?$AAu?$AAa?$AAl?$AA?5?$AAS?$AAt?$AAu?$AAd?$AAi?$AAo?$AA?5?$AA8?$AA?2?$AAV?$AAC?$AA?2@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WI@Z ; std::_Debug_range<AllocatedMemoryBlock *>
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@Copy_opt@2
$LN2@Copy_opt@2:

; 2265 : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	edx, DWORD PTR __Dest$[ebp]
	add	edx, 8
	mov	DWORD PTR __Dest$[ebp], edx
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Copy_opt@2:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN1@Copy_opt@2

; 2266 : 		*_Dest = *_First;

	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	jmp	SHORT $LN2@Copy_opt@2
$LN1@Copy_opt@2:

; 2267 : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 2268 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Copy_opt@PAVAllocatedMemoryBlock@@PAV1@Uforward_iterator_tag@std@@@std@@YAPAVAllocatedMemoryBlock@@PAV1@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<AllocatedMemoryBlock *,AllocatedMemoryBlock *,std::forward_iterator_tag>
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@@Z PROC ; std::_Destroy<FreeMemoryBlock>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@@Z ENDP ; std::_Destroy<FreeMemoryBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Destroy@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@@Z PROC ; std::_Destroy<AllocatedMemoryBlock>, COMDAT

; 59   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 60   : 	_DESTRUCTOR(_Ty, _Ptr);
; 61   : 	}

	pop	ebp
	ret	0
??$_Destroy@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@@Z ENDP ; std::_Destroy<AllocatedMemoryBlock>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<FreeMemoryBlock *>
PUBLIC	??$_Iter_cat@PAVFreeMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@@Z ; std::_Iter_cat<FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
; File c:\microsoft visual studio 8\vc\include\xutility
;	COMDAT ??$_Debug_range@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WI@Z
_TEXT	SEGMENT
$T16152 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WI@Z PROC ; std::_Debug_range<FreeMemoryBlock *>, COMDAT

; 1405 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1406 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T16152[ebp]
	push	ecx
	call	??$_Iter_cat@PAVFreeMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@@Z ; std::_Iter_cat<FreeMemoryBlock *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<FreeMemoryBlock *>
	add	esp, 20					; 00000014H

; 1407 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WI@Z ENDP ; std::_Debug_range<FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<AllocatedMemoryBlock *>
PUBLIC	??$_Iter_cat@PAVAllocatedMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@@Z ; std::_Iter_cat<AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_range@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WI@Z
_TEXT	SEGMENT
$T16155 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WI@Z PROC ; std::_Debug_range<AllocatedMemoryBlock *>, COMDAT

; 1405 : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1406 : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T16155[ebp]
	push	ecx
	call	??$_Iter_cat@PAVAllocatedMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@@Z ; std::_Iter_cat<AllocatedMemoryBlock *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<AllocatedMemoryBlock *>
	add	esp, 20					; 00000014H

; 1407 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WI@Z ENDP ; std::_Debug_range<AllocatedMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAVFreeMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAVFreeMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@@Z PROC ; std::_Iter_cat<FreeMemoryBlock *>, COMDAT

; 798  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 799  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 800  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 801  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAVFreeMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVFreeMemoryBlock@@@Z ENDP ; std::_Iter_cat<FreeMemoryBlock *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<FreeMemoryBlock>
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<FreeMemoryBlock *>, COMDAT

; 1393 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp

; 1394 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 1395 : 		{	// check for non-null pointers, valid range
; 1396 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<FreeMemoryBlock>
	add	esp, 12					; 0000000cH

; 1397 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<FreeMemoryBlock>
	add	esp, 12					; 0000000cH

; 1398 : 		if (_Last < _First)

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 1399 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang:

; 1400 : 		}
; 1401 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_range2@PAVFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<FreeMemoryBlock *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAVAllocatedMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAVAllocatedMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@@Z PROC ; std::_Iter_cat<AllocatedMemoryBlock *>, COMDAT

; 798  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 799  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 800  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 801  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAVAllocatedMemoryBlock@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAVAllocatedMemoryBlock@@@Z ENDP ; std::_Iter_cat<AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<AllocatedMemoryBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$_Debug_range2@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<AllocatedMemoryBlock *>, COMDAT

; 1393 : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp

; 1394 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@2

; 1395 : 		{	// check for non-null pointers, valid range
; 1396 : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<AllocatedMemoryBlock>
	add	esp, 12					; 0000000cH

; 1397 : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	ecx, DWORD PTR __Line$[ebp]
	push	ecx
	mov	edx, DWORD PTR __File$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z ; std::_Debug_pointer<AllocatedMemoryBlock>
	add	esp, 12					; 0000000cH

; 1398 : 		if (_Last < _First)

	mov	ecx, DWORD PTR __Last$[ebp]
	cmp	ecx, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@2

; 1399 : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	edx, DWORD PTR __Line$[ebp]
	push	edx
	mov	eax, DWORD PTR __File$[ebp]
	push	eax
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN3@Debug_rang@2:

; 1400 : 		}
; 1401 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_range2@PAVAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<AllocatedMemoryBlock *>
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z PROC ; std::_Debug_pointer<FreeMemoryBlock>, COMDAT

; 1377 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp

; 1378 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 1379 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 1380 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_pointer@VFreeMemoryBlock@@@std@@YAXPAVFreeMemoryBlock@@PB_WI@Z ENDP ; std::_Debug_pointer<FreeMemoryBlock>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z PROC ; std::_Debug_pointer<AllocatedMemoryBlock>, COMDAT

; 1377 : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp

; 1378 : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 1379 : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin@2:

; 1380 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$_Debug_pointer@VAllocatedMemoryBlock@@@std@@YAXPAVAllocatedMemoryBlock@@PB_WI@Z ENDP ; std::_Debug_pointer<AllocatedMemoryBlock>
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\PrintMEM.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG6721	DB	'mpectl', 00H
$SG6917	DB	00H
$SG6723	DB	'excepsrc', 00H
$SG6927	DB	00H
$SG6937	DB	00H
$SG6947	DB	00H
$SG6725	DB	'excepclr', 00H
$SG6957	DB	00H
$SG6967	DB	00H
$SG6977	DB	00H
$SG6727	DB	'excephalten', 00H
$SG6729	DB	'cc', 00H
$SG6987	DB	00H
$SG6731	DB	'pcfetch', 00H
$SG6733	DB	'pcroute', 00H
$SG6735	DB	'pcexec', 00H
$SG6997	DB	00H
$SG6737	DB	'rz', 00H
$SG7007	DB	00H
$SG6739	DB	'rzi1', 00H
$SG7017	DB	00H
$SG7027	DB	00H
$SG7037	DB	00H
$SG6741	DB	'rzi2', 00H
$SG7047	DB	00H
$SG7057	DB	00H
$SG7067	DB	00H
$SG6743	DB	'intvec1', 00H
$SG6745	DB	'intvec2', 00H
$SG6747	DB	'intsrc', 00H
$SG7077	DB	00H
$SG6749	DB	'intclr', 00H
$SG7087	DB	00H
$SG6751	DB	'intctl', 00H
$SG7097	DB	00H
$SG6753	DB	'inten1', 00H
$SG7107	DB	00H
$SG6755	DB	'inten1set', 00H
$SG7117	DB	00H
$SG7127	DB	00H
$SG6757	DB	'inten1clr', 00H
$SG7137	DB	00H
$SG7147	DB	00H
$SG6759	DB	'inten2sel', 00H
$SG7157	DB	00H
$SG7167	DB	00H
$SG6761	DB	'rc0', 00H
$SG6763	DB	'rcl', 00H
$SG6765	DB	'rx', 00H
$SG7177	DB	00H
$SG6767	DB	'rx', 00H
$SG7187	DB	00H
$SG6769	DB	'xyrange', 00H
$SG6771	DB	'xybase', 00H
$SG7197	DB	00H
$SG6773	DB	'xyctl', 00H
$SG7207	DB	00H
$SG7217	DB	00H
$SG6775	DB	'ru', 00H
$SG7227	DB	00H
$SG6777	DB	'rv', 00H
$SG7237	DB	00H
$SG6779	DB	'uvrange', 00H
$SG6781	DB	'uvbase', 00H
$SG7247	DB	00H
$SG6783	DB	'uvctl', 00H
$SG7257	DB	00H
$SG7267	DB	00H
$SG6785	DB	'linpixctl', 00H
$SG7277	DB	00H
$SG7287	DB	00H
$SG6787	DB	'clutbase', 00H
$SG7297	DB	00H
$SG7307	DB	00H
$SG7317	DB	00H
$SG6789	DB	'svshift', 00H
$SG6791	DB	'acshift', 00H
$SG6793	DB	'sp', 00H
$SG7327	DB	00H
$SG6795	DB	'dabreak', 00H
$SG6797	DB	'r0', 00H
$SG7337	DB	00H
$SG6799	DB	'r1', 00H
$SG7347	DB	00H
$SG6801	DB	'r2', 00H
$SG7357	DB	00H
$SG6803	DB	'r3', 00H
$SG7367	DB	00H
$SG6805	DB	'r4', 00H
$SG7377	DB	00H
$SG6807	DB	'r5', 00H
$SG7387	DB	00H
$SG6809	DB	'r6', 00H
$SG7397	DB	00H
$SG6811	DB	'r7', 00H
$SG7407	DB	00H
$SG6813	DB	'r8', 00H
$SG7417	DB	00H
$SG6815	DB	'r9', 00H
$SG7427	DB	00H
$SG6817	DB	'r10', 00H
$SG6819	DB	'r11', 00H
$SG6821	DB	'r12', 00H
$SG6823	DB	'r13', 00H
$SG6825	DB	'r14', 00H
$SG6827	DB	'r15', 00H
$SG6829	DB	'r16', 00H
$SG6831	DB	'r17', 00H
$SG6833	DB	'r18', 00H
$SG6835	DB	'r19', 00H
$SG6837	DB	'r20', 00H
$SG6839	DB	'r21', 00H
$SG6841	DB	'r22', 00H
$SG6843	DB	'r23', 00H
$SG6845	DB	'r24', 00H
$SG6847	DB	'r25', 00H
$SG6849	DB	'r26', 00H
$SG6851	DB	'r27', 00H
$SG6853	DB	'r28', 00H
$SG6855	DB	'r29', 00H
$SG6857	DB	'r30', 00H
$SG6859	DB	'r31', 00H
$SG6861	DB	'odmactl', 00H
$SG6863	DB	'odmacptr', 00H
$SG7437	DB	00H
$SG7447	DB	00H
$SG7457	DB	00H
$SG6865	DB	'mdmactl', 00H
$SG6867	DB	'mdmactl', 00H
$SG6869	DB	'comminfo', 00H
$SG7467	DB	00H
$SG7477	DB	00H
$SG7487	DB	00H
$SG6871	DB	'commctl', 00H
$SG6873	DB	'commxmit0', 00H
$SG7497	DB	00H
$SG7507	DB	00H
$SG6875	DB	'commxmit1', 00H
$SG7517	DB	00H
$SG7527	DB	00H
$SG6877	DB	'commxmit2', 00H
$SG7537	DB	00H
$SG7547	DB	00H
$SG6879	DB	'commxmit3', 00H
$SG7557	DB	00H
$SG7567	DB	00H
$SG6881	DB	'commrecv0', 00H
$SG7577	DB	00H
$SG7625	DB	00H
$SG6883	DB	'commrecv1', 00H
	ORG $+2
$SG6885	DB	'commrecv2', 00H
	ORG $+2
$SG6887	DB	'commrecv3', 00H
	ORG $+2
$SG6889	DB	'configa', 00H
$SG6891	DB	'configb', 00H
$SG6893	DB	'dcachectl', 00H
	ORG $+2
$SG6895	DB	'icachectl', 00H
	ORG $+2
$SG6897	DB	'vdmactla', 00H
	ORG $+3
$SG6899	DB	'vdmactlb', 00H
	ORG $+3
$SG6901	DB	'vdmaptra', 00H
	ORG $+3
$SG6903	DB	'vdmaptrb', 00H
	ORG $+3
$SG6906	DB	'vld-bdu???', 00H
	ORG $+1
$SG6908	DB	'???', 00H
$SG6915	DB	'mirror r%lu, r%lu', 00H
	ORG $+2
$SG6916	DB	0aH, 00H
	ORG $+2
$SG6918	DB	'%s%s', 00H
	ORG $+3
$SG6925	DB	'mv_s #$%8.8lX, r%lu', 00H
$SG6926	DB	0aH, 00H
	ORG $+2
$SG6928	DB	'%s%s', 00H
	ORG $+3
$SG6935	DB	'mv_s r%lu, r%lu', 00H
$SG6936	DB	0aH, 00H
	ORG $+2
$SG6938	DB	'%s%s', 00H
	ORG $+3
$SG6945	DB	'mv_v v%lu, v%lu', 00H
$SG6946	DB	0aH, 00H
	ORG $+2
$SG6948	DB	'%s%s', 00H
	ORG $+3
$SG6955	DB	'pop v%lu', 00H
	ORG $+3
$SG6956	DB	0aH, 00H
	ORG $+2
$SG6958	DB	'%s%s', 00H
	ORG $+3
$SG6965	DB	'pop v%lu, rz', 00H
	ORG $+3
$SG6966	DB	0aH, 00H
	ORG $+2
$SG6968	DB	'%s%s', 00H
	ORG $+3
$SG6975	DB	'pop r%lu, cc, rz, rzi1', 00H
	ORG $+1
$SG6976	DB	0aH, 00H
	ORG $+2
$SG6978	DB	'%s%s', 00H
	ORG $+3
$SG6985	DB	'pop r%lu, cc, rz, rzi2', 00H
	ORG $+1
$SG6986	DB	0aH, 00H
	ORG $+2
$SG6988	DB	'%s%s', 00H
	ORG $+3
$SG6995	DB	'push v%lu', 00H
	ORG $+2
$SG6996	DB	0aH, 00H
	ORG $+2
$SG6998	DB	'%s%s', 00H
	ORG $+3
$SG7005	DB	'push v%lu, rz', 00H
	ORG $+2
$SG7006	DB	0aH, 00H
	ORG $+2
$SG7008	DB	'%s%s', 00H
	ORG $+3
$SG7015	DB	'push r%lu, cc, rz, rzi1', 00H
$SG7016	DB	0aH, 00H
	ORG $+2
$SG7018	DB	'%s%s', 00H
	ORG $+3
$SG7025	DB	'push r%lu, cc, rz, rzi2', 00H
$SG7026	DB	0aH, 00H
	ORG $+2
$SG7028	DB	'%s%s', 00H
	ORG $+3
$SG7035	DB	'ld_s %s, r%lu', 00H
	ORG $+2
$SG7036	DB	0aH, 00H
	ORG $+2
$SG7038	DB	'%s%s', 00H
	ORG $+3
$SG7045	DB	'ld_b $%8.8lX, r%lu', 00H
	ORG $+1
$SG7046	DB	0aH, 00H
	ORG $+2
$SG7048	DB	'%s%s', 00H
	ORG $+3
$SG7055	DB	'ld_w $%8.8lX, r%lu', 00H
	ORG $+1
$SG7056	DB	0aH, 00H
	ORG $+2
$SG7058	DB	'%s%s', 00H
	ORG $+3
$SG7065	DB	'ld_s $%8.8lX, r%lu', 00H
	ORG $+1
$SG7066	DB	0aH, 00H
	ORG $+2
$SG7068	DB	'%s%s', 00H
	ORG $+3
$SG7075	DB	'ld_s (r%lu), r%lu', 00H
	ORG $+2
$SG7076	DB	0aH, 00H
	ORG $+2
$SG7078	DB	'%s%s', 00H
	ORG $+3
$SG7085	DB	'ld_v $%8.8lX, v%lu', 00H
	ORG $+1
$SG7086	DB	0aH, 00H
	ORG $+2
$SG7088	DB	'%s%s', 00H
	ORG $+3
$SG7095	DB	'ld_v %s, v%lu', 00H
	ORG $+2
$SG7096	DB	0aH, 00H
	ORG $+2
$SG7098	DB	'%s%s', 00H
	ORG $+3
$SG7105	DB	'ld_p $%8.8lX, v%lu', 00H
	ORG $+1
$SG7106	DB	0aH, 00H
	ORG $+2
$SG7108	DB	'%s%s', 00H
	ORG $+3
$SG7115	DB	'ld_pz $%8.8lX, v%lu', 00H
$SG7116	DB	0aH, 00H
	ORG $+2
$SG7118	DB	'%s%s', 00H
	ORG $+3
$SG7125	DB	'ld_b (r%lu), r%lu', 00H
	ORG $+2
$SG7126	DB	0aH, 00H
	ORG $+2
$SG7128	DB	'%s%s', 00H
	ORG $+3
$SG7135	DB	'ld_b (uv), r%lu', 00H
$SG7136	DB	0aH, 00H
	ORG $+2
$SG7138	DB	'%s%s', 00H
	ORG $+3
$SG7145	DB	'ld_b (xy), r%lu', 00H
$SG7146	DB	0aH, 00H
	ORG $+2
$SG7148	DB	'%s%s', 00H
	ORG $+3
$SG7155	DB	'ld_w (r%lu), r%lu', 00H
	ORG $+2
$SG7156	DB	0aH, 00H
	ORG $+2
$SG7158	DB	'%s%s', 00H
	ORG $+3
$SG7165	DB	'ld_w (uv), r%lu', 00H
$SG7166	DB	0aH, 00H
	ORG $+2
$SG7168	DB	'%s%s', 00H
	ORG $+3
$SG7175	DB	'ld_w (xy), r%lu', 00H
$SG7176	DB	0aH, 00H
	ORG $+2
$SG7178	DB	'%s%s', 00H
	ORG $+3
$SG7185	DB	'ld_s (uv), r%lu', 00H
$SG7186	DB	0aH, 00H
	ORG $+2
$SG7188	DB	'%s%s', 00H
	ORG $+3
$SG7195	DB	'ld_s (xy), r%lu', 00H
$SG7196	DB	0aH, 00H
	ORG $+2
$SG7198	DB	'%s%s', 00H
	ORG $+3
$SG7205	DB	'ld_sv $%8.8lX, v%lu', 00H
$SG7206	DB	0aH, 00H
	ORG $+2
$SG7208	DB	'%s%s', 00H
	ORG $+3
$SG7215	DB	'ld_sv (r%lu), v%lu', 00H
	ORG $+1
$SG7216	DB	0aH, 00H
	ORG $+2
$SG7218	DB	'%s%s', 00H
	ORG $+3
$SG7225	DB	'ld_sv (uv), v%lu', 00H
	ORG $+3
$SG7226	DB	0aH, 00H
	ORG $+2
$SG7228	DB	'%s%s', 00H
	ORG $+3
$SG7235	DB	'ld_sv (xy), v%lu', 00H
	ORG $+3
$SG7236	DB	0aH, 00H
	ORG $+2
$SG7238	DB	'%s%s', 00H
	ORG $+3
$SG7245	DB	'ld_v (r%lu), v%lu', 00H
	ORG $+2
$SG7246	DB	0aH, 00H
	ORG $+2
$SG7248	DB	'%s%s', 00H
	ORG $+3
$SG7255	DB	'ld_v (uv), v%lu', 00H
$SG7256	DB	0aH, 00H
	ORG $+2
$SG7258	DB	'%s%s', 00H
	ORG $+3
$SG7265	DB	'ld_v (xy), v%lu', 00H
$SG7266	DB	0aH, 00H
	ORG $+2
$SG7268	DB	'%s%s', 00H
	ORG $+3
$SG7275	DB	'ld_p (r%lu), v%lu', 00H
	ORG $+2
$SG7276	DB	0aH, 00H
	ORG $+2
$SG7278	DB	'%s%s', 00H
	ORG $+3
$SG7285	DB	'ld_p (uv), v%lu', 00H
$SG7286	DB	0aH, 00H
	ORG $+2
$SG7288	DB	'%s%s', 00H
	ORG $+3
$SG7295	DB	'ld_p (xy), v%lu', 00H
$SG7296	DB	0aH, 00H
	ORG $+2
$SG7298	DB	'%s%s', 00H
	ORG $+3
$SG7305	DB	'ld_pz (r%lu), v%lu', 00H
	ORG $+1
$SG7306	DB	0aH, 00H
	ORG $+2
$SG7308	DB	'%s%s', 00H
	ORG $+3
$SG7315	DB	'ld_pz (uv), v%lu', 00H
	ORG $+3
$SG7316	DB	0aH, 00H
	ORG $+2
$SG7318	DB	'%s%s', 00H
	ORG $+3
$SG7325	DB	'ld_pz (xy), v%lu', 00H
	ORG $+3
$SG7326	DB	0aH, 00H
	ORG $+2
$SG7328	DB	'%s%s', 00H
	ORG $+3
$SG7335	DB	'st_s #$%8.8lX, $%8.8lX', 00H
	ORG $+1
$SG7336	DB	0aH, 00H
	ORG $+2
$SG7338	DB	'%s%s', 00H
	ORG $+3
$SG7345	DB	'st_s r%lu, $%8.8lX', 00H
	ORG $+1
$SG7346	DB	0aH, 00H
	ORG $+2
$SG7348	DB	'%s%s', 00H
	ORG $+3
$SG7355	DB	'st_s #$%8.8lX, %s', 00H
	ORG $+2
$SG7356	DB	0aH, 00H
	ORG $+2
$SG7358	DB	'%s%s', 00H
	ORG $+3
$SG7365	DB	'st_s r%lu, (r%lu)', 00H
	ORG $+2
$SG7366	DB	0aH, 00H
	ORG $+2
$SG7368	DB	'%s%s', 00H
	ORG $+3
$SG7375	DB	'st_s r%lu, (uv)', 00H
$SG7376	DB	0aH, 00H
	ORG $+2
$SG7378	DB	'%s%s', 00H
	ORG $+3
$SG7385	DB	'st_s r%lu, (xy)', 00H
$SG7386	DB	0aH, 00H
	ORG $+2
$SG7388	DB	'%s%s', 00H
	ORG $+3
$SG7395	DB	'st_s r%lu, %s', 00H
	ORG $+2
$SG7396	DB	0aH, 00H
	ORG $+2
$SG7398	DB	'%s%s', 00H
	ORG $+3
$SG7405	DB	'st_v v%lu, %s', 00H
	ORG $+2
$SG7406	DB	0aH, 00H
	ORG $+2
$SG7408	DB	'%s%s', 00H
	ORG $+3
$SG7415	DB	'st_p v%lu, $%8.8lX', 00H
	ORG $+1
$SG7416	DB	0aH, 00H
	ORG $+2
$SG7418	DB	'%s%s', 00H
	ORG $+3
$SG7425	DB	'st_pz v%lu, $%8.8lX', 00H
$SG7426	DB	0aH, 00H
	ORG $+2
$SG7428	DB	'%s%s', 00H
	ORG $+3
$SG7435	DB	'st_sv v%lu, $%8.8lX', 00H
$SG7436	DB	0aH, 00H
	ORG $+2
$SG7438	DB	'%s%s', 00H
	ORG $+3
$SG7445	DB	'st_sv v%lu, (r%lu)', 00H
	ORG $+1
$SG7446	DB	0aH, 00H
	ORG $+2
$SG7448	DB	'%s%s', 00H
	ORG $+3
$SG7455	DB	'st_sv v%lu, (uv)', 00H
	ORG $+3
$SG7456	DB	0aH, 00H
	ORG $+2
$SG7458	DB	'%s%s', 00H
	ORG $+3
$SG7465	DB	'st_sv v%lu, (xy)', 00H
	ORG $+3
$SG7466	DB	0aH, 00H
	ORG $+2
$SG7468	DB	'%s%s', 00H
	ORG $+3
$SG7475	DB	'st_v v%lu, $%8.8lX', 00H
	ORG $+1
$SG7476	DB	0aH, 00H
	ORG $+2
$SG7478	DB	'%s%s', 00H
	ORG $+3
$SG7485	DB	'st_v v%lu, (r%lu)', 00H
	ORG $+2
$SG7486	DB	0aH, 00H
	ORG $+2
$SG7488	DB	'%s%s', 00H
	ORG $+3
$SG7495	DB	'st_v v%lu, (uv)', 00H
$SG7496	DB	0aH, 00H
	ORG $+2
$SG7498	DB	'%s%s', 00H
	ORG $+3
$SG7505	DB	'st_v v%lu, (xy)', 00H
$SG7506	DB	0aH, 00H
	ORG $+2
$SG7508	DB	'%s%s', 00H
	ORG $+3
$SG7515	DB	'st_p v%lu, (r%lu)', 00H
	ORG $+2
$SG7516	DB	0aH, 00H
	ORG $+2
$SG7518	DB	'%s%s', 00H
	ORG $+3
$SG7525	DB	'st_p v%lu, (uv)', 00H
$SG7526	DB	0aH, 00H
	ORG $+2
$SG7528	DB	'%s%s', 00H
	ORG $+3
$SG7535	DB	'st_p v%lu, (xy)', 00H
$SG7536	DB	0aH, 00H
	ORG $+2
$SG7538	DB	'%s%s', 00H
	ORG $+3
$SG7545	DB	'st_pz v%lu, (r%lu)', 00H
	ORG $+1
$SG7546	DB	0aH, 00H
	ORG $+2
$SG7548	DB	'%s%s', 00H
	ORG $+3
$SG7555	DB	'st_pz v%lu, (uv)', 00H
	ORG $+3
$SG7556	DB	0aH, 00H
	ORG $+2
$SG7558	DB	'%s%s', 00H
	ORG $+3
$SG7565	DB	'st_pz v%lu, (xy)', 00H
	ORG $+3
$SG7566	DB	0aH, 00H
	ORG $+2
$SG7568	DB	'%s%s', 00H
	ORG $+3
$SG7575	DB	'stsc r%lu, $%lX, $%lX $%lX', 00H
	ORG $+1
$SG7576	DB	0aH, 00H
	ORG $+2
$SG7578	DB	'%s%s', 00H
	ORG $+3
$SG7587	DB	'rc0', 00H
$SG7589	DB	'rc1', 00H
$SG7591	DB	'rx', 00H
	ORG $+1
$SG7593	DB	'ry', 00H
	ORG $+1
$SG7595	DB	'ru', 00H
	ORG $+1
$SG7597	DB	'rv', 00H
	ORG $+1
$SG7599	DB	'rz', 00H
	ORG $+1
$SG7601	DB	'xyctl', 00H
	ORG $+2
$SG7603	DB	'uvctl', 00H
	ORG $+2
$SG7605	DB	'xyrange', 00H
$SG7607	DB	'uvrange', 00H
$SG7609	DB	'acshift', 00H
$SG7611	DB	'svshift', 00H
$SG7613	DB	'???', 00H
$SG7621	DB	'stsc %s, $%lX, $%lX $%lX', 00H
	ORG $+3
$SG7623	DB	'stfc $%lX $%lX', 00H
	ORG $+1
$SG7624	DB	0aH, 00H
	ORG $+2
$SG7626	DB	'%s%s', 00H
CONST	ENDS
PUBLIC	?GetControlRegister@@YAPADI@Z			; GetControlRegister
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\printmem.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv64 = -4						; size = 4
_which$ = 8						; size = 4
?GetControlRegister@@YAPADI@Z PROC			; GetControlRegister

; 9    : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 10   :   switch(which)

	mov	eax, DWORD PTR _which$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	ja	SHORT $LN100@GetControl
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	$LN79@GetControl
	cmp	DWORD PTR tv64[ebp], 240		; 000000f0H
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN109@GetControl[ecx]
	jmp	DWORD PTR $LN115@GetControl[edx*4]
$LN100@GetControl:
	cmp	DWORD PTR tv64[ebp], 992		; 000003e0H
	ja	$LN101@GetControl
	cmp	DWORD PTR tv64[ebp], 992		; 000003e0H
	je	$LN43@GetControl
	cmp	DWORD PTR tv64[ebp], 480		; 000001e0H
	ja	SHORT $LN102@GetControl
	cmp	DWORD PTR tv64[ebp], 480		; 000001e0H
	je	$LN75@GetControl
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	$LN78@GetControl
	cmp	DWORD PTR tv64[ebp], 288		; 00000120H
	je	$LN77@GetControl
	cmp	DWORD PTR tv64[ebp], 304		; 00000130H
	je	$LN76@GetControl
	jmp	$LN3@GetControl
$LN102@GetControl:
	cmp	DWORD PTR tv64[ebp], 752		; 000002f0H
	ja	SHORT $LN103@GetControl
	cmp	DWORD PTR tv64[ebp], 752		; 000002f0H
	je	$LN58@GetControl
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 496				; 000001f0H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 240		; 000000f0H
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN110@GetControl[ecx]
	jmp	DWORD PTR $LN116@GetControl[edx*4]
$LN103@GetControl:
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 768				; 00000300H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 208		; 000000d0H
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN111@GetControl[ecx]
	jmp	DWORD PTR $LN117@GetControl[edx*4]
$LN101@GetControl:
	cmp	DWORD PTR tv64[ebp], 1264		; 000004f0H
	ja	SHORT $LN104@GetControl
	cmp	DWORD PTR tv64[ebp], 1264		; 000004f0H
	je	$LN26@GetControl
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 1008				; 000003f0H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 240		; 000000f0H
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN112@GetControl[ecx]
	jmp	DWORD PTR $LN118@GetControl[edx*4]
$LN104@GetControl:
	cmp	DWORD PTR tv64[ebp], 2016		; 000007e0H
	ja	SHORT $LN105@GetControl
	cmp	DWORD PTR tv64[ebp], 2016		; 000007e0H
	je	$LN21@GetControl
	cmp	DWORD PTR tv64[ebp], 1536		; 00000600H
	ja	SHORT $LN106@GetControl
	cmp	DWORD PTR tv64[ebp], 1536		; 00000600H
	je	$LN23@GetControl
	cmp	DWORD PTR tv64[ebp], 1280		; 00000500H
	je	$LN25@GetControl
	cmp	DWORD PTR tv64[ebp], 1296		; 00000510H
	je	$LN24@GetControl
	jmp	$LN3@GetControl
$LN106@GetControl:
	cmp	DWORD PTR tv64[ebp], 1552		; 00000610H
	je	$LN22@GetControl
	jmp	$LN3@GetControl
$LN105@GetControl:
	cmp	DWORD PTR tv64[ebp], 2076		; 0000081cH
	ja	SHORT $LN107@GetControl
	cmp	DWORD PTR tv64[ebp], 2076		; 0000081cH
	je	$LN12@GetControl
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 2032				; 000007f0H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 40			; 00000028H
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN113@GetControl[ecx]
	jmp	DWORD PTR $LN119@GetControl[edx*4]
$LN107@GetControl:
	cmp	DWORD PTR tv64[ebp], 4352		; 00001100H
	ja	SHORT $LN108@GetControl
	cmp	DWORD PTR tv64[ebp], 4352		; 00001100H
	je	$LN7@GetControl
	mov	eax, DWORD PTR tv64[ebp]
	sub	eax, 4080				; 00000ff0H
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 12			; 0000000cH
	ja	$LN3@GetControl
	mov	ecx, DWORD PTR tv64[ebp]
	movzx	edx, BYTE PTR $LN114@GetControl[ecx]
	jmp	DWORD PTR $LN120@GetControl[edx*4]
$LN108@GetControl:
	cmp	DWORD PTR tv64[ebp], 4368		; 00001110H
	je	$LN6@GetControl
	cmp	DWORD PTR tv64[ebp], 4384		; 00001120H
	je	$LN5@GetControl
	cmp	DWORD PTR tv64[ebp], 4400		; 00001130H
	je	$LN4@GetControl
	jmp	$LN3@GetControl
$LN95@GetControl:

; 11   :   {
; 12   :     case 0x00:
; 13   :       return "mpectl";

	mov	eax, OFFSET $SG6721
	jmp	$LN98@GetControl
$LN94@GetControl:

; 14   :     case 0x10:
; 15   :       return "excepsrc";

	mov	eax, OFFSET $SG6723
	jmp	$LN98@GetControl
$LN93@GetControl:

; 16   :     case 0x20:
; 17   :       return "excepclr";

	mov	eax, OFFSET $SG6725
	jmp	$LN98@GetControl
$LN92@GetControl:

; 18   :     case 0x30:
; 19   :       return "excephalten";

	mov	eax, OFFSET $SG6727
	jmp	$LN98@GetControl
$LN91@GetControl:

; 20   :     case 0x40:
; 21   :       return "cc";

	mov	eax, OFFSET $SG6729
	jmp	$LN98@GetControl
$LN90@GetControl:

; 22   :     case 0x50:
; 23   :       return "pcfetch";

	mov	eax, OFFSET $SG6731
	jmp	$LN98@GetControl
$LN89@GetControl:

; 24   :     case 0x60:
; 25   :       return "pcroute";

	mov	eax, OFFSET $SG6733
	jmp	$LN98@GetControl
$LN88@GetControl:

; 26   :     case 0x70:
; 27   :       return "pcexec";

	mov	eax, OFFSET $SG6735
	jmp	$LN98@GetControl
$LN87@GetControl:

; 28   :     case 0x80:
; 29   :       return "rz";

	mov	eax, OFFSET $SG6737
	jmp	$LN98@GetControl
$LN86@GetControl:

; 30   :     case 0x90:
; 31   :       return "rzi1";

	mov	eax, OFFSET $SG6739
	jmp	$LN98@GetControl
$LN85@GetControl:

; 32   :     case 0xA0:
; 33   :       return "rzi2";

	mov	eax, OFFSET $SG6741
	jmp	$LN98@GetControl
$LN84@GetControl:

; 34   :     case 0xB0:
; 35   :       return "intvec1";

	mov	eax, OFFSET $SG6743
	jmp	$LN98@GetControl
$LN83@GetControl:

; 36   :     case 0xC0:
; 37   :       return "intvec2";

	mov	eax, OFFSET $SG6745
	jmp	$LN98@GetControl
$LN82@GetControl:

; 38   :     case 0xD0:
; 39   :       return "intsrc";

	mov	eax, OFFSET $SG6747
	jmp	$LN98@GetControl
$LN81@GetControl:

; 40   :     case 0xE0:
; 41   :       return "intclr";

	mov	eax, OFFSET $SG6749
	jmp	$LN98@GetControl
$LN80@GetControl:

; 42   :     case 0xF0:
; 43   :       return "intctl";

	mov	eax, OFFSET $SG6751
	jmp	$LN98@GetControl
$LN79@GetControl:

; 44   :     case 0x100:
; 45   :       return "inten1";

	mov	eax, OFFSET $SG6753
	jmp	$LN98@GetControl
$LN78@GetControl:

; 46   :     case 0x110:
; 47   :       return "inten1set";

	mov	eax, OFFSET $SG6755
	jmp	$LN98@GetControl
$LN77@GetControl:

; 48   :     case 0x120:
; 49   :       return "inten1clr";

	mov	eax, OFFSET $SG6757
	jmp	$LN98@GetControl
$LN76@GetControl:

; 50   :     case 0x130:
; 51   :       return "inten2sel";

	mov	eax, OFFSET $SG6759
	jmp	$LN98@GetControl
$LN75@GetControl:

; 52   :     case 0x1E0:
; 53   :       return "rc0";

	mov	eax, OFFSET $SG6761
	jmp	$LN98@GetControl
$LN74@GetControl:

; 54   :     case 0x1F0:
; 55   :       return "rcl";

	mov	eax, OFFSET $SG6763
	jmp	$LN98@GetControl
$LN73@GetControl:

; 56   :     case 0x200:
; 57   :       return "rx";

	mov	eax, OFFSET $SG6765
	jmp	$LN98@GetControl
$LN72@GetControl:

; 58   :     case 0x210:
; 59   :       return "rx";

	mov	eax, OFFSET $SG6767
	jmp	$LN98@GetControl
$LN71@GetControl:

; 60   :     case 0x220:
; 61   :       return "xyrange";

	mov	eax, OFFSET $SG6769
	jmp	$LN98@GetControl
$LN70@GetControl:

; 62   :     case 0x230:
; 63   :       return "xybase";

	mov	eax, OFFSET $SG6771
	jmp	$LN98@GetControl
$LN69@GetControl:

; 64   :     case 0x240:
; 65   :       return "xyctl";

	mov	eax, OFFSET $SG6773
	jmp	$LN98@GetControl
$LN68@GetControl:

; 66   :     case 0x250:
; 67   :       return "ru";

	mov	eax, OFFSET $SG6775
	jmp	$LN98@GetControl
$LN67@GetControl:

; 68   :     case 0x260:
; 69   :       return "rv";

	mov	eax, OFFSET $SG6777
	jmp	$LN98@GetControl
$LN66@GetControl:

; 70   :     case 0x270:
; 71   :       return "uvrange";

	mov	eax, OFFSET $SG6779
	jmp	$LN98@GetControl
$LN65@GetControl:

; 72   :     case 0x280:
; 73   :       return "uvbase";

	mov	eax, OFFSET $SG6781
	jmp	$LN98@GetControl
$LN64@GetControl:

; 74   :     case 0x290:
; 75   :       return "uvctl";

	mov	eax, OFFSET $SG6783
	jmp	$LN98@GetControl
$LN63@GetControl:

; 76   :     case 0x2A0:
; 77   :       return "linpixctl";

	mov	eax, OFFSET $SG6785
	jmp	$LN98@GetControl
$LN62@GetControl:

; 78   :     case 0x2B0:
; 79   :       return "clutbase";

	mov	eax, OFFSET $SG6787
	jmp	$LN98@GetControl
$LN61@GetControl:

; 80   :     case 0x2C0:
; 81   :       return "svshift";

	mov	eax, OFFSET $SG6789
	jmp	$LN98@GetControl
$LN60@GetControl:

; 82   :     case 0x2D0:
; 83   :       return "acshift";

	mov	eax, OFFSET $SG6791
	jmp	$LN98@GetControl
$LN59@GetControl:

; 84   :     case 0x2E0:
; 85   :       return "sp";

	mov	eax, OFFSET $SG6793
	jmp	$LN98@GetControl
$LN58@GetControl:

; 86   :     case 0x2F0:
; 87   :       return "dabreak";

	mov	eax, OFFSET $SG6795
	jmp	$LN98@GetControl
$LN57@GetControl:

; 88   :     case 0x300:
; 89   :       return "r0";

	mov	eax, OFFSET $SG6797
	jmp	$LN98@GetControl
$LN56@GetControl:

; 90   :     case 0x310:
; 91   :       return "r1";

	mov	eax, OFFSET $SG6799
	jmp	$LN98@GetControl
$LN55@GetControl:

; 92   :     case 0x320:
; 93   :       return "r2";

	mov	eax, OFFSET $SG6801
	jmp	$LN98@GetControl
$LN54@GetControl:

; 94   :     case 0x330:
; 95   :       return "r3";

	mov	eax, OFFSET $SG6803
	jmp	$LN98@GetControl
$LN53@GetControl:

; 96   :     case 0x340:
; 97   :       return "r4";

	mov	eax, OFFSET $SG6805
	jmp	$LN98@GetControl
$LN52@GetControl:

; 98   :     case 0x350:
; 99   :       return "r5";

	mov	eax, OFFSET $SG6807
	jmp	$LN98@GetControl
$LN51@GetControl:

; 100  :     case 0x360:
; 101  :       return "r6";

	mov	eax, OFFSET $SG6809
	jmp	$LN98@GetControl
$LN50@GetControl:

; 102  :     case 0x370:
; 103  :       return "r7";

	mov	eax, OFFSET $SG6811
	jmp	$LN98@GetControl
$LN49@GetControl:

; 104  :     case 0x380:
; 105  :       return "r8";

	mov	eax, OFFSET $SG6813
	jmp	$LN98@GetControl
$LN48@GetControl:

; 106  :     case 0x390:
; 107  :       return "r9";

	mov	eax, OFFSET $SG6815
	jmp	$LN98@GetControl
$LN47@GetControl:

; 108  :     case 0x3A0:
; 109  :       return "r10";

	mov	eax, OFFSET $SG6817
	jmp	$LN98@GetControl
$LN46@GetControl:

; 110  :     case 0x3B0:
; 111  :       return "r11";

	mov	eax, OFFSET $SG6819
	jmp	$LN98@GetControl
$LN45@GetControl:

; 112  :     case 0x3C0:
; 113  :       return "r12";

	mov	eax, OFFSET $SG6821
	jmp	$LN98@GetControl
$LN44@GetControl:

; 114  :     case 0x3D0:
; 115  :       return "r13";

	mov	eax, OFFSET $SG6823
	jmp	$LN98@GetControl
$LN43@GetControl:

; 116  :     case 0x3E0:
; 117  :       return "r14";

	mov	eax, OFFSET $SG6825
	jmp	$LN98@GetControl
$LN42@GetControl:

; 118  :     case 0x3F0:
; 119  :       return "r15";

	mov	eax, OFFSET $SG6827
	jmp	$LN98@GetControl
$LN41@GetControl:

; 120  :     case 0x400:
; 121  :       return "r16";

	mov	eax, OFFSET $SG6829
	jmp	$LN98@GetControl
$LN40@GetControl:

; 122  :     case 0x410:
; 123  :       return "r17";

	mov	eax, OFFSET $SG6831
	jmp	$LN98@GetControl
$LN39@GetControl:

; 124  :     case 0x420:
; 125  :       return "r18";

	mov	eax, OFFSET $SG6833
	jmp	$LN98@GetControl
$LN38@GetControl:

; 126  :     case 0x430:
; 127  :       return "r19";

	mov	eax, OFFSET $SG6835
	jmp	$LN98@GetControl
$LN37@GetControl:

; 128  :     case 0x440:
; 129  :       return "r20";

	mov	eax, OFFSET $SG6837
	jmp	$LN98@GetControl
$LN36@GetControl:

; 130  :     case 0x450:
; 131  :       return "r21";

	mov	eax, OFFSET $SG6839
	jmp	$LN98@GetControl
$LN35@GetControl:

; 132  :     case 0x460:
; 133  :       return "r22";

	mov	eax, OFFSET $SG6841
	jmp	$LN98@GetControl
$LN34@GetControl:

; 134  :     case 0x470:
; 135  :       return "r23";

	mov	eax, OFFSET $SG6843
	jmp	$LN98@GetControl
$LN33@GetControl:

; 136  :     case 0x480:
; 137  :       return "r24";

	mov	eax, OFFSET $SG6845
	jmp	$LN98@GetControl
$LN32@GetControl:

; 138  :     case 0x490:
; 139  :       return "r25";

	mov	eax, OFFSET $SG6847
	jmp	$LN98@GetControl
$LN31@GetControl:

; 140  :     case 0x4A0:
; 141  :       return "r26";

	mov	eax, OFFSET $SG6849
	jmp	$LN98@GetControl
$LN30@GetControl:

; 142  :     case 0x4B0:
; 143  :       return "r27";

	mov	eax, OFFSET $SG6851
	jmp	$LN98@GetControl
$LN29@GetControl:

; 144  :     case 0x4C0:
; 145  :       return "r28";

	mov	eax, OFFSET $SG6853
	jmp	$LN98@GetControl
$LN28@GetControl:

; 146  :     case 0x4D0:
; 147  :       return "r29";

	mov	eax, OFFSET $SG6855
	jmp	$LN98@GetControl
$LN27@GetControl:

; 148  :     case 0x4E0:
; 149  :       return "r30";

	mov	eax, OFFSET $SG6857
	jmp	$LN98@GetControl
$LN26@GetControl:

; 150  :     case 0x4F0:
; 151  :       return "r31";

	mov	eax, OFFSET $SG6859
	jmp	$LN98@GetControl
$LN25@GetControl:

; 152  :     case 0x500:
; 153  :       return "odmactl";

	mov	eax, OFFSET $SG6861
	jmp	$LN98@GetControl
$LN24@GetControl:

; 154  :     case 0x510:
; 155  :       return "odmacptr";

	mov	eax, OFFSET $SG6863
	jmp	$LN98@GetControl
$LN23@GetControl:

; 156  :     case 0x600:
; 157  :       return "mdmactl";

	mov	eax, OFFSET $SG6865
	jmp	$LN98@GetControl
$LN22@GetControl:

; 158  :     case 0x610:
; 159  :       return "mdmactl";

	mov	eax, OFFSET $SG6867
	jmp	$LN98@GetControl
$LN21@GetControl:

; 160  :     case 0x7E0:
; 161  :       return "comminfo";

	mov	eax, OFFSET $SG6869
	jmp	$LN98@GetControl
$LN20@GetControl:

; 162  :     case 0x7F0:
; 163  :       return "commctl";

	mov	eax, OFFSET $SG6871
	jmp	$LN98@GetControl
$LN19@GetControl:

; 164  :     case 0x800:
; 165  :       return "commxmit0";

	mov	eax, OFFSET $SG6873
	jmp	$LN98@GetControl
$LN18@GetControl:

; 166  :     case 0x804:
; 167  :       return "commxmit1";

	mov	eax, OFFSET $SG6875
	jmp	$LN98@GetControl
$LN17@GetControl:

; 168  :     case 0x808:
; 169  :       return "commxmit2";

	mov	eax, OFFSET $SG6877
	jmp	SHORT $LN98@GetControl
$LN16@GetControl:

; 170  :     case 0x80C:
; 171  :       return "commxmit3";

	mov	eax, OFFSET $SG6879
	jmp	SHORT $LN98@GetControl
$LN15@GetControl:

; 172  :     case 0x810:
; 173  :       return "commrecv0";

	mov	eax, OFFSET $SG6881
	jmp	SHORT $LN98@GetControl
$LN14@GetControl:

; 174  :     case 0x814:
; 175  :       return "commrecv1";

	mov	eax, OFFSET $SG6883
	jmp	SHORT $LN98@GetControl
$LN13@GetControl:

; 176  :     case 0x818:
; 177  :       return "commrecv2";

	mov	eax, OFFSET $SG6885
	jmp	SHORT $LN98@GetControl
$LN12@GetControl:

; 178  :     case 0x81C:
; 179  :       return "commrecv3";

	mov	eax, OFFSET $SG6887
	jmp	SHORT $LN98@GetControl
$LN11@GetControl:

; 180  :     case 0xFF0:
; 181  :       return "configa";

	mov	eax, OFFSET $SG6889
	jmp	SHORT $LN98@GetControl
$LN10@GetControl:

; 182  :     case 0xFF4:
; 183  :       return "configb";

	mov	eax, OFFSET $SG6891
	jmp	SHORT $LN98@GetControl
$LN9@GetControl:

; 184  :     case 0xFF8:
; 185  :       return "dcachectl";

	mov	eax, OFFSET $SG6893
	jmp	SHORT $LN98@GetControl
$LN8@GetControl:

; 186  :     case 0xFFC:
; 187  :       return "icachectl";

	mov	eax, OFFSET $SG6895
	jmp	SHORT $LN98@GetControl
$LN7@GetControl:

; 188  :     case 0x1100:
; 189  :       return "vdmactla";

	mov	eax, OFFSET $SG6897
	jmp	SHORT $LN98@GetControl
$LN6@GetControl:

; 190  :     case 0x1110:
; 191  :       return "vdmactlb";

	mov	eax, OFFSET $SG6899
	jmp	SHORT $LN98@GetControl
$LN5@GetControl:

; 192  :     case 0x1120:
; 193  :       return "vdmaptra";

	mov	eax, OFFSET $SG6901
	jmp	SHORT $LN98@GetControl
$LN4@GetControl:

; 194  :     case 0x1130:
; 195  :       return "vdmaptrb";

	mov	eax, OFFSET $SG6903
	jmp	SHORT $LN98@GetControl
$LN3@GetControl:

; 196  :     default:
; 197  :       if((which >= 0x1200) && (which <= 0x1320))

	cmp	DWORD PTR _which$[ebp], 4608		; 00001200H
	jb	SHORT $LN2@GetControl
	cmp	DWORD PTR _which$[ebp], 4896		; 00001320H
	ja	SHORT $LN2@GetControl

; 198  :       {
; 199  :         return "vld-bdu???";

	mov	eax, OFFSET $SG6906
	jmp	SHORT $LN98@GetControl

; 200  :       }
; 201  :       else

	jmp	SHORT $LN98@GetControl
$LN2@GetControl:

; 202  :       {
; 203  :         return "???";

	mov	eax, OFFSET $SG6908
$LN98@GetControl:

; 204  :       }
; 205  :   }
; 206  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN115@GetControl:
	DD	$LN95@GetControl
	DD	$LN94@GetControl
	DD	$LN93@GetControl
	DD	$LN92@GetControl
	DD	$LN91@GetControl
	DD	$LN90@GetControl
	DD	$LN89@GetControl
	DD	$LN88@GetControl
	DD	$LN87@GetControl
	DD	$LN86@GetControl
	DD	$LN85@GetControl
	DD	$LN84@GetControl
	DD	$LN83@GetControl
	DD	$LN82@GetControl
	DD	$LN81@GetControl
	DD	$LN80@GetControl
	DD	$LN3@GetControl
$LN109@GetControl:
	DB	0
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	1
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	2
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	3
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	4
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	5
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	6
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	7
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	8
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	9
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	10					; 0000000aH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	12					; 0000000cH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	14					; 0000000eH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	15					; 0000000fH
	npad	3
$LN116@GetControl:
	DD	$LN74@GetControl
	DD	$LN73@GetControl
	DD	$LN72@GetControl
	DD	$LN71@GetControl
	DD	$LN70@GetControl
	DD	$LN69@GetControl
	DD	$LN68@GetControl
	DD	$LN67@GetControl
	DD	$LN66@GetControl
	DD	$LN65@GetControl
	DD	$LN64@GetControl
	DD	$LN63@GetControl
	DD	$LN62@GetControl
	DD	$LN61@GetControl
	DD	$LN60@GetControl
	DD	$LN59@GetControl
	DD	$LN3@GetControl
$LN110@GetControl:
	DB	0
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	1
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	2
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	3
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	4
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	5
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	6
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	7
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	8
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	9
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	10					; 0000000aH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	12					; 0000000cH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	14					; 0000000eH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	15					; 0000000fH
	npad	3
$LN117@GetControl:
	DD	$LN57@GetControl
	DD	$LN56@GetControl
	DD	$LN55@GetControl
	DD	$LN54@GetControl
	DD	$LN53@GetControl
	DD	$LN52@GetControl
	DD	$LN51@GetControl
	DD	$LN50@GetControl
	DD	$LN49@GetControl
	DD	$LN48@GetControl
	DD	$LN47@GetControl
	DD	$LN46@GetControl
	DD	$LN45@GetControl
	DD	$LN44@GetControl
	DD	$LN3@GetControl
$LN111@GetControl:
	DB	0
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	1
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	2
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	3
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	4
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	5
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	6
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	7
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	8
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	9
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	10					; 0000000aH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	11					; 0000000bH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	12					; 0000000cH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	14					; 0000000eH
	DB	13					; 0000000dH
	npad	3
$LN118@GetControl:
	DD	$LN42@GetControl
	DD	$LN41@GetControl
	DD	$LN40@GetControl
	DD	$LN39@GetControl
	DD	$LN38@GetControl
	DD	$LN37@GetControl
	DD	$LN36@GetControl
	DD	$LN35@GetControl
	DD	$LN34@GetControl
	DD	$LN33@GetControl
	DD	$LN32@GetControl
	DD	$LN31@GetControl
	DD	$LN30@GetControl
	DD	$LN29@GetControl
	DD	$LN28@GetControl
	DD	$LN27@GetControl
	DD	$LN3@GetControl
$LN112@GetControl:
	DB	0
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	1
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	2
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	3
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	4
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	5
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	6
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	7
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	8
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	9
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	10					; 0000000aH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	12					; 0000000cH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	14					; 0000000eH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	15					; 0000000fH
	npad	3
$LN119@GetControl:
	DD	$LN20@GetControl
	DD	$LN19@GetControl
	DD	$LN18@GetControl
	DD	$LN17@GetControl
	DD	$LN16@GetControl
	DD	$LN15@GetControl
	DD	$LN14@GetControl
	DD	$LN13@GetControl
	DD	$LN3@GetControl
$LN113@GetControl:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	7
	npad	3
$LN120@GetControl:
	DD	$LN11@GetControl
	DD	$LN10@GetControl
	DD	$LN9@GetControl
	DD	$LN8@GetControl
	DD	$LN3@GetControl
$LN114@GetControl:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	3
?GetControlRegister@@YAPADI@Z ENDP			; GetControlRegister
_TEXT	ENDS
PUBLIC	?Print_Mirror@@YAIPADAAVNuance@@_N@Z		; Print_Mirror
EXTRN	_strlen:PROC
EXTRN	_sprintf:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_Mirror@@YAIPADAAVNuance@@_N@Z PROC		; Print_Mirror

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 210  :   char tempStr[512];
; 211  :   sprintf(tempStr,"mirror r%lu, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG6915
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 212  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Mirr
	mov	DWORD PTR tv73[ebp], OFFSET $SG6916
	jmp	SHORT $LN4@Print_Mirr
$LN3@Print_Mirr:
	mov	DWORD PTR tv73[ebp], OFFSET $SG6917
$LN4@Print_Mirr:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG6918
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 213  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 214  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Mirr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Mirr:
	DD	1
	DD	$LN6@Print_Mirr
$LN6@Print_Mirr:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Mirr
$LN5@Print_Mirr:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_Mirror@@YAIPADAAVNuance@@_N@Z ENDP		; Print_Mirror
_TEXT	ENDS
PUBLIC	?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z	; Print_MV_SImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z PROC	; Print_MV_SImmediate

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 217  :   char tempStr[512];
; 218  :   sprintf(tempStr,"mv_s #$%8.8lX, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG6925
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 219  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_MV_S
	mov	DWORD PTR tv73[ebp], OFFSET $SG6926
	jmp	SHORT $LN4@Print_MV_S
$LN3@Print_MV_S:
	mov	DWORD PTR tv73[ebp], OFFSET $SG6927
$LN4@Print_MV_S:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG6928
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 220  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 221  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_MV_S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_MV_S:
	DD	1
	DD	$LN6@Print_MV_S
$LN6@Print_MV_S:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_MV_S
$LN5@Print_MV_S:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z ENDP	; Print_MV_SImmediate
_TEXT	ENDS
PUBLIC	?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z	; Print_MV_SScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z PROC		; Print_MV_SScalar

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 224  :   char tempStr[512];
; 225  :   sprintf(tempStr,"mv_s r%lu, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG6935
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 226  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_MV_S@2
	mov	DWORD PTR tv73[ebp], OFFSET $SG6936
	jmp	SHORT $LN4@Print_MV_S@2
$LN3@Print_MV_S@2:
	mov	DWORD PTR tv73[ebp], OFFSET $SG6937
$LN4@Print_MV_S@2:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG6938
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 227  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 228  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_MV_S@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_MV_S@2:
	DD	1
	DD	$LN6@Print_MV_S@2
$LN6@Print_MV_S@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_MV_S@2
$LN5@Print_MV_S@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z ENDP		; Print_MV_SScalar
_TEXT	ENDS
PUBLIC	?Print_MV_V@@YAIPADAAVNuance@@_N@Z		; Print_MV_V
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv75 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_MV_V@@YAIPADAAVNuance@@_N@Z PROC			; Print_MV_V

; 231  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 232  :   char tempStr[512];
; 233  :   sprintf(tempStr,"mv_v v%lu, v%lu",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG6945
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 234  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_MV_V
	mov	DWORD PTR tv75[ebp], OFFSET $SG6946
	jmp	SHORT $LN4@Print_MV_V
$LN3@Print_MV_V:
	mov	DWORD PTR tv75[ebp], OFFSET $SG6947
$LN4@Print_MV_V:
	mov	eax, DWORD PTR tv75[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG6948
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 235  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 236  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_MV_V
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Print_MV_V:
	DD	1
	DD	$LN6@Print_MV_V
$LN6@Print_MV_V:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_MV_V
$LN5@Print_MV_V:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_MV_V@@YAIPADAAVNuance@@_N@Z ENDP			; Print_MV_V
_TEXT	ENDS
PUBLIC	?Print_PopVector@@YAIPADAAVNuance@@_N@Z		; Print_PopVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PopVector@@YAIPADAAVNuance@@_N@Z PROC		; Print_PopVector

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  :   char tempStr[512];
; 241  :   sprintf(tempStr,"pop v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG6955
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 242  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_PopV
	mov	DWORD PTR tv72[ebp], OFFSET $SG6956
	jmp	SHORT $LN4@Print_PopV
$LN3@Print_PopV:
	mov	DWORD PTR tv72[ebp], OFFSET $SG6957
$LN4@Print_PopV:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG6958
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 243  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 244  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_PopV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_PopV:
	DD	1
	DD	$LN6@Print_PopV
$LN6@Print_PopV:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_PopV
$LN5@Print_PopV:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PopVector@@YAIPADAAVNuance@@_N@Z ENDP		; Print_PopVector
_TEXT	ENDS
PUBLIC	?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z	; Print_PopVectorRz
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z PROC		; Print_PopVectorRz

; 247  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 248  :   char tempStr[512];
; 249  :   sprintf(tempStr,"pop v%lu, rz",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG6965
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 250  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_PopV@2
	mov	DWORD PTR tv72[ebp], OFFSET $SG6966
	jmp	SHORT $LN4@Print_PopV@2
$LN3@Print_PopV@2:
	mov	DWORD PTR tv72[ebp], OFFSET $SG6967
$LN4@Print_PopV@2:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG6968
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 251  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 252  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_PopV@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_PopV@2:
	DD	1
	DD	$LN6@Print_PopV@2
$LN6@Print_PopV@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_PopV@2
$LN5@Print_PopV@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z ENDP		; Print_PopVectorRz
_TEXT	ENDS
PUBLIC	?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z	; Print_PopScalarRzi1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z PROC	; Print_PopScalarRzi1

; 255  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 256  :   char tempStr[512];
; 257  :   sprintf(tempStr,"pop r%lu, cc, rz, rzi1",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG6975
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 258  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_PopS
	mov	DWORD PTR tv71[ebp], OFFSET $SG6976
	jmp	SHORT $LN4@Print_PopS
$LN3@Print_PopS:
	mov	DWORD PTR tv71[ebp], OFFSET $SG6977
$LN4@Print_PopS:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG6978
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 259  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 260  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_PopS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_PopS:
	DD	1
	DD	$LN6@Print_PopS
$LN6@Print_PopS:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_PopS
$LN5@Print_PopS:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z ENDP	; Print_PopScalarRzi1
_TEXT	ENDS
PUBLIC	?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z	; Print_PopScalarRzi2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z PROC	; Print_PopScalarRzi2

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 264  :   char tempStr[512];
; 265  :   sprintf(tempStr,"pop r%lu, cc, rz, rzi2",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG6985
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 266  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_PopS@2
	mov	DWORD PTR tv71[ebp], OFFSET $SG6986
	jmp	SHORT $LN4@Print_PopS@2
$LN3@Print_PopS@2:
	mov	DWORD PTR tv71[ebp], OFFSET $SG6987
$LN4@Print_PopS@2:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG6988
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 267  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 268  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_PopS@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_PopS@2:
	DD	1
	DD	$LN6@Print_PopS@2
$LN6@Print_PopS@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_PopS@2
$LN5@Print_PopS@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z ENDP	; Print_PopScalarRzi2
_TEXT	ENDS
PUBLIC	?Print_PushVector@@YAIPADAAVNuance@@_N@Z	; Print_PushVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PushVector@@YAIPADAAVNuance@@_N@Z PROC		; Print_PushVector

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 272  :   char tempStr[512];
; 273  :   sprintf(tempStr,"push v%lu",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG6995
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 274  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Push
	mov	DWORD PTR tv72[ebp], OFFSET $SG6996
	jmp	SHORT $LN4@Print_Push
$LN3@Print_Push:
	mov	DWORD PTR tv72[ebp], OFFSET $SG6997
$LN4@Print_Push:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG6998
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 275  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 276  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Push
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Push:
	DD	1
	DD	$LN6@Print_Push
$LN6@Print_Push:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Push
$LN5@Print_Push:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PushVector@@YAIPADAAVNuance@@_N@Z ENDP		; Print_PushVector
_TEXT	ENDS
PUBLIC	?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z	; Print_PushVectorRz
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z PROC		; Print_PushVectorRz

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  :   char tempStr[512];
; 281  :   sprintf(tempStr,"push v%lu, rz",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7005
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 282  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Push@2
	mov	DWORD PTR tv72[ebp], OFFSET $SG7006
	jmp	SHORT $LN4@Print_Push@2
$LN3@Print_Push@2:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7007
$LN4@Print_Push@2:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7008
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 283  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 284  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Push@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Push@2:
	DD	1
	DD	$LN6@Print_Push@2
$LN6@Print_Push@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Push@2
$LN5@Print_Push@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z ENDP		; Print_PushVectorRz
_TEXT	ENDS
PUBLIC	?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z	; Print_PushScalarRzi1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z PROC	; Print_PushScalarRzi1

; 287  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 288  :   char tempStr[512];
; 289  :   sprintf(tempStr,"push r%lu, cc, rz, rzi1",nuance.fields[FIELD_MEM_FROM]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET $SG7015
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 290  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Push@3
	mov	DWORD PTR tv71[ebp], OFFSET $SG7016
	jmp	SHORT $LN4@Print_Push@3
$LN3@Print_Push@3:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7017
$LN4@Print_Push@3:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7018
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 291  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 292  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Push@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Push@3:
	DD	1
	DD	$LN6@Print_Push@3
$LN6@Print_Push@3:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Push@3
$LN5@Print_Push@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z ENDP	; Print_PushScalarRzi1
_TEXT	ENDS
PUBLIC	?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z	; Print_PushScalarRzi2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z PROC	; Print_PushScalarRzi2

; 295  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 296  :   char tempStr[512];
; 297  :   sprintf(tempStr,"push r%lu, cc, rz, rzi2",nuance.fields[FIELD_MEM_FROM]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET $SG7025
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 298  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Push@4
	mov	DWORD PTR tv71[ebp], OFFSET $SG7026
	jmp	SHORT $LN4@Print_Push@4
$LN3@Print_Push@4:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7027
$LN4@Print_Push@4:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7028
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 299  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 300  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Push@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Push@4:
	DD	1
	DD	$LN6@Print_Push@4
$LN6@Print_Push@4:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Push@4
$LN5@Print_Push@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z ENDP	; Print_PushScalarRzi2
_TEXT	ENDS
PUBLIC	?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadScalarControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadScalarControlRegisterAbsolute

; 303  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 304  :   char tempStr[512];
; 305  :   sprintf(tempStr,"ld_s %s, r%lu",GetControlRegister(nuance.fields[FIELD_MEM_FROM] - MPE_CTRL_BASE),nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 542113792				; 20500000H
	push	eax
	call	?GetControlRegister@@YAPADI@Z		; GetControlRegister
	add	esp, 4
	push	eax
	push	OFFSET $SG7035
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 306  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load
	mov	DWORD PTR tv76[ebp], OFFSET $SG7036
	jmp	SHORT $LN4@Print_Load
$LN3@Print_Load:
	mov	DWORD PTR tv76[ebp], OFFSET $SG7037
$LN4@Print_Load:
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7038
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 307  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 308  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Print_Load:
	DD	1
	DD	$LN6@Print_Load
$LN6@Print_Load:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load
$LN5@Print_Load:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadScalarControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z	; Print_LoadByteAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadByteAbsolute

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 312  :   char tempStr[512];
; 313  :   sprintf(tempStr,"ld_b $%8.8lX, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7045
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 314  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@2
	mov	DWORD PTR tv73[ebp], OFFSET $SG7046
	jmp	SHORT $LN4@Print_Load@2
$LN3@Print_Load@2:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7047
$LN4@Print_Load@2:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7048
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 315  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 316  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@2:
	DD	1
	DD	$LN6@Print_Load@2
$LN6@Print_Load@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@2
$LN5@Print_Load@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadByteAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z	; Print_LoadWordAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadWordAbsolute

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 320  :   char tempStr[512];
; 321  :   sprintf(tempStr,"ld_w $%8.8lX, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7055
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 322  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@3
	mov	DWORD PTR tv73[ebp], OFFSET $SG7056
	jmp	SHORT $LN4@Print_Load@3
$LN3@Print_Load@3:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7057
$LN4@Print_Load@3:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7058
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 323  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 324  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@3:
	DD	1
	DD	$LN6@Print_Load@3
$LN6@Print_Load@3:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@3
$LN5@Print_Load@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadWordAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadScalarAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadScalarAbsolute

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 328  :   char tempStr[512];
; 329  :   sprintf(tempStr,"ld_s $%8.8lX, r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7065
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 330  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@4
	mov	DWORD PTR tv73[ebp], OFFSET $SG7066
	jmp	SHORT $LN4@Print_Load@4
$LN3@Print_Load@4:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7067
$LN4@Print_Load@4:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7068
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 331  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 332  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@4:
	DD	1
	DD	$LN6@Print_Load@4
$LN6@Print_Load@4:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@4
$LN5@Print_Load@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadScalarAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadScalarLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadScalarLinear

; 335  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 336  :   char tempStr[512];
; 337  :   sprintf(tempStr,"ld_s (r%lu), r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7075
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 338  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@5
	mov	DWORD PTR tv73[ebp], OFFSET $SG7076
	jmp	SHORT $LN4@Print_Load@5
$LN3@Print_Load@5:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7077
$LN4@Print_Load@5:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7078
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 339  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 340  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@5:
	DD	1
	DD	$LN6@Print_Load@5
$LN6@Print_Load@5:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@5
$LN5@Print_Load@5:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadScalarLinear
_TEXT	ENDS
PUBLIC	?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadVectorAbsolute

; 343  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 344  :   char tempStr[512];
; 345  :   sprintf(tempStr,"ld_v $%8.8lX, v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7085
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 346  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@6
	mov	DWORD PTR tv74[ebp], OFFSET $SG7086
	jmp	SHORT $LN4@Print_Load@6
$LN3@Print_Load@6:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7087
$LN4@Print_Load@6:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7088
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 347  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 348  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@6:
	DD	1
	DD	$LN6@Print_Load@6
$LN6@Print_Load@6:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@6
$LN5@Print_Load@6:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadVectorAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadVectorControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadVectorControlRegisterAbsolute

; 350  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 351  :   char tempStr[512];
; 352  :   sprintf(tempStr,"ld_v %s, v%lu",GetControlRegister(nuance.fields[FIELD_MEM_FROM] - MPE_CTRL_BASE),nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 542113792				; 20500000H
	push	eax
	call	?GetControlRegister@@YAPADI@Z		; GetControlRegister
	add	esp, 4
	push	eax
	push	OFFSET $SG7095
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 353  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@7
	mov	DWORD PTR tv77[ebp], OFFSET $SG7096
	jmp	SHORT $LN4@Print_Load@7
$LN3@Print_Load@7:
	mov	DWORD PTR tv77[ebp], OFFSET $SG7097
$LN4@Print_Load@7:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7098
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 354  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 355  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@7:
	DD	1
	DD	$LN6@Print_Load@7
$LN6@Print_Load@7:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@7
$LN5@Print_Load@7:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadVectorControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z	; Print_LoadPixelAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelAbsolute

; 358  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 359  :   char tempStr[512];
; 360  :   sprintf(tempStr,"ld_p $%8.8lX, v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7105
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 361  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@8
	mov	DWORD PTR tv74[ebp], OFFSET $SG7106
	jmp	SHORT $LN4@Print_Load@8
$LN3@Print_Load@8:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7107
$LN4@Print_Load@8:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7108
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 362  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 363  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@8:
	DD	1
	DD	$LN6@Print_Load@8
$LN6@Print_Load@8:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@8
$LN5@Print_Load@8:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadPixelZAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelZAbsolute

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 367  :   char tempStr[512];
; 368  :   sprintf(tempStr,"ld_pz $%8.8lX, v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7115
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 369  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@9
	mov	DWORD PTR tv74[ebp], OFFSET $SG7116
	jmp	SHORT $LN4@Print_Load@9
$LN3@Print_Load@9:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7117
$LN4@Print_Load@9:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7118
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 370  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 371  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@9:
	DD	1
	DD	$LN6@Print_Load@9
$LN6@Print_Load@9:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@9
$LN5@Print_Load@9:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelZAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadByteLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadByteLinear

; 374  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 375  :   char tempStr[512];
; 376  :   sprintf(tempStr,"ld_b (r%lu), r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7125
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 377  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@10
	mov	DWORD PTR tv73[ebp], OFFSET $SG7126
	jmp	SHORT $LN4@Print_Load@10
$LN3@Print_Load@10:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7127
$LN4@Print_Load@10:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7128
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 378  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 379  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@10:
	DD	1
	DD	$LN6@Print_Load@10
$LN6@Print_Load@10:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@10
$LN5@Print_Load@10:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadByteLinear
_TEXT	ENDS
PUBLIC	?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadByteBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadByteBilinearUV

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 383  :   char tempStr[512];
; 384  :   sprintf(tempStr,"ld_b (uv), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7135
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 385  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@11
	mov	DWORD PTR tv71[ebp], OFFSET $SG7136
	jmp	SHORT $LN4@Print_Load@11
$LN3@Print_Load@11:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7137
$LN4@Print_Load@11:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7138
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 386  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 387  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@11
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@11:
	DD	1
	DD	$LN6@Print_Load@11
$LN6@Print_Load@11:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@11
$LN5@Print_Load@11:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadByteBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadByteBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadByteBilinearXY

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 391  :   char tempStr[512];
; 392  :   sprintf(tempStr,"ld_b (xy), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7145
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 393  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@12
	mov	DWORD PTR tv71[ebp], OFFSET $SG7146
	jmp	SHORT $LN4@Print_Load@12
$LN3@Print_Load@12:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7147
$LN4@Print_Load@12:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7148
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 394  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 395  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@12
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@12:
	DD	1
	DD	$LN6@Print_Load@12
$LN6@Print_Load@12:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@12
$LN5@Print_Load@12:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadByteBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadWordLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadWordLinear

; 398  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 399  :   char tempStr[512];
; 400  :   sprintf(tempStr,"ld_w (r%lu), r%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7155
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 401  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@13
	mov	DWORD PTR tv73[ebp], OFFSET $SG7156
	jmp	SHORT $LN4@Print_Load@13
$LN3@Print_Load@13:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7157
$LN4@Print_Load@13:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7158
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 402  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 403  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@13
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@13:
	DD	1
	DD	$LN6@Print_Load@13
$LN6@Print_Load@13:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@13
$LN5@Print_Load@13:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadWordLinear
_TEXT	ENDS
PUBLIC	?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadWordBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadWordBilinearUV

; 406  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 407  :   char tempStr[512];
; 408  :   sprintf(tempStr,"ld_w (uv), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7165
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 409  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@14
	mov	DWORD PTR tv71[ebp], OFFSET $SG7166
	jmp	SHORT $LN4@Print_Load@14
$LN3@Print_Load@14:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7167
$LN4@Print_Load@14:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7168
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 410  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 411  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@14
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@14:
	DD	1
	DD	$LN6@Print_Load@14
$LN6@Print_Load@14:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@14
$LN5@Print_Load@14:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadWordBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadWordBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadWordBilinearXY

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 415  :   char tempStr[512];
; 416  :   sprintf(tempStr,"ld_w (xy), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7175
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 417  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@15
	mov	DWORD PTR tv71[ebp], OFFSET $SG7176
	jmp	SHORT $LN4@Print_Load@15
$LN3@Print_Load@15:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7177
$LN4@Print_Load@15:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7178
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 418  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 419  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@15
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@15:
	DD	1
	DD	$LN6@Print_Load@15
$LN6@Print_Load@15:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@15
$LN5@Print_Load@15:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadWordBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadScalarBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadScalarBilinearUV

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 423  :   char tempStr[512];
; 424  :   sprintf(tempStr,"ld_s (uv), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7185
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 425  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@16
	mov	DWORD PTR tv71[ebp], OFFSET $SG7186
	jmp	SHORT $LN4@Print_Load@16
$LN3@Print_Load@16:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7187
$LN4@Print_Load@16:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7188
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 426  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 427  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@16:
	DD	1
	DD	$LN6@Print_Load@16
$LN6@Print_Load@16:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@16
$LN5@Print_Load@16:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadScalarBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadScalarBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadScalarBilinearXY

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 430  :   char tempStr[512];
; 431  :   sprintf(tempStr,"ld_s (xy), r%lu",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7195
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 432  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@17
	mov	DWORD PTR tv71[ebp], OFFSET $SG7196
	jmp	SHORT $LN4@Print_Load@17
$LN3@Print_Load@17:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7197
$LN4@Print_Load@17:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7198
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 433  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 434  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@17
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Load@17:
	DD	1
	DD	$LN6@Print_Load@17
$LN6@Print_Load@17:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@17
$LN5@Print_Load@17:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadScalarBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_LoadShortVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadShortVectorAbsolute

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 438  :   char tempStr[512];
; 439  :   sprintf(tempStr,"ld_sv $%8.8lX, v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7205
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 440  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@18
	mov	DWORD PTR tv74[ebp], OFFSET $SG7206
	jmp	SHORT $LN4@Print_Load@18
$LN3@Print_Load@18:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7207
$LN4@Print_Load@18:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7208
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 441  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 442  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@18
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@18:
	DD	1
	DD	$LN6@Print_Load@18
$LN6@Print_Load@18:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@18
$LN5@Print_Load@18:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadShortVectorAbsolute
_TEXT	ENDS
PUBLIC	?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z ; Print_LoadShortVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadShortVectorLinear

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 446  :   char tempStr[512];
; 447  :   sprintf(tempStr,"ld_sv (r%lu), v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7215
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 448  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@19
	mov	DWORD PTR tv74[ebp], OFFSET $SG7216
	jmp	SHORT $LN4@Print_Load@19
$LN3@Print_Load@19:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7217
$LN4@Print_Load@19:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7218
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 449  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 450  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@19
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@19:
	DD	1
	DD	$LN6@Print_Load@19
$LN6@Print_Load@19:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@19
$LN5@Print_Load@19:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadShortVectorLinear
_TEXT	ENDS
PUBLIC	?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadShortVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadShortVectorBilinearUV

; 453  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 454  :   char tempStr[512];
; 455  :   sprintf(tempStr,"ld_sv (uv), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7225
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 456  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@20
	mov	DWORD PTR tv72[ebp], OFFSET $SG7226
	jmp	SHORT $LN4@Print_Load@20
$LN3@Print_Load@20:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7227
$LN4@Print_Load@20:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7228
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 457  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 458  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@20
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@20:
	DD	1
	DD	$LN6@Print_Load@20
$LN6@Print_Load@20:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@20
$LN5@Print_Load@20:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadShortVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadShortVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z PROC ; Print_LoadShortVectorBilinearXY

; 461  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 462  :   char tempStr[512];
; 463  :   sprintf(tempStr,"ld_sv (xy), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7235
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 464  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@21
	mov	DWORD PTR tv72[ebp], OFFSET $SG7236
	jmp	SHORT $LN4@Print_Load@21
$LN3@Print_Load@21:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7237
$LN4@Print_Load@21:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7238
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 465  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 466  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@21
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@21:
	DD	1
	DD	$LN6@Print_Load@21
$LN6@Print_Load@21:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@21
$LN5@Print_Load@21:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP ; Print_LoadShortVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadVectorLinear

; 469  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  :   char tempStr[512];
; 471  :   sprintf(tempStr,"ld_v (r%lu), v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7245
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 472  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@22
	mov	DWORD PTR tv74[ebp], OFFSET $SG7246
	jmp	SHORT $LN4@Print_Load@22
$LN3@Print_Load@22:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7247
$LN4@Print_Load@22:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7248
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 473  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 474  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@22
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@22:
	DD	1
	DD	$LN6@Print_Load@22
$LN6@Print_Load@22:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@22
$LN5@Print_Load@22:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadVectorLinear
_TEXT	ENDS
PUBLIC	?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadVectorBilinearUV

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 478  :   char tempStr[512];
; 479  :   sprintf(tempStr,"ld_v (uv), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7255
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 480  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@23
	mov	DWORD PTR tv72[ebp], OFFSET $SG7256
	jmp	SHORT $LN4@Print_Load@23
$LN3@Print_Load@23:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7257
$LN4@Print_Load@23:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7258
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 481  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@23
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@23:
	DD	1
	DD	$LN6@Print_Load@23
$LN6@Print_Load@23:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@23
$LN5@Print_Load@23:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadVectorBilinearXY

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 486  :   char tempStr[512];
; 487  :   sprintf(tempStr,"ld_v (xy), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7265
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 488  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@24
	mov	DWORD PTR tv72[ebp], OFFSET $SG7266
	jmp	SHORT $LN4@Print_Load@24
$LN3@Print_Load@24:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7267
$LN4@Print_Load@24:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7268
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 489  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 490  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@24
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@24:
	DD	1
	DD	$LN6@Print_Load@24
$LN6@Print_Load@24:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@24
$LN5@Print_Load@24:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadPixelLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelLinear

; 493  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 494  :   char tempStr[512];
; 495  :   sprintf(tempStr,"ld_p (r%lu), v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7275
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 496  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@25
	mov	DWORD PTR tv74[ebp], OFFSET $SG7276
	jmp	SHORT $LN4@Print_Load@25
$LN3@Print_Load@25:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7277
$LN4@Print_Load@25:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7278
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 497  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 498  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@25
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@25:
	DD	1
	DD	$LN6@Print_Load@25
$LN6@Print_Load@25:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@25
$LN5@Print_Load@25:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelLinear
_TEXT	ENDS
PUBLIC	?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadPixelBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelBilinearUV

; 501  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 502  :   char tempStr[512];
; 503  :   sprintf(tempStr,"ld_p (uv), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7285
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 504  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@26
	mov	DWORD PTR tv72[ebp], OFFSET $SG7286
	jmp	SHORT $LN4@Print_Load@26
$LN3@Print_Load@26:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7287
$LN4@Print_Load@26:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7288
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 505  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 506  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@26
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@26:
	DD	1
	DD	$LN6@Print_Load@26
$LN6@Print_Load@26:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@26
$LN5@Print_Load@26:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadPixelBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelBilinearXY

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 510  :   char tempStr[512];
; 511  :   sprintf(tempStr,"ld_p (xy), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7295
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 512  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@27
	mov	DWORD PTR tv72[ebp], OFFSET $SG7296
	jmp	SHORT $LN4@Print_Load@27
$LN3@Print_Load@27:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7297
$LN4@Print_Load@27:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7298
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 513  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 514  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@27
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@27:
	DD	1
	DD	$LN6@Print_Load@27
$LN6@Print_Load@27:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@27
$LN5@Print_Load@27:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelBilinearXY
_TEXT	ENDS
PUBLIC	?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z	; Print_LoadPixelZLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelZLinear

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 518  :   char tempStr[512];
; 519  :   sprintf(tempStr,"ld_pz (r%lu), v%lu",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7305
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 520  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Load@28
	mov	DWORD PTR tv74[ebp], OFFSET $SG7306
	jmp	SHORT $LN4@Print_Load@28
$LN3@Print_Load@28:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7307
$LN4@Print_Load@28:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7308
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 521  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 522  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@28
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Load@28:
	DD	1
	DD	$LN6@Print_Load@28
$LN6@Print_Load@28:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@28
$LN5@Print_Load@28:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelZLinear
_TEXT	ENDS
PUBLIC	?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_LoadPixelZBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelZBilinearUV

; 525  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 526  :   char tempStr[512];
; 527  :   sprintf(tempStr,"ld_pz (uv), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7315
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 528  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@29
	mov	DWORD PTR tv72[ebp], OFFSET $SG7316
	jmp	SHORT $LN4@Print_Load@29
$LN3@Print_Load@29:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7317
$LN4@Print_Load@29:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7318
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 529  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 530  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@29
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@29:
	DD	1
	DD	$LN6@Print_Load@29
$LN6@Print_Load@29:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@29
$LN5@Print_Load@29:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelZBilinearUV
_TEXT	ENDS
PUBLIC	?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_LoadPixelZBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_LoadPixelZBilinearXY

; 533  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 534  :   char tempStr[512];
; 535  :   sprintf(tempStr,"ld_pz (xy), v%lu",nuance.fields[FIELD_MEM_TO] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7325
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 536  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Load@30
	mov	DWORD PTR tv72[ebp], OFFSET $SG7326
	jmp	SHORT $LN4@Print_Load@30
$LN3@Print_Load@30:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7327
$LN4@Print_Load@30:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7328
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 537  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 538  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Load@30
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Load@30:
	DD	1
	DD	$LN6@Print_Load@30
$LN6@Print_Load@30:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Load@30
$LN5@Print_Load@30:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_LoadPixelZBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z PROC	; Print_StoreScalarImmediate

; 541  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 542  :   char tempStr[512];
; 543  :   sprintf(tempStr,"st_s #$%8.8lX, $%8.8lX",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7335
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 544  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor
	mov	DWORD PTR tv73[ebp], OFFSET $SG7336
	jmp	SHORT $LN4@Print_Stor
$LN3@Print_Stor:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7337
$LN4@Print_Stor:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7338
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 545  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 546  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor:
	DD	1
	DD	$LN6@Print_Stor
$LN6@Print_Stor:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor
$LN5@Print_Stor:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StoreScalarImmediate
_TEXT	ENDS
PUBLIC	?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_StoreScalarAbsolute

; 549  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 550  :   char tempStr[512];
; 551  :   sprintf(tempStr,"st_s r%lu, $%8.8lX",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7345
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 552  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@2
	mov	DWORD PTR tv73[ebp], OFFSET $SG7346
	jmp	SHORT $LN4@Print_Stor@2
$LN3@Print_Stor@2:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7347
$LN4@Print_Stor@2:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7348
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 553  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 554  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@2:
	DD	1
	DD	$LN6@Print_Stor@2
$LN6@Print_Stor@2:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@2
$LN5@Print_Stor@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StoreScalarAbsolute
_TEXT	ENDS
PUBLIC	?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarControlRegisterImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreScalarControlRegisterImmediate

; 557  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 558  :   char tempStr[512];
; 559  :   sprintf(tempStr,"st_s #$%8.8lX, %s",nuance.fields[FIELD_MEM_FROM],GetControlRegister(nuance.fields[FIELD_MEM_TO] - MPE_CTRL_BASE));

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 542113792				; 20500000H
	push	ecx
	call	?GetControlRegister@@YAPADI@Z		; GetControlRegister
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7355
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 560  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@3
	mov	DWORD PTR tv76[ebp], OFFSET $SG7356
	jmp	SHORT $LN4@Print_Stor@3
$LN3@Print_Stor@3:
	mov	DWORD PTR tv76[ebp], OFFSET $SG7357
$LN4@Print_Stor@3:
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7358
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 561  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 562  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@3:
	DD	1
	DD	$LN6@Print_Stor@3
$LN6@Print_Stor@3:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@3
$LN5@Print_Stor@3:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreScalarControlRegisterImmediate
_TEXT	ENDS
PUBLIC	?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z	; Print_StoreScalarLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_StoreScalarLinear

; 565  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 566  :   char tempStr[512];
; 567  :   sprintf(tempStr,"st_s r%lu, (r%lu)",nuance.fields[FIELD_MEM_FROM],nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7365
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 568  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@4
	mov	DWORD PTR tv73[ebp], OFFSET $SG7366
	jmp	SHORT $LN4@Print_Stor@4
$LN3@Print_Stor@4:
	mov	DWORD PTR tv73[ebp], OFFSET $SG7367
$LN4@Print_Stor@4:
	mov	eax, DWORD PTR tv73[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7368
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 569  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 570  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@4:
	DD	1
	DD	$LN6@Print_Stor@4
$LN6@Print_Stor@4:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@4
$LN5@Print_Stor@4:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StoreScalarLinear
_TEXT	ENDS
PUBLIC	?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreScalarBilinearUV

; 573  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 574  :   char tempStr[512];
; 575  :   sprintf(tempStr,"st_s r%lu, (uv)",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7375
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 576  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@5
	mov	DWORD PTR tv71[ebp], OFFSET $SG7376
	jmp	SHORT $LN4@Print_Stor@5
$LN3@Print_Stor@5:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7377
$LN4@Print_Stor@5:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7378
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 577  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 578  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Stor@5:
	DD	1
	DD	$LN6@Print_Stor@5
$LN6@Print_Stor@5:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@5
$LN5@Print_Stor@5:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreScalarBilinearUV
_TEXT	ENDS
PUBLIC	?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv71 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreScalarBilinearXY

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 582  :   char tempStr[512];
; 583  :   sprintf(tempStr,"st_s r%lu, (xy)",nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET $SG7385
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 584  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@6
	mov	DWORD PTR tv71[ebp], OFFSET $SG7386
	jmp	SHORT $LN4@Print_Stor@6
$LN3@Print_Stor@6:
	mov	DWORD PTR tv71[ebp], OFFSET $SG7387
$LN4@Print_Stor@6:
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7388
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 585  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 586  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Print_Stor@6:
	DD	1
	DD	$LN6@Print_Stor@6
$LN6@Print_Stor@6:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@6
$LN5@Print_Stor@6:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreScalarBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv76 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreScalarControlRegisterAbsolute

; 589  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 590  :   char tempStr[512];
; 591  :   sprintf(tempStr,"st_s r%lu, %s",nuance.fields[FIELD_MEM_FROM],GetControlRegister(nuance.fields[FIELD_MEM_TO] - MPE_CTRL_BASE));

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 542113792				; 20500000H
	push	ecx
	call	?GetControlRegister@@YAPADI@Z		; GetControlRegister
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG7395
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 592  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@7
	mov	DWORD PTR tv76[ebp], OFFSET $SG7396
	jmp	SHORT $LN4@Print_Stor@7
$LN3@Print_Stor@7:
	mov	DWORD PTR tv76[ebp], OFFSET $SG7397
$LN4@Print_Stor@7:
	mov	eax, DWORD PTR tv76[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7398
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 593  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 594  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@7:
	DD	1
	DD	$LN6@Print_Stor@7
$LN6@Print_Stor@7:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@7
$LN5@Print_Stor@7:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreScalarControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StoreVectorControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreVectorControlRegisterAbsolute

; 597  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 598  :   char tempStr[512];
; 599  :   sprintf(tempStr,"st_v v%lu, %s",nuance.fields[FIELD_MEM_FROM] >> 2,GetControlRegister(nuance.fields[FIELD_MEM_TO] - MPE_CTRL_BASE));

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 542113792				; 20500000H
	push	ecx
	call	?GetControlRegister@@YAPADI@Z		; GetControlRegister
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7405
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 600  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@8
	mov	DWORD PTR tv77[ebp], OFFSET $SG7406
	jmp	SHORT $LN4@Print_Stor@8
$LN3@Print_Stor@8:
	mov	DWORD PTR tv77[ebp], OFFSET $SG7407
$LN4@Print_Stor@8:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7408
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 601  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 602  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Print_Stor@8:
	DD	1
	DD	$LN6@Print_Stor@8
$LN6@Print_Stor@8:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@8
$LN5@Print_Stor@8:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreVectorControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelAbsolute

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 606  :   char tempStr[512];
; 607  :   sprintf(tempStr,"st_p v%lu, $%8.8lX",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7415
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 608  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@9
	mov	DWORD PTR tv74[ebp], OFFSET $SG7416
	jmp	SHORT $LN4@Print_Stor@9
$LN3@Print_Stor@9:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7417
$LN4@Print_Stor@9:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7418
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 609  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 610  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@9
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@9:
	DD	1
	DD	$LN6@Print_Stor@9
$LN6@Print_Stor@9:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@9
$LN5@Print_Stor@9:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelAbsolute
_TEXT	ENDS
PUBLIC	?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelZAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelZAbsolute

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 614  :   char tempStr[512];
; 615  :   sprintf(tempStr,"st_pz v%lu, $%8.8lX",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7425
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 616  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@10
	mov	DWORD PTR tv74[ebp], OFFSET $SG7426
	jmp	SHORT $LN4@Print_Stor@10
$LN3@Print_Stor@10:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7427
$LN4@Print_Stor@10:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7428
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 617  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 618  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@10
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@10:
	DD	1
	DD	$LN6@Print_Stor@10
$LN6@Print_Stor@10:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@10
$LN5@Print_Stor@10:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelZAbsolute
_TEXT	ENDS
PUBLIC	?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StoreShortVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreShortVectorAbsolute

; 621  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 622  :   char tempStr[512];
; 623  :   sprintf(tempStr,"st_sv v%lu, $%8.8lX",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7435
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 624  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@11
	mov	DWORD PTR tv74[ebp], OFFSET $SG7436
	jmp	SHORT $LN4@Print_Stor@11
$LN3@Print_Stor@11:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7437
$LN4@Print_Stor@11:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7438
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 625  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 626  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@11
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@11:
	DD	1
	DD	$LN6@Print_Stor@11
$LN6@Print_Stor@11:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@11
$LN5@Print_Stor@11:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreShortVectorAbsolute
_TEXT	ENDS
PUBLIC	?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z ; Print_StoreShortVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreShortVectorLinear

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 630  :   char tempStr[512];
; 631  :   sprintf(tempStr,"st_sv v%lu, (r%lu)",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7445
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 632  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@12
	mov	DWORD PTR tv74[ebp], OFFSET $SG7446
	jmp	SHORT $LN4@Print_Stor@12
$LN3@Print_Stor@12:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7447
$LN4@Print_Stor@12:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7448
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 633  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 634  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@12
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@12:
	DD	1
	DD	$LN6@Print_Stor@12
$LN6@Print_Stor@12:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@12
$LN5@Print_Stor@12:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreShortVectorLinear
_TEXT	ENDS
PUBLIC	?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_StoreShortVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreShortVectorBilinearUV

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 638  :   char tempStr[512];
; 639  :   sprintf(tempStr,"st_sv v%lu, (uv)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7455
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 640  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@13
	mov	DWORD PTR tv72[ebp], OFFSET $SG7456
	jmp	SHORT $LN4@Print_Stor@13
$LN3@Print_Stor@13:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7457
$LN4@Print_Stor@13:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7458
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 641  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 642  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@13
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@13:
	DD	1
	DD	$LN6@Print_Stor@13
$LN6@Print_Stor@13:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@13
$LN5@Print_Stor@13:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreShortVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_StoreShortVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreShortVectorBilinearXY

; 645  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 646  :   char tempStr[512];
; 647  :   sprintf(tempStr,"st_sv v%lu, (xy)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7465
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 648  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@14
	mov	DWORD PTR tv72[ebp], OFFSET $SG7466
	jmp	SHORT $LN4@Print_Stor@14
$LN3@Print_Stor@14:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7467
$LN4@Print_Stor@14:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7468
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 649  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 650  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@14
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@14:
	DD	1
	DD	$LN6@Print_Stor@14
$LN6@Print_Stor@14:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@14
$LN5@Print_Stor@14:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreShortVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z ; Print_StoreVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z PROC	; Print_StoreVectorAbsolute

; 653  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 654  :   char tempStr[512];
; 655  :   sprintf(tempStr,"st_v v%lu, $%8.8lX",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7475
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 656  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@15
	mov	DWORD PTR tv74[ebp], OFFSET $SG7476
	jmp	SHORT $LN4@Print_Stor@15
$LN3@Print_Stor@15:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7477
$LN4@Print_Stor@15:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7478
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 657  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 658  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@15
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@15:
	DD	1
	DD	$LN6@Print_Stor@15
$LN6@Print_Stor@15:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@15
$LN5@Print_Stor@15:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StoreVectorAbsolute
_TEXT	ENDS
PUBLIC	?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z	; Print_StoreVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_StoreVectorLinear

; 661  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 662  :   char tempStr[512];
; 663  :   sprintf(tempStr,"st_v v%lu, (r%lu)",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7485
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 664  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@16
	mov	DWORD PTR tv74[ebp], OFFSET $SG7486
	jmp	SHORT $LN4@Print_Stor@16
$LN3@Print_Stor@16:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7487
$LN4@Print_Stor@16:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7488
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 665  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 666  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@16:
	DD	1
	DD	$LN6@Print_Stor@16
$LN6@Print_Stor@16:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@16
$LN5@Print_Stor@16:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StoreVectorLinear
_TEXT	ENDS
PUBLIC	?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_StoreVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreVectorBilinearUV

; 669  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 670  :   char tempStr[512];
; 671  :   sprintf(tempStr,"st_v v%lu, (uv)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7495
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 672  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@17
	mov	DWORD PTR tv72[ebp], OFFSET $SG7496
	jmp	SHORT $LN4@Print_Stor@17
$LN3@Print_Stor@17:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7497
$LN4@Print_Stor@17:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7498
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 673  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 674  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@17
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@17:
	DD	1
	DD	$LN6@Print_Stor@17
$LN6@Print_Stor@17:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@17
$LN5@Print_Stor@17:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_StoreVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreVectorBilinearXY

; 677  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 678  :   char tempStr[512];
; 679  :   sprintf(tempStr,"st_v v%lu, (xy)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7505
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 680  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@18
	mov	DWORD PTR tv72[ebp], OFFSET $SG7506
	jmp	SHORT $LN4@Print_Stor@18
$LN3@Print_Stor@18:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7507
$LN4@Print_Stor@18:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7508
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 681  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 682  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@18
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@18:
	DD	1
	DD	$LN6@Print_Stor@18
$LN6@Print_Stor@18:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@18
$LN5@Print_Stor@18:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z	; Print_StorePixelLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelLinear

; 685  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 686  :   char tempStr[512];
; 687  :   sprintf(tempStr,"st_p v%lu, (r%lu)",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7515
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 688  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@19
	mov	DWORD PTR tv74[ebp], OFFSET $SG7516
	jmp	SHORT $LN4@Print_Stor@19
$LN3@Print_Stor@19:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7517
$LN4@Print_Stor@19:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7518
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 689  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 690  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@19
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@19:
	DD	1
	DD	$LN6@Print_Stor@19
$LN6@Print_Stor@19:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@19
$LN5@Print_Stor@19:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelLinear
_TEXT	ENDS
PUBLIC	?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelBilinearUV

; 693  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 694  :   char tempStr[512];
; 695  :   sprintf(tempStr,"st_p v%lu, (uv)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7525
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 696  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@20
	mov	DWORD PTR tv72[ebp], OFFSET $SG7526
	jmp	SHORT $LN4@Print_Stor@20
$LN3@Print_Stor@20:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7527
$LN4@Print_Stor@20:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7528
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 697  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 698  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@20
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@20:
	DD	1
	DD	$LN6@Print_Stor@20
$LN6@Print_Stor@20:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@20
$LN5@Print_Stor@20:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelBilinearUV
_TEXT	ENDS
PUBLIC	?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelBilinearXY

; 701  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 702  :   char tempStr[512];
; 703  :   sprintf(tempStr,"st_p v%lu, (xy)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7535
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 704  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@21
	mov	DWORD PTR tv72[ebp], OFFSET $SG7536
	jmp	SHORT $LN4@Print_Stor@21
$LN3@Print_Stor@21:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7537
$LN4@Print_Stor@21:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7538
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 705  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 706  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@21
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@21:
	DD	1
	DD	$LN6@Print_Stor@21
$LN6@Print_Stor@21:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@21
$LN5@Print_Stor@21:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z	; Print_StorePixelZLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z PROC	; Print_StorePixelZLinear

; 709  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 710  :   char tempStr[512];
; 711  :   sprintf(tempStr,"st_pz v%lu, (r%lu)",nuance.fields[FIELD_MEM_FROM] >> 2,nuance.fields[FIELD_MEM_TO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shr	eax, 2
	push	eax
	push	OFFSET $SG7545
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H

; 712  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	edx, BYTE PTR _bNewline$[ebp]
	test	edx, edx
	je	SHORT $LN3@Print_Stor@22
	mov	DWORD PTR tv74[ebp], OFFSET $SG7546
	jmp	SHORT $LN4@Print_Stor@22
$LN3@Print_Stor@22:
	mov	DWORD PTR tv74[ebp], OFFSET $SG7547
$LN4@Print_Stor@22:
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	push	OFFSET $SG7548
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H

; 713  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	movzx	ecx, BYTE PTR _bNewline$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	add	eax, ecx

; 714  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@22
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Print_Stor@22:
	DD	1
	DD	$LN6@Print_Stor@22
$LN6@Print_Stor@22:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@22
$LN5@Print_Stor@22:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z ENDP	; Print_StorePixelZLinear
_TEXT	ENDS
PUBLIC	?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelZBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z PROC ; Print_StorePixelZBilinearUV

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 718  :   char tempStr[512];
; 719  :   sprintf(tempStr,"st_pz v%lu, (uv)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7555
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 720  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@23
	mov	DWORD PTR tv72[ebp], OFFSET $SG7556
	jmp	SHORT $LN4@Print_Stor@23
$LN3@Print_Stor@23:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7557
$LN4@Print_Stor@23:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7558
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 721  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 722  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@23
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@23:
	DD	1
	DD	$LN6@Print_Stor@23
$LN6@Print_Stor@23:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@23
$LN5@Print_Stor@23:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StorePixelZBilinearUV
_TEXT	ENDS
PUBLIC	?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z ; Print_StorePixelZBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z PROC ; Print_StorePixelZBilinearXY

; 725  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 726  :   char tempStr[512];
; 727  :   sprintf(tempStr,"st_pz v%lu, (xy)",nuance.fields[FIELD_MEM_FROM] >> 2);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 2
	push	ecx
	push	OFFSET $SG7565
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 728  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@24
	mov	DWORD PTR tv72[ebp], OFFSET $SG7566
	jmp	SHORT $LN4@Print_Stor@24
$LN3@Print_Stor@24:
	mov	DWORD PTR tv72[ebp], OFFSET $SG7567
$LN4@Print_Stor@24:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7568
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 729  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 730  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@24
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Print_Stor@24:
	DD	1
	DD	$LN6@Print_Stor@24
$LN6@Print_Stor@24:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@24
$LN5@Print_Stor@24:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StorePixelZBilinearXY
_TEXT	ENDS
PUBLIC	?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z ; Print_StoreScalarRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv77 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreScalarRegisterConstant

; 733  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 734  :   char tempStr[512];
; 735  :   sprintf(tempStr,"stsc r%lu, $%lX, $%lX $%lX",
; 736  :     nuance.fields[FIELD_CONSTANT_ADDRESS],nuance.fields[FIELD_CONSTANT_VALUE],
; 737  :     nuance.fields[FIELD_CONSTANT_FLAGMASK],nuance.fields[FIELD_CONSTANT_FLAGVALUES]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG7575
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 24					; 00000018H

; 738  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN3@Print_Stor@25
	mov	DWORD PTR tv77[ebp], OFFSET $SG7576
	jmp	SHORT $LN4@Print_Stor@25
$LN3@Print_Stor@25:
	mov	DWORD PTR tv77[ebp], OFFSET $SG7577
$LN4@Print_Stor@25:
	mov	ecx, DWORD PTR tv77[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7578
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 739  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 740  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Print_Stor@25
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@Print_Stor@25:
	DD	1
	DD	$LN6@Print_Stor@25
$LN6@Print_Stor@25:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN5@Print_Stor@25
$LN5@Print_Stor@25:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreScalarRegisterConstant
_TEXT	ENDS
PUBLIC	?GetMiscConstantRegister@@YAPADI@Z		; GetMiscConstantRegister
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_which$ = 8						; size = 4
?GetMiscConstantRegister@@YAPADI@Z PROC			; GetMiscConstantRegister

; 743  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 744  :   switch(which)

	mov	eax, DWORD PTR _which$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 14			; 0000000eH
	ja	SHORT $LN1@GetMiscCon
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN19@GetMiscCon[ecx*4]
$LN14@GetMiscCon:

; 745  :   {
; 746  :     case CONSTANT_REG_RC0:
; 747  :       return "rc0";

	mov	eax, OFFSET $SG7587
	jmp	SHORT $LN17@GetMiscCon

; 748  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN13@GetMiscCon:

; 749  :     case CONSTANT_REG_RC1:
; 750  :       return "rc1";

	mov	eax, OFFSET $SG7589
	jmp	SHORT $LN17@GetMiscCon

; 751  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN12@GetMiscCon:

; 752  :     case CONSTANT_REG_RX:
; 753  :       return "rx";

	mov	eax, OFFSET $SG7591
	jmp	SHORT $LN17@GetMiscCon

; 754  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN11@GetMiscCon:

; 755  :     case CONSTANT_REG_RY:
; 756  :       return "ry";

	mov	eax, OFFSET $SG7593
	jmp	SHORT $LN17@GetMiscCon

; 757  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN10@GetMiscCon:

; 758  :     case CONSTANT_REG_RU:
; 759  :       return "ru";

	mov	eax, OFFSET $SG7595
	jmp	SHORT $LN17@GetMiscCon

; 760  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN9@GetMiscCon:

; 761  :     case CONSTANT_REG_RV:
; 762  :       return "rv";

	mov	eax, OFFSET $SG7597
	jmp	SHORT $LN17@GetMiscCon

; 763  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN8@GetMiscCon:

; 764  :     case CONSTANT_REG_RZ:
; 765  :       return "rz";

	mov	eax, OFFSET $SG7599
	jmp	SHORT $LN17@GetMiscCon

; 766  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN7@GetMiscCon:

; 767  :     case CONSTANT_REG_XYCTL:
; 768  :       return "xyctl";

	mov	eax, OFFSET $SG7601
	jmp	SHORT $LN17@GetMiscCon

; 769  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN6@GetMiscCon:

; 770  :     case CONSTANT_REG_UVCTL:
; 771  :       return "uvctl";

	mov	eax, OFFSET $SG7603
	jmp	SHORT $LN17@GetMiscCon

; 772  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN5@GetMiscCon:

; 773  :     case CONSTANT_REG_XYRANGE:
; 774  :       return "xyrange";

	mov	eax, OFFSET $SG7605
	jmp	SHORT $LN17@GetMiscCon

; 775  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN4@GetMiscCon:

; 776  :     case CONSTANT_REG_UVRANGE:
; 777  :       return "uvrange";

	mov	eax, OFFSET $SG7607
	jmp	SHORT $LN17@GetMiscCon

; 778  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN3@GetMiscCon:

; 779  :     case CONSTANT_REG_ACSHIFT:
; 780  :       return "acshift";

	mov	eax, OFFSET $SG7609
	jmp	SHORT $LN17@GetMiscCon

; 781  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN2@GetMiscCon:

; 782  :     case CONSTANT_REG_SVSHIFT:
; 783  :       return "svshift";

	mov	eax, OFFSET $SG7611
	jmp	SHORT $LN17@GetMiscCon

; 784  :       break;

	jmp	SHORT $LN17@GetMiscCon
$LN1@GetMiscCon:

; 785  :     default:
; 786  :       return "???";

	mov	eax, OFFSET $SG7613
$LN17@GetMiscCon:

; 787  :       break;
; 788  :   }
; 789  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN19@GetMiscCon:
	DD	$LN14@GetMiscCon
	DD	$LN13@GetMiscCon
	DD	$LN12@GetMiscCon
	DD	$LN11@GetMiscCon
	DD	$LN10@GetMiscCon
	DD	$LN9@GetMiscCon
	DD	$LN8@GetMiscCon
	DD	$LN1@GetMiscCon
	DD	$LN1@GetMiscCon
	DD	$LN7@GetMiscCon
	DD	$LN6@GetMiscCon
	DD	$LN5@GetMiscCon
	DD	$LN4@GetMiscCon
	DD	$LN3@GetMiscCon
	DD	$LN2@GetMiscCon
?GetMiscConstantRegister@@YAPADI@Z ENDP			; GetMiscConstantRegister
_TEXT	ENDS
PUBLIC	?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z ; Print_StoreMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv87 = -524						; size = 4
_tempStr$ = -516					; size = 512
_buffer$ = 8						; size = 4
_nuance$ = 12						; size = 4
_bNewline$ = 16						; size = 1
?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z PROC ; Print_StoreMiscRegisterConstant

; 792  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	edi
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 793  :   char tempStr[512];
; 794  :   if(nuance.fields[FIELD_CONSTANT_ADDRESS] != CONSTANT_REG_DISCARD)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 32			; 00000020H
	je	SHORT $LN2@Print_Stor@26

; 795  :   {
; 796  :     sprintf(tempStr,"stsc %s, $%lX, $%lX $%lX",
; 797  :       GetMiscConstantRegister(nuance.fields[FIELD_CONSTANT_ADDRESS]),nuance.fields[FIELD_CONSTANT_VALUE],
; 798  :       nuance.fields[FIELD_CONSTANT_FLAGMASK],nuance.fields[FIELD_CONSTANT_FLAGVALUES]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?GetMiscConstantRegister@@YAPADI@Z	; GetMiscConstantRegister
	add	esp, 4
	push	eax
	push	OFFSET $SG7621
	lea	eax, DWORD PTR _tempStr$[ebp]
	push	eax
	call	_sprintf
	add	esp, 24					; 00000018H

; 799  :   }
; 800  :   else

	jmp	SHORT $LN1@Print_Stor@26
$LN2@Print_Stor@26:

; 801  :   {
; 802  :     sprintf(tempStr,"stfc $%lX $%lX",
; 803  :       nuance.fields[FIELD_CONSTANT_FLAGMASK],nuance.fields[FIELD_CONSTANT_FLAGVALUES]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET $SG7623
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
$LN1@Print_Stor@26:

; 804  :   }
; 805  :   sprintf(buffer,"%s%s",tempStr, bNewline ? "\n" : "");

	movzx	eax, BYTE PTR _bNewline$[ebp]
	test	eax, eax
	je	SHORT $LN5@Print_Stor@26
	mov	DWORD PTR tv87[ebp], OFFSET $SG7624
	jmp	SHORT $LN6@Print_Stor@26
$LN5@Print_Stor@26:
	mov	DWORD PTR tv87[ebp], OFFSET $SG7625
$LN6@Print_Stor@26:
	mov	ecx, DWORD PTR tv87[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempStr$[ebp]
	push	edx
	push	OFFSET $SG7626
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_sprintf
	add	esp, 16					; 00000010H

; 806  :   return strlen(tempStr) + (bNewline ? 1 : 0);

	lea	ecx, DWORD PTR _tempStr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	movzx	edx, BYTE PTR _bNewline$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	eax, edx

; 807  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Print_Stor@26
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN9@Print_Stor@26:
	DD	1
	DD	$LN8@Print_Stor@26
$LN8@Print_Stor@26:
	DD	-516					; fffffdfcH
	DD	512					; 00000200H
	DD	$LN7@Print_Stor@26
$LN7@Print_Stor@26:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z ENDP ; Print_StoreMiscRegisterConstant
_TEXT	ENDS
END

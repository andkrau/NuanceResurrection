; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\OverlayManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0OverlayManager@@QAE@XZ			; OverlayManager::OverlayManager
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\overlaymanager.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_crc$ = -20						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??0OverlayManager@@QAE@XZ PROC				; OverlayManager::OverlayManager
; _this$ = ecx

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 9    :   uint32 i, j, crc;
; 10   : 
; 11   :   numOverlays = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 12   :   currentOverlayIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 13   : 
; 14   :   for (i = 0; i < 256; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@OverlayMan
$LN10@OverlayMan:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN11@OverlayMan:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN9@OverlayMan

; 15   :   {
; 16   :     crc = i << 24;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 24					; 00000018H
	mov	DWORD PTR _crc$[ebp], eax

; 17   :     for (j = 0; j < 8; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN8@OverlayMan
$LN7@OverlayMan:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN8@OverlayMan:
	cmp	DWORD PTR _j$[ebp], 8
	jae	SHORT $LN6@OverlayMan

; 18   :     {
; 19   :       if(crc & 0x80000000)

	mov	edx, DWORD PTR _crc$[ebp]
	and	edx, -2147483648			; 80000000H
	je	SHORT $LN5@OverlayMan

; 20   :       {
; 21   :         crc = (crc << 1) ^ QUOTIENT;

	mov	eax, DWORD PTR _crc$[ebp]
	shl	eax, 1
	xor	eax, 79764919				; 04c11db7H
	mov	DWORD PTR _crc$[ebp], eax

; 22   :       }
; 23   :       else

	jmp	SHORT $LN4@OverlayMan
$LN5@OverlayMan:

; 24   :       {
; 25   :         crc = crc << 1;

	mov	ecx, DWORD PTR _crc$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _crc$[ebp], ecx
$LN4@OverlayMan:

; 26   :       }
; 27   :     }

	jmp	SHORT $LN7@OverlayMan
$LN6@OverlayMan:

; 28   : 
; 29   :     //If host machine is little endian, convert crc to big endian
; 30   : 
; 31   :     SwapScalarBytes(&crc);

	lea	ecx, DWORD PTR _crc$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 32   :     crctab[i] = crc;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _crc$[ebp]
	mov	DWORD PTR [eax+edx*4+8], ecx

; 33   :   }

	jmp	SHORT $LN10@OverlayMan
$LN9@OverlayMan:

; 34   : 
; 35   :   for(i = 0; i < 128; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@OverlayMan
$LN2@OverlayMan:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@OverlayMan:
	cmp	DWORD PTR _i$[ebp], 128			; 00000080H
	jae	SHORT $LN12@OverlayMan

; 36   :   {
; 37   :     overlayHash[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+1032], 0
	jmp	SHORT $LN2@OverlayMan
$LN12@OverlayMan:

; 38   :   }
; 39   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@OverlayMan
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@OverlayMan:
	DD	1
	DD	$LN15@OverlayMan
$LN15@OverlayMan:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@OverlayMan
$LN14@OverlayMan:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
??0OverlayManager@@QAE@XZ ENDP				; OverlayManager::OverlayManager
_TEXT	ENDS
PUBLIC	?Hash@OverlayManager@@QAEIPAI@Z			; OverlayManager::Hash
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_e$ = -12						; size = 4
_result$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
?Hash@OverlayManager@@QAEIPAI@Z PROC			; OverlayManager::Hash
; _this$ = ecx

; 42   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 43   :   uint32 result;
; 44   :   uint32 *e = (uint32 *)(data + overlayLength);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1544]
	mov	edx, DWORD PTR _data$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _e$[ebp], eax

; 45   : 
; 46   :   result = ~*data++;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	edx, DWORD PTR [ecx]
	not	edx
	mov	DWORD PTR _result$[ebp], edx
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, 4
	mov	DWORD PTR _data$[ebp], eax
$LN2@Hash:

; 47   :     
; 48   :   while(data < e)

	mov	ecx, DWORD PTR _data$[ebp]
	cmp	ecx, DWORD PTR _e$[ebp]
	jae	SHORT $LN1@Hash

; 49   :   {
; 50   :     result = crctab[result & 0xff] ^ result >> 8;

	mov	edx, DWORD PTR _result$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _result$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+8]
	mov	DWORD PTR _result$[ebp], eax

; 51   :     result = crctab[result & 0xff] ^ result >> 8;

	mov	edx, DWORD PTR _result$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _result$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+8]
	mov	DWORD PTR _result$[ebp], eax

; 52   :     result = crctab[result & 0xff] ^ result >> 8;

	mov	edx, DWORD PTR _result$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _result$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+8]
	mov	DWORD PTR _result$[ebp], eax

; 53   :     result = crctab[result & 0xff] ^ result >> 8;

	mov	edx, DWORD PTR _result$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _result$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4+8]
	mov	DWORD PTR _result$[ebp], eax

; 54   :     result ^= *data;

	mov	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _result$[ebp]
	xor	eax, DWORD PTR [edx]
	mov	DWORD PTR _result$[ebp], eax

; 55   :     data += 1;

	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx

; 56   :     //data += 128;
; 57   :   }

	jmp	$LN2@Hash
$LN1@Hash:

; 58   :     
; 59   :   return ~result;

	mov	eax, DWORD PTR _result$[ebp]
	not	eax

; 60   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Hash@OverlayManager@@QAEIPAI@Z ENDP			; OverlayManager::Hash
_TEXT	ENDS
PUBLIC	?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z	; OverlayManager::FindOverlay
;	COMDAT ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA
_BSS	SEGMENT
?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA DD 01H DUP (?) ; `OverlayManager::FindOverlay'::`2'::replace
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
_TEXT	SEGMENT
_hash$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_bInvalidate$ = 12					; size = 4
?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z PROC		; OverlayManager::FindOverlay
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 64   :   uint32 i, hash;
; 65   : 
; 66   :   static uint32 replace = 0;
; 67   :   
; 68   :   bInvalidate = false;

	mov	eax, DWORD PTR _bInvalidate$[ebp]
	mov	BYTE PTR [eax], 0

; 69   : 
; 70   :   hash = Hash(buffer);

	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Hash@OverlayManager@@QAEIPAI@Z		; OverlayManager::Hash
	mov	DWORD PTR _hash$[ebp], eax

; 71   : 
; 72   :   for(i = 0; i < numOverlays; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@FindOverla
$LN6@FindOverla:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@FindOverla:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN5@FindOverla

; 73   :   {
; 74   :     if(overlayHash[i] == hash)

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+1032]
	cmp	ecx, DWORD PTR _hash$[ebp]
	jne	SHORT $LN4@FindOverla

; 75   :     {
; 76   :       currentOverlayIndex = i;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+4], eax

; 77   :       return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $LN8@FindOverla
$LN4@FindOverla:

; 78   :     }
; 79   :   }

	jmp	SHORT $LN6@FindOverla
$LN5@FindOverla:

; 80   : 
; 81   :   bInvalidate = true;

	mov	ecx, DWORD PTR _bInvalidate$[ebp]
	mov	BYTE PTR [ecx], 1

; 82   : 
; 83   :   if(numOverlays < 128)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 128			; 00000080H
	jae	SHORT $LN3@FindOverla

; 84   :   {
; 85   :     i = numOverlays++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 86   :   }
; 87   :   else

	jmp	SHORT $LN2@FindOverla
$LN3@FindOverla:

; 88   :   {
; 89   :     i = replace++;

	mov	edx, DWORD PTR ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA
	add	eax, 1
	mov	DWORD PTR ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA, eax

; 90   : 
; 91   :     if(replace >= numOverlays)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN2@FindOverla

; 92   :     {
; 93   :       replace = 0;

	mov	DWORD PTR ?replace@?1??FindOverlay@OverlayManager@@QAEIPAIAA_N@Z@4IA, 0
$LN2@FindOverla:

; 94   :     }
; 95   :   }
; 96   : 
; 97   :   currentOverlayIndex = i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 98   :   overlayHash[i] = hash;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR [eax+edx*4+1032], ecx

; 99   :   return i;

	mov	eax, DWORD PTR _i$[ebp]
$LN8@FindOverla:

; 100  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z ENDP		; OverlayManager::FindOverlay
_TEXT	ENDS
END

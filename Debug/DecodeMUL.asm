; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\DecodeMUL.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL16
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\decodemul.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_field_1F$ = -12					; size = 4
_field_3E0$ = -8					; size = 4
_this$ = -4						; size = 4
_iPtr$ = 8						; size = 4
_entry$ = 12						; size = 4
_immExt$ = 16						; size = 4
?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z PROC ; MPE::DecodeInstruction_MUL16
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 16   :   uint32 field_3E0 = ((*iPtr & 0x03) << 3) | (*(iPtr + 1) >> 5);

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 3
	shl	ecx, 3
	mov	edx, DWORD PTR _iPtr$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	sar	eax, 5
	or	ecx, eax
	mov	DWORD PTR _field_3E0$[ebp], ecx

; 17   :   uint32 field_1F = *(iPtr + 1) & 0x1F;

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _field_1F$[ebp], edx

; 18   : 
; 19   :   entry->packetInfo |= PACKETINFO_MUL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 20   :   
; 21   :   if(*iPtr & 0x04)

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 4
	je	$LN2@DecodeInst

; 22   :   {
; 23   :     //mul_sv Vi, Vk, >>svshift, Vk
; 24   :     entry->packetInfo |= mulsvFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 25   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVVectorShiftSvshift;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 137		; 00000089H

; 26   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F & 0x1C;

	mov	eax, DWORD PTR _field_1F$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+156], eax

; 27   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = (field_3E0 & 0x1C);

	mov	edx, DWORD PTR _field_3E0$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+160], edx

; 28   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = (field_3E0 & 0x1C);

	mov	ecx, DWORD PTR _field_3E0$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 29   :     entry->scalarInputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E0 & 0x1C) | VECTOR_REG_DEPENDENCY_MASK(field_1F & 0x1C);

	mov	ecx, DWORD PTR _field_3E0$[ebp]
	and	ecx, 28					; 0000001cH
	mov	eax, 15					; 0000000fH
	shl	eax, cl
	mov	ecx, DWORD PTR _field_1F$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, 15					; 0000000fH
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 30   :     entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 16384		; 00004000H

; 31   :     entry->scalarOutputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E0 & 0x1C);

	mov	ecx, DWORD PTR _field_3E0$[ebp]
	and	ecx, 28					; 0000001cH
	mov	eax, 15					; 0000000fH
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+240], eax

; 32   :   }
; 33   :   else

	jmp	$LN3@DecodeInst
$LN2@DecodeInst:

; 34   :   {
; 35   :     //mul Si, Sk, >>acshift, Sk
; 36   :     entry->packetInfo |= mulFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 37   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULScalarShiftAcshift;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 121		; 00000079H

; 38   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+156], ecx

; 39   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E0;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E0$[ebp]
	mov	DWORD PTR [edx+160], eax

; 40   :     entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_3E0;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_3E0$[ebp]
	mov	DWORD PTR [ecx+164], edx

; 41   :     entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E0) | SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_3E0$[ebp]
	shl	eax, cl
	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 42   :     entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_ACSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 8192		; 00002000H

; 43   :     entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E0);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_3E0$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+240], eax

; 44   :     entry->miscOutputDependencies[SLOT_MUL] = DEPENDENCY_FLAG_MV;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+260], 524288		; 00080000H
$LN3@DecodeInst:

; 45   :   }
; 46   : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ENDP ; MPE::DecodeInstruction_MUL16
_TEXT	ENDS
PUBLIC	?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv91 = -28						; size = 4
_field_1F$ = -24					; size = 4
_field_60$ = -20					; size = 4
_field_7F$ = -16					; size = 4
_field_1F0000$ = -12					; size = 4
_field_3E00000$ = -8					; size = 4
_this$ = -4						; size = 4
_iPtr$ = 8						; size = 4
_entry$ = 12						; size = 4
_immExt$ = 16						; size = 4
?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z PROC ; MPE::DecodeInstruction_MUL32
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 50   :   uint32 field_3E00000 = ((*iPtr & 0x03) << 3) | ((*(iPtr + 1) & 0xE0) >> 5);

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 3
	shl	ecx, 3
	mov	edx, DWORD PTR _iPtr$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	and	eax, 224				; 000000e0H
	sar	eax, 5
	or	ecx, eax
	mov	DWORD PTR _field_3E00000$[ebp], ecx

; 51   :   uint32 field_1F0000 = *(iPtr + 1) & 0x1F;

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _field_1F0000$[ebp], edx

; 52   :   uint32 field_7F = *(iPtr + 3) & 0x7F;

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	and	ecx, 127				; 0000007fH
	mov	DWORD PTR _field_7F$[ebp], ecx

; 53   :   uint32 field_60 = (*(iPtr + 3) & 0x60) >> 5;

	mov	edx, DWORD PTR _iPtr$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	and	eax, 96					; 00000060H
	sar	eax, 5
	mov	DWORD PTR _field_60$[ebp], eax

; 54   :   uint32 field_1F = *(iPtr + 3) & 0x1F;

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _field_1F$[ebp], edx

; 55   : 
; 56   :   entry->packetInfo |= PACKETINFO_MUL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 57   : 
; 58   :   switch(*(iPtr + 2) & 0x0F)

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR tv91[ebp], ecx
	cmp	DWORD PTR tv91[ebp], 15			; 0000000fH
	ja	$LN49@DecodeInst@2
	mov	edx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN51@DecodeInst@2[edx*4]
$LN46@DecodeInst@2:

; 59   :   {
; 60   :     case 0x00:
; 61   :       //mul Si, Sj, >>acshift, Sk or mul Si, Sk, >>#m, Sk
; 62   :       entry->packetInfo |= mulFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 63   :       if(*(iPtr + 3) & 0x80)

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	and	ecx, 128				; 00000080H
	je	$LN45@DecodeInst@2

; 64   :       {
; 65   :         //mul Si, Sk, >>#m, Sk
; 66   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 67   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 68   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_3E00000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 69   : 
; 70   :         if((field_7F & 0x40) == 0)

	mov	edx, DWORD PTR _field_7F$[ebp]
	and	edx, 64					; 00000040H
	jne	SHORT $LN44@DecodeInst@2

; 71   :         {
; 72   :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULScalarShiftRightImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 122		; 0000007aH

; 73   :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_7F;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_7F$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 74   :         }
; 75   :         else

	jmp	SHORT $LN43@DecodeInst@2
$LN44@DecodeInst@2:

; 76   :         {
; 77   :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULScalarShiftLeftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 123		; 0000007bH

; 78   :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = 128 - field_7F;

	mov	ecx, 128				; 00000080H
	sub	ecx, DWORD PTR _field_7F$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+152], ecx
$LN43@DecodeInst@2:

; 79   :         }
; 80   : 
; 81   :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 82   :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 83   :       }
; 84   :       else

	jmp	SHORT $LN42@DecodeInst@2
$LN45@DecodeInst@2:

; 85   :       {
; 86   :         //mul Si, Sj, >>acshift, Sk
; 87   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULScalarShiftAcshift;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 121		; 00000079H

; 88   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 89   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 90   :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 91   :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 92   :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_ACSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 8192		; 00002000H

; 93   :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+240], eax
$LN42@DecodeInst@2:

; 94   :       }
; 95   :       entry->miscOutputDependencies[SLOT_MUL] = DEPENDENCY_FLAG_MV;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+260], 524288		; 00080000H

; 96   :       return;

	jmp	$LN49@DecodeInst@2
$LN41@DecodeInst@2:

; 97   :     case 0x01:
; 98   :       //mul Si, Sk, >>Sq, Sk or mul #n, Sj, >>acshift, Sk
; 99   :       entry->packetInfo |= mulFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 100  :       if(*(iPtr + 3) & 0x80)

	mov	eax, DWORD PTR _iPtr$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	and	ecx, 128				; 00000080H
	je	SHORT $LN40@DecodeInst@2

; 101  :       {
; 102  :         //mul #n, Sj, >>acshift, Sk
; 103  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULImmediateShiftAcshift;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 124		; 0000007cH

; 104  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [eax+156], ecx

; 105  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+160], eax

; 106  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [ecx+164], edx

; 107  :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 108  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_ACSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 8192		; 00002000H

; 109  :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+240], eax

; 110  :       }
; 111  :       else

	jmp	SHORT $LN39@DecodeInst@2
$LN40@DecodeInst@2:

; 112  :       {
; 113  :         //mul Si, Sk, >>Sq, Sk
; 114  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULScalarShiftScalar;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 125		; 0000007dH

; 115  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [eax+156], ecx

; 116  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+160], eax

; 117  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_3E00000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [ecx+164], edx

; 118  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+152], ecx

; 119  :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F0000) | SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 120  :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx
$LN39@DecodeInst@2:

; 121  :       }
; 122  :       entry->miscOutputDependencies[SLOT_MUL] = DEPENDENCY_FLAG_MV;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+260], 524288		; 00080000H

; 123  :       return;

	jmp	$LN49@DecodeInst@2
$LN38@DecodeInst@2:

; 124  :     case 0x02:
; 125  :       //mul #n, Sk, >>#m, Sk or mul #n, Sk, >>Sq, Sk
; 126  :       entry->packetInfo |= mulFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 127  :       if(*(iPtr + 3) & 0x80)

	mov	edx, DWORD PTR _iPtr$[ebp]
	movzx	eax, BYTE PTR [edx+3]
	and	eax, 128				; 00000080H
	je	SHORT $LN37@DecodeInst@2

; 128  :       {
; 129  :         //mul #n, Sk, >>Sq, Sk
; 130  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULImmediateShiftScalar;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 126		; 0000007eH

; 131  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 132  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 133  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_3E00000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 134  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_1F;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [edx+152], eax

; 135  :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 136  :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 137  :       }
; 138  :       else

	jmp	$LN36@DecodeInst@2
$LN37@DecodeInst@2:

; 139  :       {
; 140  :         //mul #n, Sk, >>#m, Sk
; 141  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [ecx+156], edx

; 142  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [eax+160], ecx

; 143  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+164], eax

; 144  :         if((field_7F & 0x40) == 0)

	mov	ecx, DWORD PTR _field_7F$[ebp]
	and	ecx, 64					; 00000040H
	jne	SHORT $LN35@DecodeInst@2

; 145  :         {
; 146  :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULImmediateShiftRightImmediate;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 127		; 0000007fH

; 147  :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_7F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_7F$[ebp]
	mov	DWORD PTR [eax+152], ecx

; 148  :         }
; 149  :         else

	jmp	SHORT $LN34@DecodeInst@2
$LN35@DecodeInst@2:

; 150  :         {
; 151  :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MULImmediateShiftLeftImmediate;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 128		; 00000080H

; 152  :           entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = 128 - field_7F;

	mov	eax, 128				; 00000080H
	sub	eax, DWORD PTR _field_7F$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+152], eax
$LN34@DecodeInst@2:

; 153  :         }
; 154  :         entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+200], edx

; 155  :         entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx
$LN36@DecodeInst@2:

; 156  :       }
; 157  :       entry->miscOutputDependencies[SLOT_MUL] = DEPENDENCY_FLAG_MV;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+260], 524288		; 00080000H

; 158  :       return;

	jmp	$LN49@DecodeInst@2

; 159  :     case 0x03:
; 160  :       //no instructions
; 161  :       break;

	jmp	$LN49@DecodeInst@2
$LN32@DecodeInst@2:

; 162  :     case 0x04:
; 163  :       entry->packetInfo |= mulsvFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 164  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 165  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000 & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+160], ecx

; 166  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	eax, DWORD PTR _field_1F$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+164], eax

; 167  :       entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | VECTOR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 168  :       entry->scalarOutputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 169  : 
; 170  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN31@DecodeInst@2

; 171  :       {
; 172  :         //mul_sv Si, Vj, >>m, Vk
; 173  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVScalarShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 130		; 00000082H

; 174  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 175  :       }
; 176  :       else

	jmp	SHORT $LN30@DecodeInst@2
$LN31@DecodeInst@2:

; 177  :       {
; 178  :         //mul_sv Si, Vj, >>svshift, Vk
; 179  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVScalarShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 131		; 00000083H

; 180  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN30@DecodeInst@2:

; 181  :       }
; 182  :       return;

	jmp	$LN49@DecodeInst@2
$LN29@DecodeInst@2:

; 183  :     case 0x05:
; 184  :       entry->packetInfo |= mulsvFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 185  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	edx, DWORD PTR _field_3E00000$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+160], edx

; 186  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 187  :       entry->scalarInputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 188  :       entry->scalarOutputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 189  : 
; 190  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN28@DecodeInst@2

; 191  :       {
; 192  :         //mul_sv ru, Vj, >>m, Vk
; 193  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVRuShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 132		; 00000084H

; 194  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 195  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RU | DEPENDENCY_MASK_UVCTL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+220], 1040		; 00000410H

; 196  :       }
; 197  :       else

	jmp	SHORT $LN27@DecodeInst@2
$LN28@DecodeInst@2:

; 198  :       {
; 199  :         //mul_sv ru, Vj, >>svshift, Vk
; 200  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVRuShiftSvshift;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 133		; 00000085H

; 201  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RU | DEPENDENCY_MASK_UVCTL | DEPENDENCY_MASK_SVSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 17424		; 00004410H
$LN27@DecodeInst@2:

; 202  :       }
; 203  :       return;

	jmp	$LN49@DecodeInst@2
$LN26@DecodeInst@2:

; 204  :     case 0x06:
; 205  :       entry->packetInfo |= mulsvFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 206  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	eax, DWORD PTR _field_3E00000$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+160], eax

; 207  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	edx, DWORD PTR _field_1F$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+164], edx

; 208  :       entry->scalarInputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+200], edx

; 209  :       entry->scalarOutputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 210  : 
; 211  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN25@DecodeInst@2

; 212  :       {
; 213  :         //mul_sv rv, Vj, >>#m, Vk
; 214  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVRvShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 134		; 00000086H

; 215  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 216  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RV | DEPENDENCY_MASK_UVCTL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+220], 1056		; 00000420H

; 217  :       }
; 218  :       else

	jmp	SHORT $LN24@DecodeInst@2
$LN25@DecodeInst@2:

; 219  :       {
; 220  :         //mul_sv rv, Vj, >>svshift, Vk
; 221  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVRvShiftSvshift;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 135		; 00000087H

; 222  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RV | DEPENDENCY_MASK_UVCTL | DEPENDENCY_MASK_SVSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 17440		; 00004420H
$LN24@DecodeInst@2:

; 223  :       }
; 224  :       return;

	jmp	$LN49@DecodeInst@2
$LN23@DecodeInst@2:

; 225  :     case 0x07:
; 226  :       entry->packetInfo |= mulsvFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 227  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000 & 0x1CUL;

	mov	eax, DWORD PTR _field_1F0000$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+156], eax

; 228  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	edx, DWORD PTR _field_3E00000$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+160], edx

; 229  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 230  :       entry->scalarInputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E00000) | VECTOR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 231  :       entry->scalarOutputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 232  : 
; 233  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN22@DecodeInst@2

; 234  :       {
; 235  :         //mul_sv Vi, Vj, >>m, Vk
; 236  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVVectorShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 136		; 00000088H

; 237  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 238  :       }
; 239  :       else

	jmp	SHORT $LN21@DecodeInst@2
$LN22@DecodeInst@2:

; 240  :       {
; 241  :         //mul_sv Vi, Vj, >>svshift, Vk
; 242  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_SVVectorShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 137		; 00000089H

; 243  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN21@DecodeInst@2:

; 244  :       }
; 245  :       return;

	jmp	$LN49@DecodeInst@2
$LN20@DecodeInst@2:

; 246  :     case 0x08:
; 247  :       //mul_p Si, Vj, >>svshift, Vk or mul_p Si, Vj, >>m, Vk
; 248  :       entry->packetInfo |= mulpFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 249  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 250  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000 & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+160], ecx

; 251  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	eax, DWORD PTR _field_1F$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+164], eax

; 252  :       entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | PIXEL_REG_DEPENDENCY_MASK(field_1F0000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 7
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 253  :       entry->scalarOutputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 7
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 254  : 
; 255  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN19@DecodeInst@2

; 256  :       {
; 257  :         //mul_p Si, Vj, >>#m, Vk
; 258  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PScalarShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 139		; 0000008bH

; 259  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 260  :       }
; 261  :       else

	jmp	SHORT $LN18@DecodeInst@2
$LN19@DecodeInst@2:

; 262  :       {
; 263  :         //mul_p Si, Vj, >>svshift, Vk
; 264  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PScalarShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 140		; 0000008cH

; 265  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN18@DecodeInst@2:

; 266  :       }
; 267  :       return;

	jmp	$LN49@DecodeInst@2
$LN17@DecodeInst@2:

; 268  :     case 0x09:
; 269  :       //mul_p ru, Vj, >>svshift, Vk or mul_p ru, Vj, >>#m, Vk
; 270  :       entry->packetInfo |= mulpFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 271  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	edx, DWORD PTR _field_3E00000$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+160], edx

; 272  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 273  :       entry->scalarInputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_3E00000);

	mov	eax, 7
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 274  :       entry->scalarOutputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 7
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 275  : 
; 276  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN16@DecodeInst@2

; 277  :       {
; 278  :         //mul_p ru, Vj, >>m, Vk
; 279  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PRuShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 141		; 0000008dH

; 280  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 281  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RU | DEPENDENCY_MASK_UVCTL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+220], 1040		; 00000410H

; 282  :       }
; 283  :       else

	jmp	SHORT $LN15@DecodeInst@2
$LN16@DecodeInst@2:

; 284  :       {
; 285  :         //mul_p ru, Vj, >>svshift, Vk
; 286  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PRuShiftSvshift;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 142		; 0000008eH

; 287  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RU | DEPENDENCY_MASK_UVCTL | DEPENDENCY_MASK_SVSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 17424		; 00004410H
$LN15@DecodeInst@2:

; 288  :       }
; 289  :       return;

	jmp	$LN49@DecodeInst@2
$LN14@DecodeInst@2:

; 290  :     case 0x0A:
; 291  :       //mul_p rv, Vj, >>svshift, Vk or mul_p rv, Vj, >>m, Vk
; 292  :       entry->packetInfo |= mulpFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 293  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	eax, DWORD PTR _field_3E00000$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+160], eax

; 294  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	edx, DWORD PTR _field_1F$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+164], edx

; 295  :       entry->scalarInputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_3E00000);

	mov	edx, 7
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+200], edx

; 296  :       entry->scalarOutputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 7
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 297  : 
; 298  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN13@DecodeInst@2

; 299  :       {
; 300  :         //mul_p rv, Vj, >>m, Vk
; 301  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PRvShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 143		; 0000008fH

; 302  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 303  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RV | DEPENDENCY_MASK_UVCTL;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+220], 1056		; 00000420H

; 304  :       }
; 305  :       else

	jmp	SHORT $LN12@DecodeInst@2
$LN13@DecodeInst@2:

; 306  :       {
; 307  :         //mul_p rv, Vj, >>svshift, Vk
; 308  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PRvShiftSvshift;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 144		; 00000090H

; 309  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_RV | DEPENDENCY_MASK_UVCTL | DEPENDENCY_MASK_SVSHIFT;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+220], 17440		; 00004420H
$LN12@DecodeInst@2:

; 310  :       }
; 311  :       return;

	jmp	$LN49@DecodeInst@2
$LN11@DecodeInst@2:

; 312  :     case 0x0B:
; 313  :       //mul_p Vi, Vj, >>svshift, Vk or mul_p Vi, Vj, >>m, Vk
; 314  :       entry->packetInfo |= mulpFlags;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 315  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_1F0000 & 0x1CUL;

	mov	eax, DWORD PTR _field_1F0000$[ebp]
	and	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+156], eax

; 316  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_3E00000 & 0x1CUL;

	mov	edx, DWORD PTR _field_3E00000$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+160], edx

; 317  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 318  :       entry->scalarInputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_3E00000) | PIXEL_REG_DEPENDENCY_MASK(field_1F0000);

	mov	eax, 7
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	edx, 7
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 319  :       entry->scalarOutputDependencies[SLOT_MUL] = PIXEL_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 7
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 320  : 
; 321  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN10@DecodeInst@2

; 322  :       {
; 323  :         //mul_p Vi, Vj, >>m, Vk
; 324  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PVectorShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 145		; 00000091H

; 325  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 326  :       }
; 327  :       else

	jmp	SHORT $LN9@DecodeInst@2
$LN10@DecodeInst@2:

; 328  :       {
; 329  :         //mul_p Vi, Vj, >>svshift, Vk
; 330  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_MUL_PVectorShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 146		; 00000092H

; 331  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN9@DecodeInst@2:

; 332  :       }
; 333  :       return;

	jmp	$LN49@DecodeInst@2
$LN8@DecodeInst@2:

; 334  :     case 0x0C:
; 335  :       //dotp Si, Vj, >>svshift, Sk or dotp Si, Vj, >>#m, Sk
; 336  :       entry->packetInfo |= dotpFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 337  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 338  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000 & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+160], ecx

; 339  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 340  :       entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | VECTOR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 341  :       entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 342  : 
; 343  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN7@DecodeInst@2

; 344  :       {
; 345  :         //dotp Si, Vj, >>#m, Sk
; 346  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_DOTPScalarShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 147		; 00000093H

; 347  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 348  :       }
; 349  :       else

	jmp	SHORT $LN6@DecodeInst@2
$LN7@DecodeInst@2:

; 350  :       {
; 351  :         //dotp Si, Vj, >>svshift, Sk
; 352  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_DOTPScalarShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 148		; 00000094H

; 353  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN6@DecodeInst@2:

; 354  :       }
; 355  :       return;

	jmp	$LN49@DecodeInst@2
$LN5@DecodeInst@2:

; 356  :     case 0x0D:
; 357  :       //dotp Vi, Vj, >>svshift, Sk or dotp Vi, Vj, >>#m, Sk
; 358  :       entry->packetInfo |= dotpFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 359  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000 & 0x1CUL;

	mov	edx, DWORD PTR _field_3E00000$[ebp]
	and	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+156], edx

; 360  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000 & 0x1CUL;

	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+160], ecx

; 361  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 362  :       entry->scalarInputDependencies[SLOT_MUL] = VECTOR_REG_DEPENDENCY_MASK(field_3E00000 & 0x1CUL) | VECTOR_REG_DEPENDENCY_MASK(field_1F0000 & 0x1CUL);

	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	edx, 15					; 0000000fH
	shl	edx, cl
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	and	ecx, 28					; 0000001cH
	mov	eax, 15					; 0000000fH
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 363  :       entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 364  : 
; 365  :       if(*(iPtr + 3) & 0x80)

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	and	edx, 128				; 00000080H
	je	SHORT $LN4@DecodeInst@2

; 366  :       {
; 367  :         //dotp Vi, Vj, >>#m, Sk
; 368  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_DOTPVectorShiftImmediate;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 149		; 00000095H

; 369  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_INFO)] = field_60;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_60$[ebp]
	mov	DWORD PTR [ecx+152], edx

; 370  :       }
; 371  :       else

	jmp	SHORT $LN3@DecodeInst@2
$LN4@DecodeInst@2:

; 372  :       {
; 373  :         //dotp Vi, Vj, >>svshift, Sk
; 374  :         entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_DOTPVectorShiftSvshift;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+148], 150		; 00000096H

; 375  :         entry->miscInputDependencies[SLOT_MUL] = DEPENDENCY_MASK_SVSHIFT;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+220], 16384		; 00004000H
$LN3@DecodeInst@2:

; 376  :       }
; 377  :       return;

	jmp	$LN49@DecodeInst@2
$LN2@DecodeInst@2:

; 378  :     case 0x0E:
; 379  :       //addm
; 380  :       entry->packetInfo |= addmFlags;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 381  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_ADDM;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [edx+148], 117		; 00000075H

; 382  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [eax+156], ecx

; 383  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [edx+160], eax

; 384  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [ecx+164], edx

; 385  :       entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	eax, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	eax, cl
	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	edx, cl
	or	eax, edx
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 386  :       entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx

; 387  :       return;

	jmp	SHORT $LN49@DecodeInst@2
$LN1@DecodeInst@2:

; 388  :     case 0x0F:
; 389  :       //subm
; 390  :       entry->packetInfo |= submFlags;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax

; 391  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_HANDLER)] = Handler_SUBM;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+148], 119		; 00000077H

; 392  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC1)] = field_3E00000;

	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _field_3E00000$[ebp]
	mov	DWORD PTR [edx+156], eax

; 393  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_SRC2)] = field_1F0000;

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _field_1F0000$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 394  :       entry->nuances[FIXED_FIELD(SLOT_MUL,FIELD_MUL_DEST)] = field_1F;

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR _field_1F$[ebp]
	mov	DWORD PTR [eax+164], ecx

; 395  :       entry->scalarInputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_3E00000) | SCALAR_REG_DEPENDENCY_MASK(field_1F0000);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_3E00000$[ebp]
	shl	edx, cl
	mov	eax, 1
	mov	ecx, DWORD PTR _field_1F0000$[ebp]
	shl	eax, cl
	or	edx, eax
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+200], edx

; 396  :       entry->scalarOutputDependencies[SLOT_MUL] = SCALAR_REG_DEPENDENCY_MASK(field_1F);

	mov	edx, 1
	mov	ecx, DWORD PTR _field_1F$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [eax+240], edx
$LN49@DecodeInst@2:

; 397  :       return;
; 398  :   }
; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN51@DecodeInst@2:
	DD	$LN46@DecodeInst@2
	DD	$LN41@DecodeInst@2
	DD	$LN38@DecodeInst@2
	DD	$LN49@DecodeInst@2
	DD	$LN32@DecodeInst@2
	DD	$LN29@DecodeInst@2
	DD	$LN26@DecodeInst@2
	DD	$LN23@DecodeInst@2
	DD	$LN20@DecodeInst@2
	DD	$LN17@DecodeInst@2
	DD	$LN14@DecodeInst@2
	DD	$LN11@DecodeInst@2
	DD	$LN8@DecodeInst@2
	DD	$LN5@DecodeInst@2
	DD	$LN2@DecodeInst@2
	DD	$LN1@DecodeInst@2
?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ENDP ; MPE::DecodeInstruction_MUL32
_TEXT	ENDS
END

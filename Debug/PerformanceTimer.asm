; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\PerformanceTimer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?counterEnd@@3T_LARGE_INTEGER@@A		; counterEnd
PUBLIC	?counterStart@@3T_LARGE_INTEGER@@A		; counterStart
PUBLIC	?tickFrequency@@3T_LARGE_INTEGER@@A		; tickFrequency
PUBLIC	?dummyCounter@@3T_LARGE_INTEGER@@A		; dummyCounter
_BSS	SEGMENT
?counterEnd@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)		; counterEnd
?counterStart@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)	; counterStart
?tickFrequency@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)	; tickFrequency
?dummyCounter@@3T_LARGE_INTEGER@@A DQ 01H DUP (?)	; dummyCounter
_BSS	ENDS
PUBLIC	__real@408f400000000000
PUBLIC	?GetTimeDeltaMs@@YANXZ				; GetTimeDeltaMs
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@408f400000000000
; File c:\nuanceexperimental\performancetimer.cpp
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv79 = -8						; size = 8
?GetTimeDeltaMs@@YANXZ PROC				; GetTimeDeltaMs

; 6    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 7    :   QueryPerformanceFrequency(&tickFrequency);

	mov	esi, esp
	push	OFFSET ?tickFrequency@@3T_LARGE_INTEGER@@A ; tickFrequency
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 8    :   return (((double)(counterEnd.QuadPart - counterStart.QuadPart)) * 1000) / tickFrequency.QuadPart;

	mov	eax, DWORD PTR ?counterEnd@@3T_LARGE_INTEGER@@A
	sub	eax, DWORD PTR ?counterStart@@3T_LARGE_INTEGER@@A
	mov	ecx, DWORD PTR ?counterEnd@@3T_LARGE_INTEGER@@A+4
	sbb	ecx, DWORD PTR ?counterStart@@3T_LARGE_INTEGER@@A+4
	mov	DWORD PTR tv79[ebp], eax
	mov	DWORD PTR tv79[ebp+4], ecx
	fild	QWORD PTR tv79[ebp]
	fmul	QWORD PTR __real@408f400000000000
	fild	QWORD PTR ?tickFrequency@@3T_LARGE_INTEGER@@A ; tickFrequency
	fdivp	ST(1), ST(0)

; 9    : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTimeDeltaMs@@YANXZ ENDP				; GetTimeDeltaMs
_TEXT	ENDS
PUBLIC	?StartPerformanceTimer@@YAXXZ			; StartPerformanceTimer
EXTRN	__imp__QueryPerformanceCounter@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?StartPerformanceTimer@@YAXXZ PROC			; StartPerformanceTimer

; 12   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 13   :   QueryPerformanceCounter(&counterStart);

	mov	esi, esp
	push	OFFSET ?counterStart@@3T_LARGE_INTEGER@@A ; counterStart
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?StartPerformanceTimer@@YAXXZ ENDP			; StartPerformanceTimer
_TEXT	ENDS
PUBLIC	?StopPerformanceTimer@@YAXXZ			; StopPerformanceTimer
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?StopPerformanceTimer@@YAXXZ PROC			; StopPerformanceTimer

; 17   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 18   :   QueryPerformanceCounter(&counterEnd);

	mov	esi, esp
	push	OFFSET ?counterEnd@@3T_LARGE_INTEGER@@A	; counterEnd
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 19   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?StopPerformanceTimer@@YAXXZ ENDP			; StopPerformanceTimer
_TEXT	ENDS
PUBLIC	?GetPerformanceTimerOverheadMs@@YANXZ		; GetPerformanceTimerOverheadMs
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv88 = -8						; size = 8
?GetPerformanceTimerOverheadMs@@YANXZ PROC		; GetPerformanceTimerOverheadMs

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 23   :   QueryPerformanceCounter(&counterStart);

	mov	esi, esp
	push	OFFSET ?counterStart@@3T_LARGE_INTEGER@@A ; counterStart
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 24   :   QueryPerformanceCounter(&dummyCounter);

	mov	esi, esp
	push	OFFSET ?dummyCounter@@3T_LARGE_INTEGER@@A ; dummyCounter
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 25   :   QueryPerformanceCounter(&counterEnd);

	mov	esi, esp
	push	OFFSET ?counterEnd@@3T_LARGE_INTEGER@@A	; counterEnd
	call	DWORD PTR __imp__QueryPerformanceCounter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 26   :   QueryPerformanceFrequency(&tickFrequency);

	mov	esi, esp
	push	OFFSET ?tickFrequency@@3T_LARGE_INTEGER@@A ; tickFrequency
	call	DWORD PTR __imp__QueryPerformanceFrequency@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   :   return (((double)(counterEnd.QuadPart - counterStart.QuadPart)) * 1000) / tickFrequency.QuadPart;

	mov	eax, DWORD PTR ?counterEnd@@3T_LARGE_INTEGER@@A
	sub	eax, DWORD PTR ?counterStart@@3T_LARGE_INTEGER@@A
	mov	ecx, DWORD PTR ?counterEnd@@3T_LARGE_INTEGER@@A+4
	sbb	ecx, DWORD PTR ?counterStart@@3T_LARGE_INTEGER@@A+4
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR tv88[ebp+4], ecx
	fild	QWORD PTR tv88[ebp]
	fmul	QWORD PTR __real@408f400000000000
	fild	QWORD PTR ?tickFrequency@@3T_LARGE_INTEGER@@A ; tickFrequency
	fdivp	ST(1), ST(0)

; 28   : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPerformanceTimerOverheadMs@@YANXZ ENDP		; GetPerformanceTimerOverheadMs
_TEXT	ENDS
END

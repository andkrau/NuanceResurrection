; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitMEM.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG12350
_DATA	ENDS
CONST	SEGMENT
$SG12350 DB	'bad allocation', 00H
CONST	ENDS
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
PUBLIC	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
PUBLIC	?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_Mirror
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
EXTRN	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ROLRR
EXTRN	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ORRR
EXTRN	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHLIR
EXTRN	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHRIR
EXTRN	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ANDIR
EXTRN	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_MOVRR
EXTRN	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_MOVIR
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitmem.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_Mirror

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 22   :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 23   :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 24   :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 25   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 26   :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 27   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 28   : 
; 29   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN2@Emit_Mirro

; 30   :   {
; 31   :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 32   :     vars->codeCache->X86Emit_MOVIR(16, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 33   :     vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 34   :     vars->codeCache->X86Emit_ANDIR(0xAAAAAAAA, x86Reg_eax);

	push	16					; 00000010H
	push	-1431655766				; aaaaaaaaH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 35   :     vars->codeCache->X86Emit_ANDIR(0x55555555, x86Reg_ebx);

	push	19					; 00000013H
	push	1431655765				; 55555555H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 36   :     vars->codeCache->X86Emit_SHRIR(x86Reg_eax, 1);

	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 37   :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, 1);

	push	1
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 38   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 39   : 
; 40   :     vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 41   :     vars->codeCache->X86Emit_ANDIR(0xCCCCCCCC, x86Reg_eax);

	push	16					; 00000010H
	push	-858993460				; ccccccccH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 42   :     vars->codeCache->X86Emit_ANDIR(0x33333333, x86Reg_ebx);

	push	19					; 00000013H
	push	858993459				; 33333333H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 43   :     vars->codeCache->X86Emit_SHRIR(x86Reg_eax, 2);

	push	2
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 44   :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, 2);

	push	2
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 45   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 46   : 
; 47   :     vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 48   :     vars->codeCache->X86Emit_ANDIR(0xF0F0F0F0, x86Reg_eax);

	push	16					; 00000010H
	push	-252645136				; f0f0f0f0H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 49   :     vars->codeCache->X86Emit_ANDIR(0x0F0F0F0F, x86Reg_ebx);

	push	19					; 00000013H
	push	252645135				; 0f0f0f0fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 50   :     vars->codeCache->X86Emit_SHRIR(x86Reg_eax, 4);

	push	4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 51   :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, 4);

	push	4
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 52   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 53   : 
; 54   :     vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 55   :     vars->codeCache->X86Emit_ANDIR(0xFF00FF00, x86Reg_eax);

	push	16					; 00000010H
	push	-16711936				; ff00ff00H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 56   :     vars->codeCache->X86Emit_ANDIR(0x00FF00FF, x86Reg_ebx);

	push	19					; 00000013H
	push	16711935				; 00ff00ffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 57   :     vars->codeCache->X86Emit_SHRIR(x86Reg_eax, 8);

	push	8
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 58   :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, 8);

	push	8
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 59   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 60   : 
; 61   :     vars->codeCache->X86Emit_ROLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 62   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_Mirro:

; 63   :   }
; 64   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_Mirror
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegReadBaseReg, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if(vars->scalarRegDep & SCALAR_REG_DEPENDENCY_MASK(regIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _regIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+28]
	je	SHORT $LN2@GetScalarR

; 37   :   {
; 38   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN3@GetScalarR

; 39   :   }
; 40   :   else

	jmp	SHORT $LN3@GetScalarR
$LN2@GetScalarR:

; 41   :   {
; 42   :     return x86BaseReg_esi;

	mov	eax, 6
$LN3@GetScalarR:

; 43   :   }
; 44   : }

	pop	ebp
	ret	0
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegWriteBaseReg, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   :   return x86BaseReg_esi;

	mov	eax, 6

; 49   : }

	pop	ebp
	ret	0
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MV_SImmediate
EXTRN	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVIM
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmem.cpp
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MV_SImmediate

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 68   :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 69   :   uint32 imm = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _imm$[ebp], eax

; 70   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 71   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 72   : 
; 73   :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_MV_SI

; 74   :   {
; 75   :     vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM
$LN2@Emit_MV_SI:

; 76   :   }
; 77   : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MV_SImmediate
_TEXT	ENDS
PUBLIC	?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MV_SScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MV_SScalar

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 81   :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 82   :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 83   :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 84   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 85   :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 86   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 87   : 
; 88   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@Emit_MV_SS

; 89   :   {
; 90   :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 91   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_MV_SS:

; 92   :   }
; 93   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MV_SScalar
_TEXT	ENDS
PUBLIC	?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MV_V
EXTRN	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQRM
EXTRN	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -36					; size = 4
_src1RegDisp$ = -32					; size = 4
_destRegWriteBaseReg$ = -28				; size = 4
_src1RegReadBaseReg_3$ = -24				; size = 4
_src1RegReadBaseReg_2$ = -20				; size = 4
_src1RegReadBaseReg_1$ = -16				; size = 4
_src1RegReadBaseReg_0$ = -12				; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_MV_V

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 97   :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 98   :   uint32 src1RegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 99   :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 100  :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 101  :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 102  :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 103  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 104  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 105  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 106  : 
; 107  :   if((src1RegReadBaseReg_0 == src1RegReadBaseReg_1) && (src1RegReadBaseReg_2 == src1RegReadBaseReg_3) && (src1RegReadBaseReg_0 == src1RegReadBaseReg_2))

	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	cmp	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	jne	$LN2@Emit_MV_V
	mov	ecx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	cmp	ecx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	jne	SHORT $LN2@Emit_MV_V
	mov	edx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	cmp	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	jne	SHORT $LN2@Emit_MV_V

; 108  :   {
; 109  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm0, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 110  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm1, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	33					; 00000021H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 111  :     vars->codeCache->X86Emit_MOVQRM(x86Reg_mm0, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 112  :     vars->codeCache->X86Emit_MOVQRM(x86Reg_mm1, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	33					; 00000021H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 113  :     vars->bUsesMMX = true;

	mov	eax, DWORD PTR _vars$[ebp]
	mov	BYTE PTR [eax+18], 1

; 114  :   }
; 115  :   else

	jmp	$LN3@Emit_MV_V
$LN2@Emit_MV_V:

; 116  :   {
; 117  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 118  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 119  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 120  :     vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 121  : 
; 122  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 123  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 124  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 125  :     vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN3@Emit_MV_V:

; 126  :   }
; 127  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_MV_V
_TEXT	ENDS
PUBLIC	?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadByteAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadByteAbsolute

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 131  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 132  :   uint32 srcAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 133  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 134  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 135  : 
; 136  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_LoadB

; 137  :   {
; 138  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _srcAddress$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 139  :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, 24);

	push	24					; 00000018H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 140  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_LoadB:

; 141  :   }
; 142  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadByteAbsolute
_TEXT	ENDS
PUBLIC	?GetBasePointer@FlashEEPROM@@QAEPAEXZ		; FlashEEPROM::GetBasePointer
PUBLIC	?SetLabelPointer@PatchManager@@QAEXIPAE@Z	; PatchManager::SetLabelPointer
PUBLIC	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ	; NativeCodeCache::GetEmitPointer
PUBLIC	?Reset@PatchManager@@QAEXXZ			; PatchManager::Reset
PUBLIC	?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadByteLinear
EXTRN	?ApplyPatches@PatchManager@@QAEXXZ:PROC		; PatchManager::ApplyPatches
EXTRN	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVNBRR
EXTRN	?nuonEnv@@3PAVNuonEnvironment@@A:DWORD		; nuonEnv
EXTRN	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z:PROC ; Emit_ExitBlock
EXTRN	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z:PROC ; NativeCodeCache::X86Emit_JCC_Label
EXTRN	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_CMPIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_srcRegReadBaseReg$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadByteLinear

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 146  :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 147  : 
; 148  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 149  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 150  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 151  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 152  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 153  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 154  : 
; 155  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 156  : 
; 157  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 158  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 159  :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 160  :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 161  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 162  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 163  :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 164  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 165  :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 166  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 167  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 168  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 169  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 170  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 171  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 172  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 173  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 174  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 175  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 176  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 177  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 178  :   vars->codeCache->X86Emit_SHLIR(x86Reg_ebp, 24);

	push	24					; 00000018H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 179  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 180  : 
; 181  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 182  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadByteLinear
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?Reset@PatchManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PatchManager@@QAEXXZ PROC			; PatchManager::Reset, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 56   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PatchManager@@QAEXXZ ENDP			; PatchManager::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetLabelPointer@PatchManager@@QAEXIPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
_ptr$ = 12						; size = 4
?SetLabelPointer@PatchManager@@QAEXIPAE@Z PROC		; PatchManager::SetLabelPointer, COMDAT
; _this$ = ecx

; 69   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     labelPointers[labelIndex] = ptr;

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx+eax*4+1024], edx

; 71   :     numLabels++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1284], ecx

; 72   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabelPointer@PatchManager@@QAEXIPAE@Z ENDP		; PatchManager::SetLabelPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.h
_TEXT	ENDS
;	COMDAT ?GetEmitPointer@NativeCodeCache@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitPointer@NativeCodeCache@@QAEPAEXZ PROC		; NativeCodeCache::GetEmitPointer, COMDAT
; _this$ = ecx

; 51   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 52   :     return pEmitLoc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 53   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ENDP		; NativeCodeCache::GetEmitPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\flasheeprom.h
_TEXT	ENDS
;	COMDAT ?GetBasePointer@FlashEEPROM@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBasePointer@FlashEEPROM@@QAEPAEXZ PROC		; FlashEEPROM::GetBasePointer, COMDAT
; _this$ = ecx

; 55   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 56   :     return eeprom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBasePointer@FlashEEPROM@@QAEPAEXZ ENDP		; FlashEEPROM::GetBasePointer
_TEXT	ENDS
PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
PUBLIC	?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadByteBilinearXY
EXTRN	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z:PROC	; NativeCodeCache::X86Emit_CALLI
EXTRN	?GetBilinearAddress@@YAXXZ:PROC			; GetBilinearAddress
EXTRN	?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A:BYTE ; bilinearAddressInfo
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmem.cpp
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadByteBilinearXY

; 185  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 186  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 187  :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 188  :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 189  :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 190  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 191  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 192  :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 193  :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 194  :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 195  : 
; 196  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 197  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 198  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 199  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 200  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 201  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 202  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 203  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 204  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 205  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 206  : 
; 207  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+560]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 208  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 209  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 210  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 211  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 212  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 213  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 214  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 215  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 216  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 217  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 218  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 219  :   vars->codeCache->X86Emit_SHLIR(x86Reg_ebp, 24);

	push	24					; 00000018H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 220  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 221  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadByteBilinearXY
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegReadBaseReg, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 53   :   uint32 mask = regIndex;

	mov	eax, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR _mask$[ebp], eax

; 54   : 
; 55   :   if(!regIndex)

	cmp	DWORD PTR _regIndex$[ebp], 0
	jne	SHORT $LN4@GetMiscReg

; 56   :   {
; 57   :     mask = DEPENDENCY_FLAG_ALLFLAGS;

	mov	DWORD PTR _mask$[ebp], 67076096		; 03ff8000H

; 58   :   }
; 59   :   else

	jmp	SHORT $LN3@GetMiscReg
$LN4@GetMiscReg:

; 60   :   {
; 61   :     mask = MISC_REG_DEPENDENCY_MASK(regIndex - 1);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$[ebp], edx
$LN3@GetMiscReg:

; 62   :   }
; 63   :     
; 64   : 
; 65   :   if(vars->miscRegDep & mask)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN2@GetMiscReg

; 66   :   {
; 67   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN5@GetMiscReg

; 68   :   }
; 69   :   else

	jmp	SHORT $LN5@GetMiscReg
$LN2@GetMiscReg:

; 70   :   {
; 71   :     return x86BaseReg_esi;

	mov	eax, 6
$LN5@GetMiscReg:

; 72   :   }
; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadByteBilinearUV
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmem.cpp
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadByteBilinearUV

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 225  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 226  :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 227  :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 228  :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 229  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 230  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 231  :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 232  :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 233  :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 234  : 
; 235  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 236  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 237  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 238  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 239  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 240  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 241  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 242  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 243  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 244  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 245  : 
; 246  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+560]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 247  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 248  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 249  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 250  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 251  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 252  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 253  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 254  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 255  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 256  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 257  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 258  :   vars->codeCache->X86Emit_SHLIR(x86Reg_ebp, 24);

	push	24					; 00000018H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 259  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 260  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadByteBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadWordAbsolute
EXTRN	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_BSWAP
EXTRN	?X86Emit_MOVZXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVZXMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadWordAbsolute

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 264  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 265  :   uint32 srcAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 266  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 267  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 268  : 
; 269  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_LoadW

; 270  :   {
; 271  :     vars->codeCache->X86Emit_MOVZXMR(x86Reg_eax, x86MemPtr_word, srcAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _srcAddress$[ebp]
	push	eax
	push	1
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVZXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVZXMR

; 272  :     vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 273  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_LoadW:

; 274  :   }
; 275  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadWordAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadWordLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_srcRegReadBaseReg$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadWordLinear

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 279  :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 280  : 
; 281  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 282  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 283  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 284  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 285  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 286  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 287  : 
; 288  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 289  : 
; 290  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 291  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 292  :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 293  :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 294  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 295  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 296  :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 297  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 298  :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 299  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 300  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 301  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 302  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 303  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 304  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 305  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 306  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 307  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 308  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 309  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFE, x86Reg_eax);

	push	16					; 00000010H
	push	8388606					; 007ffffeH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 310  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 311  :   vars->codeCache->X86Emit_ANDIR(0xFFFF, x86Reg_ebp);

	push	21					; 00000015H
	push	65535					; 0000ffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 312  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 313  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 314  : 
; 315  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 316  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadWordLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadWordBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadWordBilinearXY

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 320  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 321  :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 322  :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 323  :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 324  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 325  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 326  :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 327  :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 328  :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 329  : 
; 330  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 331  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 332  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 333  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 334  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 335  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 336  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 337  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 338  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 339  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 340  : 
; 341  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+560]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 342  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 343  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 344  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 345  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 346  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 347  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 348  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 349  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 350  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 351  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 352  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 353  :   vars->codeCache->X86Emit_ANDIR(0xFFFF, x86Reg_ebp);

	push	21					; 00000015H
	push	65535					; 0000ffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 354  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 355  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 356  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadWordBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadWordBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadWordBilinearUV

; 359  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 360  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 361  :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 362  :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 363  :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 364  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 365  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 366  :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 367  :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 368  :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 369  : 
; 370  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 371  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 372  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 373  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 374  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 375  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 376  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 377  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 378  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 379  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 380  : 
; 381  :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+560]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 382  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 383  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 384  :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 385  :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 386  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 387  :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 388  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 389  :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 390  :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 391  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 392  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 393  :   vars->codeCache->X86Emit_ANDIR(0xFFFF, x86Reg_ebp);

	push	21					; 00000015H
	push	65535					; 0000ffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 394  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 395  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 396  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadWordBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadScalarAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadScalarAbsolute

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 400  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 401  :   uint32 srcAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 402  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 403  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 404  : 
; 405  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_LoadS

; 406  :   {
; 407  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _srcAddress$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 408  :     vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 409  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_LoadS:

; 410  :   }
; 411  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadScalarAbsolute
_TEXT	ENDS
PUBLIC	?EmitControlRegisterLoad@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ; EmitControlRegisterLoad
PUBLIC	?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadScalarControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadScalarControlRegisterAbsolute

; 414  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 415  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 416  :   uint32 srcAddress = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 417  : 
; 418  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 419  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 420  : 
; 421  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_LoadS@2

; 422  :   {
; 423  :     EmitControlRegisterLoad(vars, srcAddress, x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _srcAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?EmitControlRegisterLoad@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ; EmitControlRegisterLoad
	add	esp, 12					; 0000000cH

; 424  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_LoadS@2:

; 425  :   }
; 426  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadScalarControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadScalarLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_srcRegReadBaseReg$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadScalarLinear

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 430  :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 431  : 
; 432  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 433  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 434  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 435  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 436  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 437  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 438  : 
; 439  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 440  : 
; 441  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 442  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 443  :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 444  :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 445  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 446  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 447  :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 448  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 449  :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 450  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 451  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 452  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 453  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 454  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 455  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 456  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 457  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 458  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 459  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 460  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 461  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 462  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 688				; 000002b0H
	push	edx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 463  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFC, x86Reg_eax);

	push	16					; 00000010H
	push	8388604					; 007ffffcH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 464  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 465  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 466  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 467  : 
; 468  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 469  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadScalarLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadScalarBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadScalarBilinearXY

; 472  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 473  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 474  :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 475  :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 476  :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 477  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 478  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 479  :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 480  :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 481  :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 482  : 
; 483  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 484  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 485  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 486  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 487  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 488  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 489  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 490  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 491  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 492  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 493  : 
; 494  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 495  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 496  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 497  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 498  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 499  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 500  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 501  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 502  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 503  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 504  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 505  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 506  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 507  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 508  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 509  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 510  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 511  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 512  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadScalarBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadScalarBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadScalarBilinearUV

; 515  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 516  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 517  :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 518  :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 519  :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 520  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 521  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 522  :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 523  :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 524  :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 525  : 
; 526  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 527  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 528  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 529  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 530  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 531  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 532  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 533  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 534  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 535  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 536  : 
; 537  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 538  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 539  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 540  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 541  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 542  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 543  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 544  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 545  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 546  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 547  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 548  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 549  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 550  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 551  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 552  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 553  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 554  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 555  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadScalarBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadShortVectorAbsolute
EXTRN	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ANDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadShortVectorAbsolute

; 558  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 559  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 560  :   uint32 srcAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 561  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 562  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 563  : 
; 564  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcAddress);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _srcAddress$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 565  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcAddress+2);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _srcAddress$[ebp]
	add	ecx, 2
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 566  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcAddress+4);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _srcAddress$[ebp]
	add	eax, 4
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 567  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcAddress+6);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _srcAddress$[ebp]
	add	edx, 6
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 568  :   vars->codeCache->X86Emit_MOVIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 569  :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 570  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 571  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 572  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 573  :   vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 574  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 575  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 576  :   vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 577  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 578  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 579  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 580  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 581  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadShortVectorAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadShortVectorLinear
EXTRN	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ADDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadShortVectorLinear

; 584  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 585  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 586  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 587  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 588  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 589  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 590  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 591  : 
; 592  : 
; 593  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 594  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 595  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 596  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 597  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 598  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 599  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 600  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 601  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 602  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 603  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 604  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 605  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 606  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 607  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 608  : 
; 609  :   vars->codeCache->X86Emit_ANDIR(0x007FFFF8, x86Reg_eax);

	push	16					; 00000010H
	push	8388600					; 007ffff8H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 610  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 611  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	0
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 612  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 2);

	push	2
	push	0
	push	4
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 613  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	0
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 614  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 6);

	push	6
	push	0
	push	4
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 615  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 616  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 617  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 618  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 619  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebx);

	push	19					; 00000013H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 620  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ecx);

	push	17					; 00000011H
	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 621  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_edx);

	push	18					; 00000012H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 622  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 623  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 624  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 625  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 626  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 627  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadShortVectorLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadShortVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadShortVectorBilinearXY

; 630  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 631  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 632  :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 633  :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 634  :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 635  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 636  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 637  :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 638  :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 639  :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 640  : 
; 641  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 642  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 643  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 644  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 645  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 646  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 647  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 648  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 649  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 650  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 651  : 
; 652  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 653  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 654  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 655  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 656  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 657  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 658  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 659  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 660  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 661  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 662  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 663  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 664  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 665  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 666  : 
; 667  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 668  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 669  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	0
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 670  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 2);

	push	2
	push	0
	push	4
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 671  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	0
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 672  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 6);

	push	6
	push	0
	push	4
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 673  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 674  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 675  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 676  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 677  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebx);

	push	19					; 00000013H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 678  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ecx);

	push	17					; 00000011H
	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 679  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_edx);

	push	18					; 00000012H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 680  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 681  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 682  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 683  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 684  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 685  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadShortVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadShortVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadShortVectorBilinearUV

; 688  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 689  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 690  :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 691  :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 692  :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 693  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 694  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 695  :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 696  :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 697  :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 698  : 
; 699  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 700  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 701  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 702  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 703  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 704  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 705  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 706  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 707  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 708  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 709  : 
; 710  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 711  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 712  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 713  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 714  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 715  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 716  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 717  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 718  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 719  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 720  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 721  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 722  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 723  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 724  : 
; 725  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 726  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 727  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	0
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 728  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 2);

	push	2
	push	0
	push	4
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 729  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	0
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 730  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 6);

	push	6
	push	0
	push	4
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 731  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 732  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 733  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 734  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 735  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebx);

	push	19					; 00000013H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 736  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ecx);

	push	17					; 00000011H
	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 737  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_edx);

	push	18					; 00000012H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 738  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 739  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 740  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 741  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 742  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 743  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadShortVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -16					; size = 4
_destRegWriteBaseReg$ = -12				; size = 4
_srcAddress$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadVectorAbsolute

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 747  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 748  :   uint32 srcAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _srcAddress$[ebp], eax

; 749  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 750  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 751  : 
; 752  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcAddress);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _srcAddress$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 753  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcAddress+4);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _srcAddress$[ebp]
	add	ecx, 4
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 754  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcAddress+8);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _srcAddress$[ebp]
	add	eax, 8
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 755  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcAddress+12);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _srcAddress$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 756  :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 757  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 758  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 759  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 760  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 761  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 762  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 763  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 764  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadVectorAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_srcRegReadBaseReg$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadVectorLinear

; 767  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 768  :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 769  : 
; 770  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 771  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 772  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 773  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 774  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 775  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 776  : 
; 777  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 778  : 
; 779  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 780  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 781  :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 782  :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 783  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 784  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 785  :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 786  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 787  :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 788  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 789  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 790  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 791  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 792  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 793  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 794  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 795  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 796  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 797  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 798  : 
; 799  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 800  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 801  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 802  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 688				; 000002b0H
	push	eax
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 803  :   vars->codeCache->X86Emit_ANDIR(0x007FFFF0, x86Reg_eax);

	push	16					; 00000010H
	push	8388592					; 007ffff0H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 804  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 805  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 806  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 807  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 808  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 809  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 810  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 811  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 812  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 813  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 814  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 815  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 816  : 
; 817  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 818  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadVectorLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadVectorBilinearXY

; 821  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 822  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 823  :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 824  :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 825  :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 826  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 827  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 828  :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 829  :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 830  :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 831  : 
; 832  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 833  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 834  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 835  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 836  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 837  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 838  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 839  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 840  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 841  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 842  : 
; 843  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 844  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 845  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 846  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 847  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 848  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 849  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 850  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 851  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 852  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 853  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 854  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 855  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 856  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 857  : 
; 858  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 859  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 860  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 861  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 862  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 863  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 864  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 865  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 866  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 867  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 868  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 869  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 870  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 871  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadVectorBilinearUV

; 874  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 875  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 876  :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 877  :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 878  :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 879  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 880  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 881  :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 882  :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 883  :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 884  : 
; 885  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 886  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 887  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 888  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 889  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 890  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 891  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 892  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 893  :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 894  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 895  : 
; 896  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 897  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 898  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 899  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 900  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 901  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 902  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 903  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 904  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 905  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 906  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 907  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 908  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 909  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 910  : 
; 911  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 912  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 913  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 914  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 915  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 916  :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 917  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 918  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 919  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 920  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 921  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 922  :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 923  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 924  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelAbsolute
EXTRN	?LoadPixelAbsolute@@YAXXZ:PROC			; LoadPixelAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelAbsolute

; 927  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 928  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 929  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 930  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 931  : 
; 932  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 933  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 934  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_MEM_POINTER], x86MemPtr_dword, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 935  :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 936  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 937  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 938  : 
; 939  :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelAbsolute@@YAXXZ	; LoadPixelAbsolute
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 940  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelZAbsolute
EXTRN	?LoadPixelZAbsolute@@YAXXZ:PROC			; LoadPixelZAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelZAbsolute

; 943  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 944  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 945  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 946  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 947  : 
; 948  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 949  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 950  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_MEM_POINTER], x86MemPtr_dword, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 951  :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 952  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 953  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 954  : 
; 955  :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelZAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelZAbsolute@@YAXXZ	; LoadPixelZAbsolute
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 956  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelZAbsolute
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -24					; size = 4
_destRegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelLinear

; 959  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 960  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 961  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 962  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 963  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 964  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 965  :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 966  : 
; 967  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 968  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 969  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 970  :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 971  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 972  :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 973  : 
; 974  :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 975  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 976  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 977  :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 978  :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 979  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 980  :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 981  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 982  :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 983  :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 984  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 985  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 986  :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 987  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 688				; 000002b0H
	push	edx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 988  : 
; 989  :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 990  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 991  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 992  :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelAbsolute@@YAXXZ	; LoadPixelAbsolute
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 993  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelZLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -24					; size = 4
_destRegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelZLinear

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 997  :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 998  :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 999  :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1000 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1001 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1002 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1003 : 
; 1004 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1005 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1006 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1007 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1008 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1009 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1010 : 
; 1011 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1012 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1013 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1014 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1015 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1016 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1017 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1018 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1019 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1020 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1021 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1022 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1023 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1024 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 688				; 000002b0H
	push	edx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1025 : 
; 1026 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1027 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1028 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1029 :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelZAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelZAbsolute@@YAXXZ	; LoadPixelZAbsolute
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1030 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelZLinear
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelBilinearUV

; 1032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1033 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1034 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1035 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1036 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1037 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1038 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1039 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1040 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1041 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1042 : 
; 1043 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1044 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1045 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1046 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1047 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1048 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1049 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1050 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1051 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1052 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1053 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1054 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1055 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1056 : 
; 1057 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1058 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1059 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1060 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1061 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1062 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1063 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1064 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1065 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1066 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1067 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1068 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1069 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1070 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1071 : 
; 1072 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1073 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1074 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1075 :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelAbsolute@@YAXXZ	; LoadPixelAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1076 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelZBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelZBilinearUV

; 1079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1080 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1081 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1082 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1083 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1084 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1085 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1086 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1087 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1088 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1089 : 
; 1090 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1091 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1092 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1093 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1094 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1095 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1096 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1097 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1098 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1099 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1100 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1101 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1102 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1103 : 
; 1104 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1105 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1106 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1107 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1108 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1109 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1110 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1111 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1112 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1113 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1114 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1115 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1116 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1117 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1118 : 
; 1119 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1120 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1121 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1122 :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelZAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelZAbsolute@@YAXXZ	; LoadPixelZAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1123 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelZBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelBilinearXY

; 1126 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1127 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1128 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1129 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1130 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1131 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1132 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1133 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1134 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1135 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1136 : 
; 1137 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1138 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1139 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1140 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1141 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1142 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1143 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1144 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1145 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1146 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1147 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1148 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1149 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1150 : 
; 1151 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1152 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1153 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1154 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1155 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1156 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1157 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1158 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1159 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1160 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1161 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1162 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1163 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1164 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1165 : 
; 1166 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1167 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1168 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1169 :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelAbsolute@@YAXXZ	; LoadPixelAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1170 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LoadPixelZBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_LoadPixelZBilinearXY

; 1173 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1174 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1175 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1176 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1177 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1178 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1179 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1180 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1181 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1182 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1183 : 
; 1184 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1185 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1186 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1187 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1188 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1189 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1190 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1191 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1192 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1193 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1194 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + destRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1195 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1196 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1197 : 
; 1198 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1199 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1200 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1201 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1202 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1203 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1204 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1205 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1206 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1207 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1208 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1209 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1210 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1211 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1212 : 
; 1213 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1214 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1215 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1216 :   vars->codeCache->X86Emit_CALLI((uint32)LoadPixelZAbsolute,0);

	push	0
	push	OFFSET ?LoadPixelZAbsolute@@YAXXZ	; LoadPixelZAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1217 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_LoadPixelZBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarImmediate
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_imm$ = -12						; size = 4
_destAddress$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarImmediate

; 1220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1221 :   uint32 destAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destAddress$[ebp], ecx

; 1222 :   uint32 imm = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _imm$[ebp], eax

; 1223 : 
; 1224 :   SwapScalarBytes(&imm);

	lea	ecx, DWORD PTR _imm$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 1225 :   vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, destAddress);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _destAddress$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1226 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Emit_Store
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Emit_Store:
	DD	1
	DD	$LN4@Emit_Store
$LN4@Emit_Store:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@Emit_Store
$LN3@Emit_Store:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	0
?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarImmediate
_TEXT	ENDS
PUBLIC	?EmitControlRegisterStoreImmediate@@YAXPAVEmitterVariables@@II@Z ; EmitControlRegisterStoreImmediate
PUBLIC	?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarControlRegisterImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_imm$ = -8						; size = 4
_destAddress$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarControlRegisterImmediate

; 1229 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1230 :   uint32 destAddress = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destAddress$[ebp], ecx

; 1231 :   uint32 imm = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _imm$[ebp], eax

; 1232 : 
; 1233 :   EmitControlRegisterStoreImmediate(vars, destAddress, imm);

	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?EmitControlRegisterStoreImmediate@@YAXPAVEmitterVariables@@II@Z ; EmitControlRegisterStoreImmediate
	add	esp, 12					; 0000000cH

; 1234 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarControlRegisterImmediate
_TEXT	ENDS
PUBLIC	?EmitControlRegisterStore@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ; EmitControlRegisterStore
PUBLIC	?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarControlRegisterAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -16					; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destAddress$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarControlRegisterAbsolute

; 1237 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1238 :   uint32 destAddress = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destAddress$[ebp], ecx

; 1239 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1240 : 
; 1241 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1242 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1243 : 
; 1244 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1245 :   EmitControlRegisterStore(vars, destAddress, x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _destAddress$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?EmitControlRegisterStore@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ; EmitControlRegisterStore
	add	esp, 12					; 0000000cH

; 1246 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarControlRegisterAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -16					; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destAddress$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarAbsolute

; 1249 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1250 :   uint32 destAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destAddress$[ebp], ecx

; 1251 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1252 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1253 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1254 : 
; 1255 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1256 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1257 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _destAddress$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1258 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_srcRegReadBaseReg$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarLinear

; 1261 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1262 :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 1263 : 
; 1264 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1265 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1266 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1267 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1268 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1269 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1270 : 
; 1271 :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1272 : 
; 1273 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1274 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1275 :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1276 :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 1277 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1278 :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1279 :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1280 :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 1281 :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1282 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1283 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1284 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1285 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1286 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1287 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1288 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1289 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1290 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1291 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1292 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1293 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1294 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 688				; 000002b0H
	push	edx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1295 : 
; 1296 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFC, x86Reg_eax);

	push	16					; 00000010H
	push	8388604					; 007ffffcH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1297 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1298 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1299 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1300 : 
; 1301 :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1302 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarLinear
_TEXT	ENDS
PUBLIC	?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarBilinearXY

; 1305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1306 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1307 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1308 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1309 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1310 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1311 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1312 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1313 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1314 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1315 : 
; 1316 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1317 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1318 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1319 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1320 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1321 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1322 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1323 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1324 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1325 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1326 : 
; 1327 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1328 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1329 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1330 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1331 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1332 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1333 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1334 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1335 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1336 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1337 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1338 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1339 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1340 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1341 : 
; 1342 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1343 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1344 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1345 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1346 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarBilinearUV

; 1349 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1350 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1351 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1352 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1353 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1354 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1355 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1356 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1357 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1358 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1359 : 
; 1360 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1361 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1362 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1363 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1364 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1365 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1366 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1367 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1368 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1369 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1370 : 
; 1371 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1372 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1373 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1374 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1375 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1376 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1377 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1378 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1379 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1380 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1381 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1382 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1383 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1384 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1385 : 
; 1386 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1387 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1388 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1389 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx);

	push	0
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1390 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreShortVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -28					; size = 4
_srcRegReadBaseReg_3$ = -24				; size = 4
_srcRegReadBaseReg_2$ = -20				; size = 4
_srcRegReadBaseReg_1$ = -16				; size = 4
_srcRegReadBaseReg_0$ = -12				; size = 4
_destAddress$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreShortVectorAbsolute

; 1393 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1394 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1395 :   uint32 destAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _destAddress$[ebp], eax

; 1396 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1397 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1398 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1399 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1400 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1401 : 
; 1402 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1403 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1404 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1405 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1406 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1407 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1408 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1409 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1410 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ax, destAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _destAddress$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1411 :   vars->codeCache->X86Emit_MOVRM(x86Reg_bx, destAddress+2);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _destAddress$[ebp]
	add	edx, 2
	push	edx
	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1412 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, destAddress+4);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _destAddress$[ebp]
	add	ecx, 4
	push	ecx
	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1413 :   vars->codeCache->X86Emit_MOVRM(x86Reg_dx, destAddress+6);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _destAddress$[ebp]
	add	eax, 6
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1414 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreShortVectorAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreShortVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -36					; size = 4
_srcRegDisp$ = -32					; size = 4
_destRegReadBaseReg$ = -28				; size = 4
_srcRegReadBaseReg_3$ = -24				; size = 4
_srcRegReadBaseReg_2$ = -20				; size = 4
_srcRegReadBaseReg_1$ = -16				; size = 4
_srcRegReadBaseReg_0$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreShortVectorLinear

; 1417 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1418 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1419 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1420 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1421 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1422 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1423 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1424 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1425 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1426 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1427 : 
; 1428 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1429 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1430 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1431 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1432 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1433 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1434 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1435 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1436 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1437 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1438 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1439 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1440 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1441 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1442 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1443 : 
; 1444 :   vars->codeCache->X86Emit_ANDIR(0x007FFFF8, x86Reg_eax);

	push	16					; 00000010H
	push	8388600					; 007ffff8H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1445 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1446 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1447 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1448 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1449 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1450 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1451 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1452 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1453 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1454 :   vars->codeCache->X86Emit_MOVRM(x86Reg_bx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	0
	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1455 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 2);

	push	2
	push	0
	push	4
	push	0
	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1456 :   vars->codeCache->X86Emit_MOVRM(x86Reg_dx, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1457 :   vars->codeCache->X86Emit_MOVRM(x86Reg_bp, x86BaseReg_eax, x86IndexReg_none, x86Scale_1, 6);

	push	6
	push	0
	push	4
	push	0
	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1458 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreShortVectorLinear
_TEXT	ENDS
PUBLIC	?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreShortVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -48					; size = 4
_ryRegDisp$ = -44					; size = 4
_rxRegDisp$ = -40					; size = 4
_srcRegDisp$ = -36					; size = 4
_srcRegReadBaseReg_3$ = -32				; size = 4
_srcRegReadBaseReg_2$ = -28				; size = 4
_srcRegReadBaseReg_1$ = -24				; size = 4
_srcRegReadBaseReg_0$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreShortVectorBilinearXY

; 1461 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1462 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1463 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1464 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1465 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1466 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1467 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1468 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1469 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1470 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1471 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1472 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1473 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1474 : 
; 1475 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1476 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1477 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1478 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1479 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1480 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1481 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1482 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1483 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1484 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1485 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1486 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1487 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1488 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1489 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1490 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1491 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1492 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1493 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1494 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1495 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1496 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1497 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1498 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1499 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1500 : 
; 1501 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1502 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1503 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1504 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1505 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1506 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1507 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1508 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1509 :   vars->codeCache->X86Emit_MOVRM(x86Reg_dx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 2);

	push	2
	push	0
	push	3
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1510 :   vars->codeCache->X86Emit_MOVRM(x86Reg_bp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1511 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1512 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 6);

	push	6
	push	0
	push	3
	push	0
	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1513 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreShortVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreShortVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -48					; size = 4
_rvRegDisp$ = -44					; size = 4
_ruRegDisp$ = -40					; size = 4
_srcRegDisp$ = -36					; size = 4
_srcRegReadBaseReg_3$ = -32				; size = 4
_srcRegReadBaseReg_2$ = -28				; size = 4
_srcRegReadBaseReg_1$ = -24				; size = 4
_srcRegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreShortVectorBilinearUV

; 1516 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1517 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1518 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1519 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1520 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1521 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1522 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1523 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1524 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1525 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1526 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1527 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1528 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1529 : 
; 1530 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1531 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1532 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1533 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1534 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1535 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1536 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1537 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1538 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1539 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1540 : 
; 1541 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1542 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1543 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1544 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1545 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1546 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1547 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1548 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1549 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1550 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1551 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1552 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1553 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1554 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1555 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFC, x86Reg_eax);

	push	16					; 00000010H
	push	8388604					; 007ffffcH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1556 : 
; 1557 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1558 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1559 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1560 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1561 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1562 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1563 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1564 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1565 :   vars->codeCache->X86Emit_MOVRM(x86Reg_dx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 2);

	push	2
	push	0
	push	3
	push	0
	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1566 :   vars->codeCache->X86Emit_MOVRM(x86Reg_bp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1567 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1568 :   vars->codeCache->X86Emit_MOVRM(x86Reg_cx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 6);

	push	6
	push	0
	push	3
	push	0
	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1569 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreShortVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreVectorAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -28					; size = 4
_srcRegReadBaseReg_3$ = -24				; size = 4
_srcRegReadBaseReg_2$ = -20				; size = 4
_srcRegReadBaseReg_1$ = -16				; size = 4
_srcRegReadBaseReg_0$ = -12				; size = 4
_srcRegIndex$ = -8					; size = 4
_destAddress$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreVectorAbsolute

; 1572 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1573 :   uint32 destAddress = nuance.fields[FIELD_MEM_POINTER];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destAddress$[ebp], ecx

; 1574 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1575 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1576 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1577 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1578 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1579 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1580 : 
; 1581 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1582 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1583 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1584 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1585 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1586 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1587 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1588 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1589 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destAddress);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _destAddress$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1590 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destAddress+4);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _destAddress$[ebp]
	add	edx, 4
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1591 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destAddress+8);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _destAddress$[ebp]
	add	ecx, 8
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1592 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destAddress+12);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _destAddress$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1593 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreVectorAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreVectorLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -40					; size = 4
_srcRegDisp$ = -36					; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_srcRegReadBaseReg_3$ = -28				; size = 4
_srcRegReadBaseReg_2$ = -24				; size = 4
_srcRegReadBaseReg_1$ = -20				; size = 4
_srcRegReadBaseReg_0$ = -16				; size = 4
_srcRegIndex$ = -12					; size = 4
_destRegIndex$ = -8					; size = 4
_l_not_control_reg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreVectorLinear

; 1596 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1597 :   uint32 l_not_control_reg = 0;

	mov	DWORD PTR _l_not_control_reg$[ebp], 0

; 1598 : 
; 1599 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1600 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _srcRegIndex$[ebp], eax

; 1601 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1602 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1603 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1604 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1605 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1606 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1607 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1608 : 
; 1609 :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1610 : 
; 1611 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1612 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1613 :   vars->codeCache->X86Emit_ANDIR(0xFFF00000, x86Reg_ebx);

	push	19					; 00000013H
	push	-1048576				; fff00000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1614 :   vars->codeCache->X86Emit_CMPIR(0x20500000, x86Reg_ebx);

	push	19					; 00000013H
	push	542113792				; 20500000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 1615 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_not_control_reg);

	mov	ecx, DWORD PTR _l_not_control_reg$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1616 :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 620				; 0000026cH
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1617 :   vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 408				; 00000198H
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1618 :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 1619 :   vars->codeCache->patchMgr->SetLabelPointer(l_not_control_reg,vars->codeCache->GetEmitPointer());

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?GetEmitPointer@NativeCodeCache@@QAEPAEXZ ; NativeCodeCache::GetEmitPointer
	push	eax
	mov	edx, DWORD PTR _l_not_control_reg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1620 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1621 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1622 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1623 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1624 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1625 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1626 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1627 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1628 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1629 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1630 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1631 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1632 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 688				; 000002b0H
	push	edx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1633 : 
; 1634 :   vars->codeCache->X86Emit_ANDIR(0x007FFFF0, x86Reg_eax);

	push	16					; 00000010H
	push	8388592					; 007ffff0H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1635 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1636 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1637 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1638 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1639 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1640 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1641 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1642 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1643 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1644 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1645 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1646 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1647 :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1648 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreVectorLinear
_TEXT	ENDS
PUBLIC	?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelAbsolute
EXTRN	?StorePixelAbsolute@@YAXXZ:PROC			; StorePixelAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegReadBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelAbsolute

; 1651 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1652 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1653 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 1654 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1655 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1656 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1657 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1658 : 
; 1659 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1660 :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_MEM_POINTER], x86MemPtr_dword, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1661 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1662 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1663 : 
; 1664 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelAbsolute,0);

	push	0
	push	OFFSET ?StorePixelAbsolute@@YAXXZ	; StorePixelAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1665 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreVectorBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -48					; size = 4
_ryRegDisp$ = -44					; size = 4
_rxRegDisp$ = -40					; size = 4
_srcRegDisp$ = -36					; size = 4
_srcRegReadBaseReg_3$ = -32				; size = 4
_srcRegReadBaseReg_2$ = -28				; size = 4
_srcRegReadBaseReg_1$ = -24				; size = 4
_srcRegReadBaseReg_0$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreVectorBilinearXY

; 1668 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1669 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1670 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1671 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1672 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1673 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1674 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1675 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1676 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1677 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1678 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1679 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1680 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1681 : 
; 1682 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1683 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1684 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1685 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1686 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1687 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1688 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1689 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1690 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1691 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1692 : 
; 1693 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1694 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1695 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1696 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1697 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1698 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1699 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1700 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1701 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1702 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1703 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1704 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1705 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1706 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1707 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1708 : 
; 1709 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1710 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1711 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1712 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1713 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1714 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1715 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1716 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1717 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1718 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1719 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1720 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1721 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1722 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreVectorBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreVectorBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -48					; size = 4
_rvRegDisp$ = -44					; size = 4
_ruRegDisp$ = -40					; size = 4
_srcRegDisp$ = -36					; size = 4
_srcRegReadBaseReg_3$ = -32				; size = 4
_srcRegReadBaseReg_2$ = -28				; size = 4
_srcRegReadBaseReg_1$ = -24				; size = 4
_srcRegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreVectorBilinearUV

; 1725 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1726 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1727 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1728 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1729 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1730 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 1731 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 1732 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 1733 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 1734 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1735 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1736 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1737 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1738 : 
; 1739 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1740 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1741 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1742 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1743 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1744 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1745 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1746 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1747 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1748 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1749 : 
; 1750 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1751 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1752 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1753 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1754 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1755 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1756 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1757 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1758 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1759 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1760 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1761 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1762 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1763 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1764 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1765 : 
; 1766 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1767 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1768 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1769 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1770 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1771 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1772 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 0);

	push	0
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1773 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1774 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 4);

	push	4
	push	0
	push	3
	push	0
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1775 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 8);

	push	8
	push	0
	push	3
	push	0
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1776 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 1777 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_eax, x86IndexReg_ebx, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	3
	push	0
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1778 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreVectorBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelZAbsolute
EXTRN	?StorePixelZAbsolute@@YAXXZ:PROC		; StorePixelZAbsolute
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegReadBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelZAbsolute

; 1781 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1782 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1783 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 1784 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1785 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1786 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1787 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1788 : 
; 1789 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1790 :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_MEM_POINTER], x86MemPtr_dword, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1791 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1792 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1793 : 
; 1794 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelZAbsolute,0);

	push	0
	push	OFFSET ?StorePixelZAbsolute@@YAXXZ	; StorePixelZAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1795 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelZAbsolute
_TEXT	ENDS
PUBLIC	?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegReadBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelLinear

; 1798 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1799 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1800 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 1801 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1802 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1803 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1804 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1805 : 
; 1806 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1807 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1808 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1809 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1810 : 	vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1811 : 
; 1812 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1813 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1814 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1815 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1816 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1817 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1818 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1819 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1820 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1821 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1822 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1823 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1824 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 688				; 000002b0H
	push	ecx
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1825 : 
; 1826 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1827 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1828 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1829 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelAbsolute,0);

	push	0
	push	OFFSET ?StorePixelAbsolute@@YAXXZ	; StorePixelAbsolute
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1830 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelLinear
_TEXT	ENDS
PUBLIC	?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelZLinear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_srcRegDisp$ = -20					; size = 4
_destRegReadBaseReg$ = -16				; size = 4
_srcRegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelZLinear

; 1833 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1834 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1835 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 1836 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1837 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1838 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1839 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1840 : 
; 1841 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1842 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, (uint32)&vars->mpe->linpixctl);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 456				; 000001c8H
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1843 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&vars->mpe->clutbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1844 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1845 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&bilinearAddressInfo.clutBase);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A ; bilinearAddressInfo
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1846 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1847 : 
; 1848 :   vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+560]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1849 :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1850 :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1851 :   vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [edx+32]
	call	?GetBasePointer@FlashEEPROM@@QAEPAEXZ	; FlashEEPROM::GetBasePointer
	push	eax
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1852 :   vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);

	push	16					; 00000010H
	push	1073741824				; 40000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 1853 :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 1854 :   vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 1855 :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 1856 :   vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);

	push	16					; 00000010H
	push	-268435456				; f0000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 1857 :   vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR

; 1858 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1859 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1860 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1861 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelZAbsolute,0);

	push	0
	push	OFFSET ?StorePixelZAbsolute@@YAXXZ	; StorePixelZAbsolute
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1862 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelZLinear
_TEXT	ENDS
PUBLIC	?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelBilinearUV

; 1865 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1866 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1867 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1868 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1869 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1870 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1871 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1872 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1873 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1874 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1875 : 
; 1876 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1877 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1878 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1879 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1880 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1881 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1882 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1883 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1884 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1885 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1886 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1887 : 
; 1888 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1889 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1890 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1891 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1892 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1893 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1894 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1895 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1896 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1897 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1898 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1899 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1900 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1901 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 688				; 000002b0H
	push	eax
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1902 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1903 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1904 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1905 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelAbsolute,0);

	push	0
	push	OFFSET ?StorePixelAbsolute@@YAXXZ	; StorePixelAbsolute
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1906 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelZBilinearUV
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_uvctlRegDisp$ = -36					; size = 4
_rvRegDisp$ = -32					; size = 4
_ruRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_ruRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelZBilinearUV

; 1909 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1910 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1911 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1912 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1913 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1914 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1915 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1916 :   int32 ruRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruRegDisp$[ebp], eax

; 1917 :   int32 rvRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvRegDisp$[ebp], eax

; 1918 :   int32 uvctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlRegDisp$[ebp], eax

; 1919 : 
; 1920 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruRegDisp);

	mov	eax, DWORD PTR _ruRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1921 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvRegDisp);

	mov	eax, DWORD PTR _rvRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1922 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlRegDisp);

	mov	eax, DWORD PTR _uvctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1923 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->uvbase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1924 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1925 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1926 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1927 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1928 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1929 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1930 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1931 : 
; 1932 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1933 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1934 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1935 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1936 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1937 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1938 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1939 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1940 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1941 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1942 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1943 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1944 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1945 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 688				; 000002b0H
	push	eax
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1946 : 
; 1947 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1948 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1949 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1950 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelZAbsolute,0);

	push	0
	push	OFFSET ?StorePixelZAbsolute@@YAXXZ	; StorePixelZAbsolute
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1951 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelZBilinearUV
_TEXT	ENDS
PUBLIC	?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelBilinearXY

; 1954 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1955 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 1956 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 1957 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 1958 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 1959 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 1960 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 1961 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 1962 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 1963 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 1964 : 
; 1965 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1966 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1967 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1968 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1969 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1970 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1971 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1972 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1973 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1974 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1975 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1976 : 
; 1977 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 1978 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 1979 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 1980 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 1981 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 1982 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 1983 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 1984 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 1985 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 1986 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 1987 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1988 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1989 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1990 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 688				; 000002b0H
	push	eax
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1991 : 
; 1992 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1993 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1994 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1995 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelAbsolute,0);

	push	0
	push	OFFSET ?StorePixelAbsolute@@YAXXZ	; StorePixelAbsolute
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 1996 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StorePixelZBilinearXY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xyctlRegDisp$ = -36					; size = 4
_ryRegDisp$ = -32					; size = 4
_rxRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg$ = -20				; size = 4
_xyctlRegReadBaseReg$ = -16				; size = 4
_ryRegReadBaseReg$ = -12				; size = 4
_rxRegReadBaseReg$ = -8					; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StorePixelZBilinearXY

; 1999 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2000 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 2001 :   x86BaseReg rxRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rxRegReadBaseReg$[ebp], eax

; 2002 :   x86BaseReg ryRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ryRegReadBaseReg$[ebp], eax

; 2003 :   x86BaseReg xyctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyctlRegReadBaseReg$[ebp], eax

; 2004 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 2005 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 2006 :   int32 rxRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rxRegDisp$[ebp], eax

; 2007 :   int32 ryRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ryRegDisp$[ebp], eax

; 2008 :   int32 xyctlRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyctlRegDisp$[ebp], eax

; 2009 : 
; 2010 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rxRegReadBaseReg, x86IndexReg_none, x86Scale_1, rxRegDisp);

	mov	eax, DWORD PTR _rxRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rxRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2011 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ryRegReadBaseReg, x86IndexReg_none, x86Scale_1, ryRegDisp);

	mov	eax, DWORD PTR _ryRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ryRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2012 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, xyctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, xyctlRegDisp);

	mov	eax, DWORD PTR _xyctlRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _xyctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2013 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, (uint32)&vars->mpe->xybase);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2014 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.x);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+28
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2015 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, (uint32)&bilinearAddressInfo.y);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+32
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2016 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, (uint32)&bilinearAddressInfo.control);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+24
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2017 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&bilinearAddressInfo.base);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+20
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2018 :   vars->codeCache->X86Emit_MOVIM((uint32)(((uint32 *)&(vars->mpe->regs)) + srcRegIndex), x86MemPtr_dword, (uint32)&bilinearAddressInfo.pRegs);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+8
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2019 :   vars->codeCache->X86Emit_CALLI((uint32)GetBilinearAddress,0);

	push	0
	push	OFFSET ?GetBilinearAddress@@YAXXZ	; GetBilinearAddress
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 2020 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&bilinearAddressInfo.offset_address);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+40
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2021 : 
; 2022 :   //vars->codeCache->X86Emit_MOVIR((uint32)(vars->mpe->dtrom), x86Reg_ebx);
; 2023 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->mainBusDRAM), x86Reg_ecx);
; 2024 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->systemBusDRAM), x86Reg_edx);
; 2025 :   //vars->codeCache->X86Emit_MOVIR((uint32)(nuonEnv->flashEEPROM->GetBasePointer()), x86Reg_ebp);
; 2026 :   //vars->codeCache->X86Emit_CMPIR(0x40000000, x86Reg_eax);
; 2027 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ecx);
; 2028 :   //vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_eax);
; 2029 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_edx);
; 2030 :   //vars->codeCache->X86Emit_CMPIR(0xF0000000, x86Reg_eax);
; 2031 :   //vars->codeCache->X86Emit_CMOVNBRR(x86Reg_ebx, x86Reg_ebp);
; 2032 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2033 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx,26);

	push	26					; 0000001aH
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 2034 :   vars->codeCache->X86Emit_ANDIR(0x3C,x86Reg_ebx);

	push	19					; 00000013H
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2035 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebx, x86IndexReg_none, x86Scale_1, (int32)vars->mpe->bankPtrTable);

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 688				; 000002b0H
	push	eax
	push	0
	push	4
	push	3
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2036 :   vars->codeCache->X86Emit_ANDIR(0x007FFFFF, x86Reg_eax);

	push	16					; 00000010H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2037 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2038 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&bilinearAddressInfo.pPixelData);

	push	0
	push	0
	push	4
	push	OFFSET ?bilinearAddressInfo@@3UstructBilinearAddressInfo@@A+4
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2039 :   vars->codeCache->X86Emit_CALLI((uint32)StorePixelZAbsolute,0);

	push	0
	push	OFFSET ?StorePixelZAbsolute@@YAXXZ	; StorePixelZAbsolute
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ; NativeCodeCache::X86Emit_CALLI

; 2040 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StorePixelZBilinearXY
_TEXT	ENDS
PUBLIC	?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PushVector
EXTRN	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ADDIR
EXTRN	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SUBIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_srcRegDisp$ = -24					; size = 4
_srcRegReadBaseReg_3$ = -20				; size = 4
_srcRegReadBaseReg_2$ = -16				; size = 4
_srcRegReadBaseReg_1$ = -12				; size = 4
_srcRegReadBaseReg_0$ = -8				; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PushVector

; 2043 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2044 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 2045 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 2046 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 2047 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 2048 :   x86BaseReg srcRegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,srcRegIndex+3);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_3$[ebp], eax

; 2049 : 
; 2050 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 2051 : 
; 2052 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2053 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2054 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2055 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2056 :   vars->codeCache->X86Emit_SUBIR(16, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 2057 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 464				; 000001d0H
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2058 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2059 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2060 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2061 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2062 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2063 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2064 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg_3, x86IndexReg_none, x86Scale_1, srcRegDisp+12);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg_3$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2065 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2066 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2067 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2068 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2069 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PushVector
_TEXT	ENDS
PUBLIC	?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PushVectorRz
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rzRegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_rzRegReadBaseReg$ = -20				; size = 4
_srcRegReadBaseReg_2$ = -16				; size = 4
_srcRegReadBaseReg_1$ = -12				; size = 4
_srcRegReadBaseReg_0$ = -8				; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PushVectorRz

; 2072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2073 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 2074 :   x86BaseReg srcRegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_0$[ebp], eax

; 2075 :   x86BaseReg srcRegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,srcRegIndex+1);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_1$[ebp], eax

; 2076 :   x86BaseReg srcRegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,srcRegIndex+2);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg_2$[ebp], eax

; 2077 : 
; 2078 :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 2079 : 
; 2080 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	eax, DWORD PTR _srcRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 2081 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2082 : 
; 2083 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2084 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg_0, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2085 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg_1, x86IndexReg_none, x86Scale_1, srcRegDisp+4);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2086 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, srcRegReadBaseReg_2, x86IndexReg_none, x86Scale_1, srcRegDisp+8);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2087 :   vars->codeCache->X86Emit_SUBIR(16, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 2088 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 464				; 000001d0H
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2089 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2090 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2091 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2092 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2093 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2094 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2095 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2096 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2097 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2098 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2099 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2100 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PushVectorRz
_TEXT	ENDS
PUBLIC	?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PushScalarRzi1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_rzRegDisp$ = -32					; size = 4
_rzi1RegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_rzRegReadBaseReg$ = -20				; size = 4
_rzi1RegReadBaseReg$ = -16				; size = 4
_ccRegReadBaseReg$ = -12				; size = 4
_srcRegReadBaseReg$ = -8				; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PushScalarRzi1

; 2103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2104 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 2105 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 2106 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2107 :   x86BaseReg rzi1RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi1RegReadBaseReg$[ebp], eax

; 2108 :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 2109 : 
; 2110 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 2111 :   int32 rzi1RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi1RegDisp$[ebp], eax

; 2112 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2113 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2114 : 
; 2115 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2116 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2117 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2118 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, rzi1RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi1RegDisp);

	mov	eax, DWORD PTR _rzi1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rzi1RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2119 :   vars->codeCache->X86Emit_SUBIR(16, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 2120 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 464				; 000001d0H
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2121 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2122 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2123 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2124 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2125 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2126 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2127 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2128 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2129 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2130 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2131 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2132 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PushScalarRzi1
_TEXT	ENDS
PUBLIC	?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PushScalarRzi2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_rzRegDisp$ = -32					; size = 4
_rzi2RegDisp$ = -28					; size = 4
_srcRegDisp$ = -24					; size = 4
_rzRegReadBaseReg$ = -20				; size = 4
_rzi2RegReadBaseReg$ = -16				; size = 4
_ccRegReadBaseReg$ = -12				; size = 4
_srcRegReadBaseReg$ = -8				; size = 4
_srcRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PushScalarRzi2

; 2135 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2136 :   uint32 srcRegIndex = nuance.fields[FIELD_MEM_FROM];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 2137 :   x86BaseReg srcRegReadBaseReg = GetScalarRegReadBaseReg(vars,srcRegIndex);

	mov	edx, DWORD PTR _srcRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 2138 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2139 :   x86BaseReg rzi2RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi2RegReadBaseReg$[ebp], eax

; 2140 :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 2141 : 
; 2142 :   int32 srcRegDisp = GetScalarRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 2143 :   int32 rzi2RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi2RegDisp$[ebp], eax

; 2144 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2145 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2146 : 
; 2147 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2148 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	eax, DWORD PTR _srcRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2149 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2150 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, rzi2RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi2RegDisp);

	mov	eax, DWORD PTR _rzi2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rzi2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2151 :   vars->codeCache->X86Emit_SUBIR(16, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 2152 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 464				; 000001d0H
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2153 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2154 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2155 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2156 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2157 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2158 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2159 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2160 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2161 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2162 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2163 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2164 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PushScalarRzi2
_TEXT	ENDS
PUBLIC	?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PopVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PopVector

; 2167 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 2168 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2169 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2170 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2171 : 
; 2172 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2173 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2174 :   vars->codeCache->X86Emit_ADDIR(16, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2175 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 464				; 000001d0H
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2176 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_ebp);

	push	21					; 00000015H
	push	8388607					; 007fffffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2177 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+560]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2178 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_ebp, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	5
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2179 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_ebp, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	5
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2180 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_ebp, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	5
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2181 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, x86BaseReg_ebp, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	5
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2182 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2183 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2184 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2185 :   vars->codeCache->X86Emit_BSWAP(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2186 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2187 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2188 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2189 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2190 : 
; 2191 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PopVector
_TEXT	ENDS
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PopVectorRz
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_rzRegDisp$ = -20					; size = 4
_destRegDisp$ = -16					; size = 4
_rzRegWriteBaseReg$ = -12				; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PopVectorRz

; 2194 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2195 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2196 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2197 :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 2198 : 
; 2199 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2200 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2201 : 
; 2202 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 464				; 000001d0H
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2203 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2204 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2205 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+560]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2206 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2207 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2208 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2209 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2210 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2211 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2212 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2213 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2214 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2215 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2216 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2217 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2218 :   vars->codeCache->X86Emit_ADDIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2219 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 464				; 000001d0H
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2220 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PopVectorRz
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
_TEXT	ENDS
PUBLIC	?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PopScalarRzi1
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmem.cpp
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_rzi1RegDisp$ = -32					; size = 4
_rzRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_ccRegWriteBaseReg$ = -20				; size = 4
_rzi1RegWriteBaseReg$ = -16				; size = 4
_rzRegWriteBaseReg$ = -12				; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PopScalarRzi1

; 2223 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2224 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2225 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2226 :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 2227 :   x86BaseReg rzi1RegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi1RegWriteBaseReg$[ebp], eax

; 2228 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2229 : 
; 2230 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2231 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2232 :   int32 rzi1RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi1RegDisp$[ebp], eax

; 2233 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2234 : 
; 2235 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2236 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2237 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2238 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2239 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2240 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2241 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2242 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2243 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2244 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2245 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2246 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2247 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2248 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, rzi1RegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzi1RegDisp);

	mov	ecx, DWORD PTR _rzi1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzi1RegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2249 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2250 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2251 :   vars->codeCache->X86Emit_ADDIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2252 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2253 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PopScalarRzi1
_TEXT	ENDS
PUBLIC	?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_PopScalarRzi2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_rzi2RegDisp$ = -32					; size = 4
_rzRegDisp$ = -28					; size = 4
_destRegDisp$ = -24					; size = 4
_ccRegWriteBaseReg$ = -20				; size = 4
_rzi2RegWriteBaseReg$ = -16				; size = 4
_rzRegWriteBaseReg$ = -12				; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_PopScalarRzi2

; 2256 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2257 :   uint32 destRegIndex = nuance.fields[FIELD_MEM_TO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2258 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2259 :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 2260 :   x86BaseReg rzi2RegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi2RegWriteBaseReg$[ebp], eax

; 2261 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2262 : 
; 2263 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2264 :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 2265 :   int32 rzi2RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi2RegDisp$[ebp], eax

; 2266 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2267 : 
; 2268 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2269 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2270 :   vars->codeCache->X86Emit_ANDIR(MPE_VALID_MEMORY_MASK, x86Reg_edx);

	push	18					; 00000012H
	push	8388607					; 007fffffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2271 :   vars->codeCache->X86Emit_ADDIR((uint32)vars->mpe->dtrom, x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+560]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2272 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 0);

	push	0
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2273 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 4);

	push	4
	push	0
	push	4
	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2274 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 8);

	push	8
	push	0
	push	4
	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2275 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2276 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2277 :   vars->codeCache->X86Emit_BSWAP(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2278 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2279 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, x86BaseReg_edx, x86IndexReg_none, x86Scale_1, 12);

	push	12					; 0000000cH
	push	0
	push	4
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2280 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2281 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, rzi2RegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzi2RegDisp);

	mov	ecx, DWORD PTR _rzi2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzi2RegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2282 :   vars->codeCache->X86Emit_BSWAP(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP

; 2283 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2284 :   vars->codeCache->X86Emit_ADDIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2285 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, (uint32)&(vars->mpe->sp));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2286 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_PopScalarRzi2
_TEXT	ENDS
EXTRN	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_XORRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -12						; size = 4
_disp$ = -8						; size = 4
_baseReg$ = -4						; size = 4
_vars$ = 8						; size = 4
_address$ = 12						; size = 4
_destReg$ = 16						; size = 4
?EmitControlRegisterLoad@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z PROC ; EmitControlRegisterLoad

; 2289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 2290 :   x86BaseReg baseReg;
; 2291 :   int32 disp;
; 2292 : 
; 2293 :   switch((address & 0x1FF0) >> 4)

	mov	eax, DWORD PTR _address$[ebp]
	and	eax, 8176				; 00001ff0H
	shr	eax, 4
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 44			; 0000002cH
	ja	$LN35@EmitContro
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN37@EmitContro[edx]
	jmp	DWORD PTR $LN38@EmitContro[eax*4]

; 2294 :   {
; 2295 :     case (0x00 >> 4):
; 2296 :       //mpectl
; 2297 :       break;

	jmp	$LN35@EmitContro

; 2298 :     case (0x10 >> 4):
; 2299 :       //excepsrc
; 2300 :       break;

	jmp	$LN35@EmitContro
$LN30@EmitContro:

; 2301 :     case (0x20 >> 4):
; 2302 :       vars->codeCache->X86Emit_XORRR(destReg, destReg);

	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2303 :       break;

	jmp	$LN35@EmitContro

; 2304 :     case (0x30 >> 4):
; 2305 :       //excephalten
; 2306 :       break;

	jmp	$LN35@EmitContro
$LN28@EmitContro:

; 2307 :     case (0x40 >> 4):
; 2308 :       //cc
; 2309 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2310 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2311 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2312 :       break;

	jmp	$LN35@EmitContro
$LN27@EmitContro:

; 2313 :     case (0x80 >> 4):
; 2314 :       //rz
; 2315 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2316 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2317 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2318 :       break;

	jmp	$LN35@EmitContro
$LN26@EmitContro:

; 2319 :     case (0x90 >> 4):
; 2320 :       //rzi1
; 2321 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2322 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2323 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2324 :       break;

	jmp	$LN35@EmitContro
$LN25@EmitContro:

; 2325 :     case (0xA0 >> 4):
; 2326 :       //rzi2
; 2327 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2328 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2329 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2330 :       break;

	jmp	$LN35@EmitContro
$LN24@EmitContro:

; 2331 :     case (0xB0 >> 4):
; 2332 :       //intvec1
; 2333 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->intvec1)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 412				; 0000019cH
	push	edx
	mov	eax, DWORD PTR _destReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2334 :       break;

	jmp	$LN35@EmitContro
$LN23@EmitContro:

; 2335 :     case (0xC0 >> 4):
; 2336 :       //intvec2
; 2337 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->intvec2)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 416				; 000001a0H
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2338 :       break;

	jmp	$LN35@EmitContro

; 2339 :     case (0xD0 >> 4):
; 2340 :       //intsrc
; 2341 :       break;

	jmp	$LN35@EmitContro
$LN21@EmitContro:

; 2342 :     case (0xE0 >> 4):
; 2343 :       //intclr
; 2344 :       vars->codeCache->X86Emit_XORRR(destReg, destReg);

	mov	eax, DWORD PTR _destReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2345 :     case (0xF0 >> 4):
; 2346 :       //intctl
; 2347 :     case (0x100 >> 4):
; 2348 :       //inten1
; 2349 :     case (0x110 >> 4):
; 2350 :       //inten1set
; 2351 :     case (0x130 >> 4):
; 2352 :       //inten2sel
; 2353 :       break;

	jmp	$LN35@EmitContro
$LN19@EmitContro:

; 2354 :     case (0x1E0 >> 4):
; 2355 :       //rc0
; 2356 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2357 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC0);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2358 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2359 :       break;

	jmp	$LN35@EmitContro
$LN18@EmitContro:

; 2360 :     case (0x1F0 >> 4):
; 2361 :       //rc1
; 2362 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2363 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC1);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2364 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2365 :       break;

	jmp	$LN35@EmitContro
$LN17@EmitContro:

; 2366 :     case (0x200 >> 4):
; 2367 :       //rx
; 2368 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2369 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2370 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2371 :       break;

	jmp	$LN35@EmitContro
$LN16@EmitContro:

; 2372 :     case (0x210 >> 4):
; 2373 :       //ry
; 2374 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2375 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2376 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2377 :       break;

	jmp	$LN35@EmitContro
$LN15@EmitContro:

; 2378 :     case (0x220 >> 4):
; 2379 :       //xyrange
; 2380 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2381 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2382 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2383 :       break;

	jmp	$LN35@EmitContro
$LN14@EmitContro:

; 2384 :     case (0x230 >> 4):
; 2385 :       //xybase
; 2386 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->xybase)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2387 :       break;

	jmp	$LN35@EmitContro
$LN13@EmitContro:

; 2388 :     case (0x240 >> 4):
; 2389 :       //xyctl
; 2390 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2391 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2392 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2393 :       break;

	jmp	$LN35@EmitContro
$LN12@EmitContro:

; 2394 :     case (0x250 >> 4):
; 2395 :       //ru
; 2396 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2397 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2398 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2399 :       break;

	jmp	$LN35@EmitContro
$LN11@EmitContro:

; 2400 :     case (0x260 >> 4):
; 2401 :       //rv
; 2402 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2403 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2404 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2405 :       break;

	jmp	$LN35@EmitContro
$LN10@EmitContro:

; 2406 :     case (0x270 >> 4):
; 2407 :       //uvrange
; 2408 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2409 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2410 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2411 :       break;

	jmp	$LN35@EmitContro
$LN9@EmitContro:

; 2412 :     case (0x280 >> 4):
; 2413 :       //uvbase
; 2414 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->uvbase)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 452				; 000001c4H
	push	edx
	mov	eax, DWORD PTR _destReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR
$LN8@EmitContro:

; 2415 :     case (0x290 >> 4):
; 2416 :       //uvctl
; 2417 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2418 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2419 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _destReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2420 :       break;

	jmp	$LN35@EmitContro
$LN7@EmitContro:

; 2421 :     case (0x2A0 >> 4):
; 2422 :       //linpixctl
; 2423 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->linpixctl)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 456				; 000001c8H
	push	eax
	mov	ecx, DWORD PTR _destReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2424 :       break;

	jmp	$LN35@EmitContro
$LN6@EmitContro:

; 2425 :     case (0x2B0 >> 4):
; 2426 :       //clutbase
; 2427 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->clutbase)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 460				; 000001ccH
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2428 :       break;

	jmp	$LN35@EmitContro
$LN5@EmitContro:

; 2429 :     case (0x2C0 >> 4):
; 2430 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2431 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2432 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2433 :       break;

	jmp	SHORT $LN35@EmitContro
$LN4@EmitContro:

; 2434 :     case (0x2D0 >> 4):
; 2435 :       //acshift
; 2436 :       baseReg = GetMiscRegReadBaseReg(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2437 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2438 :       vars->codeCache->X86Emit_MOVMR(destReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _destReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2439 :       break;

	jmp	SHORT $LN35@EmitContro
$LN3@EmitContro:

; 2440 :     case (0x2E0 >> 4):
; 2441 :       //sp
; 2442 :       vars->codeCache->X86Emit_MOVMR(destReg, ((uint32)&(vars->mpe->sp)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 464				; 000001d0H
	push	edx
	mov	eax, DWORD PTR _destReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR
$LN35@EmitContro:

; 2443 :       break;
; 2444 :     case (0x500 >> 4):
; 2445 :       //odmactl
; 2446 :     case (0x510 >> 4):
; 2447 :       //odmacptr
; 2448 :     case (0x600 >> 4):
; 2449 :       //mdmactl
; 2450 :     case (0x610 >> 4):
; 2451 :       //mdmacptr
; 2452 :     case (0x7E0 >> 4):
; 2453 :       //comminfo
; 2454 :     case (0x7F0 >> 4):
; 2455 :       //commctl
; 2456 :     case (0x800 >> 4):
; 2457 :       //commxmit0 to commxmit3
; 2458 :     case (0x810 >> 4):
; 2459 :       //commrecv0 to commrecv3
; 2460 :       break;
; 2461 :     default:
; 2462 :       break;
; 2463 :   }
; 2464 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN38@EmitContro:
	DD	$LN30@EmitContro
	DD	$LN28@EmitContro
	DD	$LN27@EmitContro
	DD	$LN26@EmitContro
	DD	$LN25@EmitContro
	DD	$LN24@EmitContro
	DD	$LN23@EmitContro
	DD	$LN21@EmitContro
	DD	$LN19@EmitContro
	DD	$LN18@EmitContro
	DD	$LN17@EmitContro
	DD	$LN16@EmitContro
	DD	$LN15@EmitContro
	DD	$LN14@EmitContro
	DD	$LN13@EmitContro
	DD	$LN12@EmitContro
	DD	$LN11@EmitContro
	DD	$LN10@EmitContro
	DD	$LN9@EmitContro
	DD	$LN8@EmitContro
	DD	$LN7@EmitContro
	DD	$LN6@EmitContro
	DD	$LN5@EmitContro
	DD	$LN4@EmitContro
	DD	$LN3@EmitContro
	DD	$LN35@EmitContro
$LN37@EmitContro:
	DB	0
	DB	25					; 00000019H
	DB	1
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	25					; 00000019H
	DB	7
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
?EmitControlRegisterLoad@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ENDP ; EmitControlRegisterLoad
_TEXT	ENDS
EXTRN	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SARIR
EXTRN	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORRM
EXTRN	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVZRR
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
EXTRN	?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDRM
EXTRN	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_NOTR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -20						; size = 4
_ccRegDisp$ = -16					; size = 4
_ccRegWriteBaseReg$ = -12				; size = 4
_disp$ = -8						; size = 4
_baseReg$ = -4						; size = 4
_vars$ = 8						; size = 4
_address$ = 12						; size = 4
_srcReg$ = 16						; size = 4
?EmitControlRegisterStore@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z PROC ; EmitControlRegisterStore

; 2467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2468 :   x86BaseReg baseReg;
; 2469 :   int32 disp;
; 2470 : 
; 2471 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2472 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2473 : 
; 2474 :   switch((address & 0x1FF0) >> 4)

	mov	edx, DWORD PTR _address$[ebp]
	and	edx, 8176				; 00001ff0H
	shr	edx, 4
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv72[ebp]
	sub	eax, 2
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 127		; 0000007fH
	ja	$LN38@EmitContro@2
	mov	ecx, DWORD PTR tv72[ebp]
	movzx	edx, BYTE PTR $LN40@EmitContro@2[ecx]
	jmp	DWORD PTR $LN41@EmitContro@2[edx*4]

; 2475 :   {
; 2476 :     case (0x00 >> 4):
; 2477 :       //mpectl
; 2478 :       break;

	jmp	$LN38@EmitContro@2

; 2479 :     case (0x10 >> 4):
; 2480 :       //excepsrc
; 2481 :       break;

	jmp	$LN38@EmitContro@2
$LN33@EmitContro@2:

; 2482 :     case (0x20 >> 4):
; 2483 :       vars->codeCache->X86Emit_NOTR(srcReg);

	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NOTR

; 2484 :       vars->codeCache->X86Emit_ANDRM(srcReg,((uint32)&(vars->mpe->excepsrc)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 388				; 00000184H
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDRM

; 2485 :       break;

	jmp	$LN38@EmitContro@2

; 2486 :     case (0x30 >> 4):
; 2487 :       //excephalten
; 2488 :       break;

	jmp	$LN38@EmitContro@2
$LN31@EmitContro@2:

; 2489 :     case (0x40 >> 4):
; 2490 :       //cc
; 2491 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2492 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2493 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2494 :       break;

	jmp	$LN38@EmitContro@2
$LN30@EmitContro@2:

; 2495 :     case (0x80 >> 4):
; 2496 :       //rz
; 2497 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2498 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2499 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2500 :       break;

	jmp	$LN38@EmitContro@2
$LN29@EmitContro@2:

; 2501 :     case (0x90 >> 4):
; 2502 :       //rzi1
; 2503 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2504 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2505 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2506 :       break;

	jmp	$LN38@EmitContro@2
$LN28@EmitContro@2:

; 2507 :     case (0xA0 >> 4):
; 2508 :       //rzi2
; 2509 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2510 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2511 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2512 :       break;

	jmp	$LN38@EmitContro@2
$LN27@EmitContro@2:

; 2513 :     case (0xB0 >> 4):
; 2514 :       //intvec1
; 2515 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->intvec1)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 412				; 0000019cH
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2516 :       break;

	jmp	$LN38@EmitContro@2
$LN26@EmitContro@2:

; 2517 :     case (0xC0 >> 4):
; 2518 :       //intvec2
; 2519 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->intvec2)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 416				; 000001a0H
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2520 :       break;

	jmp	$LN38@EmitContro@2

; 2521 :     case (0xD0 >> 4):
; 2522 :       //intsrc
; 2523 :       break;

	jmp	$LN38@EmitContro@2
$LN24@EmitContro@2:

; 2524 :     case (0xE0 >> 4):
; 2525 :       //intclr
; 2526 :       vars->codeCache->X86Emit_NOTR(srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NOTR

; 2527 :       vars->codeCache->X86Emit_ANDRM(srcReg, ((uint32)&(vars->mpe->intsrc)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 420				; 000001a4H
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDRM

; 2528 :       break;

	jmp	$LN38@EmitContro@2

; 2529 :     case (0xF0 >> 4):
; 2530 :       //intctl
; 2531 :       break;

	jmp	$LN38@EmitContro@2

; 2532 :     case (0x100 >> 4):
; 2533 :       //inten1
; 2534 :       break;

	jmp	$LN38@EmitContro@2

; 2535 :     case (0x110 >> 4):
; 2536 :       //inten1set
; 2537 :       break;

	jmp	$LN38@EmitContro@2

; 2538 :     case (0x130 >> 4):
; 2539 :       //inten2sel
; 2540 :       break;

	jmp	$LN38@EmitContro@2
$LN19@EmitContro@2:

; 2541 :     case (0x1E0 >> 4):
; 2542 :       //rc0
; 2543 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2544 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2545 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2546 :       vars->codeCache->X86Emit_ANDIM(~CC_COUNTER0_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	push	-33					; ffffffdfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2547 :       vars->codeCache->X86Emit_ANDIR(0xFFFF, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	65535					; 0000ffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2548 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2549 :       vars->codeCache->X86Emit_MOVIR(0, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2550 :       vars->codeCache->X86Emit_MOVIR(CC_COUNTER0_ZERO, x86Reg_ebp);

	push	21					; 00000015H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2551 :       vars->codeCache->X86Emit_CMOVZRR(srcReg, x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 2552 :       vars->codeCache->X86Emit_ORRM(srcReg, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM

; 2553 :       break;

	jmp	$LN38@EmitContro@2
$LN18@EmitContro@2:

; 2554 :     case (0x1F0 >> 4):
; 2555 :       //rc1
; 2556 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2557 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC1);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2558 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2559 :       vars->codeCache->X86Emit_ANDIM(~CC_COUNTER1_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	push	-65					; ffffffbfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2560 :       vars->codeCache->X86Emit_ANDIR(0xFFFF, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	65535					; 0000ffffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2561 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2562 :       vars->codeCache->X86Emit_MOVIR(0, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2563 :       vars->codeCache->X86Emit_MOVIR(CC_COUNTER1_ZERO, x86Reg_ebp);

	push	21					; 00000015H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2564 :       vars->codeCache->X86Emit_CMOVZRR(srcReg, x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 2565 :       vars->codeCache->X86Emit_ORRM(srcReg, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM

; 2566 :       break;

	jmp	$LN38@EmitContro@2
$LN17@EmitContro@2:

; 2567 :     case (0x200 >> 4):
; 2568 :       //rx
; 2569 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RX);

	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2570 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2571 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2572 :       break;

	jmp	$LN38@EmitContro@2
$LN16@EmitContro@2:

; 2573 :     case (0x210 >> 4):
; 2574 :       //ry
; 2575 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RY);

	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2576 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2577 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2578 :       break;

	jmp	$LN38@EmitContro@2
$LN15@EmitContro@2:

; 2579 :     case (0x220 >> 4):
; 2580 :       //xyrange
; 2581 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2582 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2583 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2584 :       break;

	jmp	$LN38@EmitContro@2
$LN14@EmitContro@2:

; 2585 :     case (0x230 >> 4):
; 2586 :       //xybase
; 2587 :       vars->codeCache->X86Emit_ANDIR(0xFFFFFFFC, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	-4					; fffffffcH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2588 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->xybase)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 448				; 000001c0H
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2589 :       break;

	jmp	$LN38@EmitContro@2
$LN13@EmitContro@2:

; 2590 :     case (0x240 >> 4):
; 2591 :       //xyctl
; 2592 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2593 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2594 :       vars->codeCache->X86Emit_ANDIR(~((1UL << 31) | (1UL << 27) | (1UL << 11)), srcReg);

	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	push	2013263871				; 77fff7ffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2595 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2596 :       break;

	jmp	$LN38@EmitContro@2
$LN12@EmitContro@2:

; 2597 :     case (0x250 >> 4):
; 2598 :       //ru
; 2599 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2600 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2601 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2602 :       break;

	jmp	$LN38@EmitContro@2
$LN11@EmitContro@2:

; 2603 :     case (0x260 >> 4):
; 2604 :       //rv
; 2605 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2606 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2607 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2608 :       break;

	jmp	$LN38@EmitContro@2
$LN10@EmitContro@2:

; 2609 :     case (0x270 >> 4):
; 2610 :       //uvrange
; 2611 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2612 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2613 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2614 :       break;

	jmp	$LN38@EmitContro@2
$LN9@EmitContro@2:

; 2615 :     case (0x280 >> 4):
; 2616 :       //uvbase
; 2617 :       vars->codeCache->X86Emit_ANDIR(0xFFFFFFFC, srcReg);

	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	push	-4					; fffffffcH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2618 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->uvbase)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 452				; 000001c4H
	push	ecx
	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2619 :       break;

	jmp	$LN38@EmitContro@2
$LN8@EmitContro@2:

; 2620 :     case (0x290 >> 4):
; 2621 :       //uvctl
; 2622 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2623 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2624 :       vars->codeCache->X86Emit_ANDIR(~((1UL << 31) | (1UL << 27) | (1UL << 11)), srcReg);

	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	push	2013263871				; 77fff7ffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2625 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2626 :       break;

	jmp	$LN38@EmitContro@2
$LN7@EmitContro@2:

; 2627 :     case (0x2A0 >> 4):
; 2628 :       //linpixctl
; 2629 :       vars->codeCache->X86Emit_ANDIR(((0x01UL << 28) | (0xFUL << 20)), srcReg);

	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	push	284164096				; 10f00000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2630 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->linpixctl)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 456				; 000001c8H
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2631 :       break;

	jmp	$LN38@EmitContro@2
$LN6@EmitContro@2:

; 2632 :     case (0x2B0 >> 4):
; 2633 :       //clutbase
; 2634 :       vars->codeCache->X86Emit_ANDIR(0xFFFFFFC0, srcReg);

	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	push	-64					; ffffffc0H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2635 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->clutbase)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 460				; 000001ccH
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2636 :       break;

	jmp	$LN38@EmitContro@2
$LN5@EmitContro@2:

; 2637 :     case (0x2C0 >> 4):
; 2638 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2639 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2640 :       vars->codeCache->X86Emit_ANDIR(0x03, srcReg);

	mov	edx, DWORD PTR _srcReg$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2641 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2642 :       break;

	jmp	$LN38@EmitContro@2
$LN4@EmitContro@2:

; 2643 :     case (0x2D0 >> 4):
; 2644 :       //acshift
; 2645 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2646 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2647 :       vars->codeCache->X86Emit_SHLIR(srcReg, 25);

	push	25					; 00000019H
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2648 :       vars->codeCache->X86Emit_SARIR(srcReg, 25);

	push	25					; 00000019H
	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2649 :       vars->codeCache->X86Emit_MOVRM(srcReg, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2650 :       break;

	jmp	$LN38@EmitContro@2
$LN3@EmitContro@2:

; 2651 :     case (0x2E0 >> 4):
; 2652 :       //sp
; 2653 :       vars->codeCache->X86Emit_ANDIR(0xFFFFFFF0, srcReg);

	mov	eax, DWORD PTR _srcReg$[ebp]
	push	eax
	push	-16					; fffffff0H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2654 :       vars->codeCache->X86Emit_MOVRM(srcReg, ((uint32)&(vars->mpe->sp)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 464				; 000001d0H
	push	eax
	mov	ecx, DWORD PTR _srcReg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2655 :       break;

	jmp	SHORT $LN38@EmitContro@2
$LN2@EmitContro@2:

; 2656 :     case (0x500 >> 4):
; 2657 :       //odmactl
; 2658 :     case (0x510 >> 4):
; 2659 :       //odmacptr
; 2660 :     case (0x600 >> 4):
; 2661 :       //mdmactl
; 2662 :     case (0x610 >> 4):
; 2663 :       //mdmacptr
; 2664 :     case (0x7E0 >> 4):
; 2665 :       //comminfo
; 2666 :     case (0x7F0 >> 4):
; 2667 :       //commctl
; 2668 :     case (0x800 >> 4):
; 2669 :       //commxmit0 to commxmit3
; 2670 :     case (0x810 >> 4):
; 2671 :       //commrecv0 to commrecv3
; 2672 :       vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->interpretNextPacket));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 620				; 0000026cH
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2673 :       vars->codeCache->X86Emit_MOVIM(vars->pInstructionEntry->packet->pcexec, x86MemPtr_dword, (uint32)&(vars->mpe->pcexec));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 408				; 00000198H
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2674 :       Emit_ExitBlock(vars);

	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4
$LN38@EmitContro@2:

; 2675 :       break;
; 2676 :     default:
; 2677 :       break;
; 2678 :   }
; 2679 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN41@EmitContro@2:
	DD	$LN33@EmitContro@2
	DD	$LN31@EmitContro@2
	DD	$LN30@EmitContro@2
	DD	$LN29@EmitContro@2
	DD	$LN28@EmitContro@2
	DD	$LN27@EmitContro@2
	DD	$LN26@EmitContro@2
	DD	$LN24@EmitContro@2
	DD	$LN19@EmitContro@2
	DD	$LN18@EmitContro@2
	DD	$LN17@EmitContro@2
	DD	$LN16@EmitContro@2
	DD	$LN15@EmitContro@2
	DD	$LN14@EmitContro@2
	DD	$LN13@EmitContro@2
	DD	$LN12@EmitContro@2
	DD	$LN11@EmitContro@2
	DD	$LN10@EmitContro@2
	DD	$LN9@EmitContro@2
	DD	$LN8@EmitContro@2
	DD	$LN7@EmitContro@2
	DD	$LN6@EmitContro@2
	DD	$LN5@EmitContro@2
	DD	$LN4@EmitContro@2
	DD	$LN3@EmitContro@2
	DD	$LN2@EmitContro@2
	DD	$LN38@EmitContro@2
$LN40@EmitContro@2:
	DB	0
	DB	26					; 0000001aH
	DB	1
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	26					; 0000001aH
	DB	7
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	26					; 0000001aH
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
?EmitControlRegisterStore@@YAXPAVEmitterVariables@@IW4x86Reg@@@Z ENDP ; EmitControlRegisterStore
_TEXT	ENDS
EXTRN	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -20						; size = 4
_ccRegDisp$ = -16					; size = 4
_ccRegWriteBaseReg$ = -12				; size = 4
_disp$ = -8						; size = 4
_baseReg$ = -4						; size = 4
_vars$ = 8						; size = 4
_address$ = 12						; size = 4
_imm$ = 16						; size = 4
?EmitControlRegisterStoreImmediate@@YAXPAVEmitterVariables@@II@Z PROC ; EmitControlRegisterStoreImmediate

; 2682 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2683 :   x86BaseReg baseReg;
; 2684 :   int32 disp;
; 2685 : 
; 2686 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2687 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2688 : 
; 2689 :   switch((address & 0x1FF0) >> 4)

	mov	edx, DWORD PTR _address$[ebp]
	and	edx, 8176				; 00001ff0H
	shr	edx, 4
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv72[ebp]
	sub	eax, 2
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 44			; 0000002cH
	ja	$LN42@EmitContro@3
	mov	ecx, DWORD PTR tv72[ebp]
	movzx	edx, BYTE PTR $LN44@EmitContro@3[ecx]
	jmp	DWORD PTR $LN45@EmitContro@3[edx*4]

; 2690 :   {
; 2691 :     case (0x00 >> 4):
; 2692 :       //mpectl
; 2693 :       break;

	jmp	$LN42@EmitContro@3

; 2694 :     case (0x10 >> 4):
; 2695 :       //excepsrc
; 2696 :       break;

	jmp	$LN42@EmitContro@3
$LN37@EmitContro@3:

; 2697 :     case (0x20 >> 4):
; 2698 :       vars->codeCache->X86Emit_ANDIM(~imm, x86MemPtr_dword, ((uint32)&(vars->mpe->excepsrc)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 388				; 00000184H
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2699 :       break;

	jmp	$LN42@EmitContro@3

; 2700 :     case (0x30 >> 4):
; 2701 :       //excephalten
; 2702 :       break;

	jmp	$LN42@EmitContro@3
$LN35@EmitContro@3:

; 2703 :     case (0x40 >> 4):
; 2704 :       //cc
; 2705 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2706 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2707 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2708 :       break;

	jmp	$LN42@EmitContro@3
$LN34@EmitContro@3:

; 2709 :     case (0x80 >> 4):
; 2710 :       //rz
; 2711 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2712 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2713 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2714 :       break;

	jmp	$LN42@EmitContro@3
$LN33@EmitContro@3:

; 2715 :     case (0x90 >> 4):
; 2716 :       //rzi1
; 2717 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2718 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2719 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2720 :       break;

	jmp	$LN42@EmitContro@3
$LN32@EmitContro@3:

; 2721 :     case (0xA0 >> 4):
; 2722 :       //rzi2
; 2723 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2724 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2725 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2726 :       break;

	jmp	$LN42@EmitContro@3
$LN31@EmitContro@3:

; 2727 :     case (0xB0 >> 4):
; 2728 :       //intvec1
; 2729 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, ((uint32)&(vars->mpe->intvec1)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 412				; 0000019cH
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2730 :       break;

	jmp	$LN42@EmitContro@3
$LN30@EmitContro@3:

; 2731 :     case (0xC0 >> 4):
; 2732 :       //intvec2
; 2733 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, ((uint32)&(vars->mpe->intvec2)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 416				; 000001a0H
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2734 :       break;

	jmp	$LN42@EmitContro@3

; 2735 :     case (0xD0 >> 4):
; 2736 :       //intsrc
; 2737 :       break;

	jmp	$LN42@EmitContro@3
$LN28@EmitContro@3:

; 2738 :     case (0xE0 >> 4):
; 2739 :       //intclr
; 2740 :       vars->codeCache->X86Emit_ANDIM(~imm, x86MemPtr_dword, ((uint32)&(vars->mpe->intsrc)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 420				; 000001a4H
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2741 :       break;

	jmp	$LN42@EmitContro@3

; 2742 :     case (0xF0 >> 4):
; 2743 :       //intctl
; 2744 :       break;

	jmp	$LN42@EmitContro@3

; 2745 :     case (0x100 >> 4):
; 2746 :       //inten1
; 2747 :       break;

	jmp	$LN42@EmitContro@3

; 2748 :     case (0x110 >> 4):
; 2749 :       //inten1set
; 2750 :       break;

	jmp	$LN42@EmitContro@3

; 2751 :     case (0x130 >> 4):
; 2752 :       //inten2sel
; 2753 :       break;

	jmp	$LN42@EmitContro@3
$LN23@EmitContro@3:

; 2754 :     case (0x1E0 >> 4):
; 2755 :       //rc0
; 2756 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2757 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC0);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2758 : 
; 2759 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFF, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	and	edx, 65535				; 0000ffffH
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2760 :       if(imm & 0xFFFF)

	mov	ecx, DWORD PTR _imm$[ebp]
	and	ecx, 65535				; 0000ffffH
	je	SHORT $LN22@EmitContro@3

; 2761 :       {
; 2762 :         vars->codeCache->X86Emit_ANDIM(~CC_COUNTER0_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	push	-33					; ffffffdfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2763 :       }
; 2764 :       else

	jmp	SHORT $LN21@EmitContro@3
$LN22@EmitContro@3:

; 2765 :       {
; 2766 :         vars->codeCache->X86Emit_ORIM(CC_COUNTER0_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN21@EmitContro@3:

; 2767 :       }
; 2768 :       break;

	jmp	$LN42@EmitContro@3
$LN20@EmitContro@3:

; 2769 :     case (0x1F0 >> 4):
; 2770 :       //rc1
; 2771 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2772 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RC1);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2773 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFF, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	and	eax, 65535				; 0000ffffH
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2774 :       if(imm & 0xFFFF)

	mov	edx, DWORD PTR _imm$[ebp]
	and	edx, 65535				; 0000ffffH
	je	SHORT $LN19@EmitContro@3

; 2775 :       {
; 2776 :         vars->codeCache->X86Emit_ANDIM(~CC_COUNTER1_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	push	-65					; ffffffbfH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2777 :       }
; 2778 :       else

	jmp	SHORT $LN18@EmitContro@3
$LN19@EmitContro@3:

; 2779 :       {
; 2780 :         vars->codeCache->X86Emit_ORIM(CC_COUNTER1_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	push	64					; 00000040H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN18@EmitContro@3:

; 2781 :       }
; 2782 :       break;

	jmp	$LN42@EmitContro@3
$LN17@EmitContro@3:

; 2783 :     case (0x200 >> 4):
; 2784 :       //rx
; 2785 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RX);

	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2786 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RX);

	push	3
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2787 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2788 :       break;

	jmp	$LN42@EmitContro@3
$LN16@EmitContro@3:

; 2789 :     case (0x210 >> 4):
; 2790 :       //ry
; 2791 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RY);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2792 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RY);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2793 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2794 :       break;

	jmp	$LN42@EmitContro@3
$LN15@EmitContro@3:

; 2795 :     case (0x220 >> 4):
; 2796 :       //xyrange
; 2797 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2798 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2799 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2800 :       break;

	jmp	$LN42@EmitContro@3
$LN14@EmitContro@3:

; 2801 :     case (0x230 >> 4):
; 2802 :       //xybase
; 2803 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFFFFFC, x86MemPtr_dword, ((uint32)&(vars->mpe->xybase)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 448				; 000001c0H
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	and	edx, -4					; fffffffcH
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2804 :       break;

	jmp	$LN42@EmitContro@3
$LN13@EmitContro@3:

; 2805 :     case (0x240 >> 4):
; 2806 :       //xyctl
; 2807 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2808 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_XYCTL);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2809 :       imm &= (~((1UL << 31) | (1UL << 27) | (1UL << 11)));

	mov	eax, DWORD PTR _imm$[ebp]
	and	eax, 2013263871				; 77fff7ffH
	mov	DWORD PTR _imm$[ebp], eax

; 2810 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2811 :       break;

	jmp	$LN42@EmitContro@3
$LN12@EmitContro@3:

; 2812 :     case (0x250 >> 4):
; 2813 :       //ru
; 2814 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2815 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2816 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2817 :       break;

	jmp	$LN42@EmitContro@3
$LN11@EmitContro@3:

; 2818 :     case (0x260 >> 4):
; 2819 :       //rv
; 2820 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2821 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2822 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2823 :       break;

	jmp	$LN42@EmitContro@3
$LN10@EmitContro@3:

; 2824 :     case (0x270 >> 4):
; 2825 :       //uvrange
; 2826 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2827 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2828 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _baseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2829 :       break;

	jmp	$LN42@EmitContro@3
$LN9@EmitContro@3:

; 2830 :     case (0x280 >> 4):
; 2831 :       //uvbase
; 2832 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFFFFFC, x86MemPtr_dword, ((uint32)&(vars->mpe->uvbase)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 452				; 000001c4H
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	and	ecx, -4					; fffffffcH
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2833 :       break;

	jmp	$LN42@EmitContro@3
$LN8@EmitContro@3:

; 2834 :     case (0x290 >> 4):
; 2835 :       //uvctl
; 2836 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2837 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2838 :       imm &= (~((1UL << 31) | (1UL << 27) | (1UL << 11)));

	mov	edx, DWORD PTR _imm$[ebp]
	and	edx, 2013263871				; 77fff7ffH
	mov	DWORD PTR _imm$[ebp], edx

; 2839 :       vars->codeCache->X86Emit_MOVIM(imm, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _baseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2840 :       break;

	jmp	$LN42@EmitContro@3
$LN7@EmitContro@3:

; 2841 :     case (0x2A0 >> 4):
; 2842 :       //linpixctl
; 2843 :       vars->codeCache->X86Emit_MOVIM(imm & ((0x01UL << 28) | (0xFUL << 20)), x86MemPtr_dword, ((uint32)&(vars->mpe->linpixctl)));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 456				; 000001c8H
	push	edx
	push	2
	mov	eax, DWORD PTR _imm$[ebp]
	and	eax, 284164096				; 10f00000H
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2844 :       break;

	jmp	$LN42@EmitContro@3
$LN6@EmitContro@3:

; 2845 :     case (0x2B0 >> 4):
; 2846 :       //clutbase
; 2847 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFFFFC0, x86MemPtr_dword, ((uint32)&(vars->mpe->clutbase)));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 460				; 000001ccH
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	and	ecx, -64				; ffffffc0H
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2848 :       break;

	jmp	$LN42@EmitContro@3
$LN5@EmitContro@3:

; 2849 :     case (0x2C0 >> 4):
; 2850 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2851 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2852 :       vars->codeCache->X86Emit_MOVIM(imm & 0x03, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	and	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2853 :       break;

	jmp	SHORT $LN42@EmitContro@3
$LN4@EmitContro@3:

; 2854 :     case (0x2D0 >> 4):
; 2855 :       //acshift
; 2856 :       baseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _baseReg$[ebp], eax

; 2857 :       disp = GetMiscRegEmitDisp(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _disp$[ebp], eax

; 2858 :       vars->codeCache->X86Emit_MOVIM(((int32)(imm << 25)) >> 25, x86MemPtr_dword, baseReg, x86IndexReg_none, x86Scale_1, disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _baseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _imm$[ebp]
	shl	ecx, 25					; 00000019H
	sar	ecx, 25					; 00000019H
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 2859 :       break;

	jmp	SHORT $LN42@EmitContro@3
$LN3@EmitContro@3:

; 2860 :     case (0x2E0 >> 4):
; 2861 :       //sp
; 2862 :       vars->codeCache->X86Emit_MOVIM(imm & 0xFFFFFFF0, x86MemPtr_dword, ((uint32)&(vars->mpe->sp)));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 464				; 000001d0H
	push	ecx
	push	2
	mov	edx, DWORD PTR _imm$[ebp]
	and	edx, -16				; fffffff0H
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM
$LN42@EmitContro@3:

; 2863 :       break;
; 2864 :     case (0x500 >> 4):
; 2865 :       //odmactl
; 2866 :     case (0x510 >> 4):
; 2867 :       //odmacptr
; 2868 :     case (0x600 >> 4):
; 2869 :       //mdmactl
; 2870 :     case (0x610 >> 4):
; 2871 :       //mdmacptr
; 2872 :     case (0x7E0 >> 4):
; 2873 :       //comminfo
; 2874 :     case (0x7F0 >> 4):
; 2875 :       //commctl
; 2876 :     case (0x800 >> 4):
; 2877 :       //commxmit0 to commxmit3
; 2878 :     case (0x810 >> 4):
; 2879 :       //commrecv0 to commrecv3
; 2880 :       break;
; 2881 :     default:
; 2882 :       break;
; 2883 :   }
; 2884 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN45@EmitContro@3:
	DD	$LN37@EmitContro@3
	DD	$LN35@EmitContro@3
	DD	$LN34@EmitContro@3
	DD	$LN33@EmitContro@3
	DD	$LN32@EmitContro@3
	DD	$LN31@EmitContro@3
	DD	$LN30@EmitContro@3
	DD	$LN28@EmitContro@3
	DD	$LN23@EmitContro@3
	DD	$LN20@EmitContro@3
	DD	$LN17@EmitContro@3
	DD	$LN16@EmitContro@3
	DD	$LN15@EmitContro@3
	DD	$LN14@EmitContro@3
	DD	$LN13@EmitContro@3
	DD	$LN12@EmitContro@3
	DD	$LN11@EmitContro@3
	DD	$LN10@EmitContro@3
	DD	$LN9@EmitContro@3
	DD	$LN8@EmitContro@3
	DD	$LN7@EmitContro@3
	DD	$LN6@EmitContro@3
	DD	$LN5@EmitContro@3
	DD	$LN4@EmitContro@3
	DD	$LN3@EmitContro@3
	DD	$LN42@EmitContro@3
$LN44@EmitContro@3:
	DB	0
	DB	25					; 00000019H
	DB	1
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	25					; 00000019H
	DB	7
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	25					; 00000019H
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
?EmitControlRegisterStoreImmediate@@YAXPAVEmitterVariables@@II@Z ENDP ; EmitControlRegisterStoreImmediate
_TEXT	ENDS
END

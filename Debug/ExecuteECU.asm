; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\ExecuteECU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG12178
_DATA	ENDS
CONST	SEGMENT
$SG12178 DB	'bad allocation', 00H
CONST	ENDS
PUBLIC	?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_ECU_NOP
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\executeecu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_ECU_NOP

; 8    : {

	push	ebp
	mov	ebp, esp

; 9    : }

	pop	ebp
	ret	0
?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_ECU_NOP
_TEXT	ENDS
PUBLIC	?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_Halt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_Halt

; 12   : {

	push	ebp
	mov	ebp, esp

; 13   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN4@Execute_Ha

; 14   :   {
; 15   :     mpe.excepsrc |= 0x01;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR [ecx+388]
	or	edx, 1
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax+388], edx

; 16   :     mpe.invalidateRegionStart = MPE_IRAM_BASE;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+624], 540016640		; 20300000H

; 17   :     mpe.invalidateRegionEnd = (MPE_IRAM_BASE + OVERLAY_SIZE - 1);

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+628], 540024831		; 20301fffH

; 18   : 
; 19   :     //If the halt enable bit for the halt exception is not set
; 20   :     if(!(mpe.excephalten & (1UL << 0)))

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	and	ecx, 1
	jne	SHORT $LN2@Execute_Ha

; 21   :     {
; 22   :       //set exception bit in interrupt source register
; 23   :       mpe.intsrc |= 0x01;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR [edx+420]
	or	eax, 1
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+420], eax

; 24   :     }
; 25   :     else

	jmp	SHORT $LN4@Execute_Ha
$LN2@Execute_Ha:

; 26   :     {
; 27   :       mpe.mpectl &= ~MPECTRL_MPEGO;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR [edx+384]
	and	eax, -3					; fffffffdH
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+384], eax
$LN4@Execute_Ha:

; 28   :     }
; 29   :   }
; 30   : }

	pop	ebp
	ret	0
?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_Halt
_TEXT	ENDS
PUBLIC	?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_BRAAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_BRAAlways

; 33   : {

	push	ebp
	mov	ebp, esp

; 34   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_BR

; 35   :   {
; 36   :     mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 37   :     mpe.ecuSkipCounter = 3;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 3
$LN2@Execute_BR:

; 38   :   }
; 39   : }

	pop	ebp
	ret	0
?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_BRAAlways
_TEXT	ENDS
PUBLIC	?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_BRAAlways_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_BRAAlways_NOP

; 42   : {

	push	ebp
	mov	ebp, esp

; 43   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_BR@2

; 44   :   {
; 45   :     mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 46   :     mpe.ecuSkipCounter = 1;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 1
$LN2@Execute_BR@2:

; 47   :   }
; 48   : }

	pop	ebp
	ret	0
?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_BRAAlways_NOP
_TEXT	ENDS
PUBLIC	?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_BRAConditional
EXTRN	?TestConditionCode@MPE@@QAE_NI@Z:PROC		; MPE::TestConditionCode
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_BRAConditional

; 51   : {

	push	ebp
	mov	ebp, esp

; 52   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_BR@3

; 53   :   {
; 54   :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_BR@3

; 55   :     {
; 56   :       mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 57   :       mpe.ecuSkipCounter = 3;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 3
$LN3@Execute_BR@3:

; 58   :     }
; 59   :   }
; 60   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_BRAConditional
_TEXT	ENDS
PUBLIC	?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_BRAConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_BRAConditional_NOP

; 63   : {

	push	ebp
	mov	ebp, esp

; 64   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_BR@4

; 65   :   {
; 66   :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_BR@4

; 67   :     {
; 68   :       mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 69   :       mpe.ecuSkipCounter = 1;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 1
$LN3@Execute_BR@4:

; 70   :     }
; 71   :   }
; 72   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_BRAConditional_NOP
_TEXT	ENDS
PUBLIC	?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JMPAlwaysIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JMPAlwaysIndirect

; 74   : {

	push	ebp
	mov	ebp, esp

; 75   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JM

; 76   :   {
; 77   :     mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 78   :     mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN2@Execute_JM:

; 79   :   }
; 80   : }

	pop	ebp
	ret	0
?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JMPAlwaysIndirect
_TEXT	ENDS
PUBLIC	?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JMPAlwaysIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JMPAlwaysIndirect_NOP

; 82   : {

	push	ebp
	mov	ebp, esp

; 83   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JM@2

; 84   :   {
; 85   :     mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 86   :     mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN2@Execute_JM@2:

; 87   :   }
; 88   : }

	pop	ebp
	ret	0
?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JMPAlwaysIndirect_NOP
_TEXT	ENDS
PUBLIC	?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JMPConditionalIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JMPConditionalIndirect

; 90   : {

	push	ebp
	mov	ebp, esp

; 91   :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JM@3

; 92   :   {
; 93   :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JM@3

; 94   :     {
; 95   :       mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 96   :       mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN3@Execute_JM@3:

; 97   :     }
; 98   :   }
; 99   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JMPConditionalIndirect
_TEXT	ENDS
PUBLIC	?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JMPConditionalIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JMPConditionalIndirect_NOP

; 101  : {

	push	ebp
	mov	ebp, esp

; 102  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JM@4

; 103  :   {
; 104  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JM@4

; 105  :     {
; 106  :       mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 107  :       mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN3@Execute_JM@4:

; 108  :     }
; 109  :   }
; 110  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JMPConditionalIndirect_NOP
_TEXT	ENDS
PUBLIC	?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRAlways

; 112  : {

	push	ebp
	mov	ebp, esp

; 113  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JS

; 114  :   {
; 115  :     mpe.rz = nuance.fields[FIELD_ECU_PCFETCHNEXT];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+156], eax

; 116  :     mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 117  :     mpe.ecuSkipCounter = 3;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 3
$LN2@Execute_JS:

; 118  :   }
; 119  : }

	pop	ebp
	ret	0
?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRAlways
_TEXT	ENDS
PUBLIC	?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRAlways_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRAlways_NOP

; 121  : {

	push	ebp
	mov	ebp, esp

; 122  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JS@2

; 123  :   {
; 124  :     mpe.rz = nuance.fields[FIELD_ECU_PCROUTE];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+156], eax

; 125  :     mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 126  :     mpe.ecuSkipCounter = 1;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 1
$LN2@Execute_JS@2:

; 127  :   }
; 128  : }

	pop	ebp
	ret	0
?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRAlways_NOP
_TEXT	ENDS
PUBLIC	?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRConditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRConditional

; 130  : {

	push	ebp
	mov	ebp, esp

; 131  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JS@3

; 132  :   {
; 133  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JS@3

; 134  :     {
; 135  :       mpe.rz = nuance.fields[FIELD_ECU_PCFETCHNEXT];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+156], eax

; 136  :       mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 137  :       mpe.ecuSkipCounter = 3;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 3
$LN3@Execute_JS@3:

; 138  :     }
; 139  :   }
; 140  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRConditional
_TEXT	ENDS
PUBLIC	?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRConditional_NOP

; 142  : {

	push	ebp
	mov	ebp, esp

; 143  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JS@4

; 144  :   {
; 145  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JS@4

; 146  :     {
; 147  :       mpe.rz = nuance.fields[FIELD_ECU_PCROUTE];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+156], eax

; 148  :       mpe.pcfetchnext = nuance.fields[FIELD_ECU_ADDRESS];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+564], eax

; 149  :       mpe.ecuSkipCounter = 1;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+576], 1
$LN3@Execute_JS@4:

; 150  :     }
; 151  :   }
; 152  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRConditional_NOP
_TEXT	ENDS
PUBLIC	?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRAlwaysIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRAlwaysIndirect

; 154  : {

	push	ebp
	mov	ebp, esp

; 155  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JS@5

; 156  :   {
; 157  :     mpe.rz = nuance.fields[FIELD_ECU_PCFETCHNEXT];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+156], eax

; 158  :     mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 159  :     mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN2@Execute_JS@5:

; 160  :   }
; 161  : }

	pop	ebp
	ret	0
?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRAlwaysIndirect
_TEXT	ENDS
PUBLIC	?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRAlwaysIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRAlwaysIndirect_NOP

; 163  : {

	push	ebp
	mov	ebp, esp

; 164  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_JS@6

; 165  :   {
; 166  :     mpe.rz = nuance.fields[FIELD_ECU_PCROUTE];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+156], eax

; 167  :     mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 168  :     mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN2@Execute_JS@6:

; 169  :   }
; 170  : }

	pop	ebp
	ret	0
?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRAlwaysIndirect_NOP
_TEXT	ENDS
PUBLIC	?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRConditionalIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRConditionalIndirect

; 172  : {

	push	ebp
	mov	ebp, esp

; 173  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JS@7

; 174  :   {
; 175  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JS@7

; 176  :     {
; 177  :       mpe.rz = nuance.fields[FIELD_ECU_PCFETCHNEXT];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+156], eax

; 178  :       mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 179  :       mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN3@Execute_JS@7:

; 180  :     }
; 181  :   }
; 182  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRConditionalIndirect
_TEXT	ENDS
PUBLIC	?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_JSRConditionalIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_JSRConditionalIndirect_NOP

; 184  : {

	push	ebp
	mov	ebp, esp

; 185  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_JS@8

; 186  :   {
; 187  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_JS@8

; 188  :     {
; 189  :       mpe.rz = nuance.fields[FIELD_ECU_PCROUTE];

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+156], eax

; 190  :       mpe.pcfetchnext = (entry.pScalarRegs)[nuance.fields[FIELD_ECU_ADDRESS]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax+564], ecx

; 191  :       mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN3@Execute_JS@8:

; 192  :     }
; 193  :   }
; 194  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_JSRConditionalIndirect_NOP
_TEXT	ENDS
PUBLIC	?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTSAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTSAlways

; 196  : {

	push	ebp
	mov	ebp, esp

; 197  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_RT

; 198  :   {
; 199  :     mpe.pcfetchnext = entry.pRzRegs[0];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+564], ecx

; 200  :     mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN2@Execute_RT:

; 201  :   }
; 202  : }

	pop	ebp
	ret	0
?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTSAlways
_TEXT	ENDS
PUBLIC	?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTSAlways_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTSAlways_NOP

; 204  : {

	push	ebp
	mov	ebp, esp

; 205  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN2@Execute_RT@2

; 206  :   {
; 207  :     mpe.pcfetchnext = entry.pRzRegs[0];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+564], ecx

; 208  :     mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN2@Execute_RT@2:

; 209  :   }
; 210  : }

	pop	ebp
	ret	0
?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTSAlways_NOP
_TEXT	ENDS
PUBLIC	?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTSConditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTSConditional

; 212  : {

	push	ebp
	mov	ebp, esp

; 213  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@3

; 214  :   {
; 215  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@3

; 216  :     {
; 217  :       mpe.pcfetchnext = entry.pRzRegs[0];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+564], ecx

; 218  :       mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN3@Execute_RT@3:

; 219  :     }
; 220  :   }
; 221  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTSConditional
_TEXT	ENDS
PUBLIC	?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTSConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTSConditional_NOP

; 223  : {

	push	ebp
	mov	ebp, esp

; 224  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@4

; 225  :   {
; 226  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@4

; 227  :     {
; 228  :       mpe.pcfetchnext = entry.pRzRegs[0];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+564], ecx

; 229  :       mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN3@Execute_RT@4:

; 230  :     }
; 231  :   }
; 232  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTSConditional_NOP
_TEXT	ENDS
PUBLIC	?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTI1Conditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTI1Conditional

; 234  : {

	push	ebp
	mov	ebp, esp

; 235  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@5

; 236  :   {
; 237  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@5

; 238  :     {
; 239  :       mpe.intctl &= ~(1UL << 1);

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax+428], edx

; 240  :       mpe.pcfetchnext = entry.pRzRegs[1];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+564], ecx

; 241  :       mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN3@Execute_RT@5:

; 242  :     }
; 243  :   }
; 244  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTI1Conditional
_TEXT	ENDS
PUBLIC	?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTI1Conditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTI1Conditional_NOP

; 246  : {

	push	ebp
	mov	ebp, esp

; 247  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@6

; 248  :   {
; 249  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@6

; 250  :     {
; 251  :       mpe.intctl &= ~(1UL << 1);

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax+428], edx

; 252  :       mpe.pcfetchnext = entry.pRzRegs[1];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+564], ecx

; 253  :       mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN3@Execute_RT@6:

; 254  :     }
; 255  :   }
; 256  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTI1Conditional_NOP
_TEXT	ENDS
PUBLIC	?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTI2Conditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTI2Conditional

; 258  : {

	push	ebp
	mov	ebp, esp

; 259  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@7

; 260  :   {
; 261  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@7

; 262  :     {
; 263  :       mpe.intctl &= ~(1UL << 5);

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	and	edx, -33				; ffffffdfH
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax+428], edx

; 264  :       mpe.pcfetchnext = entry.pRzRegs[2];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+564], ecx

; 265  :       mpe.ecuSkipCounter = 3;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 3
$LN3@Execute_RT@7:

; 266  :     }
; 267  :   }
; 268  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTI2Conditional
_TEXT	ENDS
PUBLIC	?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; Execute_RTI2Conditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
_entry$ = 12						; size = 4
_nuance$ = 16						; size = 4
?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z PROC ; Execute_RTI2Conditional_NOP

; 270  : {

	push	ebp
	mov	ebp, esp

; 271  :   if(!mpe.ecuSkipCounter)

	mov	eax, DWORD PTR _mpe$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $LN3@Execute_RT@8

; 272  :   {
; 273  :     if(mpe.TestConditionCode(nuance.fields[FIELD_ECU_CONDITION]))

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?TestConditionCode@MPE@@QAE_NI@Z	; MPE::TestConditionCode
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Execute_RT@8

; 274  :     {
; 275  :       mpe.intctl &= ~(1UL << 5);

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	and	edx, -33				; ffffffdfH
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax+428], edx

; 276  :       mpe.pcfetchnext = entry.pRzRegs[2];

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+564], ecx

; 277  :       mpe.ecuSkipCounter = 1;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [edx+576], 1
$LN3@Execute_RT@8:

; 278  :     }
; 279  :   }
; 280  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ENDP ; Execute_RTI2Conditional_NOP
_TEXT	ENDS
END

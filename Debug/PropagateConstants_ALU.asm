; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\PropagateConstants_ALU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
PUBLIC	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
PUBLIC	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency
PUBLIC	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant
PUBLIC	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
PUBLIC	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
PUBLIC	?PropagateConstants_ABS@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ABS
EXTRN	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z:PROC ; PropagateConstants_StoreScalarRegisterConstant
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\propagateconstants_alu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_destValue$ = -20					; size = 4
_src$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_srcIndex$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ABS@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ABS

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 14   :   uint32 srcIndex = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _srcIndex$[ebp], edx

; 15   :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 16   :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 17   :   int32 src, destValue;
; 18   : 
; 19   :   if(constants.IsScalarRegisterConstant(srcIndex) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _srcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@PropagateC
	mov	edx, 1
	test	edx, edx
	je	$LN6@PropagateC

; 20   :   {
; 21   :     src = constants.GetScalarRegisterConstant(srcIndex);

	mov	eax, DWORD PTR _srcIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src$[ebp], eax

; 22   :     destValue = src;

	mov	ecx, DWORD PTR _src$[ebp]
	mov	DWORD PTR _destValue$[ebp], ecx

; 23   :     if(src < 0)

	cmp	DWORD PTR _src$[ebp], 0
	jge	SHORT $LN5@PropagateC

; 24   :     {
; 25   :       constants.SetMiscRegisterConstant(CONSTANT_REG_C, 1);

	push	1
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 26   :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2

; 27   :       if(src == 0x80000000UL)

	cmp	DWORD PTR _src$[ebp], -2147483648	; 80000000H
	jne	SHORT $LN4@PropagateC

; 28   :       {
; 29   :         flagValues |= (CC_ALU_NEGATIVE | CC_ALU_OVERFLOW);

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 12					; 0000000cH
	mov	DWORD PTR _flagValues$[ebp], edx
$LN4@PropagateC:

; 30   :       }
; 31   :       destValue = -destValue;

	mov	eax, DWORD PTR _destValue$[ebp]
	neg	eax
	mov	DWORD PTR _destValue$[ebp], eax

; 32   :     }
; 33   :     else

	jmp	SHORT $LN3@PropagateC
$LN5@PropagateC:

; 34   :     {
; 35   :       if(!src)

	cmp	DWORD PTR _src$[ebp], 0
	jne	SHORT $LN3@PropagateC

; 36   :       {
; 37   :         flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1
$LN3@PropagateC:

; 38   :       }
; 39   :     }
; 40   : 
; 41   :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 217			; 000000d9H

; 42   :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 43   :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 44   :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_OVERFLOW | CC_ALU_CARRY | CC_ALU_ZERO;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 45   :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 46   :     constants.ClearScalarInputDependency(srcIndex);

	mov	edx, DWORD PTR _srcIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 47   :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 48   :   }
; 49   :   else

	jmp	SHORT $LN7@PropagateC
$LN6@PropagateC:

; 50   :   {
; 51   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 52   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 53   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 54   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 55   :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 56   :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2
$LN7@PropagateC:

; 57   :   }
; 58   : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ABS@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ABS
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearScalarInputDependency, COMDAT
; _this$ = ecx

; 93   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 94   :     pCurrentInstructionEntry->scalarInputDependencies &= ~(1UL << index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+32], eax

; 95   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearScalarInputDependency
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearScalarRegisterConstant, COMDAT
; _this$ = ecx

; 141  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 142  :     tempScalarRegisterConstantsStatus &= ~(0x1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+564]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], eax

; 143  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearScalarRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearMiscRegisterConstant, COMDAT
; _this$ = ecx

; 157  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 158  :     if(index != CONSTANT_REG_ALLFLAGS)

	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN2@ClearMiscR

; 159  :     {
; 160  :       tempMiscRegisterConstantsStatus &= ~(1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+568]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], eax

; 161  :     }
; 162  :     else

	jmp	SHORT $LN3@ClearMiscR
$LN2@ClearMiscR:

; 163  :     {
; 164  :       tempMiscRegisterConstantsStatus &= ~DEPENDENCY_FLAG_ALLFLAGS;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+568]
	and	ecx, -67076097				; fc007fffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], ecx
$LN3@ClearMiscR:

; 165  :     }
; 166  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z PROC ; SuperBlockConstants::SetMiscRegisterConstant, COMDAT
; _this$ = ecx

; 173  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  :     tempMiscRegisterConstantsStatus |= (1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+568]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+568], eax

; 175  :     tempMiscRegisterConstants[index] = value;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+eax*4+172], edx

; 176  :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ENDP ; SuperBlockConstants::SetMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z PROC ; SuperBlockConstants::IsScalarRegisterConstant, COMDAT
; _this$ = ecx

; 205  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 206  :     return (scalarRegisterConstantsStatus & (1UL << index)) != 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+556]
	neg	eax
	sbb	eax, eax
	neg	eax

; 207  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ENDP ; SuperBlockConstants::IsScalarRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z PROC ; SuperBlockConstants::GetScalarRegisterConstant, COMDAT
; _this$ = ecx

; 213  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 214  :     return scalarRegisterConstants[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+300]

; 215  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ENDP ; SuperBlockConstants::GetScalarRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_BITSImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_BITSImmediate
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_destValue$ = -20					; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_BITSImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_BITSImmediate

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 61   :   uint32 src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 62   :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 63   :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 64   :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 65   :   int32 destValue;
; 66   : 
; 67   :   if(constants.IsScalarRegisterConstant(destIndex) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@2
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@2

; 68   :   {
; 69   :     destValue = src1 & (constants.GetScalarRegisterConstant(destIndex) >> src2);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _src2$[ebp]
	shr	eax, cl
	and	eax, DWORD PTR _src1$[ebp]
	mov	DWORD PTR _destValue$[ebp], eax

; 70   :     if(!destValue)

	jne	SHORT $LN3@PropagateC@2

; 71   :     {
; 72   :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 73   :     }
; 74   :     else

	jmp	SHORT $LN2@PropagateC@2
$LN3@PropagateC@2:

; 75   :     {
; 76   :       flagValues = (destValue >> 28) & CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _destValue$[ebp]
	sar	ecx, 28					; 0000001cH
	and	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN2@PropagateC@2:

; 77   :     }
; 78   : 
; 79   :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 80   :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 81   :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 82   :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 9

; 83   :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 84   :     constants.ClearScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 85   :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 86   :   }
; 87   :   else

	jmp	SHORT $LN5@PropagateC@2
$LN4@PropagateC@2:

; 88   :   {
; 89   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 90   :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 91   :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 92   :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2
$LN5@PropagateC@2:

; 93   :   }
; 94   : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_BITSImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_BITSImmediate
_TEXT	ENDS
PUBLIC	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency
PUBLIC	?PropagateConstants_BITSScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_BITSScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_BITSScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_BITSScalar

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 97   :   uint32 src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 98   :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 99   :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 100  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 101  : 
; 102  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@3
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@3

; 103  :   {
; 104  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_BITSImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 43			; 0000002bH

; 105  :     constants.nuance->fields[FIELD_ALU_SRC2] = constants.GetScalarRegisterConstant(src2Index) & 0x1FUL;

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	and	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], eax

; 106  :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 107  :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 108  :     PropagateConstants_BITSImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_BITSImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_BITSImmediate
	add	esp, 4

; 109  :   }
; 110  :   else

	jmp	SHORT $LN3@PropagateC@3
$LN2@PropagateC@3:

; 111  :   {
; 112  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 113  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 114  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 115  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN3@PropagateC@3:

; 116  :   }
; 117  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_BITSScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_BITSScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::SetScalarInputDependency, COMDAT
; _this$ = ecx

; 121  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 122  :     pCurrentInstructionEntry->scalarInputDependencies |= (1UL << index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	or	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+32], eax

; 123  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::SetScalarInputDependency
_TEXT	ENDS
PUBLIC	?PropagateConstants_BTST@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_BTST
EXTRN	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z:PROC ; PropagateConstants_StoreMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_destValue$ = -20					; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1$ = -4						; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_BTST@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_BTST

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 120  :   uint32 src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 121  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 122  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 123  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 124  :   int32 destValue;
; 125  : 
; 126  :   constants.SetMiscRegisterConstant(CONSTANT_REG_N, 0);

	push	0
	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 127  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V, 0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 128  : 
; 129  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@PropagateC@4
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@PropagateC@4

; 130  :   {
; 131  :     destValue = src1 & constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	and	eax, DWORD PTR _src1$[ebp]
	mov	DWORD PTR _destValue$[ebp], eax

; 132  :     if(!destValue)

	jne	SHORT $LN2@PropagateC@4

; 133  :     {
; 134  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1
$LN2@PropagateC@4:

; 135  :     }
; 136  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 218			; 000000daH

; 137  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 32			; 00000020H

; 138  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_OVERFLOW | CC_ALU_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 139  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 140  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 141  :     PropagateConstants_StoreMiscRegisterConstant(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 142  :   }
; 143  :   else

	jmp	SHORT $LN4@PropagateC@4
$LN3@PropagateC@4:

; 144  :   {
; 145  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 146  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 147  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN4@PropagateC@4:

; 148  :   }
; 149  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_BTST@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_BTST
_TEXT	ENDS
PUBLIC	?PropagateConstants_BUTT@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_BUTT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_BUTT@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_BUTT

; 151  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 152  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 153  : 
; 154  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 155  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 156  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 157  :   constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 158  :   constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 159  :   constants.ClearScalarRegisterConstant(destIndex + 1);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 160  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 161  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_BUTT@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_BUTT
_TEXT	ENDS
PUBLIC	?PropagateConstants_COPY@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_COPY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_COPY@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_COPY

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 164  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 165  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 166  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 167  :   int32 destValue;
; 168  : 
; 169  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V, 0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 170  : 
; 171  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@5
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@5

; 172  :   {
; 173  :     destValue = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _destValue$[ebp], eax

; 174  : 
; 175  :     if(!destValue)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@5

; 176  :     {
; 177  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 178  :     }
; 179  :     else

	jmp	SHORT $LN2@PropagateC@5
$LN3@PropagateC@5:

; 180  :     {
; 181  :       // negative = bit 31 of result
; 182  :       flagValues = ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	ecx, DWORD PTR _destValue$[ebp]
	sar	ecx, 28					; 0000001cH
	and	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN2@PropagateC@5:

; 183  :     }
; 184  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 185  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 186  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 187  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 13			; 0000000dH

; 188  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 189  :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 190  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 191  :   }
; 192  :   else

	jmp	SHORT $LN5@PropagateC@5
$LN4@PropagateC@5:

; 193  :   {
; 194  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 195  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 196  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 197  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2
$LN5@PropagateC@5:

; 198  :   }
; 199  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_COPY@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_COPY
_TEXT	ENDS
PUBLIC	?PropagateConstants_MSB@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_MSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -20						; size = 4
_sigbits$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_MSB@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_MSB

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 202  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 203  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 204  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 205  :   uint32 sigbits;
; 206  :   int32 n;
; 207  : 
; 208  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN6@PropagateC@6
	mov	edx, 1
	test	edx, edx
	je	$LN6@PropagateC@6

; 209  :   {
; 210  :     n = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _n$[ebp], eax

; 211  :     if((n == 0) || (n == -1))

	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN4@PropagateC@6
	cmp	DWORD PTR _n$[ebp], -1
	jne	SHORT $LN5@PropagateC@6
$LN4@PropagateC@6:

; 212  :     {
; 213  :       sigbits = 0;

	mov	DWORD PTR _sigbits$[ebp], 0

; 214  :     }
; 215  :     else

	jmp	$LN3@PropagateC@6
$LN5@PropagateC@6:

; 216  :     {
; 217  :       //n = n if positive, n = ~n if negative
; 218  :       n = (n ^ (n >> 31));

	mov	ecx, DWORD PTR _n$[ebp]
	sar	ecx, 31					; 0000001fH
	xor	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 219  : 
; 220  :       //fold n into itself to get a new value where all bits below the
; 221  :       //most significant one bit have also been set to one.
; 222  : 
; 223  :       n |= (n >> 1);

	mov	edx, DWORD PTR _n$[ebp]
	sar	edx, 1
	or	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 224  :       n |= (n >> 2);

	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 2
	or	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 225  :       n |= (n >> 4);

	mov	ecx, DWORD PTR _n$[ebp]
	sar	ecx, 4
	or	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 226  :       n |= (n >> 8);

	mov	edx, DWORD PTR _n$[ebp]
	sar	edx, 8
	or	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], edx

; 227  :       n |= (n >> 16);

	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 16					; 00000010H
	or	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 228  : 
; 229  :       //get the ones count
; 230  : 
; 231  :       n -= ((n >> 1) & 0x55555555);

	mov	ecx, DWORD PTR _n$[ebp]
	sar	ecx, 1
	and	ecx, 1431655765				; 55555555H
	mov	edx, DWORD PTR _n$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _n$[ebp], edx

; 232  :       n = (((n >> 2) & 0x33333333) + (n & 0x33333333));

	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 2
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR _n$[ebp]
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR _n$[ebp], eax

; 233  :       n = (((n >> 4) + n) & 0x0f0f0f0f);

	mov	edx, DWORD PTR _n$[ebp]
	sar	edx, 4
	add	edx, DWORD PTR _n$[ebp]
	and	edx, 252645135				; 0f0f0f0fH
	mov	DWORD PTR _n$[ebp], edx

; 234  :       n += (n >> 8);

	mov	eax, DWORD PTR _n$[ebp]
	sar	eax, 8
	add	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], eax

; 235  :       n += (n >> 16);

	mov	ecx, DWORD PTR _n$[ebp]
	sar	ecx, 16					; 00000010H
	add	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _n$[ebp], ecx

; 236  : 
; 237  :       //return the ones count... if n was orignally 0 or -1 then the ones count
; 238  :       //will be zero which is exactly what we want
; 239  :       sigbits = ((uint32)n) & 0x1FUL;

	mov	edx, DWORD PTR _n$[ebp]
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _sigbits$[ebp], edx
$LN3@PropagateC@6:

; 240  :     }
; 241  : 
; 242  :     if(!sigbits)

	cmp	DWORD PTR _sigbits$[ebp], 0
	jne	SHORT $LN2@PropagateC@6

; 243  :     {
; 244  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1
$LN2@PropagateC@6:

; 245  :     }
; 246  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 247  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 248  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = sigbits;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _sigbits$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 249  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 1

; 250  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 251  :     constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 252  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 253  :   }
; 254  :   else

	jmp	SHORT $LN7@PropagateC@6
$LN6@PropagateC@6:

; 255  :   {
; 256  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 257  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 258  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN7@PropagateC@6:

; 259  :   }
; 260  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_MSB@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_MSB
_TEXT	ENDS
PUBLIC	?PropagateConstants_SAT@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SAT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_n$ = -24						; size = 4
_mask$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SAT@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SAT

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 263  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 264  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 265  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 266  :   uint32 destValue;
; 267  :   int32 mask, n;
; 268  : 
; 269  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@7
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@7

; 270  :   {
; 271  :     mask = (0x01UL << constants.nuance->fields[FIELD_ALU_SRC2]) - 1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+12]
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 272  :     n = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _n$[ebp], eax

; 273  : 
; 274  :     //initial mask is largest negative number using 'bits' bits, minus one to get
; 275  :     //largest positive signed number using 'bits' bits
; 276  : 
; 277  :     //NOTE: the bits parameter will be one less than the number of bits desired
; 278  :     //so you do not have to subtract 1 from the shift amount to get the correct
; 279  :     //mask
; 280  : 
; 281  :     if(n > mask)

	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _mask$[ebp]
	jle	SHORT $LN7@PropagateC@7

; 282  :     {
; 283  :       destValue = mask;

	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _destValue$[ebp], edx

; 284  :     }
; 285  :     else

	jmp	SHORT $LN6@PropagateC@7
$LN7@PropagateC@7:

; 286  :     {
; 287  :       //inverting mask gives smallest negative number possible using 'bits' bits
; 288  :       mask = ~mask;

	mov	eax, DWORD PTR _mask$[ebp]
	not	eax
	mov	DWORD PTR _mask$[ebp], eax

; 289  : 
; 290  :       if(n < mask)

	mov	ecx, DWORD PTR _n$[ebp]
	cmp	ecx, DWORD PTR _mask$[ebp]
	jge	SHORT $LN5@PropagateC@7

; 291  :       {
; 292  :         destValue = mask;

	mov	edx, DWORD PTR _mask$[ebp]
	mov	DWORD PTR _destValue$[ebp], edx

; 293  :       }
; 294  :       else

	jmp	SHORT $LN6@PropagateC@7
$LN5@PropagateC@7:

; 295  :       {
; 296  :         destValue = n;

	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR _destValue$[ebp], eax
$LN6@PropagateC@7:

; 297  :       }
; 298  :     }
; 299  :     
; 300  :     if(destValue == 0)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@7

; 301  :     {
; 302  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 303  :     }
; 304  :     else

	jmp	SHORT $LN2@PropagateC@7
$LN3@PropagateC@7:

; 305  :     {
; 306  :       // negative = bit 31 of result
; 307  :       flagValues = ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	ecx, DWORD PTR _destValue$[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN2@PropagateC@7:

; 308  :     }
; 309  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 310  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 311  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 312  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 9

; 313  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 314  :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 315  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 316  :   }
; 317  :   else

	jmp	SHORT $LN9@PropagateC@7
$LN8@PropagateC@7:

; 318  :   {
; 319  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 320  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 321  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 322  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2
$LN9@PropagateC@7:

; 323  :   }
; 324  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SAT@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SAT
_TEXT	ENDS
PUBLIC	?PropagateConstants_ASL@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ASL
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ASL@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ASL

; 326  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 327  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 328  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 329  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 330  :   uint32 destValue, src2;
; 331  : 
; 332  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 333  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@PropagateC@8
	mov	edx, 1
	test	edx, edx
	je	$LN5@PropagateC@8

; 334  :   {
; 335  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 336  :     // carry = bit 31 of source
; 337  :     flagValues = ((src2 >> 30) & CC_ALU_CARRY);

	mov	ecx, DWORD PTR _src2$[ebp]
	shr	ecx, 30					; 0000001eH
	and	ecx, 2
	mov	DWORD PTR _flagValues$[ebp], ecx

; 338  :     destValue = src2 << constants.nuance->fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	edx, cl
	mov	DWORD PTR _destValue$[ebp], edx

; 339  : 
; 340  :     //AS <immediate>,<scalar>,<scalar> will be transformed into ASL.  The AS
; 341  :     //instruction allows left shifts of 32 so this handler must support this
; 342  :     //scenario even though ASL cannot shift by 32.
; 343  :     if(!destValue || (constants.nuance->fields[FIELD_ALU_SRC1] == 32))

	cmp	DWORD PTR _destValue$[ebp], 0
	je	SHORT $LN3@PropagateC@8
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+8], 32			; 00000020H
	jne	SHORT $LN4@PropagateC@8
$LN3@PropagateC@8:

; 344  :     {
; 345  :       destValue = 0;

	mov	DWORD PTR _destValue$[ebp], 0

; 346  :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx

; 347  :     }
; 348  :     else

	jmp	SHORT $LN2@PropagateC@8
$LN4@PropagateC@8:

; 349  :     {
; 350  :       // negative = bit 31 of result
; 351  :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	eax, DWORD PTR _destValue$[ebp]
	shr	eax, 28					; 0000001cH
	and	eax, 8
	or	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], eax
$LN2@PropagateC@8:

; 352  :     }
; 353  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 217			; 000000d9H

; 354  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 355  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 356  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_CARRY | CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 357  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 358  :     constants.ClearScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 359  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 360  :   }
; 361  :   else

	jmp	SHORT $LN6@PropagateC@8
$LN5@PropagateC@8:

; 362  :   {
; 363  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 364  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 365  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 366  :     constants.ClearScalarRegisterConstant(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 367  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2
$LN6@PropagateC@8:

; 368  :   }
; 369  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ASL@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ASL
_TEXT	ENDS
PUBLIC	?PropagateConstants_ASR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ASR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ASR@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ASR

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 372  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 373  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 374  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 375  :   uint32 destValue, src2;
; 376  : 
; 377  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 378  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@9
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@9

; 379  :   {
; 380  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 381  :     // carry = bit 31 of source
; 382  :     flagValues = ((src2 << 1) & CC_ALU_CARRY);

	mov	ecx, DWORD PTR _src2$[ebp]
	shl	ecx, 1
	and	ecx, 2
	mov	DWORD PTR _flagValues$[ebp], ecx

; 383  :     destValue = ((int32)src2) >> constants.nuance->fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	edx, cl
	mov	DWORD PTR _destValue$[ebp], edx

; 384  : 
; 385  :     if(!destValue)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@9

; 386  :     {
; 387  :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax

; 388  :     }
; 389  :     else

	jmp	SHORT $LN2@PropagateC@9
$LN3@PropagateC@9:

; 390  :     {
; 391  :       // negative = bit 31 of result
; 392  :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	ecx, DWORD PTR _destValue$[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 8
	or	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN2@PropagateC@9:

; 393  :     }
; 394  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 395  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 396  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 397  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_CARRY | CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 15			; 0000000fH

; 398  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 399  :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 400  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 401  :   }
; 402  :   else

	jmp	SHORT $LN5@PropagateC@9
$LN4@PropagateC@9:

; 403  :   {
; 404  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 405  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 406  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 407  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 408  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2
$LN5@PropagateC@9:

; 409  :   }
; 410  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ASR@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ASR
_TEXT	ENDS
PUBLIC	?PropagateConstants_AS@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_AS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_AS@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_AS

; 412  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 413  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 414  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 415  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 416  :   uint32 src1;
; 417  : 
; 418  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 419  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@10
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@10

; 420  :   {
; 421  :     src1 = constants.GetScalarRegisterConstant(src1Index) & 0x3FUL;

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src1$[ebp], eax

; 422  :     if(src1 & 0x20)

	mov	ecx, DWORD PTR _src1$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@10

; 423  :     {
; 424  :       //shift left
; 425  :       src1 = 64UL - src1;

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR _src1$[ebp], edx

; 426  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ASL;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 50			; 00000032H

; 427  :       constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 428  :       constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 429  :       constants.SetScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 430  :       PropagateConstants_ASL(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ASL@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ASL
	add	esp, 4

; 431  :     }
; 432  :     else

	jmp	SHORT $LN2@PropagateC@10
$LN3@PropagateC@10:

; 433  :     {
; 434  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ASR;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 51			; 00000033H

; 435  :       constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [edx+8], eax

; 436  :       constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 437  :       constants.SetScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 438  :       PropagateConstants_ASR(constants);

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ASR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ASR
	add	esp, 4
$LN2@PropagateC@10:

; 439  :     }
; 440  :   }
; 441  :   else

	jmp	SHORT $LN5@PropagateC@10
$LN4@PropagateC@10:

; 442  :   {
; 443  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 444  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 445  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 446  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 447  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2
$LN5@PropagateC@10:

; 448  :   }
; 449  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_AS@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_AS
_TEXT	ENDS
PUBLIC	?PropagateConstants_LSR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_LSR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_LSR@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_LSR

; 451  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 452  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 453  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 454  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 455  :   uint32 destValue, src2;
; 456  : 
; 457  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 458  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@11
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@11

; 459  :   {
; 460  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 461  :     // carry = bit 31 of source
; 462  :     flagValues = ((src2 << 1) & CC_ALU_CARRY);

	mov	ecx, DWORD PTR _src2$[ebp]
	shl	ecx, 1
	and	ecx, 2
	mov	DWORD PTR _flagValues$[ebp], ecx

; 463  :     destValue = src2 >> constants.nuance->fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	edx, cl
	mov	DWORD PTR _destValue$[ebp], edx

; 464  : 
; 465  :     if(!destValue)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@11

; 466  :     {
; 467  :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax

; 468  :     }
; 469  :     else

	jmp	SHORT $LN2@PropagateC@11
$LN3@PropagateC@11:

; 470  :     {
; 471  :       // negative = bit 31 of result
; 472  :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	ecx, DWORD PTR _destValue$[ebp]
	shr	ecx, 28					; 0000001cH
	and	ecx, 8
	or	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN2@PropagateC@11:

; 473  :     }
; 474  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 475  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 476  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 477  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_CARRY | CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 15			; 0000000fH

; 478  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 479  :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 480  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 481  :   }
; 482  :   else

	jmp	SHORT $LN5@PropagateC@11
$LN4@PropagateC@11:

; 483  :   {
; 484  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 485  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 486  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 487  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 488  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2
$LN5@PropagateC@11:

; 489  :   }
; 490  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_LSR@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_LSR
_TEXT	ENDS
PUBLIC	?PropagateConstants_LS@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_LS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_LS@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_LS

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 493  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 494  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 495  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 496  :   uint32 src1;
; 497  : 
; 498  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 499  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@12
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@12

; 500  :   {
; 501  :     src1 = constants.GetScalarRegisterConstant(src1Index) & 0x3FUL;

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src1$[ebp], eax

; 502  :     if(src1 & 0x20)

	mov	ecx, DWORD PTR _src1$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@12

; 503  :     {
; 504  :       //shift left
; 505  :       src1 = 64UL - src1;

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR _src1$[ebp], edx

; 506  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ASL;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 50			; 00000032H

; 507  :       constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 508  :       constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 509  :       constants.SetScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 510  :       PropagateConstants_ASL(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ASL@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ASL
	add	esp, 4

; 511  :     }
; 512  :     else

	jmp	SHORT $LN2@PropagateC@12
$LN3@PropagateC@12:

; 513  :     {
; 514  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_LSR;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 53			; 00000035H

; 515  :       constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [edx+8], eax

; 516  :       constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 517  :       constants.SetScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 518  :       PropagateConstants_LSR(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_LSR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_LSR
	add	esp, 4
$LN2@PropagateC@12:

; 519  :     }
; 520  :   }
; 521  :   else

	jmp	SHORT $LN5@PropagateC@12
$LN4@PropagateC@12:

; 522  :   {
; 523  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 524  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 525  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 526  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 527  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2
$LN5@PropagateC@12:

; 528  :   }
; 529  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_LS@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_LS
_TEXT	ENDS
PUBLIC	?PropagateConstants_ROL@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ROL
EXTRN	__lrotl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ROL@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ROL

; 531  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 532  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 533  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 534  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 535  :   uint32 destValue, src2;
; 536  : 
; 537  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 538  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@13
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@13

; 539  :   {
; 540  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 541  :     destValue = _lrotl(src2, constants.nuance->fields[FIELD_ALU_SRC1]);

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	call	__lrotl
	add	esp, 8
	mov	DWORD PTR _destValue$[ebp], eax

; 542  :     if(!destValue)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@13

; 543  :     {
; 544  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 545  :     }
; 546  :     else

	jmp	SHORT $LN2@PropagateC@13
$LN3@PropagateC@13:

; 547  :     {
; 548  :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@13:

; 549  :     }
; 550  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 551  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 552  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 553  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 554  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 555  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 556  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 557  :   }
; 558  :   else

	jmp	SHORT $LN5@PropagateC@13
$LN4@PropagateC@13:

; 559  :   {
; 560  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 561  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 562  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 563  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN5@PropagateC@13:

; 564  :   }
; 565  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ROL@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ROL
_TEXT	ENDS
PUBLIC	?PropagateConstants_ROR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ROR
EXTRN	__lrotr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_destValue$ = -16					; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ROR@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ROR

; 567  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 568  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 569  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 570  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 571  :   uint32 destValue, src2;
; 572  : 
; 573  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 574  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@14
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@14

; 575  :   {
; 576  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 577  :     destValue = _lrotr(src2, constants.nuance->fields[FIELD_ALU_SRC1]);

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	call	__lrotr
	add	esp, 8
	mov	DWORD PTR _destValue$[ebp], eax

; 578  :     if(!destValue)

	cmp	DWORD PTR _destValue$[ebp], 0
	jne	SHORT $LN3@PropagateC@14

; 579  :     {
; 580  :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 581  :     }
; 582  :     else

	jmp	SHORT $LN2@PropagateC@14
$LN3@PropagateC@14:

; 583  :     {
; 584  :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@14:

; 585  :     }
; 586  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 587  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 588  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 589  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 590  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 591  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 592  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 593  :   }
; 594  :   else

	jmp	SHORT $LN5@PropagateC@14
$LN4@PropagateC@14:

; 595  :   {
; 596  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 597  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 598  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 599  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN5@PropagateC@14:

; 600  :   }
; 601  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ROR@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ROR
_TEXT	ENDS
PUBLIC	?PropagateConstants_ROT@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ROT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ROT@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ROT

; 603  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 604  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 605  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 606  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 607  :   uint32 src1;
; 608  : 
; 609  :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 610  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@15
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@15

; 611  :   {
; 612  :     src1 = constants.GetScalarRegisterConstant(src1Index) & 0x3FUL;

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src1$[ebp], eax

; 613  :     if(src1 & 0x20)

	mov	ecx, DWORD PTR _src1$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@15

; 614  :     {
; 615  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ROL;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 55			; 00000037H

; 616  :       constants.nuance->fields[FIELD_ALU_SRC1] = 64 - src1;

	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _src1$[ebp]
	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx

; 617  :       constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 618  :       constants.SetScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 619  :       PropagateConstants_ROL(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ROL@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ROL
	add	esp, 4

; 620  : 
; 621  :     }
; 622  :     else

	jmp	SHORT $LN2@PropagateC@15
$LN3@PropagateC@15:

; 623  :     {
; 624  :       constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ROR;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 56			; 00000038H

; 625  :       constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 626  :       constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 627  :       constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 628  :       PropagateConstants_ROR(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ROR@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ROR
	add	esp, 4
$LN2@PropagateC@15:

; 629  :     }
; 630  :   }
; 631  :   else

	jmp	SHORT $LN5@PropagateC@15
$LN4@PropagateC@15:

; 632  :   {
; 633  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 634  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 635  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant

; 636  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2
$LN5@PropagateC@15:

; 637  :   }
; 638  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ROT@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ROT
_TEXT	ENDS
PUBLIC	?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearPixelRegisterConstant
PUBLIC	?PropagateConstants_ADD_P@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADD_P
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADD_P@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADD_P

; 640  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 641  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 642  : 
; 643  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 644  :   constants.ClearPixelRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearPixelRegisterConstant

; 645  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADD_P@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADD_P
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearPixelRegisterConstant, COMDAT
; _this$ = ecx

; 145  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 146  :     tempScalarRegisterConstantsStatus &= ~(0x7UL << index);

	mov	eax, 7
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+564]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], eax

; 147  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearPixelRegisterConstant
_TEXT	ENDS
PUBLIC	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant
PUBLIC	?PropagateConstants_SUB_P@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUB_P
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUB_P@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUB_P

; 647  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 648  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 649  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 650  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 651  : 
; 652  :   if((src1Index == src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	cmp	eax, DWORD PTR _src2Index$[ebp]
	jne	SHORT $LN2@PropagateC@16
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@16

; 653  :   {
; 654  :     constants.SetScalarRegisterConstant(destIndex, 0);    

	push	0
	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 655  :     constants.SetScalarRegisterConstant(destIndex + 1, 0);    

	push	0
	mov	eax, DWORD PTR _destIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 656  :     constants.SetScalarRegisterConstant(destIndex + 2, 0);    

	push	0
	mov	ecx, DWORD PTR _destIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 657  :   }
; 658  :   else

	jmp	SHORT $LN3@PropagateC@16
$LN2@PropagateC@16:

; 659  :   {
; 660  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 661  :     constants.ClearPixelRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearPixelRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearPixelRegisterConstant
$LN3@PropagateC@16:

; 662  :   }
; 663  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUB_P@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUB_P
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_value$ = 12						; size = 4
?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z PROC ; SuperBlockConstants::SetScalarRegisterConstant, COMDAT
; _this$ = ecx

; 168  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 169  :     tempScalarRegisterConstantsStatus |= (1UL << index);

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	eax, DWORD PTR [ecx+564]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], eax

; 170  :     tempScalarRegisterConstants[index] = value;

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+eax*4+44], edx

; 171  :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ENDP ; SuperBlockConstants::SetScalarRegisterConstant
_TEXT	ENDS
PUBLIC	?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearShortVectorRegisterConstant
PUBLIC	?PropagateConstants_ADD_SV@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADD_SV
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_destIndex$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADD_SV@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADD_SV

; 665  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 666  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 667  : 
; 668  :   constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 669  :   constants.ClearShortVectorRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearShortVectorRegisterConstant

; 670  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADD_SV@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADD_SV
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearShortVectorRegisterConstant, COMDAT
; _this$ = ecx

; 149  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 150  :     tempScalarRegisterConstantsStatus &= ~(0xFUL << index);

	mov	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+564]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], eax

; 151  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearShortVectorRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUB_SV@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUB_SV
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUB_SV@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUB_SV

; 672  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 673  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 674  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 675  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 676  : 
; 677  :   if((src1Index == src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	cmp	eax, DWORD PTR _src2Index$[ebp]
	jne	SHORT $LN2@PropagateC@17
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@17

; 678  :   {
; 679  :     constants.SetScalarRegisterConstant(destIndex, 0);    

	push	0
	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 680  :     constants.SetScalarRegisterConstant(destIndex + 1, 0);    

	push	0
	mov	eax, DWORD PTR _destIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 681  :     constants.SetScalarRegisterConstant(destIndex + 2, 0);    

	push	0
	mov	ecx, DWORD PTR _destIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 682  :     constants.SetScalarRegisterConstant(destIndex + 3, 0);    

	push	0
	mov	edx, DWORD PTR _destIndex$[ebp]
	add	edx, 3
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetScalarRegisterConstant

; 683  :   }
; 684  :   else

	jmp	SHORT $LN3@PropagateC@17
$LN2@PropagateC@17:

; 685  :   {
; 686  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 687  :     constants.ClearShortVectorRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearShortVectorRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearShortVectorRegisterConstant
$LN3@PropagateC@17:

; 688  :   }
; 689  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUB_SV@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUB_SV
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv218 = -60						; size = 8
tv207 = -52						; size = 8
tv186 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDImmediate

; 691  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 692  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 693  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 694  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 695  :   uint64 src1, src2, destValue;
; 696  : 
; 697  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@18
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@18

; 698  :   {
; 699  :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	xor	eax, eax
	mov	DWORD PTR _src1$[ebp], edx
	mov	DWORD PTR _src1$[ebp+4], eax

; 700  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	edx, edx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], edx

; 701  :     destValue = src1 + src2;

	mov	eax, DWORD PTR _src1$[ebp]
	add	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	adc	ecx, DWORD PTR _src2$[ebp+4]
	mov	DWORD PTR _destValue$[ebp], eax
	mov	DWORD PTR _destValue$[ebp+4], ecx

; 702  :     if(destValue & (uint64)0x0000000100000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, 0
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 1
	mov	DWORD PTR tv186[ebp], edx
	mov	DWORD PTR tv186[ebp+4], eax
	mov	ecx, DWORD PTR tv186[ebp]
	or	ecx, DWORD PTR tv186[ebp+4]
	je	SHORT $LN7@PropagateC@18

; 703  :     {
; 704  :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@18:

; 705  :     }
; 706  : 
; 707  :     if(((int32)(src1 ^ src2)) >= 0)

	mov	edx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src2$[ebp]
	mov	eax, DWORD PTR _src1$[ebp+4]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jl	SHORT $LN6@PropagateC@18

; 708  :     {
; 709  :       if(((int32)(src1 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	xor	ecx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src1$[ebp+4]
	test	ecx, ecx
	jge	SHORT $LN6@PropagateC@18

; 710  :       {
; 711  :         flagValues |= CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 4
	mov	DWORD PTR _flagValues$[ebp], eax
$LN6@PropagateC@18:

; 712  :       }
; 713  :     }
; 714  : 
; 715  :     if(destValue & (uint64)0x0000000080000000)

	mov	ecx, DWORD PTR _destValue$[ebp]
	and	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv207[ebp], ecx
	mov	DWORD PTR tv207[ebp+4], edx
	mov	eax, DWORD PTR tv207[ebp]
	or	eax, DWORD PTR tv207[ebp+4]
	je	SHORT $LN4@PropagateC@18

; 716  :     {
; 717  :       flagValues |= CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
	jmp	SHORT $LN3@PropagateC@18
$LN4@PropagateC@18:

; 718  :     }
; 719  :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv218[ebp], edx
	mov	DWORD PTR tv218[ebp+4], eax
	mov	ecx, DWORD PTR tv218[ebp]
	or	ecx, DWORD PTR tv218[ebp+4]
	jne	SHORT $LN3@PropagateC@18

; 720  :     {
; 721  :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx
$LN3@PropagateC@18:

; 722  :     }
; 723  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 724  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 725  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 726  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 15			; 0000000fH

; 727  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 728  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 729  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 730  :   }
; 731  :   else

	jmp	SHORT $LN9@PropagateC@18
$LN8@PropagateC@18:

; 732  :   {
; 733  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 734  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 735  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 736  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 737  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 738  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@18:

; 739  :   }
; 740  : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDScalar

; 742  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 743  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 744  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 745  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 746  :   uint32 src1;
; 747  : 
; 748  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@19
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@19

; 749  :   {
; 750  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 751  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 61			; 0000003dH

; 752  :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 753  :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 754  :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 755  :     PropagateConstants_ADDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDImmediate
	add	esp, 4

; 756  :   }
; 757  :   else

	jmp	SHORT $LN3@PropagateC@19
$LN2@PropagateC@19:

; 758  :   {
; 759  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 760  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 761  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 762  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 763  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 764  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@19:

; 765  :   }
; 766  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -16						; size = 4
_src1$ = -12						; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDScalarShiftRightImmediate

; 768  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 769  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 770  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 771  :   uint32 src1, src2;
; 772  : 
; 773  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@20
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@20

; 774  :   {
; 775  :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 776  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 777  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 61			; 0000003dH

; 778  :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 779  :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 780  :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 781  :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 782  :     PropagateConstants_ADDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDImmediate
	add	esp, 4

; 783  :   }
; 784  :   else

	jmp	SHORT $LN3@PropagateC@20
$LN2@PropagateC@20:

; 785  :   {
; 786  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 787  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 788  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 789  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 790  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 791  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@20:

; 792  :   }
; 793  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -16						; size = 4
_src1$ = -12						; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDScalarShiftLeftImmediate

; 795  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 796  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 797  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 798  :   uint32 src1, src2;
; 799  : 
; 800  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@21
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@21

; 801  :   {
; 802  :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 803  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 804  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 61			; 0000003dH

; 805  :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 806  :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 807  :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 808  :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 809  :     PropagateConstants_ADDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDImmediate
	add	esp, 4

; 810  :   }
; 811  :   else

	jmp	SHORT $LN3@PropagateC@21
$LN2@PropagateC@21:

; 812  :   {
; 813  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 814  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 815  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 816  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 817  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 818  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@21:

; 819  :   }
; 820  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv218 = -60						; size = 8
tv207 = -52						; size = 8
tv186 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBImmediate

; 822  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 823  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 824  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 825  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 826  :   uint64 src1, src2, destValue;
; 827  : 
; 828  :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@22
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@22

; 829  :   {
; 830  :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	xor	eax, eax
	mov	DWORD PTR _src1$[ebp], edx
	mov	DWORD PTR _src1$[ebp+4], eax

; 831  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	edx, edx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], edx

; 832  :     destValue = src2 - src1;

	mov	eax, DWORD PTR _src2$[ebp]
	sub	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp+4]
	sbb	ecx, DWORD PTR _src1$[ebp+4]
	mov	DWORD PTR _destValue$[ebp], eax
	mov	DWORD PTR _destValue$[ebp+4], ecx

; 833  :     if(destValue & (uint64)0x0000000100000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, 0
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 1
	mov	DWORD PTR tv186[ebp], edx
	mov	DWORD PTR tv186[ebp+4], eax
	mov	ecx, DWORD PTR tv186[ebp]
	or	ecx, DWORD PTR tv186[ebp+4]
	je	SHORT $LN7@PropagateC@22

; 834  :     {
; 835  :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@22:

; 836  :     }
; 837  : 
; 838  :     if(((int32)(src1 ^ src2)) < 0)

	mov	edx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src2$[ebp]
	mov	eax, DWORD PTR _src1$[ebp+4]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@22

; 839  :     {
; 840  :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	xor	ecx, DWORD PTR _src2$[ebp]
	xor	edx, DWORD PTR _src2$[ebp+4]
	test	ecx, ecx
	jge	SHORT $LN6@PropagateC@22

; 841  :       {
; 842  :         flagValues |= CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 4
	mov	DWORD PTR _flagValues$[ebp], eax
$LN6@PropagateC@22:

; 843  :       }
; 844  :     }
; 845  : 
; 846  :     if(destValue & (uint64)0x0000000080000000)

	mov	ecx, DWORD PTR _destValue$[ebp]
	and	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv207[ebp], ecx
	mov	DWORD PTR tv207[ebp+4], edx
	mov	eax, DWORD PTR tv207[ebp]
	or	eax, DWORD PTR tv207[ebp+4]
	je	SHORT $LN4@PropagateC@22

; 847  :     {
; 848  :       flagValues |= CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
	jmp	SHORT $LN3@PropagateC@22
$LN4@PropagateC@22:

; 849  :     }
; 850  :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv218[ebp], edx
	mov	DWORD PTR tv218[ebp+4], eax
	mov	ecx, DWORD PTR tv218[ebp]
	or	ecx, DWORD PTR tv218[ebp+4]
	jne	SHORT $LN3@PropagateC@22

; 851  :     {
; 852  :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx
$LN3@PropagateC@22:

; 853  :     }
; 854  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 855  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 856  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 857  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 15			; 0000000fH

; 858  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 859  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 860  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 861  :   }
; 862  :   else

	jmp	SHORT $LN9@PropagateC@22
$LN8@PropagateC@22:

; 863  :   {
; 864  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 865  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 866  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 867  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 868  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 869  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@22:

; 870  :   }
; 871  : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv218 = -60						; size = 8
tv207 = -52						; size = 8
tv186 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBImmediateReverse@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBImmediateReverse

; 873  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 874  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 875  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 876  :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 877  :   uint64 src1, src2, destValue;
; 878  : 
; 879  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@23
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@23

; 880  :   {
; 881  :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	xor	eax, eax
	mov	DWORD PTR _src2$[ebp], edx
	mov	DWORD PTR _src2$[ebp+4], eax

; 882  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	edx, edx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], edx

; 883  :     destValue = src2 - src1;

	mov	eax, DWORD PTR _src2$[ebp]
	sub	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp+4]
	sbb	ecx, DWORD PTR _src1$[ebp+4]
	mov	DWORD PTR _destValue$[ebp], eax
	mov	DWORD PTR _destValue$[ebp+4], ecx

; 884  :     if(destValue & (uint64)0x0000000100000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, 0
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 1
	mov	DWORD PTR tv186[ebp], edx
	mov	DWORD PTR tv186[ebp+4], eax
	mov	ecx, DWORD PTR tv186[ebp]
	or	ecx, DWORD PTR tv186[ebp+4]
	je	SHORT $LN7@PropagateC@23

; 885  :     {
; 886  :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@23:

; 887  :     }
; 888  : 
; 889  :     if(((int32)(src1 ^ src2)) < 0)

	mov	edx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src2$[ebp]
	mov	eax, DWORD PTR _src1$[ebp+4]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@23

; 890  :     {
; 891  :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	xor	ecx, DWORD PTR _src2$[ebp]
	xor	edx, DWORD PTR _src2$[ebp+4]
	test	ecx, ecx
	jge	SHORT $LN6@PropagateC@23

; 892  :       {
; 893  :         flagValues |= CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 4
	mov	DWORD PTR _flagValues$[ebp], eax
$LN6@PropagateC@23:

; 894  :       }
; 895  :     }
; 896  : 
; 897  :     if(destValue & (uint64)0x0000000080000000)

	mov	ecx, DWORD PTR _destValue$[ebp]
	and	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv207[ebp], ecx
	mov	DWORD PTR tv207[ebp+4], edx
	mov	eax, DWORD PTR tv207[ebp]
	or	eax, DWORD PTR tv207[ebp+4]
	je	SHORT $LN4@PropagateC@23

; 898  :     {
; 899  :       flagValues |= CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
	jmp	SHORT $LN3@PropagateC@23
$LN4@PropagateC@23:

; 900  :     }
; 901  :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv218[ebp], edx
	mov	DWORD PTR tv218[ebp+4], eax
	mov	ecx, DWORD PTR tv218[ebp]
	or	ecx, DWORD PTR tv218[ebp+4]
	jne	SHORT $LN3@PropagateC@23

; 902  :     {
; 903  :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx
$LN3@PropagateC@23:

; 904  :     }
; 905  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 906  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 907  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 908  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 15			; 0000000fH

; 909  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 910  :     constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 911  :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 912  :   }
; 913  :   else

	jmp	SHORT $LN9@PropagateC@23
$LN8@PropagateC@23:

; 914  :   {
; 915  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 916  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 917  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 918  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 919  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 920  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@23:

; 921  :   }
; 922  : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBImmediateReverse
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBScalar

; 924  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 925  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 926  :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 927  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 928  :   uint32 src1, src2;
; 929  : 
; 930  :   if((src1Index == src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	cmp	eax, DWORD PTR _src2Index$[ebp]
	jne	SHORT $LN6@PropagateC@24
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN6@PropagateC@24

; 931  :   {
; 932  :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 933  :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 934  :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = 0;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], 0

; 935  :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 936  :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = CC_ALU_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+16], 1

; 937  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 938  :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 939  :     PropagateConstants_StoreScalarRegisterConstant(constants);      

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4
	jmp	$LN7@PropagateC@24
$LN6@PropagateC@24:

; 940  :   }
; 941  :   else if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@PropagateC@24
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@PropagateC@24

; 942  :   {
; 943  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 944  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBImmediate;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 65			; 00000041H

; 945  :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [edx+8], eax

; 946  :     constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 947  :     constants.SetScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 948  :     PropagateConstants_SUBImmediate(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediate
	add	esp, 4
	jmp	$LN7@PropagateC@24
$LN4@PropagateC@24:

; 949  :   }
; 950  :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@PropagateC@24
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@PropagateC@24

; 951  :   {
; 952  :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 953  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBImmediateReverse;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 66			; 00000042H

; 954  :     constants.nuance->fields[FIELD_ALU_SRC2] = src2;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _src2$[ebp]
	mov	DWORD PTR [edx+12], eax

; 955  :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 956  :     constants.SetScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 957  :     PropagateConstants_SUBImmediateReverse(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_SUBImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediateReverse
	add	esp, 4

; 958  :   }
; 959  :   else

	jmp	SHORT $LN7@PropagateC@24
$LN2@PropagateC@24:

; 960  :   {
; 961  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 962  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 963  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 964  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 965  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 966  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN7@PropagateC@24:

; 967  :   }
; 968  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBScalarShiftRightImmediate

; 970  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 971  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 972  :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 973  :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 974  :   uint32 src1;
; 975  : 
; 976  :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@25
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@25

; 977  :   {
; 978  :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 979  :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 65			; 00000041H

; 980  :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 981  :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 982  :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 983  :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 984  :     PropagateConstants_SUBImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediate
	add	esp, 4

; 985  :   }
; 986  :   else

	jmp	SHORT $LN3@PropagateC@25
$LN2@PropagateC@25:

; 987  :   {
; 988  :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 989  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 990  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 991  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 992  :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 993  :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@25:

; 994  :   }
; 995  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBScalarShiftLeftImmediate

; 997  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 998  :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 999  :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 1000 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1001 :   uint32 src1;
; 1002 : 
; 1003 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@26
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@26

; 1004 :   {
; 1005 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1006 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 65			; 00000041H

; 1007 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1008 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1009 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1010 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1011 :     PropagateConstants_SUBImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBImmediate
	add	esp, 4

; 1012 :   }
; 1013 :   else

	jmp	SHORT $LN3@PropagateC@26
$LN2@PropagateC@26:

; 1014 :   {
; 1015 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1016 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1017 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1018 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1019 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1020 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@26:

; 1021 :   }
; 1022 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv216 = -60						; size = 8
tv205 = -52						; size = 8
tv184 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPImmediate

; 1024 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1025 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1026 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1027 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1028 :   uint64 src1, src2, destValue;
; 1029 : 
; 1030 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@27
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@27

; 1031 :   {
; 1032 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	xor	eax, eax
	mov	DWORD PTR _src1$[ebp], edx
	mov	DWORD PTR _src1$[ebp+4], eax

; 1033 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	edx, edx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], edx

; 1034 :     destValue = src2 - src1;

	mov	eax, DWORD PTR _src2$[ebp]
	sub	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp+4]
	sbb	ecx, DWORD PTR _src1$[ebp+4]
	mov	DWORD PTR _destValue$[ebp], eax
	mov	DWORD PTR _destValue$[ebp+4], ecx

; 1035 :     if(destValue & (uint64)0x0000000100000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, 0
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 1
	mov	DWORD PTR tv184[ebp], edx
	mov	DWORD PTR tv184[ebp+4], eax
	mov	ecx, DWORD PTR tv184[ebp]
	or	ecx, DWORD PTR tv184[ebp+4]
	je	SHORT $LN7@PropagateC@27

; 1036 :     {
; 1037 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@27:

; 1038 :     }
; 1039 : 
; 1040 :     if(((int32)(src1 ^ src2)) < 0)

	mov	edx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src2$[ebp]
	mov	eax, DWORD PTR _src1$[ebp+4]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@27

; 1041 :     {
; 1042 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	xor	ecx, DWORD PTR _src2$[ebp]
	xor	edx, DWORD PTR _src2$[ebp+4]
	test	ecx, ecx
	jge	SHORT $LN6@PropagateC@27

; 1043 :       {
; 1044 :         flagValues |= CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 4
	mov	DWORD PTR _flagValues$[ebp], eax
$LN6@PropagateC@27:

; 1045 :       }
; 1046 :     }
; 1047 : 
; 1048 :     if(destValue & (uint64)0x0000000080000000)

	mov	ecx, DWORD PTR _destValue$[ebp]
	and	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv205[ebp], ecx
	mov	DWORD PTR tv205[ebp+4], edx
	mov	eax, DWORD PTR tv205[ebp]
	or	eax, DWORD PTR tv205[ebp+4]
	je	SHORT $LN4@PropagateC@27

; 1049 :     {
; 1050 :       flagValues |= CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
	jmp	SHORT $LN3@PropagateC@27
$LN4@PropagateC@27:

; 1051 :     }
; 1052 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv216[ebp], edx
	mov	DWORD PTR tv216[ebp+4], eax
	mov	ecx, DWORD PTR tv216[ebp]
	or	ecx, DWORD PTR tv216[ebp+4]
	jne	SHORT $LN3@PropagateC@27

; 1053 :     {
; 1054 :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx
$LN3@PropagateC@27:

; 1055 :     }
; 1056 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 218			; 000000daH

; 1057 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], 32			; 00000020H

; 1058 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx

; 1059 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 15			; 0000000fH

; 1060 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1061 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1062 :     PropagateConstants_StoreMiscRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 1063 :   }
; 1064 :   else

	jmp	SHORT $LN9@PropagateC@27
$LN8@PropagateC@27:

; 1065 :   {
; 1066 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1067 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1068 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1069 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1070 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN9@PropagateC@27:

; 1071 :   }
; 1072 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv216 = -60						; size = 8
tv205 = -52						; size = 8
tv184 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPImmediateReverse@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPImmediateReverse

; 1074 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1075 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1076 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1077 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1078 :   uint64 src1, src2, destValue;
; 1079 : 
; 1080 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@28
	mov	edx, 1
	test	edx, edx
	je	$LN8@PropagateC@28

; 1081 :   {
; 1082 :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	xor	eax, eax
	mov	DWORD PTR _src2$[ebp], edx
	mov	DWORD PTR _src2$[ebp+4], eax

; 1083 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	edx, edx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], edx

; 1084 :     destValue = src2 - src1;

	mov	eax, DWORD PTR _src2$[ebp]
	sub	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp+4]
	sbb	ecx, DWORD PTR _src1$[ebp+4]
	mov	DWORD PTR _destValue$[ebp], eax
	mov	DWORD PTR _destValue$[ebp+4], ecx

; 1085 :     if(destValue & (uint64)0x0000000100000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, 0
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 1
	mov	DWORD PTR tv184[ebp], edx
	mov	DWORD PTR tv184[ebp+4], eax
	mov	ecx, DWORD PTR tv184[ebp]
	or	ecx, DWORD PTR tv184[ebp+4]
	je	SHORT $LN7@PropagateC@28

; 1086 :     {
; 1087 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@28:

; 1088 :     }
; 1089 : 
; 1090 :     if(((int32)(src1 ^ src2)) < 0)

	mov	edx, DWORD PTR _src1$[ebp]
	xor	edx, DWORD PTR _src2$[ebp]
	mov	eax, DWORD PTR _src1$[ebp+4]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@28

; 1091 :     {
; 1092 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	xor	ecx, DWORD PTR _src2$[ebp]
	xor	edx, DWORD PTR _src2$[ebp+4]
	test	ecx, ecx
	jge	SHORT $LN6@PropagateC@28

; 1093 :       {
; 1094 :         flagValues |= CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 4
	mov	DWORD PTR _flagValues$[ebp], eax
$LN6@PropagateC@28:

; 1095 :       }
; 1096 :     }
; 1097 : 
; 1098 :     if(destValue & (uint64)0x0000000080000000)

	mov	ecx, DWORD PTR _destValue$[ebp]
	and	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _destValue$[ebp+4]
	and	edx, 0
	mov	DWORD PTR tv205[ebp], ecx
	mov	DWORD PTR tv205[ebp+4], edx
	mov	eax, DWORD PTR tv205[ebp]
	or	eax, DWORD PTR tv205[ebp+4]
	je	SHORT $LN4@PropagateC@28

; 1099 :     {
; 1100 :       flagValues |= CC_ALU_NEGATIVE;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 8
	mov	DWORD PTR _flagValues$[ebp], ecx
	jmp	SHORT $LN3@PropagateC@28
$LN4@PropagateC@28:

; 1101 :     }
; 1102 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv216[ebp], edx
	mov	DWORD PTR tv216[ebp+4], eax
	mov	ecx, DWORD PTR tv216[ebp]
	or	ecx, DWORD PTR tv216[ebp+4]
	jne	SHORT $LN3@PropagateC@28

; 1103 :     {
; 1104 :       flagValues |= CC_ALU_ZERO;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 1
	mov	DWORD PTR _flagValues$[ebp], edx
$LN3@PropagateC@28:

; 1105 :     }
; 1106 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 218			; 000000daH

; 1107 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], 32			; 00000020H

; 1108 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+8], ecx

; 1109 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 15			; 0000000fH

; 1110 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1111 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1112 :     PropagateConstants_StoreMiscRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 1113 :   }
; 1114 :   else

	jmp	SHORT $LN9@PropagateC@28
$LN8@PropagateC@28:

; 1115 :   {
; 1116 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1117 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1118 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1119 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1120 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN9@PropagateC@28:

; 1121 :   }
; 1122 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPImmediateReverse
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPScalar

; 1124 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1125 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1126 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1127 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1128 :   uint32 src1, src2;
; 1129 : 
; 1130 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@29
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@29

; 1131 :   {
; 1132 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1133 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 70			; 00000046H

; 1134 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1135 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1136 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1137 :     PropagateConstants_CMPImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@29
$LN4@PropagateC@29:

; 1138 :   }
; 1139 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@29
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@29

; 1140 :   {
; 1141 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 1142 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPImmediateReverse;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 71			; 00000047H

; 1143 :     constants.nuance->fields[FIELD_ALU_SRC2] = src2;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1144 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1145 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1146 :     PropagateConstants_CMPImmediateReverse(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediateReverse
	add	esp, 4

; 1147 :   }
; 1148 :   else

	jmp	SHORT $LN5@PropagateC@29
$LN2@PropagateC@29:

; 1149 :   {
; 1150 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1151 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1152 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1153 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1154 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@29:

; 1155 :   }
; 1156 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPScalarShiftRightImmediate

; 1158 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1159 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1160 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 1161 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1162 :   uint32 src1;
; 1163 : 
; 1164 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@30
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@30

; 1165 :   {
; 1166 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1167 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_CMPImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 70			; 00000046H

; 1168 :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1169 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1170 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1171 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1172 :     PropagateConstants_CMPImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediate
	add	esp, 4

; 1173 :   }
; 1174 :   else

	jmp	SHORT $LN3@PropagateC@30
$LN2@PropagateC@30:

; 1175 :   {
; 1176 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1177 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1178 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1179 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1180 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@30:

; 1181 :   }
; 1182 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPScalarShiftLeftImmediate

; 1184 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1185 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1186 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 1187 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1188 :   uint32 src1;
; 1189 : 
; 1190 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@31
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@31

; 1191 :   {
; 1192 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1193 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 70			; 00000046H

; 1194 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1195 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1196 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1197 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1198 :     PropagateConstants_CMPImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPImmediate
	add	esp, 4

; 1199 :   }
; 1200 :   else

	jmp	SHORT $LN3@PropagateC@31
$LN2@PropagateC@31:

; 1201 :   {
; 1202 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1203 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1204 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1205 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1206 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@31:

; 1207 :   }
; 1208 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destValue$ = -24					; size = 4
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDImmediate

; 1210 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1211 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1212 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1213 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1214 :   uint32 src1, src2, destValue;
; 1215 : 
; 1216 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1217 : 
; 1218 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@32
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@32

; 1219 :   {
; 1220 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1221 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 1222 :     destValue = src1 & src2;

	mov	ecx, DWORD PTR _src1$[ebp]
	and	ecx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR _destValue$[ebp], ecx

; 1223 :     if(destValue == 0)

	jne	SHORT $LN3@PropagateC@32

; 1224 :     {
; 1225 :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 1226 :     }
; 1227 :     else

	jmp	SHORT $LN2@PropagateC@32
$LN3@PropagateC@32:

; 1228 :     {
; 1229 :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@32:

; 1230 :     }
; 1231 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 1232 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1233 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1234 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 1235 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 1236 :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1237 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 1238 :   }
; 1239 :   else

	jmp	SHORT $LN5@PropagateC@32
$LN4@PropagateC@32:

; 1240 :   {
; 1241 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1242 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1243 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1244 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@32:

; 1245 :   }
; 1246 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDScalar

; 1248 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1249 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1250 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1251 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1252 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1253 : 
; 1254 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1255 : 
; 1256 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@33
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@33

; 1257 :   {
; 1258 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 75			; 0000004bH

; 1259 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1260 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1261 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1262 :     PropagateConstants_ANDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@33
$LN4@PropagateC@33:

; 1263 :   }
; 1264 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@33
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@33

; 1265 :   {
; 1266 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 75			; 0000004bH

; 1267 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1268 :     constants.nuance->fields[FIELD_ALU_SRC2] = src1Index;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1Index$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1269 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1270 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1271 :     PropagateConstants_ANDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4

; 1272 :   }
; 1273 :   else

	jmp	SHORT $LN5@PropagateC@33
$LN2@PropagateC@33:

; 1274 :   {
; 1275 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1276 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1277 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1278 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@33:

; 1279 :   }
; 1280 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDImmediateShiftScalar

; 1282 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1283 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1284 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1285 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1286 :   uint32 src1, src2;
; 1287 : 
; 1288 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1289 : 
; 1290 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@34
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@34

; 1291 :   {
; 1292 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1293 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1294 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@34

; 1295 :     {
; 1296 :       src1 = (src1 << (64UL - src2));

	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _src2$[ebp]
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	DWORD PTR _src1$[ebp], edx

; 1297 :     }
; 1298 :     else

	jmp	SHORT $LN2@PropagateC@34
$LN3@PropagateC@34:

; 1299 :     {
; 1300 :       src1 = (src1 >> src2);

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@34:

; 1301 :     }
; 1302 :     
; 1303 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 75			; 0000004bH

; 1304 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1305 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1306 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1307 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1308 :     PropagateConstants_ANDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4

; 1309 :   }
; 1310 :   else

	jmp	SHORT $LN5@PropagateC@34
$LN4@PropagateC@34:

; 1311 :   {
; 1312 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1313 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1314 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1315 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@34:

; 1316 :   }
; 1317 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDScalarShiftRightImmediate

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1320 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1321 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1322 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1323 :   uint32 src1;
; 1324 : 
; 1325 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1326 : 
; 1327 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@35
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@35

; 1328 :   {
; 1329 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1330 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 75			; 0000004bH

; 1331 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 >> (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1332 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1333 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1334 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1335 :     PropagateConstants_ANDImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4

; 1336 :   }
; 1337 :   else

	jmp	SHORT $LN3@PropagateC@35
$LN2@PropagateC@35:

; 1338 :   {
; 1339 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1340 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1341 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1342 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@35:

; 1343 :   }
; 1344 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDScalarShiftLeftImmediate

; 1346 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1347 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1348 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1349 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1350 :   uint32 src1;
; 1351 : 
; 1352 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1353 : 
; 1354 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@36
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@36

; 1355 :   {
; 1356 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1357 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 75			; 0000004bH

; 1358 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1359 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1360 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1361 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1362 :     PropagateConstants_ANDImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4

; 1363 :   }
; 1364 :   else

	jmp	SHORT $LN3@PropagateC@36
$LN2@PropagateC@36:

; 1365 :   {
; 1366 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1367 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1368 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1369 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@36:

; 1370 :   }
; 1371 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDScalarShiftScalar

; 1373 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1374 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1375 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1376 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1377 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1378 :   uint32 src1;
; 1379 : 
; 1380 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1381 : 
; 1382 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@37
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@37

; 1383 :   {
; 1384 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1385 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediateShiftScalar;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 77			; 0000004dH

; 1386 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1387 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1388 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1389 :     constants.SetScalarInputDependency(destIndex);

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1390 :     PropagateConstants_ANDImmediateShiftScalar(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ANDImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediateShiftScalar
	add	esp, 4

; 1391 :   }
; 1392 :   else

	jmp	SHORT $LN3@PropagateC@37
$LN2@PropagateC@37:

; 1393 :   {
; 1394 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 1395 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1396 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1397 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@37:

; 1398 :   }
; 1399 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDScalarShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ANDScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -24						; size = 4
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ANDScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ANDScalarRotateScalar

; 1401 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1402 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1403 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1404 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1405 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1406 :   uint32 src1, src2;
; 1407 : 
; 1408 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1409 : 
; 1410 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@38
	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC@38
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC@38

; 1411 :   {
; 1412 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1413 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1414 : 
; 1415 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@38

; 1416 :     {
; 1417 :       src1 = _lrotl(src1, 64UL - src2);

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src2$[ebp]
	push	edx
	mov	eax, DWORD PTR _src1$[ebp]
	push	eax
	call	__lrotl
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax

; 1418 :     }
; 1419 :     else

	jmp	SHORT $LN2@PropagateC@38
$LN3@PropagateC@38:

; 1420 :     {
; 1421 :       src1 = _lrotr(src1, src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1$[ebp]
	push	edx
	call	__lrotr
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@38:

; 1422 :     }
; 1423 : 
; 1424 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ANDImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 75			; 0000004bH

; 1425 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1426 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1427 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1428 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1429 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1430 :     PropagateConstants_ANDImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ANDImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ANDImmediate
	add	esp, 4

; 1431 :   }
; 1432 :   else

	jmp	SHORT $LN5@PropagateC@38
$LN4@PropagateC@38:

; 1433 :   {
; 1434 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1435 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1436 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1437 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@38:

; 1438 :   }
; 1439 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ANDScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ANDScalarRotateScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destValue$ = -24					; size = 4
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTImmediate

; 1441 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1442 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1443 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1444 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1445 :   uint32 src1, src2, destValue;
; 1446 : 
; 1447 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1448 : 
; 1449 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@39
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@39

; 1450 :   {
; 1451 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1452 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 1453 :     destValue = src1 & src2;

	mov	ecx, DWORD PTR _src1$[ebp]
	and	ecx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR _destValue$[ebp], ecx

; 1454 :     if(destValue == 0)

	jne	SHORT $LN3@PropagateC@39

; 1455 :     {
; 1456 :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 1457 :     }
; 1458 :     else

	jmp	SHORT $LN2@PropagateC@39
$LN3@PropagateC@39:

; 1459 :     {
; 1460 :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@39:

; 1461 :     }
; 1462 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 218			; 000000daH

; 1463 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], 32			; 00000020H

; 1464 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1465 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+12], 13			; 0000000dH

; 1466 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1467 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1468 :     PropagateConstants_StoreMiscRegisterConstant(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 1469 :   }
; 1470 :   else

	jmp	SHORT $LN5@PropagateC@39
$LN4@PropagateC@39:

; 1471 :   {
; 1472 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1473 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1474 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@39:

; 1475 :   }
; 1476 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTScalar

; 1478 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1479 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1480 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1481 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1482 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1483 : 
; 1484 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1485 : 
; 1486 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@40
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@40

; 1487 :   {
; 1488 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 82			; 00000052H

; 1489 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1490 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1491 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1492 :     PropagateConstants_FTSTImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@40
$LN4@PropagateC@40:

; 1493 :   }
; 1494 :   else if(constants.IsScalarRegisterConstant(src2Index))

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@40

; 1495 :   {
; 1496 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 82			; 00000052H

; 1497 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	edx, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+8], eax

; 1498 :     constants.nuance->fields[FIELD_ALU_SRC2] = src1Index;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1Index$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1499 :     constants.ClearScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1500 :     constants.SetScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1501 :     PropagateConstants_FTSTImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4

; 1502 :   }
; 1503 :   else

	jmp	SHORT $LN5@PropagateC@40
$LN2@PropagateC@40:

; 1504 :   {
; 1505 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1506 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1507 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@40:

; 1508 :   }
; 1509 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTImmediateShiftScalar

; 1511 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1512 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1513 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1514 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1515 :   uint32 src1, src2;
; 1516 : 
; 1517 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1518 : 
; 1519 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@41
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@41

; 1520 :   {
; 1521 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1522 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1523 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@41

; 1524 :     {
; 1525 :       src1 = (src1 << (64UL - src2));

	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _src2$[ebp]
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	DWORD PTR _src1$[ebp], edx

; 1526 :     }
; 1527 :     else

	jmp	SHORT $LN2@PropagateC@41
$LN3@PropagateC@41:

; 1528 :     {
; 1529 :       src1 = (src1 >> src2);

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@41:

; 1530 :     }
; 1531 :     
; 1532 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 82			; 00000052H

; 1533 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1534 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1535 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1536 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1537 :     PropagateConstants_FTSTImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4

; 1538 :   }
; 1539 :   else

	jmp	SHORT $LN5@PropagateC@41
$LN4@PropagateC@41:

; 1540 :   {
; 1541 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1542 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1543 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@41:

; 1544 :   }
; 1545 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTScalarShiftRightImmediate

; 1547 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1548 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1549 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1550 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1551 :   uint32 src1;
; 1552 : 
; 1553 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1554 : 
; 1555 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@42
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@42

; 1556 :   {
; 1557 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1558 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 82			; 00000052H

; 1559 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 >> (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1560 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1561 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1562 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1563 :     PropagateConstants_FTSTImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4

; 1564 :   }
; 1565 :   else

	jmp	SHORT $LN3@PropagateC@42
$LN2@PropagateC@42:

; 1566 :   {
; 1567 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1568 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1569 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@42:

; 1570 :   }
; 1571 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTScalarShiftLeftImmediate

; 1573 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1574 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1575 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1576 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1577 :   uint32 src1;
; 1578 : 
; 1579 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1580 : 
; 1581 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@43
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@43

; 1582 :   {
; 1583 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1584 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 82			; 00000052H

; 1585 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1586 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1587 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1588 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1589 :     PropagateConstants_FTSTImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4

; 1590 :   }
; 1591 :   else

	jmp	SHORT $LN3@PropagateC@43
$LN2@PropagateC@43:

; 1592 :   {
; 1593 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1594 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1595 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@43:

; 1596 :   }
; 1597 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTScalarShiftScalar

; 1599 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1600 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1601 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1602 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1603 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1604 :   uint32 src1;
; 1605 : 
; 1606 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1607 : 
; 1608 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@44
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@44

; 1609 :   {
; 1610 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1611 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediateShiftScalar;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 84			; 00000054H

; 1612 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1613 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1614 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1615 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1616 :     constants.SetScalarInputDependency(destIndex);

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1617 :     PropagateConstants_FTSTImmediateShiftScalar(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_FTSTImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediateShiftScalar
	add	esp, 4

; 1618 :   }
; 1619 :   else

	jmp	SHORT $LN3@PropagateC@44
$LN2@PropagateC@44:

; 1620 :   {
; 1621 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 1622 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1623 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@44:

; 1624 :   }
; 1625 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTScalarShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_FTSTScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -24						; size = 4
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_FTSTScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_FTSTScalarRotateScalar

; 1627 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1628 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1629 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1630 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1631 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1632 :   uint32 src1, src2;
; 1633 : 
; 1634 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1635 : 
; 1636 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@45
	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC@45
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC@45

; 1637 :   {
; 1638 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1639 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1640 : 
; 1641 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@45

; 1642 :     {
; 1643 :       src1 = _lrotl(src1, 64UL - src2);

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src2$[ebp]
	push	edx
	mov	eax, DWORD PTR _src1$[ebp]
	push	eax
	call	__lrotl
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax

; 1644 :     }
; 1645 :     else

	jmp	SHORT $LN2@PropagateC@45
$LN3@PropagateC@45:

; 1646 :     {
; 1647 :       src1 = _lrotr(src1, src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1$[ebp]
	push	edx
	call	__lrotr
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@45:

; 1648 :     }
; 1649 : 
; 1650 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_FTSTImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 82			; 00000052H

; 1651 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1652 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1653 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1654 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1655 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1656 :     PropagateConstants_FTSTImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_FTSTImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_FTSTImmediate
	add	esp, 4

; 1657 :   }
; 1658 :   else

	jmp	SHORT $LN5@PropagateC@45
$LN4@PropagateC@45:

; 1659 :   {
; 1660 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1661 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1662 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@45:

; 1663 :   }
; 1664 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_FTSTScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_FTSTScalarRotateScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destValue$ = -24					; size = 4
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORImmediate

; 1666 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1667 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1668 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1669 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1670 :   uint32 src1, src2, destValue;
; 1671 : 
; 1672 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1673 : 
; 1674 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@46
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@46

; 1675 :   {
; 1676 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1677 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 1678 :     destValue = src1 | src2;

	mov	ecx, DWORD PTR _src1$[ebp]
	or	ecx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR _destValue$[ebp], ecx

; 1679 :     if(destValue == 0)

	jne	SHORT $LN3@PropagateC@46

; 1680 :     {
; 1681 :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 1682 :     }
; 1683 :     else

	jmp	SHORT $LN2@PropagateC@46
$LN3@PropagateC@46:

; 1684 :     {
; 1685 :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@46:

; 1686 :     }
; 1687 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 1688 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1689 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1690 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 1691 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 1692 :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1693 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 1694 :   }
; 1695 :   else

	jmp	SHORT $LN5@PropagateC@46
$LN4@PropagateC@46:

; 1696 :   {
; 1697 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1698 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1699 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1700 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@46:

; 1701 :   }
; 1702 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORScalar

; 1704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1705 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1706 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1707 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1708 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1709 : 
; 1710 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1711 : 
; 1712 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@47
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@47

; 1713 :   {
; 1714 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 89			; 00000059H

; 1715 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1716 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1717 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1718 :     PropagateConstants_ORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@47
$LN4@PropagateC@47:

; 1719 :   }
; 1720 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@47
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@47

; 1721 :   {
; 1722 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 89			; 00000059H

; 1723 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1724 :     constants.nuance->fields[FIELD_ALU_SRC2] = src1Index;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1Index$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1725 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1726 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1727 :     PropagateConstants_ORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4

; 1728 :   }
; 1729 :   else

	jmp	SHORT $LN5@PropagateC@47
$LN2@PropagateC@47:

; 1730 :   {
; 1731 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1732 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1733 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1734 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@47:

; 1735 :   }
; 1736 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORImmediateShiftScalar

; 1738 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1739 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1740 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1741 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1742 :   uint32 src1, src2;
; 1743 : 
; 1744 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1745 : 
; 1746 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@48
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@48

; 1747 :   {
; 1748 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1749 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1750 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@48

; 1751 :     {
; 1752 :       src1 = (src1 << (64UL - src2));

	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _src2$[ebp]
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	DWORD PTR _src1$[ebp], edx

; 1753 :     }
; 1754 :     else

	jmp	SHORT $LN2@PropagateC@48
$LN3@PropagateC@48:

; 1755 :     {
; 1756 :       src1 = (src1 >> src2);

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@48:

; 1757 :     }
; 1758 :     
; 1759 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 89			; 00000059H

; 1760 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1761 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1762 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1763 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1764 :     PropagateConstants_ORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4

; 1765 :   }
; 1766 :   else

	jmp	SHORT $LN5@PropagateC@48
$LN4@PropagateC@48:

; 1767 :   {
; 1768 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1769 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1770 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1771 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@48:

; 1772 :   }
; 1773 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORScalarShiftRightImmediate

; 1775 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1776 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1777 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1778 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1779 :   uint32 src1;
; 1780 : 
; 1781 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1782 : 
; 1783 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@49
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@49

; 1784 :   {
; 1785 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1786 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 89			; 00000059H

; 1787 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 >> (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1788 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1789 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1790 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1791 :     PropagateConstants_ORImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4

; 1792 :   }
; 1793 :   else

	jmp	SHORT $LN3@PropagateC@49
$LN2@PropagateC@49:

; 1794 :   {
; 1795 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1796 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1797 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1798 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@49:

; 1799 :   }
; 1800 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORScalarShiftLeftImmediate

; 1802 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1803 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1804 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1805 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1806 :   uint32 src1;
; 1807 : 
; 1808 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1809 : 
; 1810 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@50
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@50

; 1811 :   {
; 1812 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1813 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 89			; 00000059H

; 1814 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 1815 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1816 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1817 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1818 :     PropagateConstants_ORImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4

; 1819 :   }
; 1820 :   else

	jmp	SHORT $LN3@PropagateC@50
$LN2@PropagateC@50:

; 1821 :   {
; 1822 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 1823 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1824 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1825 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@50:

; 1826 :   }
; 1827 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORScalarShiftScalar

; 1829 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1830 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1831 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1832 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1833 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1834 :   uint32 src1;
; 1835 : 
; 1836 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1837 : 
; 1838 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@51
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@51

; 1839 :   {
; 1840 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1841 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediateShiftScalar;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 91			; 0000005bH

; 1842 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1843 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1844 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1845 :     constants.SetScalarInputDependency(destIndex);

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1846 :     PropagateConstants_ORImmediateShiftScalar(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_ORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediateShiftScalar
	add	esp, 4

; 1847 :   }
; 1848 :   else

	jmp	SHORT $LN3@PropagateC@51
$LN2@PropagateC@51:

; 1849 :   {
; 1850 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 1851 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1852 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1853 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@51:

; 1854 :   }
; 1855 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORScalarShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -24						; size = 4
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ORScalarRotateScalar

; 1857 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1858 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1859 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1860 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1861 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1862 :   uint32 src1, src2;
; 1863 : 
; 1864 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1865 : 
; 1866 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@52
	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC@52
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC@52

; 1867 :   {
; 1868 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 1869 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1870 : 
; 1871 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@52

; 1872 :     {
; 1873 :       src1 = _lrotl(src1, 64UL - src2);

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src2$[ebp]
	push	edx
	mov	eax, DWORD PTR _src1$[ebp]
	push	eax
	call	__lrotl
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax

; 1874 :     }
; 1875 :     else

	jmp	SHORT $LN2@PropagateC@52
$LN3@PropagateC@52:

; 1876 :     {
; 1877 :       src1 = _lrotr(src1, src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1$[ebp]
	push	edx
	call	__lrotr
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@52:

; 1878 :     }
; 1879 : 
; 1880 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ORImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 89			; 00000059H

; 1881 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1882 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1883 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1884 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1885 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1886 :     PropagateConstants_ORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ORImmediate
	add	esp, 4

; 1887 :   }
; 1888 :   else

	jmp	SHORT $LN5@PropagateC@52
$LN4@PropagateC@52:

; 1889 :   {
; 1890 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1891 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1892 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1893 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@52:

; 1894 :   }
; 1895 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ORScalarRotateScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destValue$ = -24					; size = 4
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORImmediate

; 1898 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1899 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1900 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1901 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1902 :   uint32 src1, src2, destValue;
; 1903 : 
; 1904 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1905 : 
; 1906 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@53
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@53

; 1907 :   {
; 1908 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1909 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 1910 :     destValue = src1 ^ src2;

	mov	ecx, DWORD PTR _src1$[ebp]
	xor	ecx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR _destValue$[ebp], ecx

; 1911 :     if(destValue == 0)

	jne	SHORT $LN3@PropagateC@53

; 1912 :     {
; 1913 :       flagValues = CC_ALU_ZERO;

	mov	DWORD PTR _flagValues$[ebp], 1

; 1914 :     }
; 1915 :     else

	jmp	SHORT $LN2@PropagateC@53
$LN3@PropagateC@53:

; 1916 :     {
; 1917 :       flagValues |= ((destValue >> 28) & CC_ALU_NEGATIVE);

	mov	edx, DWORD PTR _destValue$[ebp]
	shr	edx, 28					; 0000001cH
	and	edx, 8
	or	edx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx
$LN2@PropagateC@53:

; 1918 :     }
; 1919 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 217			; 000000d9H

; 1920 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1921 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destValue$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1922 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 13			; 0000000dH

; 1923 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 1924 :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1925 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 1926 :   }
; 1927 :   else

	jmp	SHORT $LN5@PropagateC@53
$LN4@PropagateC@53:

; 1928 :   {
; 1929 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1930 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1931 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1932 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@53:

; 1933 :   }
; 1934 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORScalar

; 1936 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1937 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 1938 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1939 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1940 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1941 : 
; 1942 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1943 : 
; 1944 :   if((src1Index == src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	cmp	eax, DWORD PTR _src2Index$[ebp]
	jne	SHORT $LN6@PropagateC@54
	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN6@PropagateC@54

; 1945 :   {
; 1946 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], 217			; 000000d9H

; 1947 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1948 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = 0;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], 0

; 1949 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 13			; 0000000dH

; 1950 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = CC_ALU_ZERO;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+16], 1

; 1951 :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1952 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1953 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4
	jmp	$LN7@PropagateC@54
$LN6@PropagateC@54:

; 1954 :   }
; 1955 :   else if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@PropagateC@54
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@PropagateC@54

; 1956 :   {
; 1957 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 96			; 00000060H

; 1958 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1959 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1960 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1961 :     PropagateConstants_EORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4
	jmp	$LN7@PropagateC@54
$LN4@PropagateC@54:

; 1962 :   }
; 1963 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@54
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@54

; 1964 :   {
; 1965 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 96			; 00000060H

; 1966 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 1967 :     constants.nuance->fields[FIELD_ALU_SRC2] = src1Index;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1Index$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1968 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 1969 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 1970 :     PropagateConstants_EORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4

; 1971 :   }
; 1972 :   else

	jmp	SHORT $LN7@PropagateC@54
$LN2@PropagateC@54:

; 1973 :   {
; 1974 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 1975 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1976 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 1977 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN7@PropagateC@54:

; 1978 :   }
; 1979 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORImmediateShiftScalar

; 1981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1982 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 1983 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 1984 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 1985 :   uint32 src1, src2;
; 1986 : 
; 1987 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 1988 : 
; 1989 :   if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@55
	mov	edx, 1
	test	edx, edx
	je	$LN4@PropagateC@55

; 1990 :   {
; 1991 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1$[ebp], edx

; 1992 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 1993 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@55

; 1994 :     {
; 1995 :       src1 = (src1 << (64UL - src2));

	mov	ecx, 64					; 00000040H
	sub	ecx, DWORD PTR _src2$[ebp]
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	DWORD PTR _src1$[ebp], edx

; 1996 :     }
; 1997 :     else

	jmp	SHORT $LN2@PropagateC@55
$LN3@PropagateC@55:

; 1998 :     {
; 1999 :       src1 = (src1 >> src2);

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shr	eax, cl
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@55:

; 2000 :     }
; 2001 :     
; 2002 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 96			; 00000060H

; 2003 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2004 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2005 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2006 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2007 :     PropagateConstants_EORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4

; 2008 :   }
; 2009 :   else

	jmp	SHORT $LN5@PropagateC@55
$LN4@PropagateC@55:

; 2010 :   {
; 2011 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2012 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2013 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2014 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@55:

; 2015 :   }
; 2016 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORScalarShiftRightImmediate

; 2018 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2019 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2020 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2021 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2022 :   uint32 src1;
; 2023 : 
; 2024 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 2025 : 
; 2026 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@56
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@56

; 2027 :   {
; 2028 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2029 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 96			; 00000060H

; 2030 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 >> (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shr	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 2031 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2032 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2033 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2034 :     PropagateConstants_EORImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4

; 2035 :   }
; 2036 :   else

	jmp	SHORT $LN3@PropagateC@56
$LN2@PropagateC@56:

; 2037 :   {
; 2038 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 2039 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2040 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2041 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@56:

; 2042 :   }
; 2043 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORScalarShiftLeftImmediate

; 2045 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2046 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2047 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2048 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2049 :   uint32 src1;
; 2050 : 
; 2051 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 2052 : 
; 2053 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@57
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@57

; 2054 :   {
; 2055 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2056 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 96			; 00000060H

; 2057 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << (constants.nuance->fields[FIELD_ALU_SRC2] & 0x3FUL);

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [ecx+12]
	and	ecx, 63					; 0000003fH
	mov	edx, DWORD PTR _src1$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 2058 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2059 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2060 :     constants.SetScalarInputDependency(destIndex);

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2061 :     PropagateConstants_EORImmediate(constants);    

	mov	ecx, DWORD PTR _constants$[ebp]
	push	ecx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4

; 2062 :   }
; 2063 :   else

	jmp	SHORT $LN3@PropagateC@57
$LN2@PropagateC@57:

; 2064 :   {
; 2065 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [edx+12], 2

; 2066 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2067 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2068 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	eax, DWORD PTR _destIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@57:

; 2069 :   }
; 2070 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORScalarShiftScalar

; 2072 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2073 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2074 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2075 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2076 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2077 :   uint32 src1;
; 2078 : 
; 2079 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 2080 : 
; 2081 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@58
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@58

; 2082 :   {
; 2083 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2084 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediateShiftScalar;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 98			; 00000062H

; 2085 :     constants.nuance->fields[FIELD_ALU_SRC1] = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2086 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2087 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2088 :     constants.SetScalarInputDependency(destIndex);

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2089 :     PropagateConstants_EORImmediateShiftScalar(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_EORImmediateShiftScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediateShiftScalar
	add	esp, 4

; 2090 :   }
; 2091 :   else

	jmp	SHORT $LN3@PropagateC@58
$LN2@PropagateC@58:

; 2092 :   {
; 2093 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 2094 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2095 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2096 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@58:

; 2097 :   }
; 2098 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORScalarShiftScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORScalarShiftScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_EORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -24						; size = 4
_src1$ = -20						; size = 4
_flagValues$ = -16					; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_EORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_EORScalarRotateScalar

; 2100 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2101 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2102 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2103 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2104 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2105 :   uint32 src1, src2;
; 2106 : 
; 2107 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 2108 : 
; 2109 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@PropagateC@59
	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	$LN4@PropagateC@59
	mov	ecx, 1
	test	ecx, ecx
	je	$LN4@PropagateC@59

; 2110 :   {
; 2111 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2112 :     src2 = (((int32)(constants.GetScalarRegisterConstant(src2Index) << 26)) >> 26) & 0x3FUL;

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	shl	eax, 26					; 0000001aH
	sar	eax, 26					; 0000001aH
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _src2$[ebp], eax

; 2113 : 
; 2114 :     if(src2 & 0x20)

	mov	ecx, DWORD PTR _src2$[ebp]
	and	ecx, 32					; 00000020H
	je	SHORT $LN3@PropagateC@59

; 2115 :     {
; 2116 :       src1 = _lrotl(src1, 64UL - src2);

	mov	edx, 64					; 00000040H
	sub	edx, DWORD PTR _src2$[ebp]
	push	edx
	mov	eax, DWORD PTR _src1$[ebp]
	push	eax
	call	__lrotl
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax

; 2117 :     }
; 2118 :     else

	jmp	SHORT $LN2@PropagateC@59
$LN3@PropagateC@59:

; 2119 :     {
; 2120 :       src1 = _lrotr(src1, src2);

	mov	ecx, DWORD PTR _src2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1$[ebp]
	push	edx
	call	__lrotr
	add	esp, 8
	mov	DWORD PTR _src1$[ebp], eax
$LN2@PropagateC@59:

; 2121 :     }
; 2122 : 
; 2123 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_EORImmediate;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 96			; 00000060H

; 2124 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2125 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2126 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2127 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2128 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2129 :     PropagateConstants_EORImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_EORImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_EORImmediate
	add	esp, 4

; 2130 :   }
; 2131 :   else

	jmp	SHORT $LN5@PropagateC@59
$LN4@PropagateC@59:

; 2132 :   {
; 2133 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2134 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2135 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2136 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@59:

; 2137 :   }
; 2138 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_EORScalarRotateScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_EORScalarRotateScalar
_TEXT	ENDS
PUBLIC	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency
PUBLIC	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
PUBLIC	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
PUBLIC	?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv240 = -60						; size = 8
tv229 = -52						; size = 8
tv208 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDWCImmediate

; 2140 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2141 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2142 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2143 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2144 :   uint64 src1, src2, destValue;
; 2145 : 
; 2146 :   constants.SetMiscRegisterConstant(CONSTANT_REG_V,0);

	push	0
	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetMiscRegisterConstant@SuperBlockConstants@@QAEXII@Z ; SuperBlockConstants::SetMiscRegisterConstant

; 2147 : 
; 2148 :   if(constants.IsScalarRegisterConstant(src2Index) && constants.IsMiscRegisterConstant(CONSTANT_REG_C) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@60
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	$LN8@PropagateC@60
	mov	eax, 1
	test	eax, eax
	je	$LN8@PropagateC@60

; 2149 :   {
; 2150 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	xor	ecx, ecx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], ecx

; 2151 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	ecx, ecx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], ecx

; 2152 :     destValue = src1 + src2 + (uint64)constants.GetMiscRegisterConstant(CONSTANT_REG_C);

	mov	esi, DWORD PTR _src1$[ebp]
	add	esi, DWORD PTR _src2$[ebp]
	mov	edi, DWORD PTR _src1$[ebp+4]
	adc	edi, DWORD PTR _src2$[ebp+4]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	xor	edx, edx
	add	esi, eax
	adc	edi, edx
	mov	DWORD PTR _destValue$[ebp], esi
	mov	DWORD PTR _destValue$[ebp+4], edi

; 2153 :     if(destValue & (uint64)0x0000000100000000)

	mov	eax, DWORD PTR _destValue$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 1
	mov	DWORD PTR tv208[ebp], eax
	mov	DWORD PTR tv208[ebp+4], ecx
	mov	edx, DWORD PTR tv208[ebp]
	or	edx, DWORD PTR tv208[ebp+4]
	je	SHORT $LN7@PropagateC@60

; 2154 :     {
; 2155 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@60:

; 2156 :     }
; 2157 : 
; 2158 :     if(((int32)(src1 ^ src2)) >= 0)

	mov	eax, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	xor	ecx, DWORD PTR _src2$[ebp+4]
	test	eax, eax
	jl	SHORT $LN6@PropagateC@60

; 2159 :     {
; 2160 :       if(((int32)(src1 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	xor	edx, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src1$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@60

; 2161 :       {
; 2162 :         flagValues |= CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN6@PropagateC@60:

; 2163 :       }
; 2164 :     }
; 2165 : 
; 2166 :     if(destValue & (uint64)0x0000000080000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv229[ebp], edx
	mov	DWORD PTR tv229[ebp+4], eax
	mov	ecx, DWORD PTR tv229[ebp]
	or	ecx, DWORD PTR tv229[ebp+4]
	je	SHORT $LN4@PropagateC@60

; 2167 :     {
; 2168 :       flagValues |= CC_ALU_NEGATIVE;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 8
	mov	DWORD PTR _flagValues$[ebp], edx
	jmp	SHORT $LN3@PropagateC@60
$LN4@PropagateC@60:

; 2169 :     }
; 2170 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv240[ebp], eax
	mov	DWORD PTR tv240[ebp+4], ecx
	mov	edx, DWORD PTR tv240[ebp]
	or	edx, DWORD PTR tv240[ebp+4]
	jne	SHORT $LN3@PropagateC@60

; 2171 :     {
; 2172 :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@60:

; 2173 :     }
; 2174 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 217			; 000000d9H

; 2175 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2176 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2177 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 2178 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2179 :     constants.ClearScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2180 :     constants.ClearMiscInputDependency(DEPENDENCY_FLAG_C);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 2181 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 2182 :   }
; 2183 :   else

	jmp	SHORT $LN9@PropagateC@60
$LN8@PropagateC@60:

; 2184 :   {
; 2185 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 2186 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2187 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2188 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2189 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2190 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@60:

; 2191 :   }
; 2192 : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDWCImmediate
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z PROC ; SuperBlockConstants::ClearMiscInputDependency, COMDAT
; _this$ = ecx

; 117  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 118  :     pCurrentInstructionEntry->miscInputDependencies &= ~(1UL << index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	not	eax
	and	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+36], eax

; 119  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ENDP ; SuperBlockConstants::ClearMiscInputDependency
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z PROC ; SuperBlockConstants::IsMiscRegisterConstant, COMDAT
; _this$ = ecx

; 209  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 210  :     return (miscRegisterConstantsStatus & (1UL << index)) != 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+560]
	neg	eax
	sbb	eax, eax
	neg	eax

; 211  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ENDP ; SuperBlockConstants::IsMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z PROC ; SuperBlockConstants::GetMiscRegisterConstant, COMDAT
; _this$ = ecx

; 217  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  :     return miscRegisterConstants[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+428]

; 219  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ENDP ; SuperBlockConstants::GetMiscRegisterConstant
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDWCScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\propagateconstants_alu.cpp
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDWCScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDWCScalar

; 2194 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2195 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2196 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2197 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2198 :   uint32 src1;
; 2199 : 
; 2200 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@61
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@61

; 2201 :   {
; 2202 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2203 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 104			; 00000068H

; 2204 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2205 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2206 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2207 :     PropagateConstants_ADDWCImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCImmediate
	add	esp, 4

; 2208 :   }
; 2209 :   else

	jmp	SHORT $LN3@PropagateC@61
$LN2@PropagateC@61:

; 2210 :   {
; 2211 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2212 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2213 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2214 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2215 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2216 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@61:

; 2217 :   }
; 2218 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDWCScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDWCScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -16						; size = 4
_src1$ = -12						; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDWCScalarShiftRightImmediate

; 2220 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2221 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2222 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2223 :   uint32 src1, src2;
; 2224 : 
; 2225 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@62
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@62

; 2226 :   {
; 2227 :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2228 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2229 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 104			; 00000068H

; 2230 :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2231 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2232 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2233 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2234 :     PropagateConstants_ADDWCImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCImmediate
	add	esp, 4

; 2235 :   }
; 2236 :   else

	jmp	SHORT $LN3@PropagateC@62
$LN2@PropagateC@62:

; 2237 :   {
; 2238 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2239 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2240 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2241 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2242 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2243 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@62:

; 2244 :   }
; 2245 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDWCScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_ADDWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -16						; size = 4
_src1$ = -12						; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_ADDWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_ADDWCScalarShiftLeftImmediate

; 2247 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2248 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2249 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2250 :   uint32 src1, src2;
; 2251 : 
; 2252 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@63
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@63

; 2253 :   {
; 2254 :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2255 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2256 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_ADDWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 104			; 00000068H

; 2257 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2258 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2259 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2260 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2261 :     PropagateConstants_ADDWCImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_ADDWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_ADDWCImmediate
	add	esp, 4

; 2262 :   }
; 2263 :   else

	jmp	SHORT $LN3@PropagateC@63
$LN2@PropagateC@63:

; 2264 :   {
; 2265 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2266 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2267 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2268 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2269 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2270 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@63:

; 2271 :   }
; 2272 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_ADDWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_ADDWCScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv237 = -60						; size = 8
tv226 = -52						; size = 8
tv205 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBWCImmediate

; 2274 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2275 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2276 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2277 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2278 :   uint64 src1, src2, destValue;
; 2279 : 
; 2280 :   if(constants.IsScalarRegisterConstant(src2Index) && constants.IsMiscRegisterConstant(CONSTANT_REG_C) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@64
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	$LN8@PropagateC@64
	mov	eax, 1
	test	eax, eax
	je	$LN8@PropagateC@64

; 2281 :   {
; 2282 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	xor	ecx, ecx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], ecx

; 2283 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	ecx, ecx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], ecx

; 2284 :     destValue = src2 - src1 - (uint64)constants.GetMiscRegisterConstant(CONSTANT_REG_C);

	mov	esi, DWORD PTR _src2$[ebp]
	sub	esi, DWORD PTR _src1$[ebp]
	mov	edi, DWORD PTR _src2$[ebp+4]
	sbb	edi, DWORD PTR _src1$[ebp+4]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	xor	edx, edx
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR _destValue$[ebp], esi
	mov	DWORD PTR _destValue$[ebp+4], edi

; 2285 :     if(destValue & (uint64)0x0000000100000000)

	mov	eax, DWORD PTR _destValue$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 1
	mov	DWORD PTR tv205[ebp], eax
	mov	DWORD PTR tv205[ebp+4], ecx
	mov	edx, DWORD PTR tv205[ebp]
	or	edx, DWORD PTR tv205[ebp+4]
	je	SHORT $LN7@PropagateC@64

; 2286 :     {
; 2287 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@64:

; 2288 :     }
; 2289 : 
; 2290 :     if(((int32)(src1 ^ src2)) < 0)

	mov	eax, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	xor	ecx, DWORD PTR _src2$[ebp+4]
	test	eax, eax
	jge	SHORT $LN6@PropagateC@64

; 2291 :     {
; 2292 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	xor	edx, DWORD PTR _src2$[ebp]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@64

; 2293 :       {
; 2294 :         flagValues |= CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN6@PropagateC@64:

; 2295 :       }
; 2296 :     }
; 2297 : 
; 2298 :     if(destValue & (uint64)0x0000000080000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv226[ebp], edx
	mov	DWORD PTR tv226[ebp+4], eax
	mov	ecx, DWORD PTR tv226[ebp]
	or	ecx, DWORD PTR tv226[ebp+4]
	je	SHORT $LN4@PropagateC@64

; 2299 :     {
; 2300 :       flagValues |= CC_ALU_NEGATIVE;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 8
	mov	DWORD PTR _flagValues$[ebp], edx
	jmp	SHORT $LN3@PropagateC@64
$LN4@PropagateC@64:

; 2301 :     }
; 2302 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv237[ebp], eax
	mov	DWORD PTR tv237[ebp+4], ecx
	mov	edx, DWORD PTR tv237[ebp]
	or	edx, DWORD PTR tv237[ebp+4]
	jne	SHORT $LN3@PropagateC@64

; 2303 :     {
; 2304 :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@64:

; 2305 :     }
; 2306 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 217			; 000000d9H

; 2307 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2308 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2309 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 2310 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2311 :     constants.ClearScalarInputDependency(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2312 :     constants.ClearMiscInputDependency(DEPENDENCY_FLAG_C);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 2313 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 2314 :   }
; 2315 :   else

	jmp	SHORT $LN9@PropagateC@64
$LN8@PropagateC@64:

; 2316 :   {
; 2317 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 2318 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2319 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2320 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2321 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2322 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@64:

; 2323 :   }
; 2324 : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBWCImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv237 = -60						; size = 8
tv226 = -52						; size = 8
tv205 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBWCImmediateReverse

; 2326 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2327 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2328 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2329 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2330 :   uint64 src1, src2, destValue;
; 2331 : 
; 2332 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsMiscRegisterConstant(CONSTANT_REG_C) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@65
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	$LN8@PropagateC@65
	mov	eax, 1
	test	eax, eax
	je	$LN8@PropagateC@65

; 2333 :   {
; 2334 :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], ecx

; 2335 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	ecx, ecx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], ecx

; 2336 :     destValue = src2 - src1 - (uint64)constants.GetMiscRegisterConstant(CONSTANT_REG_C);

	mov	esi, DWORD PTR _src2$[ebp]
	sub	esi, DWORD PTR _src1$[ebp]
	mov	edi, DWORD PTR _src2$[ebp+4]
	sbb	edi, DWORD PTR _src1$[ebp+4]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	xor	edx, edx
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR _destValue$[ebp], esi
	mov	DWORD PTR _destValue$[ebp+4], edi

; 2337 :     if(destValue & (uint64)0x0000000100000000)

	mov	eax, DWORD PTR _destValue$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 1
	mov	DWORD PTR tv205[ebp], eax
	mov	DWORD PTR tv205[ebp+4], ecx
	mov	edx, DWORD PTR tv205[ebp]
	or	edx, DWORD PTR tv205[ebp+4]
	je	SHORT $LN7@PropagateC@65

; 2338 :     {
; 2339 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@65:

; 2340 :     }
; 2341 : 
; 2342 :     if(((int32)(src1 ^ src2)) < 0)

	mov	eax, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	xor	ecx, DWORD PTR _src2$[ebp+4]
	test	eax, eax
	jge	SHORT $LN6@PropagateC@65

; 2343 :     {
; 2344 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	xor	edx, DWORD PTR _src2$[ebp]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@65

; 2345 :       {
; 2346 :         flagValues |= CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN6@PropagateC@65:

; 2347 :       }
; 2348 :     }
; 2349 : 
; 2350 :     if(destValue & (uint64)0x0000000080000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv226[ebp], edx
	mov	DWORD PTR tv226[ebp+4], eax
	mov	ecx, DWORD PTR tv226[ebp]
	or	ecx, DWORD PTR tv226[ebp+4]
	je	SHORT $LN4@PropagateC@65

; 2351 :     {
; 2352 :       flagValues |= CC_ALU_NEGATIVE;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 8
	mov	DWORD PTR _flagValues$[ebp], edx
	jmp	SHORT $LN3@PropagateC@65
$LN4@PropagateC@65:

; 2353 :     }
; 2354 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv237[ebp], eax
	mov	DWORD PTR tv237[ebp+4], ecx
	mov	edx, DWORD PTR tv237[ebp]
	or	edx, DWORD PTR tv237[ebp+4]
	jne	SHORT $LN3@PropagateC@65

; 2355 :     {
; 2356 :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@65:

; 2357 :     }
; 2358 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreScalarRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 217			; 000000d9H

; 2359 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2360 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2361 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+12], 15			; 0000000fH

; 2362 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2363 :     constants.ClearScalarInputDependency(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2364 :     constants.ClearMiscInputDependency(DEPENDENCY_FLAG_C);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 2365 :     PropagateConstants_StoreScalarRegisterConstant(constants);    

	mov	eax, DWORD PTR _constants$[ebp]
	push	eax
	call	?PropagateConstants_StoreScalarRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreScalarRegisterConstant
	add	esp, 4

; 2366 :   }
; 2367 :   else

	jmp	SHORT $LN9@PropagateC@65
$LN8@PropagateC@65:

; 2368 :   {
; 2369 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 2370 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2371 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2372 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2373 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2374 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	edx, DWORD PTR _destIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN9@PropagateC@65:

; 2375 :   }
; 2376 : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBWCImmediateReverse
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBWCScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBWCScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBWCScalar

; 2378 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2379 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2380 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2381 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2382 :   uint32 src1, src2;
; 2383 : 
; 2384 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@66
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@66

; 2385 :   {
; 2386 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2387 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 108			; 0000006cH

; 2388 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2389 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2390 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2391 :     PropagateConstants_SUBWCImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@66
$LN4@PropagateC@66:

; 2392 :   }
; 2393 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@66
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@66

; 2394 :   {
; 2395 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 2396 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBWCImmediateReverse;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 109			; 0000006dH

; 2397 :     constants.nuance->fields[FIELD_ALU_SRC2] = src2;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2398 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2399 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2400 :     PropagateConstants_SUBWCImmediateReverse(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediateReverse
	add	esp, 4

; 2401 :   }
; 2402 :   else

	jmp	SHORT $LN5@PropagateC@66
$LN2@PropagateC@66:

; 2403 :   {
; 2404 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2405 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2406 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2407 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2408 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2409 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN5@PropagateC@66:

; 2410 :   }
; 2411 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBWCScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBWCScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBWCScalarShiftRightImmediate

; 2413 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2414 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2415 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2416 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2417 :   uint32 src1;
; 2418 : 
; 2419 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@67
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@67

; 2420 :   {
; 2421 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2422 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 108			; 0000006cH

; 2423 :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2424 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2425 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2426 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2427 :     PropagateConstants_SUBWCImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediate
	add	esp, 4

; 2428 :   }
; 2429 :   else

	jmp	SHORT $LN3@PropagateC@67
$LN2@PropagateC@67:

; 2430 :   {
; 2431 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2432 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2433 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2434 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2435 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2436 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@67:

; 2437 :   }
; 2438 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBWCScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_SUBWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_SUBWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_SUBWCScalarShiftLeftImmediate

; 2440 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2441 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2442 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2443 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2444 :   uint32 src1;
; 2445 : 
; 2446 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@68
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@68

; 2447 :   {
; 2448 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2449 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_SUBWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 108			; 0000006cH

; 2450 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2451 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2452 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2453 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2454 :     PropagateConstants_SUBWCImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_SUBWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_SUBWCImmediate
	add	esp, 4

; 2455 :   }
; 2456 :   else

	jmp	SHORT $LN3@PropagateC@68
$LN2@PropagateC@68:

; 2457 :   {
; 2458 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2459 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2460 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2461 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2462 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2463 :     constants.ClearScalarRegisterConstant(destIndex);    

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarRegisterConstant
$LN3@PropagateC@68:

; 2464 :   }
; 2465 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_SUBWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_SUBWCScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv235 = -60						; size = 8
tv224 = -52						; size = 8
tv203 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src2Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPWCImmediate

; 2467 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2468 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2469 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2470 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2471 :   uint64 src1, src2, destValue;
; 2472 : 
; 2473 :   if(constants.IsScalarRegisterConstant(src2Index) && constants.IsMiscRegisterConstant(CONSTANT_REG_C) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@69
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	$LN8@PropagateC@69
	mov	eax, 1
	test	eax, eax
	je	$LN8@PropagateC@69

; 2474 :   {
; 2475 :     src1 = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	xor	ecx, ecx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], ecx

; 2476 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	edx, DWORD PTR _src2Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	ecx, ecx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], ecx

; 2477 :     destValue = src2 - src1 - (uint64)constants.GetMiscRegisterConstant(CONSTANT_REG_C);

	mov	esi, DWORD PTR _src2$[ebp]
	sub	esi, DWORD PTR _src1$[ebp]
	mov	edi, DWORD PTR _src2$[ebp+4]
	sbb	edi, DWORD PTR _src1$[ebp+4]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	xor	edx, edx
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR _destValue$[ebp], esi
	mov	DWORD PTR _destValue$[ebp+4], edi

; 2478 :     if(destValue & (uint64)0x0000000100000000)

	mov	eax, DWORD PTR _destValue$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 1
	mov	DWORD PTR tv203[ebp], eax
	mov	DWORD PTR tv203[ebp+4], ecx
	mov	edx, DWORD PTR tv203[ebp]
	or	edx, DWORD PTR tv203[ebp+4]
	je	SHORT $LN7@PropagateC@69

; 2479 :     {
; 2480 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@69:

; 2481 :     }
; 2482 : 
; 2483 :     if(((int32)(src1 ^ src2)) < 0)

	mov	eax, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	xor	ecx, DWORD PTR _src2$[ebp+4]
	test	eax, eax
	jge	SHORT $LN6@PropagateC@69

; 2484 :     {
; 2485 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	xor	edx, DWORD PTR _src2$[ebp]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@69

; 2486 :       {
; 2487 :         flagValues |= CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN6@PropagateC@69:

; 2488 :       }
; 2489 :     }
; 2490 : 
; 2491 :     if(destValue & (uint64)0x0000000080000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv224[ebp], edx
	mov	DWORD PTR tv224[ebp+4], eax
	mov	ecx, DWORD PTR tv224[ebp]
	or	ecx, DWORD PTR tv224[ebp+4]
	je	SHORT $LN4@PropagateC@69

; 2492 :     {
; 2493 :       flagValues |= CC_ALU_NEGATIVE;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 8
	mov	DWORD PTR _flagValues$[ebp], edx
	jmp	SHORT $LN3@PropagateC@69
$LN4@PropagateC@69:

; 2494 :     }
; 2495 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv235[ebp], eax
	mov	DWORD PTR tv235[ebp+4], ecx
	mov	edx, DWORD PTR tv235[ebp]
	or	edx, DWORD PTR tv235[ebp+4]
	jne	SHORT $LN3@PropagateC@69

; 2496 :     {
; 2497 :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@69:

; 2498 :     }
; 2499 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 218			; 000000daH

; 2500 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 32			; 00000020H

; 2501 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 2502 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 15			; 0000000fH

; 2503 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 2504 :     constants.ClearScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2505 :     constants.ClearMiscInputDependency(DEPENDENCY_FLAG_C);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 2506 :     PropagateConstants_StoreMiscRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 2507 :   }
; 2508 :   else

	jmp	SHORT $LN9@PropagateC@69
$LN8@PropagateC@69:

; 2509 :   {
; 2510 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2511 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2512 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2513 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2514 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN9@PropagateC@69:

; 2515 :   }
; 2516 : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPWCImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv235 = -60						; size = 8
tv224 = -52						; size = 8
tv203 = -44						; size = 8
_destValue$ = -36					; size = 8
_src2$ = -28						; size = 8
_src1$ = -20						; size = 8
_flagValues$ = -12					; size = 4
_destIndex$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPWCImmediateReverse

; 2518 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2519 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2520 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2521 :   uint32 flagValues = 0;

	mov	DWORD PTR _flagValues$[ebp], 0

; 2522 :   uint64 src1, src2, destValue;
; 2523 : 
; 2524 :   if(constants.IsScalarRegisterConstant(src1Index) && constants.IsMiscRegisterConstant(CONSTANT_REG_C) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@PropagateC@70
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	$LN8@PropagateC@70
	mov	eax, 1
	test	eax, eax
	je	$LN8@PropagateC@70

; 2525 :   {
; 2526 :     src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	mov	DWORD PTR _src2$[ebp], eax
	mov	DWORD PTR _src2$[ebp+4], ecx

; 2527 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	edx, DWORD PTR _src1Index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	xor	ecx, ecx
	mov	DWORD PTR _src1$[ebp], eax
	mov	DWORD PTR _src1$[ebp+4], ecx

; 2528 :     destValue = src2 - src1 - (uint64)constants.GetMiscRegisterConstant(CONSTANT_REG_C);

	mov	esi, DWORD PTR _src2$[ebp]
	sub	esi, DWORD PTR _src1$[ebp]
	mov	edi, DWORD PTR _src2$[ebp+4]
	sbb	edi, DWORD PTR _src1$[ebp+4]
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	xor	edx, edx
	sub	esi, eax
	sbb	edi, edx
	mov	DWORD PTR _destValue$[ebp], esi
	mov	DWORD PTR _destValue$[ebp+4], edi

; 2529 :     if(destValue & (uint64)0x0000000100000000)

	mov	eax, DWORD PTR _destValue$[ebp]
	and	eax, 0
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 1
	mov	DWORD PTR tv203[ebp], eax
	mov	DWORD PTR tv203[ebp+4], ecx
	mov	edx, DWORD PTR tv203[ebp]
	or	edx, DWORD PTR tv203[ebp+4]
	je	SHORT $LN7@PropagateC@70

; 2530 :     {
; 2531 :       flagValues = CC_ALU_CARRY;

	mov	DWORD PTR _flagValues$[ebp], 2
$LN7@PropagateC@70:

; 2532 :     }
; 2533 : 
; 2534 :     if(((int32)(src1 ^ src2)) < 0)

	mov	eax, DWORD PTR _src1$[ebp]
	xor	eax, DWORD PTR _src2$[ebp]
	mov	ecx, DWORD PTR _src1$[ebp+4]
	xor	ecx, DWORD PTR _src2$[ebp+4]
	test	eax, eax
	jge	SHORT $LN6@PropagateC@70

; 2535 :     {
; 2536 :       if(((int32)(src2 ^ (destValue & 0xFFFFFFFFUL))) < 0)

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	xor	edx, DWORD PTR _src2$[ebp]
	xor	eax, DWORD PTR _src2$[ebp+4]
	test	edx, edx
	jge	SHORT $LN6@PropagateC@70

; 2537 :       {
; 2538 :         flagValues |= CC_ALU_OVERFLOW;

	mov	ecx, DWORD PTR _flagValues$[ebp]
	or	ecx, 4
	mov	DWORD PTR _flagValues$[ebp], ecx
$LN6@PropagateC@70:

; 2539 :       }
; 2540 :     }
; 2541 : 
; 2542 :     if(destValue & (uint64)0x0000000080000000)

	mov	edx, DWORD PTR _destValue$[ebp]
	and	edx, -2147483648			; 80000000H
	mov	eax, DWORD PTR _destValue$[ebp+4]
	and	eax, 0
	mov	DWORD PTR tv224[ebp], edx
	mov	DWORD PTR tv224[ebp+4], eax
	mov	ecx, DWORD PTR tv224[ebp]
	or	ecx, DWORD PTR tv224[ebp+4]
	je	SHORT $LN4@PropagateC@70

; 2543 :     {
; 2544 :       flagValues |= CC_ALU_NEGATIVE;

	mov	edx, DWORD PTR _flagValues$[ebp]
	or	edx, 8
	mov	DWORD PTR _flagValues$[ebp], edx
	jmp	SHORT $LN3@PropagateC@70
$LN4@PropagateC@70:

; 2545 :     }
; 2546 :     else if(!(destValue & (uint64)0x00000000FFFFFFFF))

	mov	eax, DWORD PTR _destValue$[ebp]
	mov	ecx, DWORD PTR _destValue$[ebp+4]
	and	ecx, 0
	mov	DWORD PTR tv235[ebp], eax
	mov	DWORD PTR tv235[ebp+4], ecx
	mov	edx, DWORD PTR tv235[ebp]
	or	edx, DWORD PTR tv235[ebp+4]
	jne	SHORT $LN3@PropagateC@70

; 2547 :     {
; 2548 :       flagValues |= CC_ALU_ZERO;

	mov	eax, DWORD PTR _flagValues$[ebp]
	or	eax, 1
	mov	DWORD PTR _flagValues$[ebp], eax
$LN3@PropagateC@70:

; 2549 :     }
; 2550 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_StoreMiscRegisterConstant;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 218			; 000000daH

; 2551 :     constants.nuance->fields[FIELD_CONSTANT_ADDRESS] = CONSTANT_REG_DISCARD;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 32			; 00000020H

; 2552 :     constants.nuance->fields[FIELD_CONSTANT_VALUE] = destValue;

	mov	edx, DWORD PTR _destValue$[ebp]
	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx

; 2553 :     constants.nuance->fields[FIELD_CONSTANT_FLAGMASK] = CC_ALU_NEGATIVE | CC_ALU_ZERO | CC_ALU_OVERFLOW | CC_ALU_CARRY;

	mov	edx, DWORD PTR _constants$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+12], 15			; 0000000fH

; 2554 :     constants.nuance->fields[FIELD_CONSTANT_FLAGVALUES] = flagValues;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _flagValues$[ebp]
	mov	DWORD PTR [edx+16], eax

; 2555 :     constants.ClearScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2556 :     constants.ClearMiscInputDependency(DEPENDENCY_FLAG_C);

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscInputDependency

; 2557 :     PropagateConstants_StoreMiscRegisterConstant(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_StoreMiscRegisterConstant@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_StoreMiscRegisterConstant
	add	esp, 4

; 2558 :   }
; 2559 :   else

	jmp	SHORT $LN9@PropagateC@70
$LN8@PropagateC@70:

; 2560 :   {
; 2561 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2562 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2563 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2564 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2565 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN9@PropagateC@70:

; 2566 :   }
; 2567 : }

	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPWCImmediateReverse
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPWCScalar@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src2$ = -20						; size = 4
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2Index$ = -8					; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPWCScalar@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPWCScalar

; 2569 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2570 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2571 :   uint32 src2Index = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Index$[ebp], edx

; 2572 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2573 :   uint32 src1, src2;
; 2574 : 
; 2575 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@PropagateC@71
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@PropagateC@71

; 2576 :   {
; 2577 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2578 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 113			; 00000071H

; 2579 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src1$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2580 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2581 :     constants.SetScalarInputDependency(src2Index);

	mov	ecx, DWORD PTR _src2Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2582 :     PropagateConstants_CMPWCImmediate(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediate
	add	esp, 4
	jmp	$LN5@PropagateC@71
$LN4@PropagateC@71:

; 2583 :   }
; 2584 :   else if(constants.IsScalarRegisterConstant(src2Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@71
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@71

; 2585 :   {
; 2586 :     src2 = constants.GetScalarRegisterConstant(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src2$[ebp], eax

; 2587 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPWCImmediateReverse;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 114			; 00000072H

; 2588 :     constants.nuance->fields[FIELD_ALU_SRC2] = src2;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _src2$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2589 :     constants.ClearScalarInputDependency(src2Index);

	mov	eax, DWORD PTR _src2Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2590 :     constants.SetScalarInputDependency(src1Index);

	mov	ecx, DWORD PTR _src1Index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2591 :     PropagateConstants_CMPWCImmediateReverse(constants);    

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPWCImmediateReverse@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediateReverse
	add	esp, 4

; 2592 :   }
; 2593 :   else

	jmp	SHORT $LN5@PropagateC@71
$LN2@PropagateC@71:

; 2594 :   {
; 2595 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2596 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2597 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2598 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2599 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN5@PropagateC@71:

; 2600 :   }
; 2601 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPWCScalar@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPWCScalar
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPWCScalarShiftRightImmediate

; 2603 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2604 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2605 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2606 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2607 :   uint32 src1;
; 2608 : 
; 2609 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@72
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@72

; 2610 :   {
; 2611 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2612 :     constants.nuance->fields[FIELD_CONSTANT_HANDLER] = Handler_CMPWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 113			; 00000071H

; 2613 :     constants.nuance->fields[FIELD_ALU_SRC1] = ((int32)src1) >> src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	sar	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2614 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2615 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2616 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2617 :     PropagateConstants_CMPWCImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediate
	add	esp, 4

; 2618 :   }
; 2619 :   else

	jmp	SHORT $LN3@PropagateC@72
$LN2@PropagateC@72:

; 2620 :   {
; 2621 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2622 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2623 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2624 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2625 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@72:

; 2626 :   }
; 2627 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPWCScalarShiftRightImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPWCScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?PropagateConstants_CMPWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1$ = -16						; size = 4
_destIndex$ = -12					; size = 4
_src2$ = -8						; size = 4
_src1Index$ = -4					; size = 4
_constants$ = 8						; size = 4
?PropagateConstants_CMPWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_CMPWCScalarShiftLeftImmediate

; 2629 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 2630 :   uint32 src1Index = constants.nuance->fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _src1Index$[ebp], edx

; 2631 :   uint32 src2 = constants.nuance->fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2$[ebp], edx

; 2632 :   uint32 destIndex = constants.nuance->fields[FIELD_ALU_DEST]; 

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _destIndex$[ebp], edx

; 2633 :   uint32 src1;
; 2634 : 
; 2635 :   if(constants.IsScalarRegisterConstant(src1Index) && ALLOW_ALU_PROPAGATION)

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?IsScalarRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsScalarRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PropagateC@73
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@PropagateC@73

; 2636 :   {
; 2637 :     src1 = constants.GetScalarRegisterConstant(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?GetScalarRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetScalarRegisterConstant
	mov	DWORD PTR _src1$[ebp], eax

; 2638 :     constants.nuance->fields[FIELD_ALU_HANDLER] = Handler_CMPWCImmediate;

	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 113			; 00000071H

; 2639 :     constants.nuance->fields[FIELD_ALU_SRC1] = src1 << src2;

	mov	eax, DWORD PTR _src1$[ebp]
	mov	ecx, DWORD PTR _src2$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _constants$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+8], eax

; 2640 :     constants.nuance->fields[FIELD_ALU_SRC2] = destIndex;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _destIndex$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2641 :     constants.ClearScalarInputDependency(src1Index);

	mov	eax, DWORD PTR _src1Index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearScalarInputDependency

; 2642 :     constants.SetScalarInputDependency(destIndex);

	mov	ecx, DWORD PTR _destIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?SetScalarInputDependency@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::SetScalarInputDependency

; 2643 :     PropagateConstants_CMPWCImmediate(constants);

	mov	edx, DWORD PTR _constants$[ebp]
	push	edx
	call	?PropagateConstants_CMPWCImmediate@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_CMPWCImmediate
	add	esp, 4

; 2644 :   }
; 2645 :   else

	jmp	SHORT $LN3@PropagateC@73
$LN2@PropagateC@73:

; 2646 :   {
; 2647 :     constants.status.status = PROPAGATE_CONSTANTS_STATUS_ALU_OK;

	mov	eax, DWORD PTR _constants$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2648 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_N);    

	push	18					; 00000012H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2649 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_V);    

	push	17					; 00000011H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2650 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_C);    

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant

; 2651 :     constants.ClearMiscRegisterConstant(CONSTANT_REG_Z);    

	push	16					; 00000010H
	mov	ecx, DWORD PTR _constants$[ebp]
	call	?ClearMiscRegisterConstant@SuperBlockConstants@@QAEXI@Z ; SuperBlockConstants::ClearMiscRegisterConstant
$LN3@PropagateC@73:

; 2652 :   }
; 2653 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PropagateConstants_CMPWCScalarShiftLeftImmediate@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_CMPWCScalarShiftLeftImmediate
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitALU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?sub_sv_mask@@3PAIA				; sub_sv_mask
_DATA	SEGMENT
?sub_sv_mask@@3PAIA DD 0ffff0000H			; sub_sv_mask
	DD	0ffff0000H
_DATA	ENDS
PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
PUBLIC	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
PUBLIC	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
PUBLIC	?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ABS
EXTRN	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORRM
EXTRN	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_TESTRR
EXTRN	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVZRR
EXTRN	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_CMPIR
EXTRN	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_MOVIR
EXTRN	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ORRR
EXTRN	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ANDIR
EXTRN	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHRIR
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
EXTRN	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_SUBRR
EXTRN	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_XORRR
EXTRN	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SARIR
EXTRN	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_MOVRR
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitalu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_destRegDisp$ = -32					; size = 4
_src1RegDisp$ = -28					; size = 4
_ccRegWriteBaseReg$ = -24				; size = 4
_ccRegReadBaseReg$ = -20				; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src1RegReadBaseReg$ = -12				; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ABS

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 14   :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 15   :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 16   :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 17   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 18   :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 19   :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 20   :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 21   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 22   :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 23   : 
; 24   :   //eax = src1
; 25   :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 26   :   //ebx = src1
; 27   :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 28   :   //ebp = src1
; 29   :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 30   :   // ebx = 0 if src1 is positive and -1 if src1 is negative
; 31   :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 31);

	push	31					; 0000001fH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 32   :   // eax = ~src1 if src1 is negative and src1 if src1 is positve
; 33   :   vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 34   :   // eax = ~src1 + 1 if src1 is negative and src1 if src1 is positive
; 35   :   vars->codeCache->X86Emit_SUBRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 36   : 
; 37   :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN10@Emit_ABS

; 38   :   {
; 39   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN10@Emit_ABS:

; 40   :   }
; 41   : 
; 42   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN9@Emit_ABS

; 43   :   {
; 44   :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 45   :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN9@Emit_ABS:

; 46   :   }
; 47   : 
; 48   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN8@Emit_ABS

; 49   :   {
; 50   :     vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 51   :     vars->codeCache->X86Emit_SHRIR(x86Reg_ebx, 30);

	push	30					; 0000001eH
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 52   :     vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ebx);

	push	19					; 00000013H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 53   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN8@Emit_ABS:

; 54   :   }
; 55   : 
; 56   :   if(vars->miscRegOutDep & (DEPENDENCY_FLAG_N | DEPENDENCY_FLAG_V))

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 393216				; 00060000H
	je	$LN7@Emit_ABS

; 57   :   {
; 58   :     if((vars->miscRegOutDep & (DEPENDENCY_FLAG_N | DEPENDENCY_FLAG_V)) == DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 393216				; 00060000H
	cmp	edx, 262144				; 00040000H
	jne	SHORT $LN6@Emit_ABS

; 59   :     {
; 60   :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 61   :       vars->codeCache->X86Emit_MOVIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 62   :       vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_ebp);

	push	21					; 00000015H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 63   :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 64   :       vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
	jmp	$LN7@Emit_ABS
$LN6@Emit_ABS:

; 65   :     }
; 66   :     else if((vars->miscRegOutDep & (DEPENDENCY_FLAG_N | DEPENDENCY_FLAG_V)) == DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 393216				; 00060000H
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@Emit_ABS

; 67   :     {
; 68   :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 69   :       vars->codeCache->X86Emit_MOVIR(CC_ALU_OVERFLOW, x86Reg_ecx);

	push	17					; 00000011H
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 70   :       vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_ebp);

	push	21					; 00000015H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 71   :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 72   :       vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 73   :     }
; 74   :     else

	jmp	SHORT $LN7@Emit_ABS
$LN4@Emit_ABS:

; 75   :     {
; 76   :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 77   :       vars->codeCache->X86Emit_MOVIR(CC_ALU_NEGATIVE|CC_ALU_OVERFLOW, x86Reg_ecx);

	push	17					; 00000011H
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 78   :       vars->codeCache->X86Emit_CMPIR(0x80000000, x86Reg_ebp);

	push	21					; 00000015H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 79   :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 80   :       vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN7@Emit_ABS:

; 81   :     }
; 82   :   }
; 83   : 
; 84   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ABS

; 85   :   {
; 86   :     vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 87   :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_ecx);

	push	17					; 00000011H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 88   :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 89   :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 90   :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ABS:

; 91   :   }
; 92   : 
; 93   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN11@Emit_ABS

; 94   :   {
; 95   :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_ABS:

; 96   :   }
; 97   : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ABS
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegReadBaseReg, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if(vars->scalarRegDep & SCALAR_REG_DEPENDENCY_MASK(regIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _regIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+28]
	je	SHORT $LN2@GetScalarR

; 37   :   {
; 38   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN3@GetScalarR

; 39   :   }
; 40   :   else

	jmp	SHORT $LN3@GetScalarR
$LN2@GetScalarR:

; 41   :   {
; 42   :     return x86BaseReg_esi;

	mov	eax, 6
$LN3@GetScalarR:

; 43   :   }
; 44   : }

	pop	ebp
	ret	0
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegWriteBaseReg, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   :   return x86BaseReg_esi;

	mov	eax, 6

; 49   : }

	pop	ebp
	ret	0
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegReadBaseReg, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 53   :   uint32 mask = regIndex;

	mov	eax, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR _mask$[ebp], eax

; 54   : 
; 55   :   if(!regIndex)

	cmp	DWORD PTR _regIndex$[ebp], 0
	jne	SHORT $LN4@GetMiscReg

; 56   :   {
; 57   :     mask = DEPENDENCY_FLAG_ALLFLAGS;

	mov	DWORD PTR _mask$[ebp], 67076096		; 03ff8000H

; 58   :   }
; 59   :   else

	jmp	SHORT $LN3@GetMiscReg
$LN4@GetMiscReg:

; 60   :   {
; 61   :     mask = MISC_REG_DEPENDENCY_MASK(regIndex - 1);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$[ebp], edx
$LN3@GetMiscReg:

; 62   :   }
; 63   :     
; 64   : 
; 65   :   if(vars->miscRegDep & mask)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN2@GetMiscReg

; 66   :   {
; 67   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN5@GetMiscReg

; 68   :   }
; 69   :   else

	jmp	SHORT $LN5@GetMiscReg
$LN2@GetMiscReg:

; 70   :   {
; 71   :     return x86BaseReg_esi;

	mov	eax, 6
$LN5@GetMiscReg:

; 72   :   }
; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BITSScalar
EXTRN	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ANDRR
EXTRN	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SHRRR
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitalu.cpp
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src2RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BITSScalar

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 101  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 102  :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 103  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 104  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 105  :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 106  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 107  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 108  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 109  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 110  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 111  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 112  : 
; 113  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 114  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 115  :   vars->codeCache->X86Emit_MOVIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _src1Imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 116  :   vars->codeCache->X86Emit_ANDIR(0x1F, x86Reg_ecx);

	push	17					; 00000011H
	push	31					; 0000001fH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 117  :   vars->codeCache->X86Emit_SHRRR(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 118  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 119  : 
; 120  :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Emit_BITSS

; 121  :   {
; 122  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_BITSS:

; 123  :   }
; 124  : 
; 125  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 294912				; 00048000H
	je	SHORT $LN4@Emit_BITSS

; 126  :   {
; 127  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 128  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 294912				; 00048000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_BITSS:

; 129  :   }
; 130  : 
; 131  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_BITSS

; 132  :   {
; 133  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 134  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 135  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 136  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_BITSS:

; 137  :   }
; 138  : 
; 139  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_BITSS

; 140  :   {
; 141  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 142  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 143  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 144  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 145  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_BITSS:

; 146  :   }
; 147  : 
; 148  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 294912				; 00048000H
	je	SHORT $LN6@Emit_BITSS

; 149  :   {
; 150  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_BITSS:

; 151  :   }
; 152  : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BITSScalar
_TEXT	ENDS
PUBLIC	?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BITSImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_destRegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_destRegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BITSImmediate

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 156  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 157  :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 158  :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 159  :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 160  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 161  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 162  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 163  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 164  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 165  : 
; 166  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 167  :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx, src2Imm);

	mov	al, BYTE PTR _src2Imm$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 168  :   vars->codeCache->X86Emit_ANDIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 169  :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN5@Emit_BITSI

; 170  :   {
; 171  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_BITSI:

; 172  :   }
; 173  : 
; 174  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 294912				; 00048000H
	je	SHORT $LN4@Emit_BITSI

; 175  :   {
; 176  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 177  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 294912				; 00048000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_BITSI:

; 178  :   }
; 179  : 
; 180  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_BITSI

; 181  :   {
; 182  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 183  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 184  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 185  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_BITSI:

; 186  :   }
; 187  : 
; 188  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_BITSI

; 189  :   {
; 190  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 191  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 192  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 193  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 194  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_BITSI:

; 195  :   }
; 196  : 
; 197  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 294912				; 00048000H
	je	SHORT $LN6@Emit_BITSI

; 198  :   {
; 199  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_BITSI:

; 200  :   }
; 201  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BITSImmediate
_TEXT	ENDS
PUBLIC	?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BTST
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -28					; size = 4
_src2RegDisp$ = -24					; size = 4
_ccRegWriteBaseReg$ = -20				; size = 4
_ccRegReadBaseReg$ = -16				; size = 4
_src2RegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_BTST

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 205  :   uint32 mask = nuance.fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mask$[ebp], ecx

; 206  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 207  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 208  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 209  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 210  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 211  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 212  : 
; 213  : 
; 214  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 215  :   vars->codeCache->X86Emit_ANDIR(mask, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _mask$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 216  : 
; 217  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN3@Emit_BTST

; 218  :   {
; 219  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 220  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN3@Emit_BTST:

; 221  :   }
; 222  : 
; 223  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_BTST

; 224  :   {
; 225  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 226  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 227  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 228  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 229  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_BTST:

; 230  :   }
; 231  : 
; 232  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN4@Emit_BTST

; 233  :   {
; 234  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_BTST:

; 235  :   }
; 236  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_BTST
_TEXT	ENDS
PUBLIC	?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BUTT
EXTRN	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHLIR
EXTRN	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SETZR
EXTRN	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SETBR
EXTRN	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SETOR
EXTRN	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SETSR
EXTRN	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ADDMR
EXTRN	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_SUBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_BUTT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 240  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 241  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 242  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 243  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 244  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 245  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 246  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 247  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 248  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 249  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 250  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 251  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 252  : 
; 253  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 254  : 
; 255  :   if(vars->scalarRegOutDep & (1 << (destRegIndex+1)))

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	add	ecx, 1
	mov	eax, 1
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+36]
	je	SHORT $LN12@Emit_BUTT

; 256  :   {
; 257  :     vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 258  :     vars->codeCache->X86Emit_SUBMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 259  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN12@Emit_BUTT:

; 260  :   }
; 261  : 
; 262  :   vars->codeCache->X86Emit_ADDMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDMR

; 263  : 
; 264  :   if(vars->scalarRegOutDep & (1 << destRegIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+36]
	je	SHORT $LN11@Emit_BUTT

; 265  :   {
; 266  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_BUTT:

; 267  :   }
; 268  : 
; 269  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_BUTT

; 270  :   {
; 271  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_BUTT

; 272  :     {
; 273  :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_BUTT:

; 274  :     }
; 275  : 
; 276  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_BUTT

; 277  :     {
; 278  :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_BUTT:

; 279  :     }
; 280  :     
; 281  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_BUTT

; 282  :     {
; 283  :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_BUTT:

; 284  :     }
; 285  : 
; 286  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_BUTT

; 287  :     {
; 288  :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_BUTT:

; 289  :     }
; 290  : 
; 291  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 292  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN10@Emit_BUTT:

; 293  :   }
; 294  : 
; 295  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_BUTT

; 296  :   {
; 297  :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 298  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_BUTT:

; 299  :   }
; 300  : 
; 301  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_BUTT

; 302  :   {
; 303  :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 304  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_BUTT:

; 305  :   }
; 306  : 
; 307  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_BUTT

; 308  :   {
; 309  :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 310  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_BUTT:

; 311  :   }
; 312  : 
; 313  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_BUTT

; 314  :   {
; 315  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_BUTT:

; 316  :   }
; 317  : 
; 318  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN13@Emit_BUTT

; 319  :   {
; 320  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN13@Emit_BUTT:

; 321  :   }
; 322  : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_BUTT
_TEXT	ENDS
PUBLIC	?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_COPY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_destRegDisp$ = -32					; size = 4
_src2RegDisp$ = -28					; size = 4
_ccRegWriteBaseReg$ = -24				; size = 4
_ccRegReadBaseReg$ = -20				; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src2RegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_src2RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_COPY

; 325  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 326  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _src2RegIndex$[ebp], ecx

; 327  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 328  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 329  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 330  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 331  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 332  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 333  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 334  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 335  : 
; 336  : 
; 337  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 338  :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Emit_COPY

; 339  :   {
; 340  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_COPY:

; 341  :   }
; 342  : 
; 343  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN4@Emit_COPY

; 344  :   {
; 345  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 346  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_COPY:

; 347  :   }
; 348  : 
; 349  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_COPY

; 350  :   {
; 351  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 352  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 353  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 354  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_COPY:

; 355  :   }
; 356  : 
; 357  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_COPY

; 358  :   {
; 359  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 360  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 361  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 362  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 363  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_COPY:

; 364  :   }
; 365  : 
; 366  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_COPY

; 367  :   {
; 368  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_COPY:

; 369  :   }
; 370  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_COPY
_TEXT	ENDS
PUBLIC	?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MSB
EXTRN	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ADDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_destRegDisp$ = -32					; size = 4
_src1RegDisp$ = -28					; size = 4
_ccRegWriteBaseReg$ = -24				; size = 4
_ccRegReadBaseReg$ = -20				; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src1RegReadBaseReg$ = -12				; size = 4
_destRegIndex$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_MSB

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 374  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 375  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 376  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 377  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 378  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 379  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 380  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 381  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 382  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 383  : 
; 384  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 385  : 
; 386  :   //n = (n ^ (n >> 31))
; 387  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 388  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 31);

	push	31					; 0000001fH
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 389  :   vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 390  :   
; 391  :   //fold n into itself to get a new value where all bits below the
; 392  :   //most significant one bit have also been set to one.
; 393  : 
; 394  :   //n = n | (n >> 1)
; 395  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 396  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 1);

	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 397  :   vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 398  : 
; 399  :   //n = n | (n >> 2)
; 400  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 401  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 2);

	push	2
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 402  :   vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 403  : 
; 404  :   //n = n | (n >> 4)
; 405  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 406  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 4);

	push	4
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 407  :   vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 408  : 
; 409  :   //n = n | (n >> 8)
; 410  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 411  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 8);

	push	8
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 412  :   vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 413  : 
; 414  :   //n = n | (n >> 16)
; 415  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 416  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 417  :   vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 418  : 
; 419  :   //get the ones count
; 420  : 
; 421  :   //n = n - ((n >> 1) & 0x55555555)
; 422  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 423  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 1);

	push	1
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 424  :   vars->codeCache->X86Emit_ANDIR(0x55555555, x86Reg_ebx);

	push	19					; 00000013H
	push	1431655765				; 55555555H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 425  :   vars->codeCache->X86Emit_SUBRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 426  :   
; 427  :   //n = (((n >> 2) & 0x33333333) + (n & 0x33333333))
; 428  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 429  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 2);

	push	2
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 430  :   vars->codeCache->X86Emit_ANDIR(0x33333333, x86Reg_eax);

	push	16					; 00000010H
	push	858993459				; 33333333H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 431  :   vars->codeCache->X86Emit_ANDIR(0x33333333, x86Reg_ebx);

	push	19					; 00000013H
	push	858993459				; 33333333H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 432  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 433  : 
; 434  :   //n = (((n >> 4) + n) & 0x0f0f0f0f)
; 435  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 436  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 4);

	push	4
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 437  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 438  :   vars->codeCache->X86Emit_ANDIR(0x0F0F0F0F, x86Reg_eax);

	push	16					; 00000010H
	push	252645135				; 0f0f0f0fH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 439  : 
; 440  :   //n = n + (n >> 8)
; 441  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 442  :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 8);

	push	8
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 443  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 444  : 
; 445  :   //n = n + (n >> 16)
; 446  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 447  :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 448  :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 449  : 
; 450  :   //sigbits = n & 0x1F
; 451  :   vars->codeCache->X86Emit_ANDIR(0x1F, x86Reg_ebx);

	push	19					; 00000013H
	push	31					; 0000001fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 452  : 
; 453  :   //dest = sigbits
; 454  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN2@Emit_MSB

; 455  :   {
; 456  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_MSB:

; 457  :   }
; 458  : 
; 459  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	$LN3@Emit_MSB

; 460  :   {
; 461  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 462  :     vars->codeCache->X86Emit_ANDIM(~CC_ALU_ZERO, x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	push	-2					; fffffffeH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 463  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 464  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 465  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 466  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 467  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 468  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN3@Emit_MSB:

; 469  :   }
; 470  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_MSB
_TEXT	ENDS
PUBLIC	?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SAT
EXTRN	?X86Emit_CMOVLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVLRR
EXTRN	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_NOTR
EXTRN	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVNLERR
EXTRN	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_CMPRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_mask$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_SAT

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 474  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 475  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 476  :   int32 mask = (0x01UL << nuance.fields[FIELD_ALU_SRC2]) - 1;

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+12]
	shl	edx, cl
	sub	edx, 1
	mov	DWORD PTR _mask$[ebp], edx

; 477  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 478  :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 479  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 480  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 481  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 482  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 483  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 484  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 485  : 
; 486  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 487  :   vars->codeCache->X86Emit_MOVIR(mask, x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _mask$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 488  :   vars->codeCache->X86Emit_CMPRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_CMPRR

; 489  :   vars->codeCache->X86Emit_CMOVNLERR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLERR

; 490  :   vars->codeCache->X86Emit_NOTR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NOTR

; 491  :   vars->codeCache->X86Emit_CMPRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_CMPRR

; 492  :   vars->codeCache->X86Emit_CMOVLRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVLRR

; 493  : 
; 494  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN5@Emit_SAT

; 495  :   {
; 496  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_SAT:

; 497  :   }
; 498  : 
; 499  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 294912				; 00048000H
	je	SHORT $LN4@Emit_SAT

; 500  :   {
; 501  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 502  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 294912				; 00048000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_SAT:

; 503  :   }
; 504  : 
; 505  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_SAT

; 506  :   {
; 507  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 508  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 509  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 510  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SAT:

; 511  :   }
; 512  : 
; 513  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_SAT

; 514  :   {
; 515  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 516  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 517  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 518  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 519  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SAT:

; 520  :   }
; 521  : 
; 522  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 294912				; 00048000H
	je	SHORT $LN6@Emit_SAT

; 523  :   {
; 524  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_SAT:

; 525  :   }
; 526  : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_SAT
_TEXT	ENDS
PUBLIC	?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADD_SV
EXTRN	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQRM
EXTRN	?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_PADDRR
EXTRN	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_PANDRR
EXTRN	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_src1RegDisp$ = -52					; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src2RegReadBaseReg_2$ = -40				; size = 4
_src2RegReadBaseReg_1$ = -36				; size = 4
_src2RegReadBaseReg_0$ = -32				; size = 4
_src1RegReadBaseReg_3$ = -28				; size = 4
_src1RegReadBaseReg_2$ = -24				; size = 4
_src1RegReadBaseReg_1$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADD_SV

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 530  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 531  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 532  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 533  :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 534  :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 535  :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 536  :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 537  :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 538  :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 539  :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 540  :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 541  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 542  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 543  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 544  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 545  : 
; 546  :   if( ((src1RegReadBaseReg_0 == src1RegReadBaseReg_1) && (src1RegReadBaseReg_2 == src1RegReadBaseReg_3)) &&
; 547  :       ((src2RegReadBaseReg_0 == src2RegReadBaseReg_1) && (src2RegReadBaseReg_2 == src2RegReadBaseReg_3)) )

	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	cmp	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	jne	$LN2@Emit_ADD_S
	mov	ecx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	cmp	ecx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	jne	$LN2@Emit_ADD_S
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	cmp	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	jne	$LN2@Emit_ADD_S
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	cmp	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	jne	$LN2@Emit_ADD_S

; 548  :   {
; 549  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm4, (uint32)sub_sv_mask);

	push	0
	push	0
	push	4
	push	OFFSET ?sub_sv_mask@@3PAIA		; sub_sv_mask
	push	36					; 00000024H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 550  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm0, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 551  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm1, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	33					; 00000021H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 552  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm2, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	34					; 00000022H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 553  :     vars->codeCache->X86Emit_MOVQMR(x86Reg_mm3, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	35					; 00000023H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 554  :     vars->codeCache->X86Emit_PANDRR(x86Reg_mm0, x86Reg_mm4);

	push	36					; 00000024H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 555  :     vars->codeCache->X86Emit_PANDRR(x86Reg_mm1, x86Reg_mm4);

	push	36					; 00000024H
	push	33					; 00000021H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 556  :     vars->codeCache->X86Emit_PANDRR(x86Reg_mm2, x86Reg_mm4);

	push	36					; 00000024H
	push	34					; 00000022H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 557  :     vars->codeCache->X86Emit_PANDRR(x86Reg_mm3, x86Reg_mm4);

	push	36					; 00000024H
	push	35					; 00000023H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 558  :     vars->codeCache->X86Emit_PADDRR(x86Reg_mm0, x86Reg_mm1);

	push	33					; 00000021H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PADDRR

; 559  :     vars->codeCache->X86Emit_PADDRR(x86Reg_mm2, x86Reg_mm3);

	push	35					; 00000023H
	push	34					; 00000022H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PADDRR

; 560  :     vars->codeCache->X86Emit_MOVQRM(x86Reg_mm0, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 561  :     vars->codeCache->X86Emit_MOVQRM(x86Reg_mm2, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	34					; 00000022H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 562  :     vars->bUsesMMX = true;

	mov	edx, DWORD PTR _vars$[ebp]
	mov	BYTE PTR [edx+18], 1

; 563  :   }
; 564  :   else

	jmp	$LN3@Emit_ADD_S
$LN2@Emit_ADD_S:

; 565  :   {
; 566  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 567  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 568  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 569  :     vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 570  :     vars->codeCache->X86Emit_MOVIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 571  :     vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 572  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 573  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 574  :     vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 575  :     vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 576  :     vars->codeCache->X86Emit_ADDRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 577  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 578  :     vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 579  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 580  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 581  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 582  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 583  :     vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 584  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 585  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 586  :     vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 587  :     vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 588  :     vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 589  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 590  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN3@Emit_ADD_S:

; 591  :   }
; 592  : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADD_SV
_TEXT	ENDS
PUBLIC	?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADD_P
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src2RegReadBaseReg_1$ = -32				; size = 4
_src2RegReadBaseReg_0$ = -28				; size = 4
_src1RegReadBaseReg_2$ = -24				; size = 4
_src1RegReadBaseReg_1$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ADD_P

; 595  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 596  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 597  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 598  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 599  :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 600  :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 601  :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 602  :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 603  :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 604  :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 605  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 606  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 607  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 608  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 609  : 
; 610  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 611  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 612  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 613  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 614  :   vars->codeCache->X86Emit_MOVIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 615  :   vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 616  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 617  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 618  :   vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 619  :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 620  :   vars->codeCache->X86Emit_ADDRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 621  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 622  :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 623  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 624  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 625  :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 626  :   vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 627  :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 628  :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 629  : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ADD_P
_TEXT	ENDS
PUBLIC	?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUB_SV
EXTRN	?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_PSUBDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_src1RegDisp$ = -52					; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src2RegReadBaseReg_2$ = -40				; size = 4
_src2RegReadBaseReg_1$ = -36				; size = 4
_src2RegReadBaseReg_0$ = -32				; size = 4
_src1RegReadBaseReg_3$ = -28				; size = 4
_src1RegReadBaseReg_2$ = -24				; size = 4
_src1RegReadBaseReg_1$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUB_SV

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 633  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 634  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 635  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 636  :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 637  :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 638  :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 639  :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 640  :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 641  :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 642  :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 643  :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 644  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 645  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 646  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 647  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 648  : 
; 649  :   if(src2RegIndex != src1RegIndex)

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	cmp	eax, DWORD PTR _src1RegIndex$[ebp]
	je	$LN4@Emit_SUB_S

; 650  :   {
; 651  :     if( ((src1RegReadBaseReg_0 == src1RegReadBaseReg_1) && (src1RegReadBaseReg_2 == src1RegReadBaseReg_3)) &&
; 652  :         ((src2RegReadBaseReg_0 == src2RegReadBaseReg_1) && (src2RegReadBaseReg_2 == src2RegReadBaseReg_3)) )

	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	cmp	ecx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	jne	$LN3@Emit_SUB_S
	mov	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	cmp	edx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	jne	$LN3@Emit_SUB_S
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	cmp	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	jne	$LN3@Emit_SUB_S
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	cmp	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	jne	$LN3@Emit_SUB_S

; 653  :       {
; 654  :         vars->codeCache->X86Emit_MOVQMR(x86Reg_mm4, (uint32)sub_sv_mask);

	push	0
	push	0
	push	4
	push	OFFSET ?sub_sv_mask@@3PAIA		; sub_sv_mask
	push	36					; 00000024H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 655  :         vars->codeCache->X86Emit_MOVQMR(x86Reg_mm0, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 656  :         vars->codeCache->X86Emit_MOVQMR(x86Reg_mm1, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	33					; 00000021H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 657  :         vars->codeCache->X86Emit_MOVQMR(x86Reg_mm2, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	34					; 00000022H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 658  :         vars->codeCache->X86Emit_MOVQMR(x86Reg_mm3, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	ecx
	push	35					; 00000023H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 659  :         vars->codeCache->X86Emit_PANDRR(x86Reg_mm0, x86Reg_mm4);

	push	36					; 00000024H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 660  :         vars->codeCache->X86Emit_PANDRR(x86Reg_mm1, x86Reg_mm4);

	push	36					; 00000024H
	push	33					; 00000021H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 661  :         vars->codeCache->X86Emit_PANDRR(x86Reg_mm2, x86Reg_mm4);

	push	36					; 00000024H
	push	34					; 00000022H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 662  :         vars->codeCache->X86Emit_PANDRR(x86Reg_mm3, x86Reg_mm4);

	push	36					; 00000024H
	push	35					; 00000023H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR

; 663  :         vars->codeCache->X86Emit_PSUBDRR(x86Reg_mm0, x86Reg_mm1);

	push	33					; 00000021H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PSUBDRR

; 664  :         vars->codeCache->X86Emit_PSUBDRR(x86Reg_mm2, x86Reg_mm3);

	push	35					; 00000023H
	push	34					; 00000022H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PSUBDRR

; 665  :         vars->codeCache->X86Emit_MOVQRM(x86Reg_mm0, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 666  :         vars->codeCache->X86Emit_MOVQRM(x86Reg_mm2, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	34					; 00000022H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 667  :         vars->bUsesMMX = true;

	mov	eax, DWORD PTR _vars$[ebp]
	mov	BYTE PTR [eax+18], 1

; 668  :       }
; 669  :       else

	jmp	$LN2@Emit_SUB_S
$LN3@Emit_SUB_S:

; 670  :       {
; 671  :         vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 672  :         vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 673  :         vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 674  :         vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 675  :         vars->codeCache->X86Emit_MOVIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 676  :         vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 677  :         vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 678  :         vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 679  :         vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 680  :         vars->codeCache->X86Emit_SUBRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 681  :         vars->codeCache->X86Emit_SUBRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 682  :         vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 683  :         vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 684  :         vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 685  :         vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 686  :         vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 687  :         vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 688  :         vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 689  :         vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 690  :         vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 691  :         vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 692  :         vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 693  :         vars->codeCache->X86Emit_SUBRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 694  :         vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 695  :         vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_SUB_S:

; 696  :     }
; 697  :   }
; 698  :   else

	jmp	SHORT $LN5@Emit_SUB_S
$LN4@Emit_SUB_S:

; 699  :   {
; 700  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 701  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 702  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 703  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 704  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_SUB_S:

; 705  :   }
; 706  : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUB_SV
_TEXT	ENDS
PUBLIC	?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUB_P
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src2RegReadBaseReg_1$ = -32				; size = 4
_src2RegReadBaseReg_0$ = -28				; size = 4
_src1RegReadBaseReg_2$ = -24				; size = 4
_src1RegReadBaseReg_1$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_SUB_P

; 709  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 710  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 711  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 712  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 713  :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 714  :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 715  :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 716  :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 717  :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 718  :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 719  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 720  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 721  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 722  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 723  : 
; 724  :   if(src2RegIndex != src1RegIndex)

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	cmp	edx, DWORD PTR _src1RegIndex$[ebp]
	je	$LN2@Emit_SUB_P

; 725  :   {
; 726  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 727  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 728  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 729  :     vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 730  :     vars->codeCache->X86Emit_MOVIR(0xFFFF0000, x86Reg_ebp);

	push	21					; 00000015H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 731  :     vars->codeCache->X86Emit_ANDRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 732  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 733  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 734  :     vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 735  :     vars->codeCache->X86Emit_SUBRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 736  :     vars->codeCache->X86Emit_SUBRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 737  :     vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 738  :     vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 739  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 740  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 741  :     vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 742  :     vars->codeCache->X86Emit_ANDRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 743  :     vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 744  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 745  :   }
; 746  :   else

	jmp	SHORT $LN3@Emit_SUB_P
$LN2@Emit_SUB_P:

; 747  :   {
; 748  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 749  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 750  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 751  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN3@Emit_SUB_P:

; 752  :   }
; 753  : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_SUB_P
_TEXT	ENDS
PUBLIC	?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDScalar
EXTRN	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDScalar

; 756  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 757  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 758  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 759  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 760  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 761  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 762  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 763  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 764  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 765  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 766  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 767  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 768  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 769  : 
; 770  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 771  :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 772  :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Emit_ANDSc

; 773  :   {
; 774  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_ANDSc:

; 775  :   }
; 776  : 
; 777  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN4@Emit_ANDSc

; 778  :   {
; 779  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 780  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_ANDSc:

; 781  :   }
; 782  : 
; 783  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDSc

; 784  :   {
; 785  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 786  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 787  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 788  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDSc:

; 789  :   }
; 790  : 
; 791  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDSc

; 792  :   {
; 793  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 794  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 795  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 796  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 797  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDSc:

; 798  :   }
; 799  : 
; 800  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDSc

; 801  :   {
; 802  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_ANDSc:

; 803  :   }
; 804  : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDScalar
_TEXT	ENDS
PUBLIC	?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDImmediate

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 808  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 809  :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 810  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 811  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 812  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 813  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 814  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 815  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 816  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 817  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 818  : 
; 819  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 820  :   vars->codeCache->X86Emit_ANDIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 821  :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN5@Emit_ANDIm

; 822  :   {
; 823  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_ANDIm:

; 824  :   }
; 825  : 
; 826  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN4@Emit_ANDIm

; 827  :   {
; 828  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 829  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_ANDIm:

; 830  :   }
; 831  : 
; 832  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDIm

; 833  :   {
; 834  :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 835  :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 836  :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 837  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDIm:

; 838  :   }
; 839  : 
; 840  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDIm

; 841  :   {
; 842  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 843  :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 844  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 845  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 846  :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDIm:

; 847  :   }
; 848  : 
; 849  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDIm

; 850  :   {
; 851  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_ANDIm:

; 852  :   }
; 853  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDImmediate
_TEXT	ENDS
PUBLIC	?SetLabelPointer@PatchManager@@QAEXIPAE@Z	; PatchManager::SetLabelPointer
PUBLIC	?GetEmitLoc@EmitterVariables@@QAEPAEXZ		; EmitterVariables::GetEmitLoc
PUBLIC	?Reset@PatchManager@@QAEXXZ			; PatchManager::Reset
PUBLIC	?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDImmediateShiftScalar
EXTRN	?ApplyPatches@PatchManager@@QAEXXZ:PROC		; PatchManager::ApplyPatches
EXTRN	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SHLRR
EXTRN	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z:PROC ; NativeCodeCache::X86Emit_JMPI_Label
EXTRN	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z:PROC ; NativeCodeCache::X86Emit_JCC_Label
EXTRN	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVNZRR
EXTRN	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_TESTIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -52					; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_destRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1Imm$ = -16						; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDImmediateShiftScalar

; 856  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 857  :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 858  :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 859  : 
; 860  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 861  :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 862  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 863  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 864  :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 865  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 866  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 867  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 868  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 869  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 870  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 871  : 
; 872  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 873  : 
; 874  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 875  :   vars->codeCache->X86Emit_MOVIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 876  :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 877  :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 878  :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 879  : 
; 880  :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 881  :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 882  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 883  : 
; 884  :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 885  : 
; 886  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 887  : 
; 888  :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 889  : 
; 890  :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 891  : 
; 892  :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 893  : 
; 894  :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 895  : 
; 896  :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN7@Emit_ANDIm@2

; 897  :   {
; 898  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ANDIm@2:

; 899  :   }
; 900  : 
; 901  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDIm@2

; 902  :   {
; 903  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 904  : 
; 905  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ANDIm@2

; 906  :     {
; 907  :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ANDIm@2:

; 908  :     }
; 909  : 
; 910  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ANDIm@2

; 911  :     {
; 912  :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ANDIm@2:

; 913  :     }
; 914  : 
; 915  :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 916  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN6@Emit_ANDIm@2:

; 917  :   }
; 918  : 
; 919  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDIm@2

; 920  :   {
; 921  :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 922  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDIm@2:

; 923  :   }
; 924  : 
; 925  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDIm@2

; 926  :   {
; 927  :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDIm@2:

; 928  :   }
; 929  : 
; 930  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ANDIm@2

; 931  :   {
; 932  :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ANDIm@2:

; 933  :   }
; 934  : 
; 935  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 936  : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?Reset@PatchManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PatchManager@@QAEXXZ PROC			; PatchManager::Reset, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 56   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PatchManager@@QAEXXZ ENDP			; PatchManager::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetLabelPointer@PatchManager@@QAEXIPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
_ptr$ = 12						; size = 4
?SetLabelPointer@PatchManager@@QAEXIPAE@Z PROC		; PatchManager::SetLabelPointer, COMDAT
; _this$ = ecx

; 69   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     labelPointers[labelIndex] = ptr;

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx+eax*4+1024], edx

; 71   :     numLabels++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1284], ecx

; 72   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabelPointer@PatchManager@@QAEXIPAE@Z ENDP		; PatchManager::SetLabelPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetEmitLoc@EmitterVariables@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitLoc@EmitterVariables@@QAEPAEXZ PROC		; EmitterVariables::GetEmitLoc, COMDAT
; _this$ = ecx

; 31   :   uint8 *GetEmitLoc() { return *ppEmitLoc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitLoc@EmitterVariables@@QAEPAEXZ ENDP		; EmitterVariables::GetEmitLoc
_TEXT	ENDS
PUBLIC	?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitalu.cpp
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDScalarShiftScalar

; 939  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 940  :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 941  :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 942  : 
; 943  :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 944  :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 945  :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 946  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 947  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 948  :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 949  :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 950  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 951  :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 952  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 953  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 954  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 955  :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 956  : 
; 957  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 958  : 
; 959  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 960  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 961  :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 962  :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 963  :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 964  : 
; 965  :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 966  :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 967  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 968  : 
; 969  :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 970  : 
; 971  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 972  : 
; 973  :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 974  : 
; 975  :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 976  : 
; 977  :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 978  : 
; 979  :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 980  : 
; 981  :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ANDSc@2

; 982  :   {
; 983  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ANDSc@2:

; 984  :   }
; 985  : 
; 986  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDSc@2

; 987  :   {
; 988  :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 989  : 
; 990  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ANDSc@2

; 991  :     {
; 992  :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ANDSc@2:

; 993  :     }
; 994  : 
; 995  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ANDSc@2

; 996  :     {
; 997  :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ANDSc@2:

; 998  :     }
; 999  : 
; 1000 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1001 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN6@Emit_ANDSc@2:

; 1002 :   }
; 1003 : 
; 1004 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDSc@2

; 1005 :   {
; 1006 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1007 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDSc@2:

; 1008 :   }
; 1009 : 
; 1010 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDSc@2

; 1011 :   {
; 1012 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDSc@2:

; 1013 :   }
; 1014 : 
; 1015 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ANDSc@2

; 1016 :   {
; 1017 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ANDSc@2:

; 1018 :   }
; 1019 : 
; 1020 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1021 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDScalarShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDScalarRotateScalar
EXTRN	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ROLRR
EXTRN	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_RORRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_rol$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDScalarRotateScalar

; 1024 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1025 :   uint32 l_rol = 0;

	mov	DWORD PTR _l_rol$[ebp], 0

; 1026 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1027 : 
; 1028 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1029 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1030 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1031 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1032 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1033 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1034 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1035 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1036 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1037 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1038 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1039 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1040 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1041 : 
; 1042 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1043 : 
; 1044 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1045 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1046 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1047 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1048 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1049 : 
; 1050 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1051 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1052 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_rol);

	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1053 : 
; 1054 :   vars->codeCache->X86Emit_RORRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR

; 1055 : 
; 1056 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1057 : 
; 1058 :   vars->patchMgr->SetLabelPointer(l_rol,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1059 : 
; 1060 :   vars->codeCache->X86Emit_ROLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 1061 : 
; 1062 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1063 : 
; 1064 :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 1065 : 
; 1066 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ANDSc@3

; 1067 :   {
; 1068 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ANDSc@3:

; 1069 :   }
; 1070 : 
; 1071 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDSc@3

; 1072 :   {
; 1073 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1074 : 
; 1075 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ANDSc@3

; 1076 :     {
; 1077 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ANDSc@3:

; 1078 :     }
; 1079 : 
; 1080 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ANDSc@3

; 1081 :     {
; 1082 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ANDSc@3:

; 1083 :     }
; 1084 : 
; 1085 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1086 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN6@Emit_ANDSc@3:

; 1087 :   }
; 1088 : 
; 1089 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDSc@3

; 1090 :   {
; 1091 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1092 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDSc@3:

; 1093 :   }
; 1094 : 
; 1095 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDSc@3

; 1096 :   {
; 1097 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDSc@3:

; 1098 :   }
; 1099 : 
; 1100 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ANDSc@3

; 1101 :   {
; 1102 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ANDSc@3:

; 1103 :   }
; 1104 : 
; 1105 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1106 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDScalarRotateScalar
_TEXT	ENDS
PUBLIC	?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDScalarShiftLeftImmediate

; 1109 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1110 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1111 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1112 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 1113 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1114 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1115 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1116 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1117 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1118 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1119 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1120 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1121 : 
; 1122 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1123 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1124 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1125 :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 1126 : 
; 1127 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ANDSc@4

; 1128 :   {
; 1129 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ANDSc@4:

; 1130 :   }
; 1131 : 
; 1132 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDSc@4

; 1133 :   {
; 1134 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ANDSc@4

; 1135 :     {
; 1136 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ANDSc@4:

; 1137 :     }
; 1138 :     
; 1139 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ANDSc@4

; 1140 :     {
; 1141 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ANDSc@4:

; 1142 :     }
; 1143 : 
; 1144 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1145 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ANDSc@4:

; 1146 :   }
; 1147 : 
; 1148 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDSc@4

; 1149 :   {
; 1150 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1151 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDSc@4:

; 1152 :   }
; 1153 : 
; 1154 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDSc@4

; 1155 :   {
; 1156 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDSc@4:

; 1157 :   }
; 1158 : 
; 1159 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_ANDSc@4

; 1160 :   {
; 1161 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ANDSc@4:

; 1162 :   }
; 1163 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ANDScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ANDScalarShiftRightImmediate

; 1166 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1167 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1168 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1169 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 1170 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1171 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1172 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1173 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1174 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1175 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1176 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1177 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1178 : 
; 1179 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1180 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1181 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1182 :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 1183 : 
; 1184 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ANDSc@5

; 1185 :   {
; 1186 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ANDSc@5:

; 1187 :   }
; 1188 : 
; 1189 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ANDSc@5

; 1190 :   {
; 1191 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ANDSc@5

; 1192 :     {
; 1193 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ANDSc@5:

; 1194 :     }
; 1195 :     
; 1196 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ANDSc@5

; 1197 :     {
; 1198 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ANDSc@5:

; 1199 :     }
; 1200 : 
; 1201 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1202 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ANDSc@5:

; 1203 :   }
; 1204 : 
; 1205 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ANDSc@5

; 1206 :   {
; 1207 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1208 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ANDSc@5:

; 1209 :   }
; 1210 : 
; 1211 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ANDSc@5

; 1212 :   {
; 1213 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ANDSc@5:

; 1214 :   }
; 1215 : 
; 1216 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_ANDSc@5

; 1217 :   {
; 1218 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ANDSc@5:

; 1219 :   }
; 1220 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ANDScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src2RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTImmediate

; 1223 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1224 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1225 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 1226 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1227 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1228 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1229 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1230 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1231 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1232 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1233 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1234 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1235 : 
; 1236 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1237 :   vars->codeCache->X86Emit_ANDIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _src1Imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1238 : 
; 1239 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN4@Emit_FTSTI

; 1240 :   {
; 1241 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1242 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_FTSTI:

; 1243 :   }
; 1244 : 
; 1245 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTI

; 1246 :   {
; 1247 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1248 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1249 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1250 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTI:

; 1251 :   }
; 1252 : 
; 1253 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTI

; 1254 :   {
; 1255 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1256 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1257 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1258 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1259 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTI:

; 1260 :   }
; 1261 : 
; 1262 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN5@Emit_FTSTI

; 1263 :   {
; 1264 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN5@Emit_FTSTI:

; 1265 :   }
; 1266 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTImmediate
_TEXT	ENDS
PUBLIC	?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_src1RegDisp$ = -28					; size = 4
_ccRegWriteBaseReg$ = -24				; size = 4
_ccRegReadBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src1RegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTScalar

; 1269 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 1270 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 1271 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1272 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1273 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1274 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1275 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1276 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1277 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1278 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1279 : 
; 1280 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1281 :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 1282 : 
; 1283 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN4@Emit_FTSTS

; 1284 :   {
; 1285 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1286 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_FTSTS:

; 1287 :   }
; 1288 : 
; 1289 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTS

; 1290 :   {
; 1291 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1292 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1293 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1294 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTS:

; 1295 :   }
; 1296 : 
; 1297 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTS

; 1298 :   {
; 1299 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1300 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1301 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1302 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1303 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTS:

; 1304 :   }
; 1305 : 
; 1306 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN5@Emit_FTSTS

; 1307 :   {
; 1308 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN5@Emit_FTSTS:

; 1309 :   }
; 1310 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTScalar
_TEXT	ENDS
PUBLIC	?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -52					; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_destRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1Imm$ = -16						; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTImmediateShiftScalar

; 1313 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1314 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 1315 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1316 : 
; 1317 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1318 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 1319 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1320 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1321 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1322 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1323 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1324 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1325 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1326 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1327 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1328 : 
; 1329 :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1330 : 
; 1331 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1332 :   vars->codeCache->X86Emit_MOVIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1333 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1334 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1335 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1336 : 
; 1337 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1338 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1339 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1340 : 
; 1341 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1342 : 
; 1343 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1344 : 
; 1345 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1346 : 
; 1347 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1348 : 
; 1349 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1350 :   
; 1351 :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 1352 : 
; 1353 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_FTSTI@2

; 1354 :   {
; 1355 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1356 : 
; 1357 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_FTSTI@2

; 1358 :     {
; 1359 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_FTSTI@2:

; 1360 :     }
; 1361 : 
; 1362 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_FTSTI@2

; 1363 :     {
; 1364 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_FTSTI@2:

; 1365 :     }
; 1366 : 
; 1367 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1368 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_FTSTI@2:

; 1369 :   }
; 1370 : 
; 1371 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTI@2

; 1372 :   {
; 1373 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1374 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTI@2:

; 1375 :   }
; 1376 : 
; 1377 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTI@2

; 1378 :   {
; 1379 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTI@2:

; 1380 :   }
; 1381 : 
; 1382 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_FTSTI@2

; 1383 :   {
; 1384 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_FTSTI@2:

; 1385 :   }
; 1386 : 
; 1387 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1388 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTScalarShiftScalar

; 1391 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1392 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 1393 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1394 : 
; 1395 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1396 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1397 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1398 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1399 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1400 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1401 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1402 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1403 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1404 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1405 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1406 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1407 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1408 : 
; 1409 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1410 : 
; 1411 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1412 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1413 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1414 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1415 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1416 : 
; 1417 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1418 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1419 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1420 : 
; 1421 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1422 : 
; 1423 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1424 : 
; 1425 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1426 : 
; 1427 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1428 : 
; 1429 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1430 :   
; 1431 :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 1432 : 
; 1433 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_FTSTS@2

; 1434 :   {
; 1435 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1436 : 
; 1437 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_FTSTS@2

; 1438 :     {
; 1439 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_FTSTS@2:

; 1440 :     }
; 1441 : 
; 1442 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_FTSTS@2

; 1443 :     {
; 1444 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_FTSTS@2:

; 1445 :     }
; 1446 : 
; 1447 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1448 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_FTSTS@2:

; 1449 :   }
; 1450 : 
; 1451 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTS@2

; 1452 :   {
; 1453 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1454 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTS@2:

; 1455 :   }
; 1456 : 
; 1457 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTS@2

; 1458 :   {
; 1459 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTS@2:

; 1460 :   }
; 1461 : 
; 1462 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN1@Emit_FTSTS@2

; 1463 :   {
; 1464 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_FTSTS@2:

; 1465 :   }
; 1466 : 
; 1467 :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1468 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTScalarShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_rol$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTScalarRotateScalar

; 1471 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1472 :   uint32 l_rol = 0;

	mov	DWORD PTR _l_rol$[ebp], 0

; 1473 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1474 : 
; 1475 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1476 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1477 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1478 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1479 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1480 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1481 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1482 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1483 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1484 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1485 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1486 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1487 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1488 : 
; 1489 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1490 : 
; 1491 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1492 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1493 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1494 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1495 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1496 : 
; 1497 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1498 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1499 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_rol);

	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1500 : 
; 1501 :   vars->codeCache->X86Emit_RORRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR

; 1502 : 
; 1503 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1504 : 
; 1505 :   vars->patchMgr->SetLabelPointer(l_rol,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1506 : 
; 1507 :   vars->codeCache->X86Emit_ROLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 1508 : 
; 1509 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1510 :   
; 1511 :   vars->codeCache->X86Emit_ANDMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR

; 1512 : 
; 1513 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_FTSTS@3

; 1514 :   {
; 1515 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1516 : 
; 1517 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_FTSTS@3

; 1518 :     {
; 1519 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_FTSTS@3:

; 1520 :     }
; 1521 : 
; 1522 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_FTSTS@3

; 1523 :     {
; 1524 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_FTSTS@3:

; 1525 :     }
; 1526 : 
; 1527 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1528 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_FTSTS@3:

; 1529 :   }
; 1530 : 
; 1531 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTS@3

; 1532 :   {
; 1533 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1534 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTS@3:

; 1535 :   }
; 1536 : 
; 1537 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTS@3

; 1538 :   {
; 1539 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTS@3:

; 1540 :   }
; 1541 : 
; 1542 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN1@Emit_FTSTS@3

; 1543 :   {
; 1544 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_FTSTS@3:

; 1545 :   }
; 1546 : 
; 1547 :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1548 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTScalarRotateScalar
_TEXT	ENDS
PUBLIC	?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTScalarShiftLeftImmediate

; 1551 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1552 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1553 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1554 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 1555 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1556 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1557 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1558 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1559 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1560 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1561 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1562 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1563 : 
; 1564 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1565 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1566 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1567 :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 1568 : 
; 1569 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_FTSTS@4

; 1570 :   {
; 1571 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_FTSTS@4

; 1572 :     {
; 1573 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_FTSTS@4:

; 1574 :     }
; 1575 :     
; 1576 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_FTSTS@4

; 1577 :     {
; 1578 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_FTSTS@4:

; 1579 :     }
; 1580 : 
; 1581 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1582 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_FTSTS@4:

; 1583 :   }
; 1584 : 
; 1585 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTS@4

; 1586 :   {
; 1587 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1588 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTS@4:

; 1589 :   }
; 1590 : 
; 1591 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTS@4

; 1592 :   {
; 1593 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTS@4:

; 1594 :   }
; 1595 : 
; 1596 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN7@Emit_FTSTS@4

; 1597 :   {
; 1598 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN7@Emit_FTSTS@4:

; 1599 :   }
; 1600 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_FTSTScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_FTSTScalarShiftRightImmediate

; 1603 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1604 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1605 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1606 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 1607 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1608 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1609 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1610 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1611 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1612 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1613 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1614 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1615 : 
; 1616 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1617 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1618 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1619 :   vars->codeCache->X86Emit_ANDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR

; 1620 : 
; 1621 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_FTSTS@5

; 1622 :   {
; 1623 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_FTSTS@5

; 1624 :     {
; 1625 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_FTSTS@5:

; 1626 :     }
; 1627 :     
; 1628 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_FTSTS@5

; 1629 :     {
; 1630 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_FTSTS@5:

; 1631 :     }
; 1632 : 
; 1633 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1634 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_FTSTS@5:

; 1635 :   }
; 1636 : 
; 1637 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_FTSTS@5

; 1638 :   {
; 1639 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1640 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_FTSTS@5:

; 1641 :   }
; 1642 : 
; 1643 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_FTSTS@5

; 1644 :   {
; 1645 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_FTSTS@5:

; 1646 :   }
; 1647 : 
; 1648 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN7@Emit_FTSTS@5

; 1649 :   {
; 1650 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN7@Emit_FTSTS@5:

; 1651 :   }
; 1652 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_FTSTScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORImmediate
EXTRN	?X86Emit_ORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORImmediate

; 1655 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1656 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1657 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 1658 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1659 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1660 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1661 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1662 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1663 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1664 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1665 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1666 : 
; 1667 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1668 :   vars->codeCache->X86Emit_ORIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ORIR

; 1669 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN5@Emit_ORImm

; 1670 :   {
; 1671 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_ORImm:

; 1672 :   }
; 1673 : 
; 1674 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN4@Emit_ORImm

; 1675 :   {
; 1676 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1677 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_ORImm:

; 1678 :   }
; 1679 : 
; 1680 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORImm

; 1681 :   {
; 1682 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1683 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1684 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1685 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORImm:

; 1686 :   }
; 1687 : 
; 1688 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORImm

; 1689 :   {
; 1690 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1691 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1692 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1693 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1694 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORImm:

; 1695 :   }
; 1696 : 
; 1697 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORImm

; 1698 :   {
; 1699 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_ORImm:

; 1700 :   }
; 1701 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORImmediate
_TEXT	ENDS
PUBLIC	?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORScalar
EXTRN	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORScalar

; 1704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1705 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1706 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1707 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1708 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1709 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1710 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1711 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1712 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1713 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1714 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1715 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1716 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1717 : 
; 1718 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1719 :   vars->codeCache->X86Emit_ORMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORMR

; 1720 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Emit_ORSca

; 1721 :   {
; 1722 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_ORSca:

; 1723 :   }
; 1724 : 
; 1725 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN4@Emit_ORSca

; 1726 :   {
; 1727 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1728 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_ORSca:

; 1729 :   }
; 1730 : 
; 1731 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORSca

; 1732 :   {
; 1733 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1734 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1735 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1736 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORSca:

; 1737 :   }
; 1738 : 
; 1739 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORSca

; 1740 :   {
; 1741 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1742 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1743 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1744 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1745 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORSca:

; 1746 :   }
; 1747 : 
; 1748 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORSca

; 1749 :   {
; 1750 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_ORSca:

; 1751 :   }
; 1752 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORScalar
_TEXT	ENDS
PUBLIC	?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -52					; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_destRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1Imm$ = -16						; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORImmediateShiftScalar

; 1755 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1756 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 1757 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1758 : 
; 1759 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1760 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 1761 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1762 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1763 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1764 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1765 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1766 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1767 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1768 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1769 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1770 : 
; 1771 :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1772 : 
; 1773 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1774 :   vars->codeCache->X86Emit_MOVIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1775 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1776 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1777 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1778 : 
; 1779 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1780 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1781 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1782 : 
; 1783 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1784 : 
; 1785 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1786 : 
; 1787 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1788 : 
; 1789 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1790 : 
; 1791 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1792 : 
; 1793 :   vars->codeCache->X86Emit_ORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORMR

; 1794 : 
; 1795 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN7@Emit_ORImm@2

; 1796 :   {
; 1797 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ORImm@2:

; 1798 :   }
; 1799 : 
; 1800 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORImm@2

; 1801 :   {
; 1802 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1803 : 
; 1804 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ORImm@2

; 1805 :     {
; 1806 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ORImm@2:

; 1807 :     }
; 1808 : 
; 1809 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ORImm@2

; 1810 :     {
; 1811 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ORImm@2:

; 1812 :     }
; 1813 : 
; 1814 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1815 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ORImm@2:

; 1816 :   }
; 1817 : 
; 1818 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORImm@2

; 1819 :   {
; 1820 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1821 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORImm@2:

; 1822 :   }
; 1823 : 
; 1824 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORImm@2

; 1825 :   {
; 1826 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORImm@2:

; 1827 :   }
; 1828 : 
; 1829 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ORImm@2

; 1830 :   {
; 1831 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ORImm@2:

; 1832 :   }
; 1833 : 
; 1834 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1835 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORScalarShiftScalar

; 1838 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1839 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 1840 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1841 : 
; 1842 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1843 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1844 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1845 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1846 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1847 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1848 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1849 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1850 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1851 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1852 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1853 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1854 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1855 : 
; 1856 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1857 : 
; 1858 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1859 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1860 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1861 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1862 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1863 : 
; 1864 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1865 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1866 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1867 : 
; 1868 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1869 : 
; 1870 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1871 : 
; 1872 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1873 : 
; 1874 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1875 : 
; 1876 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1877 : 
; 1878 :   vars->codeCache->X86Emit_ORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORMR

; 1879 : 
; 1880 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ORSca@2

; 1881 :   {
; 1882 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ORSca@2:

; 1883 :   }
; 1884 : 
; 1885 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORSca@2

; 1886 :   {
; 1887 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1888 : 
; 1889 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ORSca@2

; 1890 :     {
; 1891 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ORSca@2:

; 1892 :     }
; 1893 : 
; 1894 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ORSca@2

; 1895 :     {
; 1896 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ORSca@2:

; 1897 :     }
; 1898 : 
; 1899 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1900 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ORSca@2:

; 1901 :   }
; 1902 : 
; 1903 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORSca@2

; 1904 :   {
; 1905 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1906 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORSca@2:

; 1907 :   }
; 1908 : 
; 1909 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORSca@2

; 1910 :   {
; 1911 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORSca@2:

; 1912 :   }
; 1913 : 
; 1914 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ORSca@2

; 1915 :   {
; 1916 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ORSca@2:

; 1917 :   }
; 1918 : 
; 1919 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 1920 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORScalarShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_rol$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORScalarRotateScalar

; 1923 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1924 :   uint32 l_rol = 0;

	mov	DWORD PTR _l_rol$[ebp], 0

; 1925 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 1926 : 
; 1927 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1928 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1929 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1930 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1931 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 1932 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 1933 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1934 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 1935 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 1936 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1937 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1938 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1939 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 1940 : 
; 1941 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 1942 : 
; 1943 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1944 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1945 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1946 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1947 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 1948 : 
; 1949 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1950 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 1951 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_rol);

	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 1952 : 
; 1953 :   vars->codeCache->X86Emit_RORRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR

; 1954 : 
; 1955 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 1956 : 
; 1957 :   vars->patchMgr->SetLabelPointer(l_rol,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1958 : 
; 1959 :   vars->codeCache->X86Emit_ROLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 1960 : 
; 1961 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 1962 : 
; 1963 :   vars->codeCache->X86Emit_ORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORMR

; 1964 : 
; 1965 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ORSca@3

; 1966 :   {
; 1967 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ORSca@3:

; 1968 :   }
; 1969 : 
; 1970 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORSca@3

; 1971 :   {
; 1972 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1973 : 
; 1974 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ORSca@3

; 1975 :     {
; 1976 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ORSca@3:

; 1977 :     }
; 1978 : 
; 1979 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ORSca@3

; 1980 :     {
; 1981 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ORSca@3:

; 1982 :     }
; 1983 : 
; 1984 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1985 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ORSca@3:

; 1986 :   }
; 1987 : 
; 1988 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORSca@3

; 1989 :   {
; 1990 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1991 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORSca@3:

; 1992 :   }
; 1993 : 
; 1994 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORSca@3

; 1995 :   {
; 1996 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORSca@3:

; 1997 :   }
; 1998 : 
; 1999 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ORSca@3

; 2000 :   {
; 2001 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ORSca@3:

; 2002 :   }
; 2003 : 
; 2004 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 2005 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORScalarRotateScalar
_TEXT	ENDS
PUBLIC	?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORScalarShiftLeftImmediate

; 2008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2009 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2010 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2011 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2012 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2013 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2014 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2015 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2016 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2017 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2018 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2019 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2020 : 
; 2021 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2022 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2023 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2024 :   vars->codeCache->X86Emit_ORRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 2025 : 
; 2026 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ORSca@4

; 2027 :   {
; 2028 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ORSca@4:

; 2029 :   }
; 2030 : 
; 2031 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORSca@4

; 2032 :   {
; 2033 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ORSca@4

; 2034 :     {
; 2035 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ORSca@4:

; 2036 :     }
; 2037 :     
; 2038 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ORSca@4

; 2039 :     {
; 2040 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ORSca@4:

; 2041 :     }
; 2042 : 
; 2043 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2044 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ORSca@4:

; 2045 :   }
; 2046 : 
; 2047 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORSca@4

; 2048 :   {
; 2049 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2050 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORSca@4:

; 2051 :   }
; 2052 : 
; 2053 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORSca@4

; 2054 :   {
; 2055 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORSca@4:

; 2056 :   }
; 2057 : 
; 2058 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_ORSca@4

; 2059 :   {
; 2060 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ORSca@4:

; 2061 :   }
; 2062 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ORScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ORScalarShiftRightImmediate

; 2065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2066 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2067 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2068 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2069 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2070 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2071 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2072 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2073 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2074 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2075 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2076 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2077 : 
; 2078 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2079 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2080 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 2081 :   vars->codeCache->X86Emit_ORRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR

; 2082 : 
; 2083 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ORSca@5

; 2084 :   {
; 2085 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ORSca@5:

; 2086 :   }
; 2087 : 
; 2088 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ORSca@5

; 2089 :   {
; 2090 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ORSca@5

; 2091 :     {
; 2092 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ORSca@5:

; 2093 :     }
; 2094 :     
; 2095 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ORSca@5

; 2096 :     {
; 2097 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ORSca@5:

; 2098 :     }
; 2099 : 
; 2100 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2101 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ORSca@5:

; 2102 :   }
; 2103 : 
; 2104 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ORSca@5

; 2105 :   {
; 2106 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2107 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ORSca@5:

; 2108 :   }
; 2109 : 
; 2110 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ORSca@5

; 2111 :   {
; 2112 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ORSca@5:

; 2113 :   }
; 2114 : 
; 2115 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_ORSca@5

; 2116 :   {
; 2117 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ORSca@5:

; 2118 :   }
; 2119 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ORScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORImmediate
EXTRN	?X86Emit_XORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_XORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORImmediate

; 2122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2123 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2124 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 2125 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2126 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2127 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2128 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2129 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2130 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2131 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2132 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2133 : 
; 2134 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2135 :   vars->codeCache->X86Emit_XORIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_XORIR

; 2136 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN5@Emit_EORIm

; 2137 :   {
; 2138 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_EORIm:

; 2139 :   }
; 2140 : 
; 2141 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN4@Emit_EORIm

; 2142 :   {
; 2143 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2144 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_EORIm:

; 2145 :   }
; 2146 : 
; 2147 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORIm

; 2148 :   {
; 2149 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2150 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 2151 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2152 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORIm:

; 2153 :   }
; 2154 : 
; 2155 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORIm

; 2156 :   {
; 2157 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2158 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2159 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 2160 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 2161 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORIm:

; 2162 :   }
; 2163 : 
; 2164 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORIm

; 2165 :   {
; 2166 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_EORIm:

; 2167 :   }
; 2168 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORImmediate
_TEXT	ENDS
PUBLIC	?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORScalar
EXTRN	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_XORMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORScalar

; 2171 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2172 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2173 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2174 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2175 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2176 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2177 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2178 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2179 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2180 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2181 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2182 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2183 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2184 : 
; 2185 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2186 :   vars->codeCache->X86Emit_XORMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORMR

; 2187 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@Emit_EORSc

; 2188 :   {
; 2189 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN5@Emit_EORSc:

; 2190 :   }
; 2191 : 
; 2192 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN4@Emit_EORSc

; 2193 :   {
; 2194 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2195 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN4@Emit_EORSc:

; 2196 :   }
; 2197 : 
; 2198 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORSc

; 2199 :   {
; 2200 :     vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2201 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 28);

	push	28					; 0000001cH
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 2202 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ecx);

	push	17					; 00000011H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2203 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORSc:

; 2204 :   }
; 2205 : 
; 2206 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORSc

; 2207 :   {
; 2208 :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2209 :     vars->codeCache->X86Emit_MOVIR(CC_ALU_ZERO, x86Reg_edx);

	push	18					; 00000012H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2210 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 2211 :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 2212 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORSc:

; 2213 :   }
; 2214 : 
; 2215 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORSc

; 2216 :   {
; 2217 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN6@Emit_EORSc:

; 2218 :   }
; 2219 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORScalar
_TEXT	ENDS
PUBLIC	?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -52					; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_destRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1Imm$ = -16						; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORImmediateShiftScalar

; 2222 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2223 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 2224 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 2225 : 
; 2226 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2227 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 2228 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2229 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2230 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2231 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2232 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2233 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2234 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2235 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2236 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2237 : 
; 2238 :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 2239 : 
; 2240 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2241 :   vars->codeCache->X86Emit_MOVIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2242 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2243 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2244 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 2245 : 
; 2246 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 2247 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 2248 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 2249 : 
; 2250 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 2251 : 
; 2252 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 2253 : 
; 2254 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_shl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2255 : 
; 2256 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 2257 : 
; 2258 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2259 : 
; 2260 :   vars->codeCache->X86Emit_XORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORMR

; 2261 : 
; 2262 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN7@Emit_EORIm@2

; 2263 :   {
; 2264 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_EORIm@2:

; 2265 :   }
; 2266 : 
; 2267 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORIm@2

; 2268 :   {
; 2269 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 2270 : 
; 2271 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_EORIm@2

; 2272 :     {
; 2273 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_EORIm@2:

; 2274 :     }
; 2275 : 
; 2276 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_EORIm@2

; 2277 :     {
; 2278 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_EORIm@2:

; 2279 :     }
; 2280 : 
; 2281 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2282 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_EORIm@2:

; 2283 :   }
; 2284 : 
; 2285 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORIm@2

; 2286 :   {
; 2287 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2288 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORIm@2:

; 2289 :   }
; 2290 : 
; 2291 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORIm@2

; 2292 :   {
; 2293 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORIm@2:

; 2294 :   }
; 2295 : 
; 2296 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN1@Emit_EORIm@2

; 2297 :   {
; 2298 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_EORIm@2:

; 2299 :   }
; 2300 : 
; 2301 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 2302 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_shl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORScalarShiftScalar

; 2305 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2306 :   uint32 l_shl = 0;

	mov	DWORD PTR _l_shl$[ebp], 0

; 2307 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 2308 : 
; 2309 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2310 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2311 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2312 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2313 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2314 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2315 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2316 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2317 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2318 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2319 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2320 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2321 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2322 : 
; 2323 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 2324 : 
; 2325 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2326 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2327 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2328 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2329 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 2330 : 
; 2331 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 2332 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 2333 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_shl);

	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 2334 : 
; 2335 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 2336 : 
; 2337 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 2338 : 
; 2339 :   vars->patchMgr->SetLabelPointer(l_shl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_shl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2340 : 
; 2341 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 2342 : 
; 2343 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2344 :   
; 2345 :   vars->codeCache->X86Emit_XORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORMR

; 2346 : 
; 2347 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_EORSc@2

; 2348 :   {
; 2349 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_EORSc@2:

; 2350 :   }
; 2351 : 
; 2352 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORSc@2

; 2353 :   {
; 2354 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 2355 : 
; 2356 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_EORSc@2

; 2357 :     {
; 2358 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_EORSc@2:

; 2359 :     }
; 2360 : 
; 2361 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_EORSc@2

; 2362 :     {
; 2363 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_EORSc@2:

; 2364 :     }
; 2365 : 
; 2366 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2367 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_EORSc@2:

; 2368 :   }
; 2369 : 
; 2370 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORSc@2

; 2371 :   {
; 2372 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2373 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORSc@2:

; 2374 :   }
; 2375 : 
; 2376 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORSc@2

; 2377 :   {
; 2378 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORSc@2:

; 2379 :   }
; 2380 : 
; 2381 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_EORSc@2

; 2382 :   {
; 2383 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_EORSc@2:

; 2384 :   }
; 2385 : 
; 2386 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 2387 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORScalarShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORScalarRotateScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_ccRegWriteBaseReg$ = -44				; size = 4
_ccRegReadBaseReg$ = -40				; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_destRegReadBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_rol$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORScalarRotateScalar

; 2390 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2391 :   uint32 l_rol = 0;

	mov	DWORD PTR _l_rol$[ebp], 0

; 2392 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 2393 : 
; 2394 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2395 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2396 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2397 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2398 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2399 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2400 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2401 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2402 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2403 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2404 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2405 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2406 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2407 : 
; 2408 :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 2409 : 
; 2410 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2411 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2412 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2413 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2414 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 2415 : 
; 2416 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 2417 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 2418 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_rol);

	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 2419 : 
; 2420 :   vars->codeCache->X86Emit_RORRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR

; 2421 : 
; 2422 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 2423 : 
; 2424 :   vars->patchMgr->SetLabelPointer(l_rol,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_rol$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2425 : 
; 2426 :   vars->codeCache->X86Emit_ROLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 2427 : 
; 2428 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 2429 :   
; 2430 :   vars->codeCache->X86Emit_XORMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORMR

; 2431 : 
; 2432 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_EORSc@3

; 2433 :   {
; 2434 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_EORSc@3:

; 2435 :   }
; 2436 : 
; 2437 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORSc@3

; 2438 :   {
; 2439 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 2440 : 
; 2441 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_EORSc@3

; 2442 :     {
; 2443 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_EORSc@3:

; 2444 :     }
; 2445 : 
; 2446 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_EORSc@3

; 2447 :     {
; 2448 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_EORSc@3:

; 2449 :     }
; 2450 : 
; 2451 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2452 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_EORSc@3:

; 2453 :   }
; 2454 : 
; 2455 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORSc@3

; 2456 :   {
; 2457 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2458 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORSc@3:

; 2459 :   }
; 2460 : 
; 2461 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORSc@3

; 2462 :   {
; 2463 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORSc@3:

; 2464 :   }
; 2465 : 
; 2466 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN1@Emit_EORSc@3

; 2467 :   {
; 2468 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_EORSc@3:

; 2469 :   }
; 2470 : 
; 2471 :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 2472 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORScalarRotateScalar
_TEXT	ENDS
PUBLIC	?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORScalarShiftLeftImmediate

; 2475 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2476 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2477 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2478 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2479 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2480 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2481 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2482 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2483 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2484 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2485 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2486 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2487 : 
; 2488 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2489 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2490 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2491 :   vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2492 : 
; 2493 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_EORSc@4

; 2494 :   {
; 2495 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_EORSc@4:

; 2496 :   }
; 2497 : 
; 2498 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORSc@4

; 2499 :   {
; 2500 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_EORSc@4

; 2501 :     {
; 2502 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_EORSc@4:

; 2503 :     }
; 2504 :     
; 2505 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_EORSc@4

; 2506 :     {
; 2507 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_EORSc@4:

; 2508 :     }
; 2509 : 
; 2510 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2511 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_EORSc@4:

; 2512 :   }
; 2513 : 
; 2514 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORSc@4

; 2515 :   {
; 2516 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2517 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORSc@4:

; 2518 :   }
; 2519 : 
; 2520 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORSc@4

; 2521 :   {
; 2522 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORSc@4:

; 2523 :   }
; 2524 : 
; 2525 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_EORSc@4

; 2526 :   {
; 2527 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_EORSc@4:

; 2528 :   }
; 2529 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_EORScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_EORScalarShiftRightImmediate

; 2532 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2533 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2534 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2535 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2536 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2537 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2538 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2539 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2540 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2541 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2542 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2543 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2544 : 
; 2545 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2546 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2547 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 2548 :   vars->codeCache->X86Emit_XORRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 2549 : 
; 2550 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_EORSc@5

; 2551 :   {
; 2552 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_EORSc@5:

; 2553 :   }
; 2554 : 
; 2555 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_EORSc@5

; 2556 :   {
; 2557 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_EORSc@5

; 2558 :     {
; 2559 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_EORSc@5:

; 2560 :     }
; 2561 :     
; 2562 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN4@Emit_EORSc@5

; 2563 :     {
; 2564 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_EORSc@5:

; 2565 :     }
; 2566 : 
; 2567 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2568 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_EORSc@5:

; 2569 :   }
; 2570 : 
; 2571 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN3@Emit_EORSc@5

; 2572 :   {
; 2573 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2574 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_EORSc@5:

; 2575 :   }
; 2576 : 
; 2577 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_EORSc@5

; 2578 :   {
; 2579 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_EORSc@5:

; 2580 :   }
; 2581 : 
; 2582 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN8@Emit_EORSc@5

; 2583 :   {
; 2584 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_EORSc@5:

; 2585 :   }
; 2586 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_EORScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDImmediate
EXTRN	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ADDIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDImmediate

; 2589 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2590 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2591 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 2592 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2593 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2594 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2595 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2596 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2597 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2598 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2599 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2600 : 
; 2601 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2602 :   vars->codeCache->X86Emit_ADDIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 2603 : 
; 2604 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_ADDIm

; 2605 :   {
; 2606 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDIm:

; 2607 :   }
; 2608 : 
; 2609 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_ADDIm

; 2610 :   {
; 2611 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDIm

; 2612 :     {
; 2613 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDIm:

; 2614 :     }
; 2615 : 
; 2616 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDIm

; 2617 :     {
; 2618 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDIm:

; 2619 :     }
; 2620 :     
; 2621 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDIm

; 2622 :     {
; 2623 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDIm:

; 2624 :     }
; 2625 : 
; 2626 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDIm

; 2627 :     {
; 2628 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDIm:

; 2629 :     }
; 2630 :     
; 2631 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2632 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDIm:

; 2633 :   }
; 2634 : 
; 2635 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDIm

; 2636 :   {
; 2637 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2638 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDIm:

; 2639 :   }
; 2640 : 
; 2641 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDIm

; 2642 :   {
; 2643 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2644 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDIm:

; 2645 :   }
; 2646 : 
; 2647 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDIm

; 2648 :   {
; 2649 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2650 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDIm:

; 2651 :   }
; 2652 : 
; 2653 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDIm

; 2654 :   {
; 2655 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDIm:

; 2656 :   }
; 2657 : 
; 2658 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDIm

; 2659 :   {
; 2660 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDIm:

; 2661 :   }
; 2662 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDImmediate
_TEXT	ENDS
PUBLIC	?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDScalar

; 2665 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2666 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2667 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2668 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2669 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2670 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2671 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2672 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2673 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2674 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2675 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2676 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2677 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2678 : 
; 2679 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2680 :   vars->codeCache->X86Emit_ADDMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDMR

; 2681 : 
; 2682 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_ADDSc

; 2683 :   {
; 2684 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDSc:

; 2685 :   }
; 2686 : 
; 2687 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_ADDSc

; 2688 :   {
; 2689 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDSc

; 2690 :     {
; 2691 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDSc:

; 2692 :     }
; 2693 : 
; 2694 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDSc

; 2695 :     {
; 2696 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDSc:

; 2697 :     }
; 2698 :     
; 2699 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDSc

; 2700 :     {
; 2701 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDSc:

; 2702 :     }
; 2703 : 
; 2704 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDSc

; 2705 :     {
; 2706 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDSc:

; 2707 :     }
; 2708 : 
; 2709 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2710 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDSc:

; 2711 :   }
; 2712 : 
; 2713 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDSc

; 2714 :   {
; 2715 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2716 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDSc:

; 2717 :   }
; 2718 : 
; 2719 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDSc

; 2720 :   {
; 2721 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2722 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDSc:

; 2723 :   }
; 2724 : 
; 2725 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDSc

; 2726 :   {
; 2727 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2728 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDSc:

; 2729 :   }
; 2730 : 
; 2731 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDSc

; 2732 :   {
; 2733 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDSc:

; 2734 :   }
; 2735 : 
; 2736 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDSc

; 2737 :   {
; 2738 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDSc:

; 2739 :   }
; 2740 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDScalar
_TEXT	ENDS
PUBLIC	?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDScalarShiftLeftImmediate

; 2743 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2744 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2745 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2746 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2747 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2748 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2749 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2750 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2751 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2752 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2753 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2754 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2755 : 
; 2756 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2757 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2758 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2759 :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2760 : 
; 2761 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_ADDSc@2

; 2762 :   {
; 2763 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDSc@2:

; 2764 :   }
; 2765 : 
; 2766 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_ADDSc@2

; 2767 :   {
; 2768 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDSc@2

; 2769 :     {
; 2770 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDSc@2:

; 2771 :     }
; 2772 : 
; 2773 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDSc@2

; 2774 :     {
; 2775 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDSc@2:

; 2776 :     }
; 2777 :     
; 2778 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDSc@2

; 2779 :     {
; 2780 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDSc@2:

; 2781 :     }
; 2782 : 
; 2783 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDSc@2

; 2784 :     {
; 2785 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDSc@2:

; 2786 :     }
; 2787 : 
; 2788 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2789 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDSc@2:

; 2790 :   }
; 2791 : 
; 2792 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDSc@2

; 2793 :   {
; 2794 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2795 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDSc@2:

; 2796 :   }
; 2797 : 
; 2798 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDSc@2

; 2799 :   {
; 2800 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2801 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDSc@2:

; 2802 :   }
; 2803 : 
; 2804 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDSc@2

; 2805 :   {
; 2806 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2807 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDSc@2:

; 2808 :   }
; 2809 : 
; 2810 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDSc@2

; 2811 :   {
; 2812 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDSc@2:

; 2813 :   }
; 2814 : 
; 2815 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDSc@2

; 2816 :   {
; 2817 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDSc@2:

; 2818 :   }
; 2819 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDScalarShiftRightImmediate

; 2822 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2823 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2824 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2825 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 2826 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2827 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 2828 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2829 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2830 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2831 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2832 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2833 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2834 : 
; 2835 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2836 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2837 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2838 :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2839 : 
; 2840 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_ADDSc@3

; 2841 :   {
; 2842 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDSc@3:

; 2843 :   }
; 2844 : 
; 2845 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_ADDSc@3

; 2846 :   {
; 2847 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDSc@3

; 2848 :     {
; 2849 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDSc@3:

; 2850 :     }
; 2851 : 
; 2852 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDSc@3

; 2853 :     {
; 2854 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDSc@3:

; 2855 :     }
; 2856 :     
; 2857 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDSc@3

; 2858 :     {
; 2859 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDSc@3:

; 2860 :     }
; 2861 : 
; 2862 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDSc@3

; 2863 :     {
; 2864 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDSc@3:

; 2865 :     }
; 2866 : 
; 2867 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2868 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDSc@3:

; 2869 :   }
; 2870 : 
; 2871 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDSc@3

; 2872 :   {
; 2873 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2874 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDSc@3:

; 2875 :   }
; 2876 : 
; 2877 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDSc@3

; 2878 :   {
; 2879 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2880 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDSc@3:

; 2881 :   }
; 2882 : 
; 2883 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDSc@3

; 2884 :   {
; 2885 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2886 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDSc@3:

; 2887 :   }
; 2888 : 
; 2889 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDSc@3

; 2890 :   {
; 2891 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDSc@3:

; 2892 :   }
; 2893 : 
; 2894 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDSc@3

; 2895 :   {
; 2896 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDSc@3:

; 2897 :   }
; 2898 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBImmediate
EXTRN	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SUBIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBImmediate

; 2901 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2902 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2903 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 2904 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2905 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2906 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2907 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2908 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2909 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2910 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2911 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2912 : 
; 2913 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2914 :   vars->codeCache->X86Emit_SUBIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 2915 : 
; 2916 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_SUBIm

; 2917 :   {
; 2918 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBIm:

; 2919 :   }
; 2920 : 
; 2921 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_SUBIm

; 2922 :   {
; 2923 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBIm

; 2924 :     {
; 2925 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBIm:

; 2926 :     }
; 2927 : 
; 2928 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBIm

; 2929 :     {
; 2930 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBIm:

; 2931 :     }
; 2932 :     
; 2933 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBIm

; 2934 :     {
; 2935 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBIm:

; 2936 :     }
; 2937 : 
; 2938 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBIm

; 2939 :     {
; 2940 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBIm:

; 2941 :     }
; 2942 :     
; 2943 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 2944 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBIm:

; 2945 :   }
; 2946 : 
; 2947 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBIm

; 2948 :   {
; 2949 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2950 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBIm:

; 2951 :   }
; 2952 : 
; 2953 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBIm

; 2954 :   {
; 2955 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2956 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBIm:

; 2957 :   }
; 2958 : 
; 2959 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBIm

; 2960 :   {
; 2961 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 2962 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBIm:

; 2963 :   }
; 2964 : 
; 2965 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBIm

; 2966 :   {
; 2967 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBIm:

; 2968 :   }
; 2969 : 
; 2970 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBIm

; 2971 :   {
; 2972 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBIm:

; 2973 :   }
; 2974 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBScalar

; 2977 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2978 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2979 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2980 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2981 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 2982 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 2983 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2984 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 2985 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 2986 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2987 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2988 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2989 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 2990 : 
; 2991 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2992 :   vars->codeCache->X86Emit_SUBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 2993 : 
; 2994 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_SUBSc

; 2995 :   {
; 2996 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBSc:

; 2997 :   }
; 2998 : 
; 2999 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_SUBSc

; 3000 :   {
; 3001 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBSc

; 3002 :     {
; 3003 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBSc:

; 3004 :     }
; 3005 : 
; 3006 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBSc

; 3007 :     {
; 3008 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBSc:

; 3009 :     }
; 3010 :     
; 3011 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBSc

; 3012 :     {
; 3013 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBSc:

; 3014 :     }
; 3015 : 
; 3016 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBSc

; 3017 :     {
; 3018 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBSc:

; 3019 :     }
; 3020 : 
; 3021 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3022 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBSc:

; 3023 :   }
; 3024 : 
; 3025 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBSc

; 3026 :   {
; 3027 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3028 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBSc:

; 3029 :   }
; 3030 : 
; 3031 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBSc

; 3032 :   {
; 3033 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3034 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBSc:

; 3035 :   }
; 3036 : 
; 3037 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBSc

; 3038 :   {
; 3039 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3040 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBSc:

; 3041 :   }
; 3042 : 
; 3043 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBSc

; 3044 :   {
; 3045 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBSc:

; 3046 :   }
; 3047 : 
; 3048 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBSc

; 3049 :   {
; 3050 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBSc:

; 3051 :   }
; 3052 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBScalar
_TEXT	ENDS
PUBLIC	?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src1RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBImmediateReverse

; 3055 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3056 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3057 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3058 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3059 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3060 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3061 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3062 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3063 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3064 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3065 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3066 : 
; 3067 :   vars->codeCache->X86Emit_MOVIR(src2Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src2Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 3068 :   vars->codeCache->X86Emit_SUBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 3069 : 
; 3070 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_SUBIm@2

; 3071 :   {
; 3072 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBIm@2:

; 3073 :   }
; 3074 : 
; 3075 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_SUBIm@2

; 3076 :   {
; 3077 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBIm@2

; 3078 :     {
; 3079 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBIm@2:

; 3080 :     }
; 3081 : 
; 3082 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBIm@2

; 3083 :     {
; 3084 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBIm@2:

; 3085 :     }
; 3086 :     
; 3087 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBIm@2

; 3088 :     {
; 3089 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBIm@2:

; 3090 :     }
; 3091 : 
; 3092 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBIm@2

; 3093 :     {
; 3094 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBIm@2:

; 3095 :     }
; 3096 :     
; 3097 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3098 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBIm@2:

; 3099 :   }
; 3100 : 
; 3101 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBIm@2

; 3102 :   {
; 3103 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3104 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBIm@2:

; 3105 :   }
; 3106 : 
; 3107 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBIm@2

; 3108 :   {
; 3109 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3110 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBIm@2:

; 3111 :   }
; 3112 : 
; 3113 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBIm@2

; 3114 :   {
; 3115 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3116 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBIm@2:

; 3117 :   }
; 3118 : 
; 3119 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBIm@2

; 3120 :   {
; 3121 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBIm@2:

; 3122 :   }
; 3123 : 
; 3124 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBIm@2

; 3125 :   {
; 3126 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBIm@2:

; 3127 :   }
; 3128 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBImmediateReverse
_TEXT	ENDS
PUBLIC	?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBScalarShiftLeftImmediate

; 3131 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3132 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3133 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3134 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3135 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3136 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 3137 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3138 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3139 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3140 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3141 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3142 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3143 : 
; 3144 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3145 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3146 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3147 :   vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3148 : 
; 3149 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_SUBSc@2

; 3150 :   {
; 3151 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBSc@2:

; 3152 :   }
; 3153 : 
; 3154 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_SUBSc@2

; 3155 :   {
; 3156 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBSc@2

; 3157 :     {
; 3158 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBSc@2:

; 3159 :     }
; 3160 : 
; 3161 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBSc@2

; 3162 :     {
; 3163 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBSc@2:

; 3164 :     }
; 3165 :     
; 3166 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBSc@2

; 3167 :     {
; 3168 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBSc@2:

; 3169 :     }
; 3170 : 
; 3171 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBSc@2

; 3172 :     {
; 3173 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBSc@2:

; 3174 :     }
; 3175 : 
; 3176 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3177 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBSc@2:

; 3178 :   }
; 3179 : 
; 3180 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBSc@2

; 3181 :   {
; 3182 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3183 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBSc@2:

; 3184 :   }
; 3185 : 
; 3186 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBSc@2

; 3187 :   {
; 3188 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3189 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBSc@2:

; 3190 :   }
; 3191 : 
; 3192 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBSc@2

; 3193 :   {
; 3194 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3195 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBSc@2:

; 3196 :   }
; 3197 : 
; 3198 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBSc@2

; 3199 :   {
; 3200 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBSc@2:

; 3201 :   }
; 3202 : 
; 3203 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBSc@2

; 3204 :   {
; 3205 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBSc@2:

; 3206 :   }
; 3207 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBScalarShiftRightImmediate

; 3210 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3211 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3212 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3213 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3214 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3215 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 3216 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3217 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3218 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3219 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3220 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3221 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3222 : 
; 3223 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3224 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3225 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 3226 :   vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3227 : 
; 3228 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN11@Emit_SUBSc@3

; 3229 :   {
; 3230 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBSc@3:

; 3231 :   }
; 3232 : 
; 3233 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_SUBSc@3

; 3234 :   {
; 3235 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBSc@3

; 3236 :     {
; 3237 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBSc@3:

; 3238 :     }
; 3239 : 
; 3240 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBSc@3

; 3241 :     {
; 3242 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBSc@3:

; 3243 :     }
; 3244 :     
; 3245 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBSc@3

; 3246 :     {
; 3247 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBSc@3:

; 3248 :     }
; 3249 : 
; 3250 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBSc@3

; 3251 :     {
; 3252 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBSc@3:

; 3253 :     }
; 3254 : 
; 3255 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3256 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBSc@3:

; 3257 :   }
; 3258 : 
; 3259 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBSc@3

; 3260 :   {
; 3261 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3262 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBSc@3:

; 3263 :   }
; 3264 : 
; 3265 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBSc@3

; 3266 :   {
; 3267 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3268 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBSc@3:

; 3269 :   }
; 3270 : 
; 3271 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBSc@3

; 3272 :   {
; 3273 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3274 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBSc@3:

; 3275 :   }
; 3276 : 
; 3277 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBSc@3

; 3278 :   {
; 3279 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBSc@3:

; 3280 :   }
; 3281 : 
; 3282 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBSc@3

; 3283 :   {
; 3284 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBSc@3:

; 3285 :   }
; 3286 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPImmediate

; 3289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3290 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3291 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 3292 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3293 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3294 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3295 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3296 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3297 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3298 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3299 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3300 : 
; 3301 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3302 :   vars->codeCache->X86Emit_SUBIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src1Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 3303 : 
; 3304 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_CMPIm

; 3305 :   {
; 3306 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPIm

; 3307 :     {
; 3308 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPIm:

; 3309 :     }
; 3310 : 
; 3311 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPIm

; 3312 :     {
; 3313 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPIm:

; 3314 :     }
; 3315 :     
; 3316 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPIm

; 3317 :     {
; 3318 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPIm:

; 3319 :     }
; 3320 : 
; 3321 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPIm

; 3322 :     {
; 3323 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPIm:

; 3324 :     }
; 3325 :     
; 3326 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3327 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPIm:

; 3328 :   }
; 3329 : 
; 3330 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPIm

; 3331 :   {
; 3332 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3333 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPIm:

; 3334 :   }
; 3335 : 
; 3336 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPIm

; 3337 :   {
; 3338 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3339 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPIm:

; 3340 :   }
; 3341 : 
; 3342 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPIm

; 3343 :   {
; 3344 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3345 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPIm:

; 3346 :   }
; 3347 : 
; 3348 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPIm

; 3349 :   {
; 3350 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPIm:

; 3351 :   }
; 3352 : 
; 3353 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPIm

; 3354 :   {
; 3355 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPIm:

; 3356 :   }
; 3357 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPScalar

; 3360 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3361 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3362 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3363 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3364 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3365 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3366 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3367 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3368 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3369 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3370 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3371 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3372 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3373 : 
; 3374 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3375 :   vars->codeCache->X86Emit_SUBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 3376 : 
; 3377 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_CMPSc

; 3378 :   {
; 3379 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPSc

; 3380 :     {
; 3381 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPSc:

; 3382 :     }
; 3383 : 
; 3384 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPSc

; 3385 :     {
; 3386 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPSc:

; 3387 :     }
; 3388 :     
; 3389 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPSc

; 3390 :     {
; 3391 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPSc:

; 3392 :     }
; 3393 : 
; 3394 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPSc

; 3395 :     {
; 3396 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPSc:

; 3397 :     }
; 3398 : 
; 3399 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3400 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPSc:

; 3401 :   }
; 3402 : 
; 3403 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPSc

; 3404 :   {
; 3405 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3406 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPSc:

; 3407 :   }
; 3408 : 
; 3409 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPSc

; 3410 :   {
; 3411 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3412 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPSc:

; 3413 :   }
; 3414 : 
; 3415 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPSc

; 3416 :   {
; 3417 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3418 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPSc:

; 3419 :   }
; 3420 : 
; 3421 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPSc

; 3422 :   {
; 3423 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPSc:

; 3424 :   }
; 3425 : 
; 3426 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPSc

; 3427 :   {
; 3428 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPSc:

; 3429 :   }
; 3430 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPScalar
_TEXT	ENDS
PUBLIC	?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src1RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPImmediateReverse

; 3433 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3434 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3435 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3436 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3437 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3438 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3439 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3440 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3441 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3442 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3443 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3444 : 
; 3445 :   vars->codeCache->X86Emit_MOVIR(src2Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src2Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 3446 :   vars->codeCache->X86Emit_SUBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 3447 : 
; 3448 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_CMPIm@2

; 3449 :   {
; 3450 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPIm@2

; 3451 :     {
; 3452 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPIm@2:

; 3453 :     }
; 3454 : 
; 3455 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPIm@2

; 3456 :     {
; 3457 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPIm@2:

; 3458 :     }
; 3459 :     
; 3460 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPIm@2

; 3461 :     {
; 3462 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPIm@2:

; 3463 :     }
; 3464 : 
; 3465 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPIm@2

; 3466 :     {
; 3467 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPIm@2:

; 3468 :     }
; 3469 :     
; 3470 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3471 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPIm@2:

; 3472 :   }
; 3473 : 
; 3474 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPIm@2

; 3475 :   {
; 3476 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3477 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPIm@2:

; 3478 :   }
; 3479 : 
; 3480 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPIm@2

; 3481 :   {
; 3482 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3483 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPIm@2:

; 3484 :   }
; 3485 : 
; 3486 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPIm@2

; 3487 :   {
; 3488 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3489 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPIm@2:

; 3490 :   }
; 3491 : 
; 3492 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPIm@2

; 3493 :   {
; 3494 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPIm@2:

; 3495 :   }
; 3496 : 
; 3497 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPIm@2

; 3498 :   {
; 3499 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPIm@2:

; 3500 :   }
; 3501 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPImmediateReverse
_TEXT	ENDS
PUBLIC	?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPScalarShiftLeftImmediate

; 3504 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3505 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3506 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3507 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3508 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3509 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 3510 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3511 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3512 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3513 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3514 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3515 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3516 : 
; 3517 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3518 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3519 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3520 :   vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3521 : 
; 3522 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_CMPSc@2

; 3523 :   {
; 3524 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPSc@2

; 3525 :     {
; 3526 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPSc@2:

; 3527 :     }
; 3528 : 
; 3529 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPSc@2

; 3530 :     {
; 3531 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPSc@2:

; 3532 :     }
; 3533 :     
; 3534 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPSc@2

; 3535 :     {
; 3536 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPSc@2:

; 3537 :     }
; 3538 : 
; 3539 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPSc@2

; 3540 :     {
; 3541 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPSc@2:

; 3542 :     }
; 3543 : 
; 3544 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3545 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPSc@2:

; 3546 :   }
; 3547 : 
; 3548 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPSc@2

; 3549 :   {
; 3550 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3551 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPSc@2:

; 3552 :   }
; 3553 : 
; 3554 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPSc@2

; 3555 :   {
; 3556 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3557 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPSc@2:

; 3558 :   }
; 3559 : 
; 3560 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPSc@2

; 3561 :   {
; 3562 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3563 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPSc@2:

; 3564 :   }
; 3565 : 
; 3566 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPSc@2

; 3567 :   {
; 3568 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPSc@2:

; 3569 :   }
; 3570 : 
; 3571 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPSc@2

; 3572 :   {
; 3573 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPSc@2:

; 3574 :   }
; 3575 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPScalarShiftRightImmediate

; 3578 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3579 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3580 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3581 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 3582 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3583 :   x86BaseReg destRegReadBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 3584 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3585 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3586 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3587 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3588 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3589 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3590 : 
; 3591 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3592 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3593 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 3594 :   vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3595 : 
; 3596 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_CMPSc@3

; 3597 :   {
; 3598 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPSc@3

; 3599 :     {
; 3600 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPSc@3:

; 3601 :     }
; 3602 : 
; 3603 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPSc@3

; 3604 :     {
; 3605 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPSc@3:

; 3606 :     }
; 3607 :     
; 3608 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPSc@3

; 3609 :     {
; 3610 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPSc@3:

; 3611 :     }
; 3612 : 
; 3613 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPSc@3

; 3614 :     {
; 3615 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPSc@3:

; 3616 :     }
; 3617 : 
; 3618 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 3619 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN10@Emit_CMPSc@3:

; 3620 :   }
; 3621 : 
; 3622 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPSc@3

; 3623 :   {
; 3624 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3625 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPSc@3:

; 3626 :   }
; 3627 : 
; 3628 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPSc@3

; 3629 :   {
; 3630 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3631 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPSc@3:

; 3632 :   }
; 3633 : 
; 3634 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPSc@3

; 3635 :   {
; 3636 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3637 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPSc@3:

; 3638 :   }
; 3639 : 
; 3640 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPSc@3

; 3641 :   {
; 3642 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPSc@3:

; 3643 :   }
; 3644 : 
; 3645 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPSc@3

; 3646 :   {
; 3647 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPSc@3:

; 3648 :   }
; 3649 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ROT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -56					; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_rol$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ROT

; 3652 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3653 :   uint32 l_rol = 0;

	mov	DWORD PTR _l_rol$[ebp], 0

; 3654 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 3655 : 
; 3656 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3657 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3658 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3659 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3660 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3661 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3662 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3663 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3664 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3665 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3666 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3667 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3668 : 
; 3669 :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 3670 : 
; 3671 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3672 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3673 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 3674 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 3675 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3676 : 
; 3677 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 3678 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 3679 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_rol);

	mov	eax, DWORD PTR _l_rol$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 3680 : 
; 3681 :   vars->codeCache->X86Emit_RORRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR

; 3682 : 
; 3683 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	edx, DWORD PTR _l_calc_flags$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 3684 : 
; 3685 :   vars->patchMgr->SetLabelPointer(l_rol,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_rol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 3686 : 
; 3687 :   vars->codeCache->X86Emit_ROLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR

; 3688 : 
; 3689 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 3690 :   
; 3691 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN7@Emit_ROT

; 3692 :   {
; 3693 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ROT:

; 3694 :   }
; 3695 : 
; 3696 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN6@Emit_ROT

; 3697 :   {
; 3698 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 3699 : 
; 3700 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ROT

; 3701 :     {
; 3702 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ROT:

; 3703 :     }
; 3704 : 
; 3705 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN4@Emit_ROT

; 3706 :     {
; 3707 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ROT:

; 3708 :     }
; 3709 : 
; 3710 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3711 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ROT:

; 3712 :   }
; 3713 : 
; 3714 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN3@Emit_ROT

; 3715 :   {
; 3716 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3717 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ROT:

; 3718 :   }
; 3719 : 
; 3720 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ROT

; 3721 :   {
; 3722 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ROT:

; 3723 :   }
; 3724 : 
; 3725 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	je	SHORT $LN1@Emit_ROT

; 3726 :   {
; 3727 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_ROT:

; 3728 :   }
; 3729 : 
; 3730 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 3731 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ROT
_TEXT	ENDS
PUBLIC	?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ROL
EXTRN	?X86Emit_ROLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_ROLIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ROL

; 3734 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3735 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3736 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 3737 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3738 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3739 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3740 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3741 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3742 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3743 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3744 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3745 : 
; 3746 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3747 :   vars->codeCache->X86Emit_ROLIR(x86Reg_ebx, src1Imm);

	mov	dl, BYTE PTR _src1Imm$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ROLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_ROLIR

; 3748 : 
; 3749 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ROL

; 3750 :   {
; 3751 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ROL:

; 3752 :   }
; 3753 : 
; 3754 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ROL

; 3755 :   {
; 3756 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 3757 : 
; 3758 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ROL

; 3759 :     {
; 3760 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ROL:

; 3761 :     }
; 3762 : 
; 3763 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ROL

; 3764 :     {
; 3765 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ROL:

; 3766 :     }
; 3767 : 
; 3768 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3769 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ROL:

; 3770 :   }
; 3771 : 
; 3772 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ROL

; 3773 :   {
; 3774 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3775 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ROL:

; 3776 :   }
; 3777 : 
; 3778 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ROL

; 3779 :   {
; 3780 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ROL:

; 3781 :   }
; 3782 : 
; 3783 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN8@Emit_ROL

; 3784 :   {
; 3785 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ROL:

; 3786 :   }
; 3787 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ROL
_TEXT	ENDS
PUBLIC	?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ROR
EXTRN	?X86Emit_RORIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_RORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ROR

; 3790 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3791 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3792 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 3793 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3794 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3795 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3796 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3797 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3798 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3799 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3800 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3801 : 
; 3802 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3803 :   vars->codeCache->X86Emit_RORIR(x86Reg_ebx, src1Imm);

	mov	dl, BYTE PTR _src1Imm$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RORIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RORIR

; 3804 : 
; 3805 :   if(vars->scalarRegOutDep)

	mov	ecx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@Emit_ROR

; 3806 :   {
; 3807 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_ROR:

; 3808 :   }
; 3809 : 
; 3810 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 425984				; 00068000H
	je	SHORT $LN6@Emit_ROR

; 3811 :   {
; 3812 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 3813 : 
; 3814 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ROR

; 3815 :     {
; 3816 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN5@Emit_ROR:

; 3817 :     }
; 3818 : 
; 3819 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN4@Emit_ROR

; 3820 :     {
; 3821 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN4@Emit_ROR:

; 3822 :     }
; 3823 : 
; 3824 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 425984				; 00068000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3825 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN6@Emit_ROR:

; 3826 :   }
; 3827 : 
; 3828 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN3@Emit_ROR

; 3829 :   {
; 3830 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3831 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ROR:

; 3832 :   }
; 3833 : 
; 3834 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ROR

; 3835 :   {
; 3836 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ROR:

; 3837 :   }
; 3838 : 
; 3839 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 425984				; 00068000H
	je	SHORT $LN8@Emit_ROR

; 3840 :   {
; 3841 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN8@Emit_ROR:

; 3842 :   }
; 3843 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ROR
_TEXT	ENDS
PUBLIC	?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z	; Emit_AS
EXTRN	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SARRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -56					; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_asl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_AS

; 3846 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3847 :   uint32 l_asl = 0;

	mov	DWORD PTR _l_asl$[ebp], 0

; 3848 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 3849 : 
; 3850 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3851 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 3852 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3853 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 3854 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3855 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3856 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3857 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3858 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 3859 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3860 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3861 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3862 : 
; 3863 :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 3864 : 
; 3865 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3866 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3867 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 3868 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 3869 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 3870 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_ebx);

	push	19					; 00000013H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 3871 : 
; 3872 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 3873 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 3874 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_asl);

	mov	ecx, DWORD PTR _l_asl$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 3875 : 
; 3876 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 3877 : 
; 3878 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN10@Emit_AS

; 3879 :   {
; 3880 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebp, 1);

	push	1
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3881 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ebp);

	push	21					; 00000015H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN10@Emit_AS:

; 3882 :   }
; 3883 : 
; 3884 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 3885 : 
; 3886 :   vars->patchMgr->SetLabelPointer(l_asl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_asl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 3887 : 
; 3888 :   vars->codeCache->X86Emit_XORRR(x86Reg_edx, x86Reg_edx);

	push	18					; 00000012H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 3889 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 3890 :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 3891 :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 3892 : 
; 3893 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN9@Emit_AS

; 3894 :   {
; 3895 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ebp, 30);

	push	30					; 0000001eH
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 3896 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ebp);

	push	21					; 00000015H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN9@Emit_AS:

; 3897 :   }
; 3898 : 
; 3899 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 3900 :   
; 3901 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN8@Emit_AS

; 3902 :   {
; 3903 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN8@Emit_AS:

; 3904 :   }
; 3905 : 
; 3906 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN7@Emit_AS

; 3907 :   {
; 3908 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 3909 : 
; 3910 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN6@Emit_AS

; 3911 :     {
; 3912 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN6@Emit_AS:

; 3913 :     }
; 3914 : 
; 3915 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN5@Emit_AS

; 3916 :     {
; 3917 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN5@Emit_AS:

; 3918 :     }
; 3919 : 
; 3920 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3921 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN7@Emit_AS:

; 3922 :   }
; 3923 : 
; 3924 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN4@Emit_AS

; 3925 :   {
; 3926 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3927 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_AS:

; 3928 :   }
; 3929 : 
; 3930 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN3@Emit_AS

; 3931 :   {
; 3932 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_AS:

; 3933 :   }
; 3934 : 
; 3935 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN2@Emit_AS

; 3936 :   {
; 3937 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_AS:

; 3938 :   }
; 3939 : 
; 3940 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN1@Emit_AS

; 3941 :   {
; 3942 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_AS:

; 3943 :   }
; 3944 : 
; 3945 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 3946 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_AS
_TEXT	ENDS
PUBLIC	?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ASL
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ASL

; 3949 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3950 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 3951 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 3952 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 3953 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 3954 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 3955 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 3956 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 3957 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 3958 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 3959 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 3960 : 
; 3961 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 3962 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 3963 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, src1Imm);

	mov	al, BYTE PTR _src1Imm$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3964 : 
; 3965 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN9@Emit_ASL

; 3966 :   {
; 3967 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN9@Emit_ASL:

; 3968 :   }
; 3969 : 
; 3970 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN8@Emit_ASL

; 3971 :   {
; 3972 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 3973 : 
; 3974 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN7@Emit_ASL

; 3975 :     {
; 3976 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN7@Emit_ASL:

; 3977 :     }
; 3978 : 
; 3979 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ASL

; 3980 :     {
; 3981 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ASL:

; 3982 :     }
; 3983 : 
; 3984 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN5@Emit_ASL

; 3985 :     {
; 3986 :       vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 30);

	push	30					; 0000001eH
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 3987 :       vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN5@Emit_ASL:

; 3988 :     }
; 3989 : 
; 3990 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 3991 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN8@Emit_ASL:

; 3992 :   }
; 3993 : 
; 3994 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN4@Emit_ASL

; 3995 :   {
; 3996 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 3997 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ASL:

; 3998 :   }
; 3999 : 
; 4000 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_ASL

; 4001 :   {
; 4002 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ASL:

; 4003 :   }
; 4004 : 
; 4005 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ASL

; 4006 :   {
; 4007 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ASL:

; 4008 :   }
; 4009 : 
; 4010 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN10@Emit_ASL

; 4011 :   {
; 4012 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN10@Emit_ASL:

; 4013 :   }
; 4014 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ASL
_TEXT	ENDS
PUBLIC	?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ASR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ASR

; 4017 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4018 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4019 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 4020 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4021 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4022 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4023 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4024 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4025 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4026 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4027 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4028 : 
; 4029 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4030 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4031 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, src1Imm);

	mov	al, BYTE PTR _src1Imm$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 4032 : 
; 4033 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN9@Emit_ASR

; 4034 :   {
; 4035 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN9@Emit_ASR:

; 4036 :   }
; 4037 : 
; 4038 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN8@Emit_ASR

; 4039 :   {
; 4040 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 4041 : 
; 4042 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN7@Emit_ASR

; 4043 :     {
; 4044 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN7@Emit_ASR:

; 4045 :     }
; 4046 : 
; 4047 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ASR

; 4048 :     {
; 4049 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ASR:

; 4050 :     }
; 4051 : 
; 4052 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN5@Emit_ASR

; 4053 :     {
; 4054 :       vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, 1);

	push	1
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4055 :       vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN5@Emit_ASR:

; 4056 :     }
; 4057 : 
; 4058 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4059 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN8@Emit_ASR:

; 4060 :   }
; 4061 : 
; 4062 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN4@Emit_ASR

; 4063 :   {
; 4064 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4065 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ASR:

; 4066 :   }
; 4067 : 
; 4068 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN3@Emit_ASR

; 4069 :   {
; 4070 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ASR:

; 4071 :   }
; 4072 : 
; 4073 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN2@Emit_ASR

; 4074 :   {
; 4075 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ASR:

; 4076 :   }
; 4077 : 
; 4078 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN10@Emit_ASR

; 4079 :   {
; 4080 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN10@Emit_ASR:

; 4081 :   }
; 4082 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ASR
_TEXT	ENDS
PUBLIC	?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z	; Emit_LS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -56					; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_ccRegWriteBaseReg$ = -40				; size = 4
_ccRegReadBaseReg$ = -36				; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg$ = -28				; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_src2RegIndex$ = -20					; size = 4
_src1RegIndex$ = -16					; size = 4
_destRegIndex$ = -12					; size = 4
_l_calc_flags$ = -8					; size = 4
_l_asl$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_LS

; 4085 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4086 :   uint32 l_asl = 0;

	mov	DWORD PTR _l_asl$[ebp], 0

; 4087 :   uint32 l_calc_flags = 1;

	mov	DWORD PTR _l_calc_flags$[ebp], 1

; 4088 : 
; 4089 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4090 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4091 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4092 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4093 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4094 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4095 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4096 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4097 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4098 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4099 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4100 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4101 : 
; 4102 :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 4103 : 
; 4104 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4105 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4106 :   vars->codeCache->X86Emit_MOVIR(64,x86Reg_edx);

	push	18					; 00000012H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 4107 :   vars->codeCache->X86Emit_ANDIR(0x3F, x86Reg_ecx);

	push	17					; 00000011H
	push	63					; 0000003fH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 4108 :   vars->codeCache->X86Emit_SUBRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 4109 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebp, x86Reg_ebx);

	push	19					; 00000013H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4110 : 
; 4111 :   vars->codeCache->X86Emit_TESTIR(0x20, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 4112 :   vars->codeCache->X86Emit_CMOVNZRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR

; 4113 :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NZ,l_asl);

	mov	ecx, DWORD PTR _l_asl$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 4114 : 
; 4115 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 4116 : 
; 4117 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN10@Emit_LS

; 4118 :   {
; 4119 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebp, 1);

	push	1
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4120 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ebp);

	push	21					; 00000015H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN10@Emit_LS:

; 4121 :   }
; 4122 : 
; 4123 :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_calc_flags);

	mov	ecx, DWORD PTR _l_calc_flags$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 4124 : 
; 4125 :   vars->patchMgr->SetLabelPointer(l_asl,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_asl$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 4126 : 
; 4127 :   vars->codeCache->X86Emit_XORRR(x86Reg_edx, x86Reg_edx);

	push	18					; 00000012H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 4128 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 4129 :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 4130 :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 4131 : 
; 4132 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN9@Emit_LS

; 4133 :   {
; 4134 :     vars->codeCache->X86Emit_SHRIR(x86Reg_ebp, 30);

	push	30					; 0000001eH
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 4135 :     vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ebp);

	push	21					; 00000015H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN9@Emit_LS:

; 4136 :   }
; 4137 : 
; 4138 :   vars->patchMgr->SetLabelPointer(l_calc_flags,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_calc_flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 4139 :   
; 4140 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN8@Emit_LS

; 4141 :   {
; 4142 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN8@Emit_LS:

; 4143 :   }
; 4144 : 
; 4145 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN7@Emit_LS

; 4146 :   {
; 4147 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 4148 : 
; 4149 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN6@Emit_LS

; 4150 :     {
; 4151 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN6@Emit_LS:

; 4152 :     }
; 4153 : 
; 4154 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN5@Emit_LS

; 4155 :     {
; 4156 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN5@Emit_LS:

; 4157 :     }
; 4158 : 
; 4159 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4160 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN7@Emit_LS:

; 4161 :   }
; 4162 : 
; 4163 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN4@Emit_LS

; 4164 :   {
; 4165 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4166 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_LS:

; 4167 :   }
; 4168 : 
; 4169 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN3@Emit_LS

; 4170 :   {
; 4171 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_LS:

; 4172 :   }
; 4173 : 
; 4174 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN2@Emit_LS

; 4175 :   {
; 4176 :     vars->codeCache->X86Emit_ORRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_LS:

; 4177 :   }
; 4178 : 
; 4179 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN1@Emit_LS

; 4180 :   {
; 4181 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_LS:

; 4182 :   }
; 4183 : 
; 4184 :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 4185 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_LS
_TEXT	ENDS
PUBLIC	?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_LSR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_LSR

; 4189 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4190 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4191 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 4192 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4193 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4194 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4195 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4196 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4197 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4198 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4199 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4200 : 
; 4201 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4202 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4203 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ebx, src1Imm);

	mov	al, BYTE PTR _src1Imm$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 4204 : 
; 4205 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN9@Emit_LSR

; 4206 :   {
; 4207 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN9@Emit_LSR:

; 4208 :   }
; 4209 : 
; 4210 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN8@Emit_LSR

; 4211 :   {
; 4212 :     vars->codeCache->X86Emit_TESTRR(x86Reg_ebx, x86Reg_ebx);

	push	19					; 00000013H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 4213 : 
; 4214 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN7@Emit_LSR

; 4215 :     {
; 4216 :       vars->codeCache->X86Emit_SETSR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN7@Emit_LSR:

; 4217 :     }
; 4218 : 
; 4219 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_LSR

; 4220 :     {
; 4221 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_LSR:

; 4222 :     }
; 4223 : 
; 4224 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN5@Emit_LSR

; 4225 :     {
; 4226 :       vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, 1);

	push	1
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4227 :       vars->codeCache->X86Emit_ANDIR(CC_ALU_CARRY, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
$LN5@Emit_LSR:

; 4228 :     }
; 4229 : 
; 4230 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4231 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN8@Emit_LSR:

; 4232 :   }
; 4233 : 
; 4234 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN4@Emit_LSR

; 4235 :   {
; 4236 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 3);

	push	3
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4237 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_LSR:

; 4238 :   }
; 4239 : 
; 4240 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN3@Emit_LSR

; 4241 :   {
; 4242 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_LSR:

; 4243 :   }
; 4244 : 
; 4245 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN2@Emit_LSR

; 4246 :   {
; 4247 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_LSR:

; 4248 :   }
; 4249 : 
; 4250 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN10@Emit_LSR

; 4251 :   {
; 4252 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN10@Emit_LSR:

; 4253 :   }
; 4254 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_LSR
_TEXT	ENDS
PUBLIC	?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDWCImmediate
EXTRN	?X86Emit_ADCIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ADCIR
EXTRN	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_RCRIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDWCImmediate

; 4257 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4258 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4259 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 4260 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4261 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4262 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4263 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4264 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4265 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4266 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4267 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4268 : 
; 4269 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4270 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4271 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4272 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4273 :   vars->codeCache->X86Emit_ADCIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _src1Imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADCIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADCIR

; 4274 : 
; 4275 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_ADDWC

; 4276 :   {
; 4277 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDWC:

; 4278 :   }
; 4279 : 
; 4280 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_ADDWC

; 4281 :   {
; 4282 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDWC

; 4283 :     {
; 4284 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDWC:

; 4285 :     }
; 4286 : 
; 4287 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDWC

; 4288 :     {
; 4289 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDWC:

; 4290 :     }
; 4291 :     
; 4292 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDWC

; 4293 :     {
; 4294 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDWC:

; 4295 :     }
; 4296 : 
; 4297 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDWC

; 4298 :     {
; 4299 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDWC:

; 4300 :     }
; 4301 :   
; 4302 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4303 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDWC:

; 4304 :   }
; 4305 : 
; 4306 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDWC

; 4307 :   {
; 4308 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4309 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDWC:

; 4310 :   }
; 4311 : 
; 4312 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDWC

; 4313 :   {
; 4314 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4315 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDWC:

; 4316 :   }
; 4317 : 
; 4318 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDWC

; 4319 :   {
; 4320 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4321 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDWC:

; 4322 :   }
; 4323 : 
; 4324 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDWC

; 4325 :   {
; 4326 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDWC:

; 4327 :   }
; 4328 : 
; 4329 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDWC

; 4330 :   {
; 4331 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDWC:

; 4332 :   }
; 4333 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDWCImmediate
_TEXT	ENDS
PUBLIC	?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDWCScalar
EXTRN	?X86Emit_ADCMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ADCMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDWCScalar

; 4336 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4337 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4338 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4339 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4340 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4341 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4342 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4343 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4344 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4345 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4346 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4347 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4348 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4349 : 
; 4350 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4351 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4352 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4353 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4354 :   vars->codeCache->X86Emit_ADCMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADCMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADCMR

; 4355 : 
; 4356 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN11@Emit_ADDWC@2

; 4357 :   {
; 4358 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDWC@2:

; 4359 :   }
; 4360 : 
; 4361 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_ADDWC@2

; 4362 :   {
; 4363 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDWC@2

; 4364 :     {
; 4365 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDWC@2:

; 4366 :     }
; 4367 : 
; 4368 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDWC@2

; 4369 :     {
; 4370 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDWC@2:

; 4371 :     }
; 4372 :     
; 4373 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDWC@2

; 4374 :     {
; 4375 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDWC@2:

; 4376 :     }
; 4377 : 
; 4378 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDWC@2

; 4379 :     {
; 4380 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDWC@2:

; 4381 :     }
; 4382 :   
; 4383 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4384 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDWC@2:

; 4385 :   }
; 4386 : 
; 4387 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDWC@2

; 4388 :   {
; 4389 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4390 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDWC@2:

; 4391 :   }
; 4392 : 
; 4393 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDWC@2

; 4394 :   {
; 4395 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4396 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDWC@2:

; 4397 :   }
; 4398 : 
; 4399 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDWC@2

; 4400 :   {
; 4401 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4402 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDWC@2:

; 4403 :   }
; 4404 : 
; 4405 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDWC@2

; 4406 :   {
; 4407 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDWC@2:

; 4408 :   }
; 4409 : 
; 4410 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDWC@2

; 4411 :   {
; 4412 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDWC@2:

; 4413 :   }
; 4414 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDWCScalar
_TEXT	ENDS
PUBLIC	?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDWCScalarShiftLeftImmediate
EXTRN	?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ADCRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDWCScalarShiftLeftImmediate

; 4417 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4418 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4419 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4420 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 4421 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4422 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 4423 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4424 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4425 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4426 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4427 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4428 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4429 : 
; 4430 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4431 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4432 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4433 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4434 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4435 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4436 :   vars->codeCache->X86Emit_ADCRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADCRR

; 4437 : 
; 4438 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_ADDWC@3

; 4439 :   {
; 4440 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDWC@3:

; 4441 :   }
; 4442 : 
; 4443 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_ADDWC@3

; 4444 :   {
; 4445 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDWC@3

; 4446 :     {
; 4447 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDWC@3:

; 4448 :     }
; 4449 : 
; 4450 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDWC@3

; 4451 :     {
; 4452 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDWC@3:

; 4453 :     }
; 4454 :     
; 4455 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDWC@3

; 4456 :     {
; 4457 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDWC@3:

; 4458 :     }
; 4459 : 
; 4460 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDWC@3

; 4461 :     {
; 4462 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDWC@3:

; 4463 :     }
; 4464 :   
; 4465 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4466 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDWC@3:

; 4467 :   }
; 4468 : 
; 4469 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDWC@3

; 4470 :   {
; 4471 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4472 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDWC@3:

; 4473 :   }
; 4474 : 
; 4475 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDWC@3

; 4476 :   {
; 4477 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4478 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDWC@3:

; 4479 :   }
; 4480 : 
; 4481 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDWC@3

; 4482 :   {
; 4483 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4484 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDWC@3:

; 4485 :   }
; 4486 : 
; 4487 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDWC@3

; 4488 :   {
; 4489 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDWC@3:

; 4490 :   }
; 4491 : 
; 4492 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDWC@3

; 4493 :   {
; 4494 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDWC@3:

; 4495 :   }
; 4496 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDWCScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDWCScalarShiftRightImmediate

; 4499 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4500 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4501 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4502 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 4503 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4504 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 4505 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4506 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4507 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4508 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4509 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4510 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4511 : 
; 4512 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4513 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4514 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4515 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 4516 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4517 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4518 :   vars->codeCache->X86Emit_ADCRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADCRR

; 4519 : 
; 4520 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_ADDWC@4

; 4521 :   {
; 4522 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_ADDWC@4:

; 4523 :   }
; 4524 : 
; 4525 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_ADDWC@4

; 4526 :   {
; 4527 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_ADDWC@4

; 4528 :     {
; 4529 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_ADDWC@4:

; 4530 :     }
; 4531 : 
; 4532 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_ADDWC@4

; 4533 :     {
; 4534 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_ADDWC@4:

; 4535 :     }
; 4536 :     
; 4537 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_ADDWC@4

; 4538 :     {
; 4539 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_ADDWC@4:

; 4540 :     }
; 4541 : 
; 4542 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_ADDWC@4

; 4543 :     {
; 4544 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_ADDWC@4:

; 4545 :     }
; 4546 :   
; 4547 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4548 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_ADDWC@4:

; 4549 :   }
; 4550 : 
; 4551 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_ADDWC@4

; 4552 :   {
; 4553 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4554 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_ADDWC@4:

; 4555 :   }
; 4556 : 
; 4557 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_ADDWC@4

; 4558 :   {
; 4559 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4560 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_ADDWC@4:

; 4561 :   }
; 4562 : 
; 4563 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_ADDWC@4

; 4564 :   {
; 4565 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4566 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_ADDWC@4:

; 4567 :   }
; 4568 : 
; 4569 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_ADDWC@4

; 4570 :   {
; 4571 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_ADDWC@4:

; 4572 :   }
; 4573 : 
; 4574 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_ADDWC@4

; 4575 :   {
; 4576 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_ADDWC@4:

; 4577 :   }
; 4578 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDWCScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBWCImmediate
EXTRN	?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SBBIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBWCImmediate

; 4581 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4582 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4583 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 4584 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4585 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4586 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4587 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4588 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4589 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4590 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4591 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4592 : 
; 4593 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4594 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4595 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4596 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4597 :   vars->codeCache->X86Emit_SBBIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _src1Imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SBBIR

; 4598 : 
; 4599 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_SUBWC

; 4600 :   {
; 4601 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBWC:

; 4602 :   }
; 4603 : 
; 4604 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_SUBWC

; 4605 :   {
; 4606 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBWC

; 4607 :     {
; 4608 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBWC:

; 4609 :     }
; 4610 : 
; 4611 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBWC

; 4612 :     {
; 4613 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBWC:

; 4614 :     }
; 4615 :     
; 4616 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBWC

; 4617 :     {
; 4618 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBWC:

; 4619 :     }
; 4620 : 
; 4621 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBWC

; 4622 :     {
; 4623 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBWC:

; 4624 :     }
; 4625 :   
; 4626 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4627 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBWC:

; 4628 :   }
; 4629 : 
; 4630 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBWC

; 4631 :   {
; 4632 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4633 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBWC:

; 4634 :   }
; 4635 : 
; 4636 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBWC

; 4637 :   {
; 4638 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4639 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBWC:

; 4640 :   }
; 4641 : 
; 4642 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBWC

; 4643 :   {
; 4644 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4645 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBWC:

; 4646 :   }
; 4647 : 
; 4648 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBWC

; 4649 :   {
; 4650 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBWC:

; 4651 :   }
; 4652 : 
; 4653 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBWC

; 4654 :   {
; 4655 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBWC:

; 4656 :   }
; 4657 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBWCImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBWCImmediateReverse
EXTRN	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_SBBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src1RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBWCImmediateReverse

; 4660 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4661 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4662 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4663 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 4664 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4665 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4666 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4667 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4668 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4669 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4670 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4671 : 
; 4672 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4673 :   vars->codeCache->X86Emit_MOVIR(src2Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src2Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 4674 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4675 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4676 :   vars->codeCache->X86Emit_SBBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBMR

; 4677 : 
; 4678 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_SUBWC@2

; 4679 :   {
; 4680 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBWC@2:

; 4681 :   }
; 4682 : 
; 4683 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_SUBWC@2

; 4684 :   {
; 4685 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBWC@2

; 4686 :     {
; 4687 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBWC@2:

; 4688 :     }
; 4689 : 
; 4690 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBWC@2

; 4691 :     {
; 4692 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBWC@2:

; 4693 :     }
; 4694 :     
; 4695 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBWC@2

; 4696 :     {
; 4697 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBWC@2:

; 4698 :     }
; 4699 : 
; 4700 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBWC@2

; 4701 :     {
; 4702 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBWC@2:

; 4703 :     }
; 4704 :   
; 4705 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4706 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBWC@2:

; 4707 :   }
; 4708 : 
; 4709 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBWC@2

; 4710 :   {
; 4711 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4712 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBWC@2:

; 4713 :   }
; 4714 : 
; 4715 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBWC@2

; 4716 :   {
; 4717 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4718 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBWC@2:

; 4719 :   }
; 4720 : 
; 4721 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBWC@2

; 4722 :   {
; 4723 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4724 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBWC@2:

; 4725 :   }
; 4726 : 
; 4727 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBWC@2

; 4728 :   {
; 4729 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBWC@2:

; 4730 :   }
; 4731 : 
; 4732 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBWC@2

; 4733 :   {
; 4734 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBWC@2:

; 4735 :   }
; 4736 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBWCImmediateReverse
_TEXT	ENDS
PUBLIC	?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBWCScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBWCScalar

; 4739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4740 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4741 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4742 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4743 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4744 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4745 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4746 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4747 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4748 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4749 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4750 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4751 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4752 : 
; 4753 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4754 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4755 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4756 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4757 :   vars->codeCache->X86Emit_SBBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBMR

; 4758 : 
; 4759 :   if(vars->scalarRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN11@Emit_SUBWC@3

; 4760 :   {
; 4761 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBWC@3:

; 4762 :   }
; 4763 : 
; 4764 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_SUBWC@3

; 4765 :   {
; 4766 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBWC@3

; 4767 :     {
; 4768 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBWC@3:

; 4769 :     }
; 4770 : 
; 4771 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBWC@3

; 4772 :     {
; 4773 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBWC@3:

; 4774 :     }
; 4775 :     
; 4776 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBWC@3

; 4777 :     {
; 4778 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBWC@3:

; 4779 :     }
; 4780 : 
; 4781 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBWC@3

; 4782 :     {
; 4783 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBWC@3:

; 4784 :     }
; 4785 :   
; 4786 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4787 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBWC@3:

; 4788 :   }
; 4789 : 
; 4790 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBWC@3

; 4791 :   {
; 4792 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4793 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBWC@3:

; 4794 :   }
; 4795 : 
; 4796 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBWC@3

; 4797 :   {
; 4798 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4799 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBWC@3:

; 4800 :   }
; 4801 : 
; 4802 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBWC@3

; 4803 :   {
; 4804 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4805 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBWC@3:

; 4806 :   }
; 4807 : 
; 4808 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBWC@3

; 4809 :   {
; 4810 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBWC@3:

; 4811 :   }
; 4812 : 
; 4813 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBWC@3

; 4814 :   {
; 4815 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBWC@3:

; 4816 :   }
; 4817 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBWCScalar
_TEXT	ENDS
PUBLIC	?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBWCScalarShiftLeftImmediate
EXTRN	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_SBBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBWCScalarShiftLeftImmediate

; 4820 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4821 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4822 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4823 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 4824 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4825 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 4826 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4827 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4828 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4829 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4830 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4831 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4832 : 
; 4833 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4834 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4835 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4836 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4837 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4838 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4839 :   vars->codeCache->X86Emit_SBBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SBBRR

; 4840 : 
; 4841 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_SUBWC@4

; 4842 :   {
; 4843 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBWC@4:

; 4844 :   }
; 4845 : 
; 4846 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_SUBWC@4

; 4847 :   {
; 4848 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBWC@4

; 4849 :     {
; 4850 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBWC@4:

; 4851 :     }
; 4852 : 
; 4853 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBWC@4

; 4854 :     {
; 4855 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBWC@4:

; 4856 :     }
; 4857 :     
; 4858 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBWC@4

; 4859 :     {
; 4860 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBWC@4:

; 4861 :     }
; 4862 : 
; 4863 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBWC@4

; 4864 :     {
; 4865 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBWC@4:

; 4866 :     }
; 4867 :   
; 4868 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4869 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBWC@4:

; 4870 :   }
; 4871 : 
; 4872 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBWC@4

; 4873 :   {
; 4874 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4875 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBWC@4:

; 4876 :   }
; 4877 : 
; 4878 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBWC@4

; 4879 :   {
; 4880 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4881 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBWC@4:

; 4882 :   }
; 4883 : 
; 4884 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBWC@4

; 4885 :   {
; 4886 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4887 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBWC@4:

; 4888 :   }
; 4889 : 
; 4890 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBWC@4

; 4891 :   {
; 4892 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBWC@4:

; 4893 :   }
; 4894 : 
; 4895 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBWC@4

; 4896 :   {
; 4897 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBWC@4:

; 4898 :   }
; 4899 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBWCScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBWCScalarShiftRightImmediate

; 4902 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4903 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4904 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 4905 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 4906 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 4907 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 4908 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4909 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4910 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4911 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 4912 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4913 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4914 : 
; 4915 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4916 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4917 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4918 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 4919 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4920 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 4921 :   vars->codeCache->X86Emit_SBBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SBBRR

; 4922 : 
; 4923 :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN11@Emit_SUBWC@5

; 4924 :   {
; 4925 :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN11@Emit_SUBWC@5:

; 4926 :   }
; 4927 : 
; 4928 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	$LN10@Emit_SUBWC@5

; 4929 :   {
; 4930 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN9@Emit_SUBWC@5

; 4931 :     {
; 4932 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_SUBWC@5:

; 4933 :     }
; 4934 : 
; 4935 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN8@Emit_SUBWC@5

; 4936 :     {
; 4937 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_SUBWC@5:

; 4938 :     }
; 4939 :     
; 4940 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN7@Emit_SUBWC@5

; 4941 :     {
; 4942 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_SUBWC@5:

; 4943 :     }
; 4944 : 
; 4945 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN6@Emit_SUBWC@5

; 4946 :     {
; 4947 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_SUBWC@5:

; 4948 :     }
; 4949 :   
; 4950 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	shr	eax, 15					; 0000000fH
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 4951 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_SUBWC@5:

; 4952 :   }
; 4953 : 
; 4954 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 262144				; 00040000H
	je	SHORT $LN5@Emit_SUBWC@5

; 4955 :   {
; 4956 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4957 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_SUBWC@5:

; 4958 :   }
; 4959 : 
; 4960 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN4@Emit_SUBWC@5

; 4961 :   {
; 4962 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4963 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_SUBWC@5:

; 4964 :   }
; 4965 : 
; 4966 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN3@Emit_SUBWC@5

; 4967 :   {
; 4968 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 4969 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_SUBWC@5:

; 4970 :   }
; 4971 : 
; 4972 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 32768				; 00008000H
	je	SHORT $LN2@Emit_SUBWC@5

; 4973 :   {
; 4974 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_SUBWC@5:

; 4975 :   }
; 4976 : 
; 4977 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	SHORT $LN12@Emit_SUBWC@5

; 4978 :   {
; 4979 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN12@Emit_SUBWC@5:

; 4980 :   }
; 4981 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBWCScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPWCImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1Imm$ = -8						; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPWCImmediate

; 4984 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4985 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 4986 :   uint32 src1Imm = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1Imm$[ebp], eax

; 4987 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 4988 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 4989 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 4990 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 4991 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 4992 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 4993 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 4994 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 4995 : 
; 4996 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4997 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 4998 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 4999 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 5000 :   vars->codeCache->X86Emit_SBBIR(src1Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _src1Imm$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SBBIR

; 5001 : 
; 5002 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_CMPWC

; 5003 :   {
; 5004 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPWC

; 5005 :     {
; 5006 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPWC:

; 5007 :     }
; 5008 : 
; 5009 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPWC

; 5010 :     {
; 5011 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPWC:

; 5012 :     }
; 5013 :     
; 5014 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPWC

; 5015 :     {
; 5016 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPWC:

; 5017 :     }
; 5018 : 
; 5019 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPWC

; 5020 :     {
; 5021 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPWC:

; 5022 :     }
; 5023 :   
; 5024 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 5025 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPWC:

; 5026 :   }
; 5027 : 
; 5028 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPWC

; 5029 :   {
; 5030 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5031 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPWC:

; 5032 :   }
; 5033 : 
; 5034 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPWC

; 5035 :   {
; 5036 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5037 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPWC:

; 5038 :   }
; 5039 : 
; 5040 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPWC

; 5041 :   {
; 5042 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5043 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPWC:

; 5044 :   }
; 5045 : 
; 5046 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPWC

; 5047 :   {
; 5048 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPWC:

; 5049 :   }
; 5050 : 
; 5051 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPWC

; 5052 :   {
; 5053 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPWC:

; 5054 :   }
; 5055 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPWCImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPWCImmediateReverse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -40					; size = 4
_destRegDisp$ = -36					; size = 4
_src1RegDisp$ = -32					; size = 4
_ccRegWriteBaseReg$ = -28				; size = 4
_ccRegReadBaseReg$ = -24				; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPWCImmediateReverse

; 5058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5059 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 5060 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 5061 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 5062 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 5063 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 5064 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 5065 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 5066 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 5067 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 5068 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 5069 : 
; 5070 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5071 :   vars->codeCache->X86Emit_MOVIR(src2Imm, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _src2Imm$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 5072 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 5073 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 5074 :   vars->codeCache->X86Emit_SBBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBMR

; 5075 : 
; 5076 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_CMPWC@2

; 5077 :   {
; 5078 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPWC@2

; 5079 :     {
; 5080 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPWC@2:

; 5081 :     }
; 5082 : 
; 5083 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPWC@2

; 5084 :     {
; 5085 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPWC@2:

; 5086 :     }
; 5087 :     
; 5088 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPWC@2

; 5089 :     {
; 5090 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPWC@2:

; 5091 :     }
; 5092 : 
; 5093 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPWC@2

; 5094 :     {
; 5095 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPWC@2:

; 5096 :     }
; 5097 :   
; 5098 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 5099 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPWC@2:

; 5100 :   }
; 5101 : 
; 5102 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPWC@2

; 5103 :   {
; 5104 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5105 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPWC@2:

; 5106 :   }
; 5107 : 
; 5108 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPWC@2

; 5109 :   {
; 5110 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5111 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPWC@2:

; 5112 :   }
; 5113 : 
; 5114 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPWC@2

; 5115 :   {
; 5116 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5117 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPWC@2:

; 5118 :   }
; 5119 : 
; 5120 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPWC@2

; 5121 :   {
; 5122 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPWC@2:

; 5123 :   }
; 5124 : 
; 5125 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPWC@2

; 5126 :   {
; 5127 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPWC@2:

; 5128 :   }
; 5129 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPWCImmediateReverse
_TEXT	ENDS
PUBLIC	?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPWCScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -48					; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPWCScalar

; 5132 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5133 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 5134 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 5135 :   uint32 src2RegIndex = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 5136 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 5137 :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 5138 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 5139 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 5140 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 5141 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 5142 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 5143 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 5144 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 5145 : 
; 5146 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5147 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5148 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 5149 :   vars->codeCache->X86Emit_RCRIR(x86Reg_ecx, 2);

	push	2
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 5150 :   vars->codeCache->X86Emit_SBBMR(x86Reg_ebx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBMR

; 5151 : 
; 5152 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	$LN10@Emit_CMPWC@3

; 5153 :   {
; 5154 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPWC@3

; 5155 :     {
; 5156 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPWC@3:

; 5157 :     }
; 5158 : 
; 5159 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPWC@3

; 5160 :     {
; 5161 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPWC@3:

; 5162 :     }
; 5163 :     
; 5164 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPWC@3

; 5165 :     {
; 5166 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPWC@3:

; 5167 :     }
; 5168 : 
; 5169 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPWC@3

; 5170 :     {
; 5171 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPWC@3:

; 5172 :     }
; 5173 :   
; 5174 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 5175 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPWC@3:

; 5176 :   }
; 5177 : 
; 5178 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPWC@3

; 5179 :   {
; 5180 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5181 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPWC@3:

; 5182 :   }
; 5183 : 
; 5184 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPWC@3

; 5185 :   {
; 5186 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5187 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPWC@3:

; 5188 :   }
; 5189 : 
; 5190 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPWC@3

; 5191 :   {
; 5192 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5193 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPWC@3:

; 5194 :   }
; 5195 : 
; 5196 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPWC@3

; 5197 :   {
; 5198 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPWC@3:

; 5199 :   }
; 5200 : 
; 5201 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPWC@3

; 5202 :   {
; 5203 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	eax, DWORD PTR _ccRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPWC@3:

; 5204 :   }
; 5205 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPWCScalar
_TEXT	ENDS
PUBLIC	?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPWCScalarShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPWCScalarShiftLeftImmediate

; 5208 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5209 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 5210 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 5211 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 5212 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 5213 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 5214 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 5215 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 5216 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 5217 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 5218 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 5219 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 5220 : 
; 5221 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5222 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5223 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5224 :   vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5225 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 5226 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 5227 :   vars->codeCache->X86Emit_SBBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SBBRR

; 5228 : 
; 5229 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_CMPWC@4

; 5230 :   {
; 5231 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPWC@4

; 5232 :     {
; 5233 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPWC@4:

; 5234 :     }
; 5235 : 
; 5236 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPWC@4

; 5237 :     {
; 5238 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPWC@4:

; 5239 :     }
; 5240 :     
; 5241 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPWC@4

; 5242 :     {
; 5243 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPWC@4:

; 5244 :     }
; 5245 : 
; 5246 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPWC@4

; 5247 :     {
; 5248 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPWC@4:

; 5249 :     }
; 5250 :   
; 5251 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 5252 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPWC@4:

; 5253 :   }
; 5254 : 
; 5255 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPWC@4

; 5256 :   {
; 5257 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5258 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPWC@4:

; 5259 :   }
; 5260 : 
; 5261 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPWC@4

; 5262 :   {
; 5263 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5264 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPWC@4:

; 5265 :   }
; 5266 : 
; 5267 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPWC@4

; 5268 :   {
; 5269 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5270 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPWC@4:

; 5271 :   }
; 5272 : 
; 5273 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPWC@4

; 5274 :   {
; 5275 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPWC@4:

; 5276 :   }
; 5277 : 
; 5278 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPWC@4

; 5279 :   {
; 5280 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPWC@4:

; 5281 :   }
; 5282 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPWCScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_CMPWCScalarShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccRegDisp$ = -44					; size = 4
_destRegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccRegWriteBaseReg$ = -32				; size = 4
_ccRegReadBaseReg$ = -28				; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_destRegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2Imm$ = -12						; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_CMPWCScalarShiftRightImmediate

; 5285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5286 :   uint32 destRegIndex = nuance.fields[FIELD_ALU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 5287 :   uint32 src1RegIndex = nuance.fields[FIELD_ALU_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 5288 :   uint32 src2Imm = nuance.fields[FIELD_ALU_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2Imm$[ebp], edx

; 5289 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 5290 :   x86BaseReg destRegReadBaseReg = GetScalarRegReadBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 5291 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 5292 :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 5293 :   x86BaseReg ccRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegWriteBaseReg$[ebp], eax

; 5294 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 5295 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 5296 :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 5297 : 
; 5298 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, ccRegReadBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5299 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, destRegReadBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5300 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 5301 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, src2Imm);

	mov	cl, BYTE PTR _src2Imm$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 5302 :   vars->codeCache->X86Emit_MOVRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 5303 :   vars->codeCache->X86Emit_RCRIR(x86Reg_edx, 2);

	push	2
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR

; 5304 :   vars->codeCache->X86Emit_SBBRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SBBRR

; 5305 : 
; 5306 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 491520				; 00078000H
	je	$LN10@Emit_CMPWC@5

; 5307 :   {
; 5308 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN9@Emit_CMPWC@5

; 5309 :     {
; 5310 :       vars->codeCache->X86Emit_SETSR(x86Reg_ch);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
$LN9@Emit_CMPWC@5:

; 5311 :     }
; 5312 : 
; 5313 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 131072				; 00020000H
	je	SHORT $LN8@Emit_CMPWC@5

; 5314 :     {
; 5315 :       vars->codeCache->X86Emit_SETOR(x86Reg_cl);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
$LN8@Emit_CMPWC@5:

; 5316 :     }
; 5317 :     
; 5318 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 65536				; 00010000H
	je	SHORT $LN7@Emit_CMPWC@5

; 5319 :     {
; 5320 :       vars->codeCache->X86Emit_SETBR(x86Reg_dh);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
$LN7@Emit_CMPWC@5:

; 5321 :     }
; 5322 : 
; 5323 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN6@Emit_CMPWC@5

; 5324 :     {
; 5325 :       vars->codeCache->X86Emit_SETZR(x86Reg_dl);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
$LN6@Emit_CMPWC@5:

; 5326 :     }
; 5327 :   
; 5328 :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)), x86MemPtr_dword, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 491520				; 00078000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 5329 :     vars->codeCache->X86Emit_XORRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
$LN10@Emit_CMPWC@5:

; 5330 :   }
; 5331 : 
; 5332 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_N)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 262144				; 00040000H
	je	SHORT $LN5@Emit_CMPWC@5

; 5333 :   {
; 5334 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ch, 3);

	push	3
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5335 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_ch);

	push	5
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN5@Emit_CMPWC@5:

; 5336 :   }
; 5337 : 
; 5338 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_V)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 131072				; 00020000H
	je	SHORT $LN4@Emit_CMPWC@5

; 5339 :   {
; 5340 :     vars->codeCache->X86Emit_SHLIR(x86Reg_cl, 2);

	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5341 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_cl);

	push	1
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN4@Emit_CMPWC@5:

; 5342 :   }
; 5343 : 
; 5344 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 65536				; 00010000H
	je	SHORT $LN3@Emit_CMPWC@5

; 5345 :   {
; 5346 :     vars->codeCache->X86Emit_SHLIR(x86Reg_dh, 1);

	push	1
	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 5347 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dh);

	push	6
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN3@Emit_CMPWC@5:

; 5348 :   }
; 5349 : 
; 5350 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_Z)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 32768				; 00008000H
	je	SHORT $LN2@Emit_CMPWC@5

; 5351 :   {
; 5352 :     vars->codeCache->X86Emit_ORRR(x86Reg_al, x86Reg_dl);

	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
$LN2@Emit_CMPWC@5:

; 5353 :   }
; 5354 : 
; 5355 :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_NVCZ)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 491520				; 00078000H
	je	SHORT $LN11@Emit_CMPWC@5

; 5356 :   {
; 5357 :     vars->codeCache->X86Emit_ORRM(x86Reg_eax, ccRegWriteBaseReg, x86IndexReg_none, x86Scale_1, ccRegDisp);

	mov	ecx, DWORD PTR _ccRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN11@Emit_CMPWC@5:

; 5358 :   }
; 5359 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_CMPWCScalarShiftRightImmediate
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitMUL.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_shiftTable DD	010H
	DD	08H
	DD	00H
	DD	02H
CONST	ENDS
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
PUBLIC	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
PUBLIC	?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDM
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
EXTRN	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ADDMR
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitmul.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_src1RegDisp$ = -28					; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_ADDM

; 13   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 14   :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 15   :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 16   :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 17   :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 18   :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 19   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 20   :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 21   :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 22   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 23   : 
; 24   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@Emit_ADDM

; 25   :   {
; 26   :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 27   :     vars->codeCache->X86Emit_ADDMR(x86Reg_eax, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDMR

; 28   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_ADDM:

; 29   :   }
; 30   : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_ADDM
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegReadBaseReg, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if(vars->scalarRegDep & SCALAR_REG_DEPENDENCY_MASK(regIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _regIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+28]
	je	SHORT $LN2@GetScalarR

; 37   :   {
; 38   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN3@GetScalarR

; 39   :   }
; 40   :   else

	jmp	SHORT $LN3@GetScalarR
$LN2@GetScalarR:

; 41   :   {
; 42   :     return x86BaseReg_esi;

	mov	eax, 6
$LN3@GetScalarR:

; 43   :   }
; 44   : }

	pop	ebp
	ret	0
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegWriteBaseReg, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   :   return x86BaseReg_esi;

	mov	eax, 6

; 49   : }

	pop	ebp
	ret	0
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDMImmediate
EXTRN	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ADDIR
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmul.cpp
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_src2RegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src2RegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDMImmediate

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 33   :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 34   :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 35   :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 36   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 37   :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 38   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 39   : 
; 40   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@Emit_ADDMI

; 41   :   {
; 42   :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 43   :     vars->codeCache->X86Emit_ADDIR(nuance.fields[FIELD_MUL_SRC1],x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 44   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_ADDMI:

; 45   :   }
; 46   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDMImmediate
_TEXT	ENDS
PUBLIC	?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBM
EXTRN	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_SUBMR
EXTRN	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_src1RegDisp$ = -28					; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_SUBM

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 50   :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 51   :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 52   :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 53   :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 54   :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 55   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 56   :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 57   :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 58   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 59   : 
; 60   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN4@Emit_SUBM

; 61   :   {
; 62   :     if(src1RegIndex == src2RegIndex)

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	cmp	ecx, DWORD PTR _src2RegIndex$[ebp]
	jne	SHORT $LN2@Emit_SUBM

; 63   :     {
; 64   :       vars->codeCache->X86Emit_MOVIM(0, x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	2
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 65   :     }
; 66   :     else

	jmp	SHORT $LN4@Emit_SUBM
$LN2@Emit_SUBM:

; 67   :     {
; 68   :       vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 69   :       vars->codeCache->X86Emit_SUBMR(x86Reg_eax, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 70   :       vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN4@Emit_SUBM:

; 71   :     }
; 72   :   }
; 73   : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_SUBM
_TEXT	ENDS
PUBLIC	?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SUBMImmediateReverse
EXTRN	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_MOVIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -24					; size = 4
_src2RegDisp$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src2RegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SUBMImmediateReverse

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 77   :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 78   :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 79   :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 80   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 81   :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 82   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 83   : 
; 84   :   if(vars->scalarRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@Emit_SUBMI

; 85   :   {
; 86   :     vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_SRC1], x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 87   :     vars->codeCache->X86Emit_SUBMR(x86Reg_eax, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR

; 88   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_SUBMI:

; 89   :   }
; 90   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SUBMImmediateReverse
_TEXT	ENDS
PUBLIC	?SetLabelPointer@PatchManager@@QAEXIPAE@Z	; PatchManager::SetLabelPointer
PUBLIC	?GetEmitLoc@EmitterVariables@@QAEPAEXZ		; EmitterVariables::GetEmitLoc
PUBLIC	?Reset@PatchManager@@QAEXXZ			; PatchManager::Reset
PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
PUBLIC	?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULScalarShiftAcshift
EXTRN	?ApplyPatches@PatchManager@@QAEXXZ:PROC		; PatchManager::ApplyPatches
EXTRN	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SHLRR
EXTRN	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_SHLDRRR
EXTRN	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SUBIR
EXTRN	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_MOVRR
EXTRN	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORRM
EXTRN	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ADDRR
EXTRN	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVZRR
EXTRN	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_XORRR
EXTRN	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SARRR
EXTRN	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_SHRDRRR
EXTRN	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_CMPIR
EXTRN	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z:PROC ; NativeCodeCache::X86Emit_JMPI_Label
EXTRN	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_NEGR
EXTRN	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z:PROC ; NativeCodeCache::X86Emit_JCC_Label
EXTRN	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_TESTIR
EXTRN	?X86Emit_IMULRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_IMULRR
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_acshiftDisp$ = -76					; size = 4
_ccDisp$ = -72						; size = 4
_destRegDisp$ = -68					; size = 4
_src2RegDisp$ = -64					; size = 4
_src1RegDisp$ = -60					; size = 4
_ccWriteBaseReg$ = -56					; size = 4
_acshiftReadBaseReg$ = -52				; size = 4
_ccReadBaseReg$ = -48					; size = 4
_destRegWriteBaseReg$ = -44				; size = 4
_src2RegReadBaseReg$ = -40				; size = 4
_src1RegReadBaseReg$ = -36				; size = 4
_src2RegIndex$ = -32					; size = 4
_src1RegIndex$ = -28					; size = 4
_destRegIndex$ = -24					; size = 4
_l_exit$ = -20						; size = 4
_l_posge32$ = -16					; size = 4
_l_poslt32$ = -12					; size = 4
_l_neg$ = -8						; size = 4
_l_pos$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULScalarShiftAcshift

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 94   :   const uint32 l_pos = 0;

	mov	DWORD PTR _l_pos$[ebp], 0

; 95   :   const uint32 l_neg = 1;

	mov	DWORD PTR _l_neg$[ebp], 1

; 96   :   const uint32 l_poslt32 = 2;

	mov	DWORD PTR _l_poslt32$[ebp], 2

; 97   :   const uint32 l_posge32 = 3;

	mov	DWORD PTR _l_posge32$[ebp], 3

; 98   :   const uint32 l_exit = 4;

	mov	DWORD PTR _l_exit$[ebp], 4

; 99   : 
; 100  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 101  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 102  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 103  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 104  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 105  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 106  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 107  :   x86BaseReg acshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _acshiftReadBaseReg$[ebp], eax

; 108  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 109  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 110  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 111  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 112  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 113  :   int32 acshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _acshiftDisp$[ebp], eax

; 114  : 
; 115  : 
; 116  : /*
; 117  :   mov eax, [src1]
; 118  :   and [cc], ~CC_MV
; 119  :   imul [src2]
; 120  :   mov ecx, [acshift]
; 121  :   cmp ecx, 0
; 122  :   jnl mulscalarshiftacshift_pos
; 123  :   neg ecx
; 124  :   jmp mulscalarshiftacshift_neg
; 125  : mulscalarshiftacshift_pos:
; 126  :   cmp ecx, 32
; 127  :   jnl mulscalarshiftacshift_posge32
; 128  : mulscalarshiftacshift_poslt32:
; 129  :   shrd eax, edx, cl
; 130  :   if(mv flag required)
; 131  :   {
; 132  :     sar edx, cl
; 133  :     xor ecx, ecx
; 134  :     test eax, 0x80000000
; 135  :     mov ebx, 1
; 136  :     mov ebp, CC_MV
; 137  :     cmovz ebx, ecx
; 138  :     add edx, ebx
; 139  :     cmovz ebp, edx
; 140  :     or [cc], ebp
; 141  :   }
; 142  :   jmp mulscalarshiftacshift_exit
; 143  : mulscalarshiftacshift_posge32:
; 144  :   mov eax, edx
; 145  :   sub ecx, 32
; 146  :   sar eax, ecx
; 147  :   if(mv flag required)
; 148  :   {
; 149  :     mov ebp, CC_MV
; 150  :     cmp eax, 0
; 151  :     cmovz ebp, eax
; 152  :     or [cc], ebp
; 153  :   }
; 154  :   jmp mulscalarshiftacshift_exit
; 155  : mulscalarshiftacshift_neg:
; 156  :   xor ebp, ebp
; 157  :   cmp ecx, 32
; 158  :   cmovz eax, ebp
; 159  :   cmovz ecx, ebp
; 160  :   shld edx, eax, cl
; 161  :   shl eax, cl
; 162  :   if(mv flag required)
; 163  :   {
; 164  :     xor ecx, ecx
; 165  :     test eax, 0x80000000
; 166  :     mov ebx, 1
; 167  :     mov ebp, CC_MV
; 168  :     cmovz ebx, ecx
; 169  :     add edx, ebx
; 170  :     cmovz ebp, edx
; 171  :     or [cc], ebp
; 172  :   }
; 173  : mulscalarshiftacshift_exit:
; 174  :   mov [dest], eax
; 175  : */
; 176  : 
; 177  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 178  : 
; 179  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 180  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 181  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, acshiftReadBaseReg, x86IndexReg_none, x86Scale_1, acshiftDisp);

	mov	eax, DWORD PTR _acshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _acshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 182  : 
; 183  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN4@Emit_MULSc

; 184  :   {
; 185  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN4@Emit_MULSc:

; 186  :   }
; 187  :   
; 188  :   vars->codeCache->X86Emit_IMULRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_IMULRR

; 189  :   vars->codeCache->X86Emit_TESTIR(0x40,x86Reg_ecx);

	push	17					; 00000011H
	push	64					; 00000040H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 190  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_Z,l_pos);

	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 191  :   vars->codeCache->X86Emit_NEGR(x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NEGR

; 192  :   vars->codeCache->X86Emit_ADDIR(128,x86Reg_ecx);

	push	17					; 00000011H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 193  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_neg);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 194  :   //l_pos:
; 195  :   vars->patchMgr->SetLabelPointer(l_pos,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 196  :   vars->codeCache->X86Emit_CMPIR(32,x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 197  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NL,l_posge32);

	push	3
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 198  :   //l_poslt32:
; 199  :   vars->patchMgr->SetLabelPointer(l_poslt32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 200  :   vars->codeCache->X86Emit_SHRDRRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHRDRRR

; 201  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 524288				; 00080000H
	je	$LN3@Emit_MULSc

; 202  :   {
; 203  :     vars->codeCache->X86Emit_SARRR(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 204  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 205  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 206  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 207  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 208  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 209  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 210  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 211  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN3@Emit_MULSc:

; 212  :   }
; 213  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 214  :   //l_posge32:
; 215  :   vars->patchMgr->SetLabelPointer(l_posge32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	3
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 216  :   vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 217  :   vars->codeCache->X86Emit_SUBIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 218  :   vars->codeCache->X86Emit_SARRR(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 219  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 524288				; 00080000H
	je	SHORT $LN2@Emit_MULSc

; 220  :   {
; 221  :     vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 222  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN2@Emit_MULSc:

; 223  :   }
; 224  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 225  :   //l_neg:
; 226  :   vars->patchMgr->SetLabelPointer(l_neg,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 227  :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 228  :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 229  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 230  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 231  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 232  :   vars->codeCache->X86Emit_SHLDRRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHLDRRR

; 233  :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 234  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN1@Emit_MULSc

; 235  :   {
; 236  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 237  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 238  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 239  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 240  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 241  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 242  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 243  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULSc:

; 244  :   }
; 245  :   //l_exit:
; 246  :   vars->patchMgr->SetLabelPointer(l_exit,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 247  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 248  :   
; 249  :   //Patch forward branch offsets
; 250  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 251  : }

	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULScalarShiftAcshift
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?Reset@PatchManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PatchManager@@QAEXXZ PROC			; PatchManager::Reset, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 56   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PatchManager@@QAEXXZ ENDP			; PatchManager::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetLabelPointer@PatchManager@@QAEXIPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
_ptr$ = 12						; size = 4
?SetLabelPointer@PatchManager@@QAEXIPAE@Z PROC		; PatchManager::SetLabelPointer, COMDAT
; _this$ = ecx

; 69   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     labelPointers[labelIndex] = ptr;

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx+eax*4+1024], edx

; 71   :     numLabels++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1284], ecx

; 72   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabelPointer@PatchManager@@QAEXIPAE@Z ENDP		; PatchManager::SetLabelPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetEmitLoc@EmitterVariables@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitLoc@EmitterVariables@@QAEPAEXZ PROC		; EmitterVariables::GetEmitLoc, COMDAT
; _this$ = ecx

; 31   :   uint8 *GetEmitLoc() { return *ppEmitLoc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitLoc@EmitterVariables@@QAEPAEXZ ENDP		; EmitterVariables::GetEmitLoc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegReadBaseReg, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 53   :   uint32 mask = regIndex;

	mov	eax, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR _mask$[ebp], eax

; 54   : 
; 55   :   if(!regIndex)

	cmp	DWORD PTR _regIndex$[ebp], 0
	jne	SHORT $LN4@GetMiscReg

; 56   :   {
; 57   :     mask = DEPENDENCY_FLAG_ALLFLAGS;

	mov	DWORD PTR _mask$[ebp], 67076096		; 03ff8000H

; 58   :   }
; 59   :   else

	jmp	SHORT $LN3@GetMiscReg
$LN4@GetMiscReg:

; 60   :   {
; 61   :     mask = MISC_REG_DEPENDENCY_MASK(regIndex - 1);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$[ebp], edx
$LN3@GetMiscReg:

; 62   :   }
; 63   :     
; 64   : 
; 65   :   if(vars->miscRegDep & mask)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN2@GetMiscReg

; 66   :   {
; 67   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN5@GetMiscReg

; 68   :   }
; 69   :   else

	jmp	SHORT $LN5@GetMiscReg
$LN2@GetMiscReg:

; 70   :   {
; 71   :     return x86BaseReg_esi;

	mov	eax, 6
$LN5@GetMiscReg:

; 72   :   }
; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULScalarShiftRightImmediate
EXTRN	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SARIR
EXTRN	?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z:PROC ; NativeCodeCache::X86Emit_SHRDIRR
EXTRN	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_IMULMR
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmul.cpp
_TEXT	SEGMENT
_ccDisp$ = -48						; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccWriteBaseReg$ = -32					; size = 4
_ccReadBaseReg$ = -28					; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULScalarShiftRightImmediate

; 254  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 255  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 256  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 257  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 258  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 259  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 260  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 261  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 262  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 263  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 264  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 265  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 266  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 267  : 
; 268  :   /*
; 269  :   eax = src1
; 270  :   and [cc], ~CC_MV
; 271  :   imul [src2]
; 272  :   if(shiftCount == 32)
; 273  :   {
; 274  :     mov [dest], edx
; 275  :     //overflow cant occur
; 276  :   }
; 277  :   else
; 278  :   {
; 279  :     shrd eax, edx, shiftCount
; 280  :     if(mv flag required)
; 281  :     {
; 282  :       sar edx, shiftCount
; 283  :       xor ecx, ecx
; 284  :       test eax, 0x80000000
; 285  :       mov ebx, 1
; 286  :       mov ebp, CC_MV
; 287  :       cmovz ebx, ecx
; 288  :       add edx, ebx
; 289  :       cmovz ebp, edx
; 290  :       or [cc], ebp
; 291  :     }
; 292  :     mov [dest], eax
; 293  :   }
; 294  : */
; 295  : 
; 296  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 297  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN6@Emit_MULSc@2

; 298  :   {
; 299  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN6@Emit_MULSc@2:

; 300  :   }
; 301  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 302  :   if(nuance.fields[FIELD_MUL_INFO] < 32)

	mov	ecx, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [ecx+4], 32			; 00000020H
	jae	$LN5@Emit_MULSc@2

; 303  :   {
; 304  :     vars->codeCache->X86Emit_SHRDIRR(x86Reg_eax, x86Reg_edx, nuance.fields[FIELD_MUL_INFO]);

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	al, BYTE PTR [edx+4]
	push	eax
	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHRDIRR

; 305  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 524288				; 00080000H
	je	$LN4@Emit_MULSc@2

; 306  :     {
; 307  :       vars->codeCache->X86Emit_SARIR(x86Reg_edx, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 308  :       vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 309  :       vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 310  :       vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 311  :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 312  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 313  :       vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 314  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 315  :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_MULSc@2:

; 316  :     }
; 317  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
	jmp	SHORT $LN7@Emit_MULSc@2
$LN5@Emit_MULSc@2:

; 318  :   }
; 319  :   else if(nuance.fields[FIELD_MUL_INFO] == 32)

	mov	edx, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [edx+4], 32			; 00000020H
	jne	SHORT $LN2@Emit_MULSc@2

; 320  :   {
; 321  :     vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 322  :   }
; 323  :   else

	jmp	SHORT $LN7@Emit_MULSc@2
$LN2@Emit_MULSc@2:

; 324  :   {
; 325  :     vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 326  :     vars->codeCache->X86Emit_SARIR(x86Reg_eax, nuance.fields[FIELD_MUL_INFO] - 32);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 32					; 00000020H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 327  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_MULSc@2:

; 328  :   }
; 329  : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULScalarShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULScalarShiftLeftImmediate
EXTRN	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHLIR
EXTRN	?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z:PROC ; NativeCodeCache::X86Emit_SHLDIRR
EXTRN	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_TESTRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -48						; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_ccWriteBaseReg$ = -32					; size = 4
_ccReadBaseReg$ = -28					; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULScalarShiftLeftImmediate

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 333  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 334  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 335  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 336  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 337  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 338  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 339  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 340  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 341  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 342  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 343  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 344  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 345  : 
; 346  : /*
; 347  :   mov eax, [src1]
; 348  :   and [cc], ~CC_MV
; 349  :   imul [src2]
; 350  :   if(shiftCount > 31)
; 351  :   {     
; 352  :     mov [dest], 0
; 353  :     if(mv flag required)
; 354  :     {
; 355  :       shl eax, shiftCount - 32
; 356  :       mov ebp, CC_MV
; 357  :       cmovz ebp, eax
; 358  :       or [cc], ebp
; 359  :     }
; 360  :   }
; 361  :   else
; 362  :   {
; 363  :     if(shiftCount != 0)
; 364  :     {
; 365  :       shld edx, eax, shiftCount
; 366  :       shl eax, shiftCount
; 367  :     }
; 368  : 
; 369  :     if(mv flag required)
; 370  :     {
; 371  :       xor ecx, ecx
; 372  :       test eax, 0x80000000
; 373  :       mov ebx, 1
; 374  :       mov ebp, CC_MV
; 375  :       cmovz ebx, ecx
; 376  :       add edx, ebx
; 377  :       cmovz ebp, edx
; 378  :       or [cc], ebp
; 379  :     }
; 380  :     mov [dest], eax
; 381  :   }
; 382  : */
; 383  : 
; 384  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 385  :   vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->pInstructionEntry->miscOutputDependencies)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 386  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 387  :   if(nuance.fields[FIELD_MUL_INFO] > 31)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 31			; 0000001fH
	jbe	SHORT $LN5@Emit_MULSc@3

; 388  :   {
; 389  :     vars->codeCache->X86Emit_MOVIM(0, x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 390  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	SHORT $LN4@Emit_MULSc@3

; 391  :     {
; 392  :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 393  :       vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 394  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 395  :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_MULSc@3:

; 396  :     }
; 397  :   }
; 398  :   else

	jmp	$LN6@Emit_MULSc@3
$LN5@Emit_MULSc@3:

; 399  :   {
; 400  :     if(nuance.fields[FIELD_MUL_INFO] != 0)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Emit_MULSc@3

; 401  :     {
; 402  :       vars->codeCache->X86Emit_SHLDIRR(x86Reg_edx, x86Reg_eax, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHLDIRR

; 403  :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN2@Emit_MULSc@3:

; 404  :     }
; 405  : 
; 406  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN1@Emit_MULSc@3

; 407  :     {
; 408  :       vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 409  :       vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 410  :       vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 411  :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 412  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 413  :       vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 414  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 415  :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULSc@3:

; 416  :     }
; 417  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN6@Emit_MULSc@3:

; 418  :   }
; 419  : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULScalarShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULImmediateShiftAcshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_acshiftDisp$ = -64					; size = 4
_ccDisp$ = -60						; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_ccWriteBaseReg$ = -48					; size = 4
_acshiftReadBaseReg$ = -44				; size = 4
_ccReadBaseReg$ = -40					; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg$ = -32				; size = 4
_src2RegIndex$ = -28					; size = 4
_destRegIndex$ = -24					; size = 4
_l_exit$ = -20						; size = 4
_l_posge32$ = -16					; size = 4
_l_poslt32$ = -12					; size = 4
_l_neg$ = -8						; size = 4
_l_pos$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULImmediateShiftAcshift

; 422  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 423  :   const uint32 l_pos = 0;

	mov	DWORD PTR _l_pos$[ebp], 0

; 424  :   const uint32 l_neg = 1;

	mov	DWORD PTR _l_neg$[ebp], 1

; 425  :   const uint32 l_poslt32 = 2;

	mov	DWORD PTR _l_poslt32$[ebp], 2

; 426  :   const uint32 l_posge32 = 3;

	mov	DWORD PTR _l_posge32$[ebp], 3

; 427  :   const uint32 l_exit = 4;

	mov	DWORD PTR _l_exit$[ebp], 4

; 428  : 
; 429  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 430  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 431  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 432  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 433  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 434  :   x86BaseReg acshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _acshiftReadBaseReg$[ebp], eax

; 435  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 436  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 437  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 438  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 439  :   int32 acshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_ACSHIFT);

	push	14					; 0000000eH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _acshiftDisp$[ebp], eax

; 440  : 
; 441  : 
; 442  : /*
; 443  :   mov eax, src1
; 444  :   and [cc], ~CC_MV
; 445  :   imul [src2]
; 446  :   mov ecx, [acshift]
; 447  :   cmp ecx, 0
; 448  :   jnl mulscalarshiftacshift_pos
; 449  :   neg ecx
; 450  :   jmp mulscalarshiftacshift_neg
; 451  : mulscalarshiftacshift_pos:
; 452  :   cmp ecx, 32
; 453  :   jnl mulscalarshiftacshift_posge32
; 454  : mulscalarshiftacshift_poslt32:
; 455  :   shrd eax, edx, cl
; 456  :   if(mv flag required)
; 457  :   {
; 458  :     sar edx, cl
; 459  :     xor ecx, ecx
; 460  :     test eax, 0x80000000
; 461  :     mov ebx, 1
; 462  :     mov ebp, CC_MV
; 463  :     cmovz ebx, ecx
; 464  :     add edx, ebx
; 465  :     cmovz ebp, edx
; 466  :     or [cc], ebp
; 467  :   }
; 468  :   jmp mulscalarshiftacshift_exit
; 469  : mulscalarshiftacshift_posge32:
; 470  :   mov eax, edx
; 471  :   sub ecx, 32
; 472  :   sar eax, ecx
; 473  :   if(mv flag required)
; 474  :   {
; 475  :     mov ebp, CC_MV
; 476  :     cmp eax, 0
; 477  :     cmovz ebp, eax
; 478  :     or [cc], ebp
; 479  :   }
; 480  :   jmp mulscalarshiftacshift_exit
; 481  : mulscalarshiftacshift_neg:
; 482  :   xor ebp, ebp
; 483  :   cmp ecx, 32
; 484  :   cmovz eax, edx
; 485  :   cmovz ecx, ebp
; 486  :   shld edx, eax, cl
; 487  :   shl eax, cl
; 488  :   if(mv flag required)
; 489  :   {
; 490  :     xor ecx, ecx
; 491  :     test eax, 0x80000000
; 492  :     mov ebx, 1
; 493  :     mov ebp, CC_MV
; 494  :     cmovz ebx, ecx
; 495  :     add edx, ebx
; 496  :     cmovz ebp, edx
; 497  :     or [cc], ebp
; 498  :   }
; 499  : mulscalarshiftacshift_exit:
; 500  :   mov [dest], eax
; 501  : */
; 502  : 
; 503  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 504  : 
; 505  :   vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_SRC1], x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 506  :   vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->pInstructionEntry->miscOutputDependencies)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 507  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, acshiftReadBaseReg, x86IndexReg_none, x86Scale_1, acshiftDisp);

	mov	eax, DWORD PTR _acshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _acshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 508  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 509  :   vars->codeCache->X86Emit_TESTIR(0x40,x86Reg_ecx);

	push	17					; 00000011H
	push	64					; 00000040H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 510  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_Z,l_pos);

	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 511  :   vars->codeCache->X86Emit_NEGR(x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NEGR

; 512  :   vars->codeCache->X86Emit_ADDIR(128,x86Reg_ecx);

	push	17					; 00000011H
	push	128					; 00000080H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 513  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_neg);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 514  :   //l_pos:
; 515  :   vars->patchMgr->SetLabelPointer(l_pos,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 516  :   vars->codeCache->X86Emit_CMPIR(32,x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 517  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NL,l_posge32);

	push	3
	push	13					; 0000000dH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 518  :   //l_poslt32:
; 519  :   vars->patchMgr->SetLabelPointer(l_poslt32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 520  :   vars->codeCache->X86Emit_SHRDRRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHRDRRR

; 521  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN3@Emit_MULIm

; 522  :   {
; 523  :     vars->codeCache->X86Emit_SARRR(x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 524  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 525  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 526  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 527  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 528  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 529  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 530  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 531  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN3@Emit_MULIm:

; 532  :   }
; 533  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 534  :   //l_posge32:
; 535  :   vars->patchMgr->SetLabelPointer(l_posge32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 536  :   vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 537  :   vars->codeCache->X86Emit_SUBIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 538  :   vars->codeCache->X86Emit_SARRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 539  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 524288				; 00080000H
	je	SHORT $LN2@Emit_MULIm

; 540  :   {
; 541  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 542  :     vars->codeCache->X86Emit_CMPIR(0, x86Reg_eax);

	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 543  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 544  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN2@Emit_MULIm:

; 545  :   }
; 546  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 547  :   //l_neg:
; 548  :   vars->patchMgr->SetLabelPointer(l_neg,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 549  :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 550  :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 551  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 552  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 553  :   vars->codeCache->X86Emit_SHLDRRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHLDRRR

; 554  :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 555  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 524288				; 00080000H
	je	$LN1@Emit_MULIm

; 556  :   {
; 557  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 558  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 559  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 560  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 561  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 562  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 563  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 564  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULIm:

; 565  :   }
; 566  :   //l_exit:
; 567  :   vars->patchMgr->SetLabelPointer(l_exit,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 568  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 569  :   
; 570  :   //Patch forward branch offsets
; 571  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 572  : }

	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULImmediateShiftAcshift
_TEXT	ENDS
PUBLIC	?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULScalarShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -80						; size = 4
_destRegDisp$ = -76					; size = 4
_shiftRegDisp$ = -72					; size = 4
_src2RegDisp$ = -68					; size = 4
_src1RegDisp$ = -64					; size = 4
_ccWriteBaseReg$ = -60					; size = 4
_ccReadBaseReg$ = -56					; size = 4
_destRegWriteBaseReg$ = -52				; size = 4
_shiftRegReadBaseReg$ = -48				; size = 4
_src2RegReadBaseReg$ = -44				; size = 4
_src1RegReadBaseReg$ = -40				; size = 4
_shiftRegIndex$ = -36					; size = 4
_src2RegIndex$ = -32					; size = 4
_src1RegIndex$ = -28					; size = 4
_destRegIndex$ = -24					; size = 4
_l_exit$ = -20						; size = 4
_l_posge32$ = -16					; size = 4
_l_poslt32$ = -12					; size = 4
_l_neg$ = -8						; size = 4
_l_pos$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULScalarShiftScalar

; 575  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 576  :   const uint32 l_pos = 0;

	mov	DWORD PTR _l_pos$[ebp], 0

; 577  :   const uint32 l_neg = 1;

	mov	DWORD PTR _l_neg$[ebp], 1

; 578  :   const uint32 l_poslt32 = 2;

	mov	DWORD PTR _l_poslt32$[ebp], 2

; 579  :   const uint32 l_posge32 = 3;

	mov	DWORD PTR _l_posge32$[ebp], 3

; 580  :   const uint32 l_exit = 4;

	mov	DWORD PTR _l_exit$[ebp], 4

; 581  : 
; 582  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 583  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 584  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 585  :   uint32 shiftRegIndex = nuance.fields[FIELD_MUL_INFO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _shiftRegIndex$[ebp], ecx

; 586  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 587  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 588  :   x86BaseReg shiftRegReadBaseReg = GetScalarRegReadBaseReg(vars,shiftRegIndex);

	mov	eax, DWORD PTR _shiftRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _shiftRegReadBaseReg$[ebp], eax

; 589  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 590  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 591  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 592  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 593  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 594  :   int32 shiftRegDisp = GetScalarRegEmitDisp(vars,shiftRegIndex);

	mov	ecx, DWORD PTR _shiftRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _shiftRegDisp$[ebp], eax

; 595  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 596  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 597  : 
; 598  : 
; 599  : /*
; 600  :   mov eax, [src1]
; 601  :   and [cc], ~CC_MV
; 602  :   imul [src2]
; 603  :   mov ecx, [shiftReg]
; 604  :   test ecx, 0x40
; 605  :   jz mulscalarshiftacshift_pos
; 606  :   neg ecx
; 607  :   add ecx, 128
; 608  :   jmp mulscalarshiftacshift_neg
; 609  : mulscalarshiftacshift_pos:
; 610  :   cmp ecx, 32
; 611  :   jnl mulscalarshiftacshift_posge32
; 612  : mulscalarshiftacshift_poslt32:
; 613  :   shrd eax, edx, cl
; 614  :   if(mv flag required)
; 615  :   {
; 616  :     sar edx, cl
; 617  :     xor ecx, ecx
; 618  :     test eax, 0x80000000
; 619  :     mov ebx, 1
; 620  :     mov ebp, CC_MV
; 621  :     cmovz ebx, ecx
; 622  :     add edx, ebx
; 623  :     cmovz ebp, edx
; 624  :     or [cc], ebp
; 625  :   }
; 626  :   jmp mulscalarshiftacshift_exit
; 627  : mulscalarshiftacshift_posge32:
; 628  :   mov eax, edx
; 629  :   sub ecx, 32
; 630  :   sar eax, ecx
; 631  :   if(mv flag required)
; 632  :   {
; 633  :     mov ebp, CC_MV
; 634  :     cmp eax, 0
; 635  :     cmovz ebp, eax
; 636  :     or [cc], ebp
; 637  :   }
; 638  :   jmp mulscalarshiftacshift_exit
; 639  : mulscalarshiftacshift_neg:
; 640  :   xor ebp, ebp
; 641  :   cmp ecx, 32
; 642  :   cmovz eax, edx
; 643  :   cmovz ecx, ebp
; 644  :   shld edx, eax, cl
; 645  :   shl eax, cl
; 646  :   if(mv flag required)
; 647  :   {
; 648  :     xor ecx, ecx
; 649  :     test eax, 0x80000000
; 650  :     mov ebx, 1
; 651  :     mov ebp, CC_MV
; 652  :     cmovz ebx, ecx
; 653  :     add edx, ebx
; 654  :     cmovz ebp, edx
; 655  :     or [cc], ebp
; 656  :   }
; 657  : mulscalarshiftacshift_exit:
; 658  :   mov [dest], eax
; 659  : */
; 660  : 
; 661  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 662  : 
; 663  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 664  :   vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->pInstructionEntry->miscOutputDependencies)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+44]
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 665  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, shiftRegReadBaseReg, x86IndexReg_none, x86Scale_1, shiftRegDisp);

	mov	ecx, DWORD PTR _shiftRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _shiftRegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 666  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 667  :   vars->codeCache->X86Emit_TESTIR(0x40,x86Reg_ecx);

	push	17					; 00000011H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 668  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_Z,l_pos);

	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 669  :   vars->codeCache->X86Emit_NEGR(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NEGR

; 670  :   vars->codeCache->X86Emit_ADDIR(128,x86Reg_ecx);

	push	17					; 00000011H
	push	128					; 00000080H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 671  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_neg);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 672  :   //l_pos:
; 673  :   vars->patchMgr->SetLabelPointer(l_pos,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 674  :   vars->codeCache->X86Emit_CMPIR(32,x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 675  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NL,l_posge32);

	push	3
	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 676  :   //l_poslt32:
; 677  :   vars->patchMgr->SetLabelPointer(l_poslt32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 678  :   vars->codeCache->X86Emit_SHRDRRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHRDRRR

; 679  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 524288				; 00080000H
	je	$LN3@Emit_MULSc@4

; 680  :   {
; 681  :     vars->codeCache->X86Emit_SARRR(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 682  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 683  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 684  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 685  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 686  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 687  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 688  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 689  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN3@Emit_MULSc@4:

; 690  :   }
; 691  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 692  :   //l_posge32:
; 693  :   vars->patchMgr->SetLabelPointer(l_posge32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 694  :   vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 695  :   vars->codeCache->X86Emit_SUBIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 696  :   vars->codeCache->X86Emit_SARRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 697  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	SHORT $LN2@Emit_MULSc@4

; 698  :   {
; 699  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 700  :     vars->codeCache->X86Emit_CMPIR(0, x86Reg_eax);

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 701  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 702  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN2@Emit_MULSc@4:

; 703  :   }
; 704  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 705  :   //l_neg:
; 706  :   vars->patchMgr->SetLabelPointer(l_neg,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 707  :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 708  :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 709  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 710  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 711  :   vars->codeCache->X86Emit_SHLDRRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHLDRRR

; 712  :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 713  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN1@Emit_MULSc@4

; 714  :   {
; 715  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 716  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 717  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 718  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 719  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 720  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 721  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 722  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULSc@4:

; 723  :   }
; 724  :   //l_exit:
; 725  :   vars->patchMgr->SetLabelPointer(l_exit,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 726  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 727  :   
; 728  :   //Patch forward branch offsets
; 729  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 730  : }

	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULScalarShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULImmediateShiftScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -80						; size = 4
_destRegDisp$ = -76					; size = 4
_shiftRegDisp$ = -72					; size = 4
_src2RegDisp$ = -68					; size = 4
_src1RegDisp$ = -64					; size = 4
_ccWriteBaseReg$ = -60					; size = 4
_ccReadBaseReg$ = -56					; size = 4
_destRegWriteBaseReg$ = -52				; size = 4
_shiftRegReadBaseReg$ = -48				; size = 4
_src2RegReadBaseReg$ = -44				; size = 4
_src1RegReadBaseReg$ = -40				; size = 4
_shiftRegIndex$ = -36					; size = 4
_src2RegIndex$ = -32					; size = 4
_src1RegIndex$ = -28					; size = 4
_destRegIndex$ = -24					; size = 4
_l_exit$ = -20						; size = 4
_l_posge32$ = -16					; size = 4
_l_poslt32$ = -12					; size = 4
_l_neg$ = -8						; size = 4
_l_pos$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULImmediateShiftScalar

; 733  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 734  :   const uint32 l_pos = 0;

	mov	DWORD PTR _l_pos$[ebp], 0

; 735  :   const uint32 l_neg = 1;

	mov	DWORD PTR _l_neg$[ebp], 1

; 736  :   const uint32 l_poslt32 = 2;

	mov	DWORD PTR _l_poslt32$[ebp], 2

; 737  :   const uint32 l_posge32 = 3;

	mov	DWORD PTR _l_posge32$[ebp], 3

; 738  :   const uint32 l_exit = 4;

	mov	DWORD PTR _l_exit$[ebp], 4

; 739  : 
; 740  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 741  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 742  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 743  :   uint32 shiftRegIndex = nuance.fields[FIELD_MUL_INFO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _shiftRegIndex$[ebp], ecx

; 744  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 745  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 746  :   x86BaseReg shiftRegReadBaseReg = GetScalarRegReadBaseReg(vars,shiftRegIndex);

	mov	eax, DWORD PTR _shiftRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _shiftRegReadBaseReg$[ebp], eax

; 747  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 748  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 749  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 750  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 751  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 752  :   int32 shiftRegDisp = GetScalarRegEmitDisp(vars,shiftRegIndex);

	mov	ecx, DWORD PTR _shiftRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _shiftRegDisp$[ebp], eax

; 753  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 754  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 755  : 
; 756  : 
; 757  : /*
; 758  :   mov eax, src1
; 759  :   and [cc], ~CC_MV
; 760  :   imul [src2]
; 761  :   mov ecx, [shiftReg]
; 762  :   test ecx, 0x40
; 763  :   jz mulscalarshiftacshift_pos
; 764  :   neg ecx
; 765  :   add ecx, 128
; 766  :   jmp mulscalarshiftacshift_neg
; 767  : mulscalarshiftacshift_pos:
; 768  :   cmp ecx, 32
; 769  :   jnl mulscalarshiftacshift_posge32
; 770  : mulscalarshiftacshift_poslt32:
; 771  :   shrd eax, edx, cl
; 772  :   if(mv flag required)
; 773  :   {
; 774  :     sar edx, cl
; 775  :     xor ecx, ecx
; 776  :     test eax, 0x80000000
; 777  :     mov ebx, 1
; 778  :     mov ebp, CC_MV
; 779  :     cmovz ebx, ecx
; 780  :     add edx, ebx
; 781  :     cmovz ebp, edx
; 782  :     or [cc], ebp
; 783  :   }
; 784  :   jmp mulscalarshiftacshift_exit
; 785  : mulscalarshiftacshift_posge32:
; 786  :   mov eax, edx
; 787  :   sub ecx, 32
; 788  :   sar eax, ecx
; 789  :   if(mv flag required)
; 790  :   {
; 791  :     mov ebp, CC_MV
; 792  :     cmp eax, 0
; 793  :     cmovz ebp, eax
; 794  :     or [cc], ebp
; 795  :   }
; 796  :   jmp mulscalarshiftacshift_exit
; 797  : mulscalarshiftacshift_neg:
; 798  :   xor ebp, ebp
; 799  :   cmp ecx, 32
; 800  :   cmovz eax, edx
; 801  :   cmovz ecx, ebp
; 802  :   shld edx, eax, cl
; 803  :   shl eax, cl
; 804  :   if(mv flag required)
; 805  :   {
; 806  :     xor ecx, ecx
; 807  :     test eax, 0x80000000
; 808  :     mov ebx, 1
; 809  :     mov ebp, CC_MV
; 810  :     cmovz ebx, ecx
; 811  :     add edx, ebx
; 812  :     cmovz ebp, edx
; 813  :     or [cc], ebp
; 814  :   }
; 815  : mulscalarshiftacshift_exit:
; 816  :   mov [dest], eax
; 817  : */
; 818  : 
; 819  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 820  : 
; 821  :   vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_SRC1], x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 822  :   vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->pInstructionEntry->miscOutputDependencies)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+44]
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 823  :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, shiftRegReadBaseReg, x86IndexReg_none, x86Scale_1, shiftRegDisp);

	mov	ecx, DWORD PTR _shiftRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _shiftRegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 824  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 825  :   vars->codeCache->X86Emit_TESTIR(0x40,x86Reg_ecx);

	push	17					; 00000011H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 826  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_Z,l_pos);

	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 827  :   vars->codeCache->X86Emit_NEGR(x86Reg_ecx);

	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_NEGR

; 828  :   vars->codeCache->X86Emit_ADDIR(128,x86Reg_ecx);

	push	17					; 00000011H
	push	128					; 00000080H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 829  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_neg);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 830  :   //l_pos:
; 831  :   vars->patchMgr->SetLabelPointer(l_pos,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 832  :   vars->codeCache->X86Emit_CMPIR(32,x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 833  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NL,l_posge32);

	push	3
	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 834  :   //l_poslt32:
; 835  :   vars->patchMgr->SetLabelPointer(l_poslt32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 836  :   vars->codeCache->X86Emit_SHRDRRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHRDRRR

; 837  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 524288				; 00080000H
	je	$LN3@Emit_MULIm@2

; 838  :   {
; 839  :     vars->codeCache->X86Emit_SARRR(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 840  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 841  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 842  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 843  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 844  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 845  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 846  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 847  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN3@Emit_MULIm@2:

; 848  :   }
; 849  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 850  :   //l_posge32:
; 851  :   vars->patchMgr->SetLabelPointer(l_posge32,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	3
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 852  :   vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 853  :   vars->codeCache->X86Emit_SUBIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR

; 854  :   vars->codeCache->X86Emit_SARRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 855  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	SHORT $LN2@Emit_MULIm@2

; 856  :   {
; 857  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 858  :     vars->codeCache->X86Emit_CMPIR(0, x86Reg_eax);

	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 859  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 860  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN2@Emit_MULIm@2:

; 861  :   }
; 862  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 863  :   //l_neg:
; 864  :   vars->patchMgr->SetLabelPointer(l_neg,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 865  :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 866  :   vars->codeCache->X86Emit_CMPIR(32, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 867  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 868  :   vars->codeCache->X86Emit_CMOVZRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 869  :   vars->codeCache->X86Emit_SHLDRRR(x86Reg_edx, x86Reg_eax);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHLDRRR

; 870  :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 871  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN1@Emit_MULIm@2

; 872  :   {
; 873  :     vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 874  :     vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 875  :     vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 876  :     vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 877  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 878  :     vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 879  :     vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 880  :     vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULIm@2:

; 881  :   }
; 882  :   //l_exit:
; 883  :   vars->patchMgr->SetLabelPointer(l_exit,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 884  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 885  :   
; 886  :   //Patch forward branch offsets
; 887  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 888  : }

	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULImmediateShiftScalar
_TEXT	ENDS
PUBLIC	?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULImmediateShiftRightImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -40						; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_ccWriteBaseReg$ = -28					; size = 4
_ccReadBaseReg$ = -24					; size = 4
_destRegWriteBaseReg$ = -20				; size = 4
_src2RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULImmediateShiftRightImmediate

; 891  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 892  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 893  :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 894  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 895  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 896  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 897  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 898  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 899  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 900  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 901  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 902  : 
; 903  :   /*
; 904  :   eax = src1
; 905  :   and [cc], ~CC_MV
; 906  :   imul [src2]
; 907  :   if(shiftCount == 32)
; 908  :   {
; 909  :     mov [dest], edx
; 910  :     //overflow cant occur
; 911  :   }
; 912  :   else
; 913  :   {
; 914  :     shrd eax, edx, shiftCount
; 915  :     if(mv flag required)
; 916  :     {
; 917  :       sar edx, shiftCount
; 918  :       xor ecx, ecx
; 919  :       test eax, 0x80000000
; 920  :       mov ebx, 1
; 921  :       mov ebp, CC_MV
; 922  :       cmovz ebx, ecx
; 923  :       add edx, ebx
; 924  :       cmovz ebp, edx
; 925  :       or [cc], ebp
; 926  :     }
; 927  :     mov [dest], eax
; 928  :   }
; 929  : */
; 930  : 
; 931  :   vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_SRC1], x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 932  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 524288				; 00080000H
	je	SHORT $LN6@Emit_MULIm@3

; 933  :   {
; 934  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN6@Emit_MULIm@3:

; 935  :   }
; 936  :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 937  :   if(nuance.fields[FIELD_MUL_INFO] < 32)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 32			; 00000020H
	jae	$LN5@Emit_MULIm@3

; 938  :   {
; 939  :     vars->codeCache->X86Emit_SHRDIRR(x86Reg_eax, x86Reg_edx, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	18					; 00000012H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHRDIRR

; 940  :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN4@Emit_MULIm@3

; 941  :     {
; 942  :       vars->codeCache->X86Emit_SARIR(x86Reg_edx, nuance.fields[FIELD_MUL_INFO]);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	cl, BYTE PTR [eax+4]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 943  :       vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 944  :       vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 945  :       vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 946  :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 947  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 948  :       vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 949  :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 950  :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_MULIm@3:

; 951  :     }
; 952  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
	jmp	SHORT $LN7@Emit_MULIm@3
$LN5@Emit_MULIm@3:

; 953  :   }
; 954  :   else if(nuance.fields[FIELD_MUL_INFO] == 32)

	mov	ecx, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [ecx+4], 32			; 00000020H
	jne	SHORT $LN2@Emit_MULIm@3

; 955  :   {
; 956  :     vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 957  :   }
; 958  :   else

	jmp	SHORT $LN7@Emit_MULIm@3
$LN2@Emit_MULIm@3:

; 959  :   {
; 960  :     vars->codeCache->X86Emit_MOVRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 961  :     vars->codeCache->X86Emit_SARIR(x86Reg_eax, nuance.fields[FIELD_MUL_INFO] - 32);

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 32					; 00000020H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 962  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN7@Emit_MULIm@3:

; 963  :   }
; 964  : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULImmediateShiftRightImmediate
_TEXT	ENDS
PUBLIC	?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MULImmediateShiftLeftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -36						; size = 4
_destRegDisp$ = -32					; size = 4
_src2RegDisp$ = -28					; size = 4
_ccWriteBaseReg$ = -24					; size = 4
_ccReadBaseReg$ = -20					; size = 4
_destRegWriteBaseReg$ = -16				; size = 4
_src2RegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MULImmediateShiftLeftImmediate

; 967  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 968  :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 969  :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 970  :   x86BaseReg src2RegReadBaseReg = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg$[ebp], eax

; 971  :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 972  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 973  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 974  :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 975  :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 976  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 977  : 
; 978  : /*
; 979  :   mov eax, src1
; 980  :   and [cc], ~CC_MV
; 981  :   imul [src2]
; 982  :   if(shiftCount > 31)
; 983  :   {     
; 984  :     mov [dest], 0
; 985  :     if(mv flag required)
; 986  :     {
; 987  :       shl eax, shiftCount - 32
; 988  :       mov ebp, CC_MV
; 989  :       cmovz ebp, eax
; 990  :       or [cc], ebp
; 991  :     }
; 992  :   }
; 993  :   else
; 994  :   {
; 995  :     if(shiftCount != 0)
; 996  :     {
; 997  :       shld edx, eax, shiftCount
; 998  :       shl eax, shiftCount
; 999  :     }
; 1000 : 
; 1001 :     if(mv flag required)
; 1002 :     {
; 1003 :       xor ecx, ecx
; 1004 :       test eax, 0x80000000
; 1005 :       mov ebx, 1
; 1006 :       mov ebp, CC_MV
; 1007 :       cmovz ebx, ecx
; 1008 :       add edx, ebx
; 1009 :       cmovz ebp, edx
; 1010 :       or [cc], ebp
; 1011 :     }
; 1012 :     mov [dest], eax
; 1013 :   }
; 1014 : */
; 1015 : 
; 1016 :   vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_SRC1], x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1017 :   vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->pInstructionEntry->miscOutputDependencies)), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+44]
	shr	ecx, 15					; 0000000fH
	not	ecx
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 1018 :   vars->codeCache->X86Emit_IMULMR(x86MemPtr_dword, src2RegReadBaseReg, x86IndexReg_none, x86Scale_1, src2RegDisp);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR

; 1019 :   if(nuance.fields[FIELD_MUL_INFO] > 31)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 31			; 0000001fH
	jbe	SHORT $LN5@Emit_MULIm@4

; 1020 :   {
; 1021 :     vars->codeCache->X86Emit_MOVIM(0, x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	2
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 1022 :     if(vars->miscRegDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	and	edx, 524288				; 00080000H
	je	SHORT $LN4@Emit_MULIm@4

; 1023 :     {
; 1024 :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1025 :       vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 1026 :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_eax);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1027 :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_MULIm@4:

; 1028 :     }
; 1029 :   }
; 1030 :   else

	jmp	$LN6@Emit_MULIm@4
$LN5@Emit_MULIm@4:

; 1031 :   {
; 1032 :     if(nuance.fields[FIELD_MUL_INFO] != 0)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Emit_MULIm@4

; 1033 :     {
; 1034 :       vars->codeCache->X86Emit_SHLDIRR(x86Reg_edx, x86Reg_eax, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHLDIRR

; 1035 :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax, nuance.fields[FIELD_MUL_INFO]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN2@Emit_MULIm@4:

; 1036 :     }
; 1037 : 
; 1038 :     if(vars->miscRegOutDep & DEPENDENCY_FLAG_MV)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 524288				; 00080000H
	je	$LN1@Emit_MULIm@4

; 1039 :     {
; 1040 :       vars->codeCache->X86Emit_XORRR(x86Reg_ecx, x86Reg_ecx);

	push	17					; 00000011H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 1041 :       vars->codeCache->X86Emit_TESTIR(0x80000000, x86Reg_eax);

	push	16					; 00000010H
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 1042 :       vars->codeCache->X86Emit_MOVIR(1, x86Reg_ebx);

	push	19					; 00000013H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1043 :       vars->codeCache->X86Emit_MOVIR(CC_MUL_OVERFLOW, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1044 :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebx, x86Reg_ecx);

	push	17					; 00000011H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1045 :       vars->codeCache->X86Emit_ADDRR(x86Reg_edx, x86Reg_ebx);

	push	19					; 00000013H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1046 :       vars->codeCache->X86Emit_CMOVZRR(x86Reg_ebp, x86Reg_edx);

	push	18					; 00000012H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR

; 1047 :       vars->codeCache->X86Emit_ORRM(x86Reg_ebp, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN1@Emit_MULIm@4:

; 1048 :     }
; 1049 :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN6@Emit_MULIm@4:

; 1050 :   }
; 1051 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MULImmediateShiftLeftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVImmediateShiftImmediate
EXTRN	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z:PROC ; NativeCodeCache::X86Emit_IMULIRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -44						; size = 4
_scalar$ = -40						; size = 4
_destRegDisp$ = -36					; size = 4
_src2RegDisp$ = -32					; size = 4
_destRegWriteBaseReg$ = -28				; size = 4
_src2RegReadBaseReg_3$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVImmediateShiftImmediate

; 1054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1055 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1056 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1057 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1058 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1059 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1060 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1061 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1062 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1063 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1064 : 
; 1065 :   int32 scalar = ((int32)(nuance.fields[FIELD_MUL_SRC1])) >> 16;

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sar	ecx, 16					; 00000010H
	mov	DWORD PTR _scalar$[ebp], ecx

; 1066 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _shiftTable[eax*4]
	mov	DWORD PTR _shift$[ebp], ecx

; 1067 : 
; 1068 : 
; 1069 : /*
; 1070 :   mov ebp, scalar
; 1071 :   mov eax, [src2+0]
; 1072 :   mov ebx, [src2+4]
; 1073 :   mov ecx, [src2+8]
; 1074 :   mov edx, [src2+12]
; 1075 :   sar eax, 16
; 1076 :   sar ebx, 16
; 1077 :   sar ecx, 16
; 1078 :   sar edx, 16
; 1079 :   imul eax, eax, scalar
; 1080 :   imul ebx, ebx, scalar
; 1081 :   imul ecx, ecx, scalar
; 1082 :   imul edx, edx, scalar
; 1083 :   if(shift > 0)
; 1084 :   {
; 1085 :     shl eax, shift
; 1086 :     shl ebx, shift
; 1087 :     shl ecx, shift
; 1088 :     shl edx, shift
; 1089 :   }
; 1090 :   mov [src2+0], eax
; 1091 :   mov [src2+4], ebx
; 1092 :   mov [src2+8], ecx
; 1093 :   mov [src2+12], edx
; 1094 : */
; 1095 : 
; 1096 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1097 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1098 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1099 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1100 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1101 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1102 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1103 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1104 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_eax, scalar, x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _scalar$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1105 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_ebx, scalar, x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _scalar$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1106 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_ecx, scalar, x86Reg_ecx);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _scalar$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1107 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_edx, scalar, x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR _scalar$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1108 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_S

; 1109 :   {
; 1110 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1111 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1112 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1113 :     vars->codeCache->X86Emit_SHLIR(x86Reg_edx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_S:

; 1114 :   }
; 1115 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1116 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1117 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1118 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1119 : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVImmediateShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVScalarShiftImmediate
EXTRN	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_IMULRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -52						; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_src1RegDisp$ = -40					; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg_3$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVScalarShiftImmediate

; 1122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1123 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1124 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1125 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1126 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1127 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1128 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1129 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1130 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1131 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1132 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1133 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1134 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1135 : 
; 1136 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _shiftTable[ecx*4]
	mov	DWORD PTR _shift$[ebp], edx

; 1137 : 
; 1138 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1139 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1140 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1141 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1142 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1143 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1144 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1145 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1146 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1147 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1148 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1149 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1150 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1151 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1152 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_S@2

; 1153 :   {
; 1154 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1155 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1156 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1157 :     vars->codeCache->X86Emit_SHLIR(x86Reg_edx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_S@2:

; 1158 :   }
; 1159 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1160 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1161 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1162 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1163 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVScalarShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVScalarShiftSvshift
EXTRN	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ANDIR
EXTRN	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_SHRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -56					; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_3$ = -36				; size = 4
_src2RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src2RegReadBaseReg_0$ = -24				; size = 4
_src1RegReadBaseReg$ = -20				; size = 4
_svshiftReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVScalarShiftSvshift

; 1166 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1167 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1168 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1169 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1170 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1171 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1172 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1173 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1174 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1175 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1176 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1177 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1178 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1179 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1180 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1181 : 
; 1182 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1183 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1184 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1185 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1186 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1187 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1188 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1189 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1190 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1191 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1192 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1193 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1194 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1195 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebp, x86Reg_ecx);

	push	17					; 00000011H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1196 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	edx, DWORD PTR _svshiftDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1197 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_esi);

	push	22					; 00000016H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1198 :   vars->codeCache->X86Emit_SHRRR(x86Reg_esi);

	push	22					; 00000016H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1199 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_esi);

	push	22					; 00000016H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1200 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_esi);

	push	22					; 00000016H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1201 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1202 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1203 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1204 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1205 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1206 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1207 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1208 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1209 :   vars->codeCache->X86Emit_MOVIR(vars->regBase, x86Reg_esi);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1210 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVScalarShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVRuShiftImmediate
EXTRN	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHRIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -56						; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_uvctlDisp$ = -44					; size = 4
_ruDisp$ = -40						; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg_3$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_ruRegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVRuShiftImmediate

; 1212 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1213 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1214 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1215 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1216 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1217 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1218 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1219 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1220 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1221 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1222 :   int32 ruDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruDisp$[ebp], eax

; 1223 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1224 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1225 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1226 : 
; 1227 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _shiftTable[edx*4]
	mov	DWORD PTR _shift$[ebp], eax

; 1228 : 
; 1229 :  //scalar = (int32)(entry.pIndexRegs[2] >> (2 + BilinearInfo_XYMipmap(*entry.pUvctl))) & 0x3FFFUL;
; 1230 : 
; 1231 :   //ebp = ((int32)ru) >> (2 + ((uvctl >> 24) & 0x07UL)) & 0x3FFFUL)
; 1232 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruDisp);

	mov	ecx, DWORD PTR _ruDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1233 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	ecx, DWORD PTR _uvctlDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1234 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1235 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1236 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1237 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1238 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1239 : 
; 1240 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1241 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1242 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1243 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1244 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1245 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1246 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1247 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1248 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1249 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1250 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1251 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1252 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_S@3

; 1253 :   {
; 1254 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1255 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1256 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1257 :     vars->codeCache->X86Emit_SHLIR(x86Reg_edx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_S@3:

; 1258 :   }
; 1259 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1260 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1261 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1262 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1263 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVRuShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVRuShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_svshiftDisp$ = -52					; size = 4
_uvctlDisp$ = -48					; size = 4
_ruDisp$ = -44						; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_svshiftReadBaseReg$ = -36				; size = 4
_uvctlRegReadBaseReg$ = -32				; size = 4
_ruRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg_3$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVRuShiftSvshift

; 1265 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1266 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1267 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1268 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1269 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1270 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1271 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1272 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1273 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1274 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1275 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1276 :   int32 ruDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruDisp$[ebp], eax

; 1277 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1278 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1279 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1280 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1281 : 
; 1282 :   //ebp = (int32)ru >> ((2 + ((uvctl >> 24) & 0x07UL)) & 0x3FFFUL)
; 1283 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruDisp);

	mov	eax, DWORD PTR _ruDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1284 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	eax, DWORD PTR _uvctlDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1285 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1286 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1287 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1288 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1289 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1290 : 
; 1291 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1292 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1293 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1294 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1295 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1296 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1297 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1298 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1299 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1300 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1301 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1302 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebp, x86Reg_ecx);

	push	17					; 00000011H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1303 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	ecx, DWORD PTR _svshiftDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1304 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_esi);

	push	22					; 00000016H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1305 :   vars->codeCache->X86Emit_SHRRR(x86Reg_esi);

	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1306 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_esi);

	push	22					; 00000016H
	push	-5					; fffffffbH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1307 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_esi);

	push	22					; 00000016H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1308 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1309 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1310 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1311 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1312 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1313 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1314 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1315 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1316 :   vars->codeCache->X86Emit_MOVIR(vars->regBase, x86Reg_esi);

	push	22					; 00000016H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1317 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVRuShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVRvShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -56						; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_uvctlDisp$ = -44					; size = 4
_rvDisp$ = -40						; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg_3$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVRvShiftImmediate

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1320 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1321 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1322 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1323 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1324 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1325 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1326 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1327 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1328 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1329 :   int32 rvDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvDisp$[ebp], eax

; 1330 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1331 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1332 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1333 : 
; 1334 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _shiftTable[edx*4]
	mov	DWORD PTR _shift$[ebp], eax

; 1335 : 
; 1336 :   //ebp = (int32)rv >> ((2 + ((uvctl >> 24) & 0x07UL)) & 0x3FFFUL)
; 1337 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvDisp);

	mov	ecx, DWORD PTR _rvDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1338 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	ecx, DWORD PTR _uvctlDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1339 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1340 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1341 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1342 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1343 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1344 : 
; 1345 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1346 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1347 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1348 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1349 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1350 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1351 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1352 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1353 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1354 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1355 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1356 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1357 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_S@4

; 1358 :   {
; 1359 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1360 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1361 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1362 :     vars->codeCache->X86Emit_SHLIR(x86Reg_edx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_S@4:

; 1363 :   }
; 1364 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1365 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1366 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1367 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1368 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVRvShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVRvShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_svshiftDisp$ = -52					; size = 4
_uvctlDisp$ = -48					; size = 4
_rvDisp$ = -44						; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_svshiftReadBaseReg$ = -36				; size = 4
_uvctlRegReadBaseReg$ = -32				; size = 4
_rvRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg_3$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVRvShiftSvshift

; 1371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1372 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1373 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1374 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1375 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1376 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1377 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1378 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1379 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1380 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1381 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1382 :   int32 rvDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvDisp$[ebp], eax

; 1383 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1384 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1385 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1386 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1387 : 
; 1388 :   //ebp = (int32)rv >> ((2 + ((uvctl >> 24) & 0x07UL)) & 0x3FFFUL)
; 1389 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvDisp);

	mov	eax, DWORD PTR _rvDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1390 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	eax, DWORD PTR _uvctlDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1391 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1392 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1393 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1394 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1395 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1396 : 
; 1397 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1398 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1399 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1400 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1401 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1402 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1403 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1404 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1405 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1406 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1407 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1408 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebp, x86Reg_ecx);

	push	17					; 00000011H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1409 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	ecx, DWORD PTR _svshiftDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1410 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_esi);

	push	22					; 00000016H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1411 :   vars->codeCache->X86Emit_SHRRR(x86Reg_esi);

	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1412 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_esi);

	push	22					; 00000016H
	push	-5					; fffffffbH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1413 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_esi);

	push	22					; 00000016H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1414 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1415 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1416 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1417 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1418 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1419 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1420 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1421 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1422 :   vars->codeCache->X86Emit_MOVIR(vars->regBase, x86Reg_esi);

	push	22					; 00000016H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1423 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVRvShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVVectorShiftImmediate
EXTRN	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_SHLRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shiftCount$ = -64					; size = 4
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_src1RegDisp$ = -52					; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src1RegReadBaseReg_3$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVVectorShiftImmediate

; 1426 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1427 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1428 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1429 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1430 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 1431 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1432 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 1433 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1434 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 1435 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1436 :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 1437 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1438 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1439 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1440 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1441 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1442 :   uint32 shiftCount = nuance.fields[FIELD_MUL_INFO];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _shiftCount$[ebp], ecx

; 1443 : 
; 1444 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1445 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1446 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1447 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1448 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1449 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1450 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1451 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1452 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1453 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1454 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1455 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1456 : 
; 1457 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1458 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1459 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1460 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1461 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1462 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1463 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1464 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1465 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1466 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1467 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1468 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1469 : 
; 1470 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1471 :   vars->codeCache->X86Emit_MOVIR(nuance.fields[FIELD_MUL_INFO], x86Reg_ecx);

	push	17					; 00000011H
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1472 :   vars->codeCache->X86Emit_SHRRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1473 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_eax);

	push	16					; 00000010H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1474 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1475 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1476 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1477 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1478 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1479 : }

	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVVectorShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_SVVectorShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -68					; size = 4
_destRegDisp$ = -64					; size = 4
_src2RegDisp$ = -60					; size = 4
_src1RegDisp$ = -56					; size = 4
_svshiftReadBaseReg$ = -52				; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src1RegReadBaseReg_3$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_SVVectorShiftSvshift

; 1482 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1483 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1484 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1485 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1486 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 1487 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1488 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 1489 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1490 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 1491 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1492 :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 1493 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1494 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1495 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1496 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1497 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1498 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1499 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1500 : 
; 1501 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1502 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1503 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1504 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1505 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1506 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1507 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1508 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1509 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1510 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1511 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1512 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1513 : 
; 1514 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1515 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1516 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1517 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1518 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1519 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1520 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1521 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1522 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1523 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_edx);

	push	18					; 00000012H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1524 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1525 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1526 : 
; 1527 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1528 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	eax, DWORD PTR _svshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1529 :   vars->codeCache->X86Emit_SHRRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1530 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_eax);

	push	16					; 00000010H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1531 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1532 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1533 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1534 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1535 :   vars->codeCache->X86Emit_SHLRM(x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+12);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM

; 1536 : }

	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_SVVectorShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PImmediateShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -40						; size = 4
_scalar$ = -36						; size = 4
_destRegDisp$ = -32					; size = 4
_src2RegDisp$ = -28					; size = 4
_destRegWriteBaseReg$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PImmediateShiftImmediate

; 1539 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1540 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1541 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1542 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1543 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1544 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1545 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1546 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1547 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1548 : 
; 1549 :   int32 scalar = ((int32)(nuance.fields[FIELD_MUL_SRC1])) >> 16;

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _scalar$[ebp], edx

; 1550 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _shiftTable[ecx*4]
	mov	DWORD PTR _shift$[ebp], edx

; 1551 : 
; 1552 : 
; 1553 : /*
; 1554 :   mov ebp, scalar
; 1555 :   mov eax, [src2+0]
; 1556 :   mov ebx, [src2+4]
; 1557 :   mov ecx, [src2+8]
; 1558 :   sar eax, 16
; 1559 :   sar ebx, 16
; 1560 :   sar ecx, 16
; 1561 :   imul eax, eax, scalar
; 1562 :   imul ebx, ebx, scalar
; 1563 :   imul ecx, ecx, scalar
; 1564 :   if(shift > 0)
; 1565 :   {
; 1566 :     shl eax, shift
; 1567 :     shl ebx, shift
; 1568 :     shl ecx, shift
; 1569 :   }
; 1570 :   mov [src2+0], eax
; 1571 :   mov [src2+4], ebx
; 1572 :   mov [src2+8], ecx
; 1573 : */
; 1574 : 
; 1575 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1576 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1577 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1578 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1579 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1580 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1581 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_eax, scalar, x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _scalar$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1582 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_ebx, scalar, x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _scalar$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1583 :   vars->codeCache->X86Emit_IMULIRR(x86Reg_ecx, scalar, x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _scalar$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR

; 1584 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_P

; 1585 :   {
; 1586 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1587 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1588 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_P:

; 1589 :   }
; 1590 :   vars->codeCache->X86Emit_MOVIR(scalar, x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _scalar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1591 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1592 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1593 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1594 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PImmediateShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PScalarShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -48						; size = 4
_destRegDisp$ = -44					; size = 4
_src2RegDisp$ = -40					; size = 4
_src1RegDisp$ = -36					; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PScalarShiftImmediate

; 1597 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1598 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1599 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1600 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1601 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1602 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1603 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1604 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1605 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1606 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1607 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1608 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1609 : 
; 1610 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _shiftTable[edx*4]
	mov	DWORD PTR _shift$[ebp], eax

; 1611 : 
; 1612 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1613 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1614 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1615 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1616 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1617 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1618 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1619 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1620 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1621 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1622 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1623 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_P@2

; 1624 :   {
; 1625 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1626 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1627 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_P@2:

; 1628 :   }
; 1629 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1630 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1631 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1632 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PScalarShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PScalarShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -52					; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_src1RegDisp$ = -40					; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src2RegReadBaseReg_0$ = -24				; size = 4
_src1RegReadBaseReg$ = -20				; size = 4
_svshiftReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PScalarShiftSvshift

; 1634 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1635 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1636 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1637 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1638 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1639 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1640 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1641 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1642 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1643 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1644 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1645 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1646 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1647 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1648 : 
; 1649 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1650 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1651 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1652 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1653 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1654 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1655 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1656 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1657 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1658 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1659 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1660 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1661 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	edx, DWORD PTR _svshiftDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1662 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1663 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1664 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1665 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1666 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1667 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1668 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1669 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1670 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1671 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PScalarShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PRuShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -52						; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_uvctlDisp$ = -40					; size = 4
_ruDisp$ = -36						; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_ruRegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PRuShiftImmediate

; 1673 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1674 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1675 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1676 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1677 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1678 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1679 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1680 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1681 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1682 :   int32 ruDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruDisp$[ebp], eax

; 1683 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1684 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1685 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1686 : 
; 1687 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _shiftTable[eax*4]
	mov	DWORD PTR _shift$[ebp], ecx

; 1688 : 
; 1689 :  //scalar = (int32)(entry.pIndexRegs[2] >> (2 + BilinearInfo_XYMipmap(*entry.pUvctl))) & 0x3FFFUL;
; 1690 : 
; 1691 :   //ebp = ((int32)ru >> (2 + ((uvctl >> 24) & 0x07UL))) & 0x3FFFUL
; 1692 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruDisp);

	mov	edx, DWORD PTR _ruDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1693 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	edx, DWORD PTR _uvctlDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1694 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1695 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1696 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1697 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1698 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1699 : 
; 1700 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1701 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1702 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1703 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1704 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1705 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1706 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1707 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1708 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1709 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_P@3

; 1710 :   {
; 1711 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1712 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1713 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_P@3:

; 1714 :   }
; 1715 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1716 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1717 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1718 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PRuShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PRuShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_svshiftDisp$ = -48					; size = 4
_uvctlDisp$ = -44					; size = 4
_ruDisp$ = -40						; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_svshiftReadBaseReg$ = -32				; size = 4
_uvctlRegReadBaseReg$ = -28				; size = 4
_ruRegReadBaseReg$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PRuShiftSvshift

; 1720 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1721 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1722 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1723 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1724 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1725 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1726 :   x86BaseReg ruRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RU);

	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ruRegReadBaseReg$[ebp], eax

; 1727 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1728 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1729 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1730 :   int32 ruDisp = GetMiscRegEmitDisp(vars,REGINDEX_RU);

	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ruDisp$[ebp], eax

; 1731 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1732 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1733 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1734 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1735 : 
; 1736 :   //ebp = ((int32)ru >> (2 + ((uvctl >> 24) & 0x07UL))) & 0x3FFFUL
; 1737 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, ruRegReadBaseReg, x86IndexReg_none, x86Scale_1, ruDisp);

	mov	ecx, DWORD PTR _ruDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ruRegReadBaseReg$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1738 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	ecx, DWORD PTR _uvctlDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1739 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1740 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1741 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1742 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1743 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1744 : 
; 1745 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1746 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1747 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1748 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1749 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1750 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1751 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1752 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1753 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1754 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1755 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	ecx, DWORD PTR _svshiftDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1756 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1757 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1758 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1759 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1760 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1761 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1762 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1763 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1764 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1765 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PRuShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PRvShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -52						; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_uvctlDisp$ = -40					; size = 4
_rvDisp$ = -36						; size = 4
_destRegWriteBaseReg$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_uvctlRegReadBaseReg$ = -16				; size = 4
_rvRegReadBaseReg$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PRvShiftImmediate

; 1767 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1768 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1769 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1770 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1771 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1772 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1773 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1774 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1775 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1776 :   int32 rvDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvDisp$[ebp], eax

; 1777 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1778 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1779 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1780 : 
; 1781 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _shiftTable[eax*4]
	mov	DWORD PTR _shift$[ebp], ecx

; 1782 : 
; 1783 :   //ebp = ((int32)rv >> (2 + ((uvctl >> 24) & 0x07UL))) & 0x3FFFUL
; 1784 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvDisp);

	mov	edx, DWORD PTR _rvDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1785 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	edx, DWORD PTR _uvctlDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1786 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1787 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1788 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1789 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1790 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1791 : 
; 1792 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1793 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1794 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1795 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1796 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1797 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1798 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1799 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1800 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1801 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_P@4

; 1802 :   {
; 1803 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1804 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1805 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_P@4:

; 1806 :   }
; 1807 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1808 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1809 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1810 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PRvShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PRvShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_svshiftDisp$ = -52					; size = 4
_uvctlDisp$ = -48					; size = 4
_rvDisp$ = -44						; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_svshiftReadBaseReg$ = -36				; size = 4
_uvctlRegReadBaseReg$ = -32				; size = 4
_rvRegReadBaseReg$ = -28				; size = 4
_src2RegReadBaseReg_3$ = -24				; size = 4
_src2RegReadBaseReg_2$ = -20				; size = 4
_src2RegReadBaseReg_1$ = -16				; size = 4
_src2RegReadBaseReg_0$ = -12				; size = 4
_src2RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PRvShiftSvshift

; 1813 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1814 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1815 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], eax

; 1816 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1817 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1818 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1819 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1820 :   x86BaseReg rvRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RV);

	push	6
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rvRegReadBaseReg$[ebp], eax

; 1821 :   x86BaseReg uvctlRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvctlRegReadBaseReg$[ebp], eax

; 1822 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1823 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1824 :   int32 rvDisp = GetMiscRegEmitDisp(vars,REGINDEX_RV);

	push	6
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rvDisp$[ebp], eax

; 1825 :   int32 uvctlDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVCTL);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvctlDisp$[ebp], eax

; 1826 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1827 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1828 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1829 : 
; 1830 :   //ebp = ((int32)rv >> (2 + ((uvctl >> 24) & 0x07UL))) & 0x3FFFUL
; 1831 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, rvRegReadBaseReg, x86IndexReg_none, x86Scale_1, rvDisp);

	mov	eax, DWORD PTR _rvDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rvRegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1832 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, uvctlRegReadBaseReg, x86IndexReg_none, x86Scale_1, uvctlDisp);

	mov	eax, DWORD PTR _uvctlDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _uvctlRegReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1833 :   vars->codeCache->X86Emit_SHRIR(x86Reg_ecx, 24);

	push	24					; 00000018H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR

; 1834 :   vars->codeCache->X86Emit_ANDIR(0x07, x86Reg_ecx);

	push	17					; 00000011H
	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1835 :   vars->codeCache->X86Emit_ADDIR(2, x86Reg_ecx);

	push	17					; 00000011H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 1836 :   vars->codeCache->X86Emit_SARRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR

; 1837 :   vars->codeCache->X86Emit_ANDIR(0x3FFFUL, x86Reg_ebp);

	push	21					; 00000015H
	push	16383					; 00003fffH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1838 : 
; 1839 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1840 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1841 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1842 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1843 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1844 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1845 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1846 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1847 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1848 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1849 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	eax, DWORD PTR _svshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1850 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1851 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1852 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1853 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1854 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebx);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1855 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1856 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1857 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1858 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1859 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PRvShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PVectorShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -56						; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PVectorShiftImmediate

; 1861 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1862 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1863 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1864 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1865 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 1866 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1867 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 1868 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1869 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 1870 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1871 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1872 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1873 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1874 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1875 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _shiftTable[eax*4]
	mov	DWORD PTR _shift$[ebp], ecx

; 1876 : 
; 1877 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1878 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1879 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1880 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1881 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1882 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1883 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1884 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1885 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1886 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1887 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1888 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1889 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1890 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1891 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1892 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_MUL_P@5

; 1893 :   {
; 1894 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	dl, BYTE PTR _shift$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1895 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ecx, shift);

	mov	cl, BYTE PTR _shift$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 1896 :     vars->codeCache->X86Emit_SHLIR(x86Reg_ebx, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_MUL_P@5:

; 1897 :   }
; 1898 :   vars->codeCache->X86Emit_MOVIR(vars->regBase, x86Reg_esi);

	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1899 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1900 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ecx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1901 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1902 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PVectorShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MUL_PVectorShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -60					; size = 4
_destRegDisp$ = -56					; size = 4
_src2RegDisp$ = -52					; size = 4
_src1RegDisp$ = -48					; size = 4
_svshiftReadBaseReg$ = -44				; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MUL_PVectorShiftSvshift

; 1904 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1905 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1906 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1907 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1908 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 1909 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1910 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 1911 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1912 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 1913 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1914 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1915 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1916 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1917 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1918 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1919 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 1920 : 
; 1921 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1922 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1923 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1924 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 4
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1925 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1926 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1927 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1928 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1929 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1930 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1931 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1932 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 8
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	edx
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1933 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1934 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1935 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1936 : 
; 1937 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 1938 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	edx, DWORD PTR _svshiftDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1939 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 1940 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 1941 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 1942 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1943 :   vars->codeCache->X86Emit_SHLRR(x86Reg_edx);

	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1944 :   vars->codeCache->X86Emit_SHLRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 1945 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1946 :   vars->codeCache->X86Emit_MOVRM(x86Reg_edx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+4);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1947 :   vars->codeCache->X86Emit_MOVRM(x86Reg_ebp, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+8);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1948 : }

	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MUL_PVectorShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DOTPScalarShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -52						; size = 4
_destRegDisp$ = -48					; size = 4
_src2RegDisp$ = -44					; size = 4
_src1RegDisp$ = -40					; size = 4
_destRegWriteBaseReg$ = -36				; size = 4
_src2RegReadBaseReg_3$ = -32				; size = 4
_src2RegReadBaseReg_2$ = -28				; size = 4
_src2RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DOTPScalarShiftImmediate

; 1950 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1951 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1952 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1953 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1954 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1955 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1956 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1957 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1958 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3); 

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 1959 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 1960 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 1961 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 1962 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 1963 : 
; 1964 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _shiftTable[ecx*4]
	mov	DWORD PTR _shift$[ebp], edx

; 1965 : 
; 1966 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1967 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1968 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1969 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1970 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 1971 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1972 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1973 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1974 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1975 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 1976 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1977 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1978 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1979 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 1980 :   vars->codeCache->X86Emit_ADDRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1981 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1982 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 1983 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_DOTPS

; 1984 :   {
; 1985 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_DOTPS:

; 1986 :   }
; 1987 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 1988 : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DOTPScalarShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DOTPScalarShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -56					; size = 4
_destRegDisp$ = -52					; size = 4
_src2RegDisp$ = -48					; size = 4
_src1RegDisp$ = -44					; size = 4
_destRegWriteBaseReg$ = -40				; size = 4
_src2RegReadBaseReg_3$ = -36				; size = 4
_src2RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src2RegReadBaseReg_0$ = -24				; size = 4
_src1RegReadBaseReg$ = -20				; size = 4
_svshiftReadBaseReg$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DOTPScalarShiftSvshift

; 1990 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1991 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 1992 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 1993 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 1994 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 1995 :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 1996 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 1997 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 1998 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 1999 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3); 

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 2000 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2001 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2002 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2003 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2004 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 2005 : 
; 2006 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2007 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2008 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2009 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2010 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2011 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2012 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2013 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2014 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2015 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2016 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2017 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2018 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2019 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ebp);

	push	21					; 00000015H
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2020 :   vars->codeCache->X86Emit_ADDRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2021 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2022 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2023 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2024 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	eax, DWORD PTR _svshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2025 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 2026 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2027 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2028 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 2029 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2030 : }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DOTPScalarShiftSvshift
_TEXT	ENDS
PUBLIC	?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DOTPVectorShiftImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_shift$ = -64						; size = 4
_destRegDisp$ = -60					; size = 4
_src2RegDisp$ = -56					; size = 4
_src1RegDisp$ = -52					; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src1RegReadBaseReg_3$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DOTPVectorShiftImmediate

; 2032 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2033 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2034 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2035 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2036 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 2037 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 2038 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 2039 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 2040 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 2041 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 2042 :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 2043 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 2044 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2045 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2046 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2047 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2048 :   int32 shift = shiftTable[nuance.fields[FIELD_MUL_INFO]];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _shiftTable[ecx*4]
	mov	DWORD PTR _shift$[ebp], edx

; 2049 : 
; 2050 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2051 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2052 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2053 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	ecx
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2054 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2055 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2056 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2057 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2058 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2059 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2060 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	ecx
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2061 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	ecx
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2062 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2063 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	ecx, DWORD PTR _src2RegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	edx
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2064 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	edx
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2065 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2066 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2067 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2068 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2069 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2070 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_edx, x86Reg_ecx);

	push	17					; 00000011H
	push	18					; 00000012H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2071 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2072 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_edx);

	push	18					; 00000012H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2073 :   if(shift > 0)

	cmp	DWORD PTR _shift$[ebp], 0
	jle	SHORT $LN1@Emit_DOTPV

; 2074 :   {
; 2075 :     vars->codeCache->X86Emit_SHLIR(x86Reg_eax, shift);

	mov	al, BYTE PTR _shift$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN1@Emit_DOTPV:

; 2076 :   }
; 2077 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2078 : }

	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DOTPVectorShiftImmediate
_TEXT	ENDS
PUBLIC	?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DOTPVectorShiftSvshift
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_svshiftDisp$ = -68					; size = 4
_destRegDisp$ = -64					; size = 4
_src2RegDisp$ = -60					; size = 4
_src1RegDisp$ = -56					; size = 4
_svshiftReadBaseReg$ = -52				; size = 4
_destRegWriteBaseReg$ = -48				; size = 4
_src2RegReadBaseReg_3$ = -44				; size = 4
_src1RegReadBaseReg_3$ = -40				; size = 4
_src2RegReadBaseReg_2$ = -36				; size = 4
_src1RegReadBaseReg_2$ = -32				; size = 4
_src2RegReadBaseReg_1$ = -28				; size = 4
_src1RegReadBaseReg_1$ = -24				; size = 4
_src2RegReadBaseReg_0$ = -20				; size = 4
_src1RegReadBaseReg_0$ = -16				; size = 4
_src2RegIndex$ = -12					; size = 4
_src1RegIndex$ = -8					; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DOTPVectorShiftSvshift

; 2080 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2081 :   uint32 destRegIndex = nuance.fields[FIELD_MUL_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 2082 :   uint32 src1RegIndex = nuance.fields[FIELD_MUL_SRC1];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _src1RegIndex$[ebp], eax

; 2083 :   uint32 src2RegIndex = nuance.fields[FIELD_MUL_SRC2];

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _src2RegIndex$[ebp], edx

; 2084 :   x86BaseReg src1RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_0$[ebp], eax

; 2085 :   x86BaseReg src2RegReadBaseReg_0 = GetScalarRegReadBaseReg(vars,src2RegIndex);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_0$[ebp], eax

; 2086 :   x86BaseReg src1RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src1RegIndex+1);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_1$[ebp], eax

; 2087 :   x86BaseReg src2RegReadBaseReg_1 = GetScalarRegReadBaseReg(vars,src2RegIndex+1);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_1$[ebp], eax

; 2088 :   x86BaseReg src1RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src1RegIndex+2);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_2$[ebp], eax

; 2089 :   x86BaseReg src2RegReadBaseReg_2 = GetScalarRegReadBaseReg(vars,src2RegIndex+2);

	mov	ecx, DWORD PTR _src2RegIndex$[ebp]
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_2$[ebp], eax

; 2090 :   x86BaseReg src1RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src1RegIndex+3);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg_3$[ebp], eax

; 2091 :   x86BaseReg src2RegReadBaseReg_3 = GetScalarRegReadBaseReg(vars,src2RegIndex+3);

	mov	edx, DWORD PTR _src2RegIndex$[ebp]
	add	edx, 3
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src2RegReadBaseReg_3$[ebp], eax

; 2092 :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	ecx, DWORD PTR _destRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 2093 :   x86BaseReg svshiftReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _svshiftReadBaseReg$[ebp], eax

; 2094 :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 2095 :   int32 src2RegDisp = GetScalarRegEmitDisp(vars,src2RegIndex);

	mov	eax, DWORD PTR _src2RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src2RegDisp$[ebp], eax

; 2096 :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 2097 :   int32 svshiftDisp = GetMiscRegEmitDisp(vars,REGINDEX_SVSHIFT);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _svshiftDisp$[ebp], eax

; 2098 : 
; 2099 :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src1RegDisp+0);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_0$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2100 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src2RegReadBaseReg_0, x86IndexReg_none, x86Scale_1, src2RegDisp+0);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_0$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2101 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src1RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src1RegDisp+4);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_1$[ebp]
	push	eax
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2102 :   vars->codeCache->X86Emit_MOVMR(x86Reg_edx, src2RegReadBaseReg_1, x86IndexReg_none, x86Scale_1, src2RegDisp+4);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 4
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_1$[ebp]
	push	eax
	push	18					; 00000012H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2103 :   vars->codeCache->X86Emit_SARIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2104 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2105 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2106 :   vars->codeCache->X86Emit_SARIR(x86Reg_edx, 16);

	push	16					; 00000010H
	push	18					; 00000012H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2107 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2108 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ecx, x86Reg_edx);

	push	18					; 00000012H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2109 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, src1RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src1RegDisp+8);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg_2$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2110 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ebp, src2RegReadBaseReg_2, x86IndexReg_none, x86Scale_1, src2RegDisp+8);

	mov	edx, DWORD PTR _src2RegDisp$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src2RegReadBaseReg_2$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2111 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ecx);

	push	17					; 00000011H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2112 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, src2RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src2RegDisp+12);

	mov	eax, DWORD PTR _src2RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src2RegReadBaseReg_3$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2113 :   vars->codeCache->X86Emit_MOVMR(x86Reg_esi, src1RegReadBaseReg_3, x86IndexReg_none, x86Scale_1, src1RegDisp+12);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg_3$[ebp]
	push	ecx
	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2114 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebx, 16);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2115 :   vars->codeCache->X86Emit_SARIR(x86Reg_ebp, 16);

	push	16					; 00000010H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2116 :   vars->codeCache->X86Emit_SARIR(x86Reg_esi, 16);

	push	16					; 00000010H
	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2117 :   vars->codeCache->X86Emit_SARIR(x86Reg_ecx, 16);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR

; 2118 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_ebx, x86Reg_ebp);

	push	21					; 00000015H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2119 :   vars->codeCache->X86Emit_IMULRRR(x86Reg_esi, x86Reg_ecx);

	push	17					; 00000011H
	push	22					; 00000016H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR

; 2120 :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_esi);

	push	22					; 00000016H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2121 :   vars->codeCache->X86Emit_MOVIR(vars->regBase, x86Reg_esi);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2122 :   vars->codeCache->X86Emit_ADDRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 2123 : 
; 2124 :   vars->codeCache->X86Emit_MOVIR(16, x86Reg_ebp);

	push	21					; 00000015H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 2125 :   vars->codeCache->X86Emit_MOVMR(x86Reg_ecx, svshiftReadBaseReg, x86IndexReg_none, x86Scale_1, svshiftDisp);

	mov	eax, DWORD PTR _svshiftDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _svshiftReadBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 2126 :   vars->codeCache->X86Emit_SHRRR(x86Reg_ebp);

	push	21					; 00000015H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR

; 2127 :   vars->codeCache->X86Emit_ANDIR(~0x04, x86Reg_ebp);

	push	21					; 00000015H
	push	-5					; fffffffbH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 2128 :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 2129 :   vars->codeCache->X86Emit_SHLRR(x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR

; 2130 :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp+0);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 2131 : }

	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DOTPVectorShiftSvshift
_TEXT	ENDS
END

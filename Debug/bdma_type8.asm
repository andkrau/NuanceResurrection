; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\bdma_type8.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG12224
_DATA	ENDS
CONST	SEGMENT
$SG12224 DB	'bad allocation', 00H
CONST	ENDS
PUBLIC	?BDMA_Type8_Write_0@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_0
EXTRN	?SwapWordBytes@@YIXPAG@Z:PROC			; SwapWordBytes
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z:PROC ; NuonEnvironment::GetPointerToMemory
EXTRN	?nuonEnv@@3PAVNuonEnvironment@@A:DWORD		; nuonEnv
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\bdma_type8.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv256 = -196						; size = 4
tv253 = -192						; size = 4
_bTrigger$ = -181					; size = 1
_bRemote$ = -180					; size = 1
_bDup$ = -179						; size = 1
_bDirect$ = -178					; size = 1
_bRead$ = -177						; size = 1
_mpeBase$ = -156					; size = 4
_sdramBase$ = -152					; size = 4
_mode$ = -148						; size = 4
_bva$ = -144						; size = 4
_zcompare$ = -140					; size = 4
_ypos$ = -136						; size = 4
_ylen$ = -132						; size = 4
_xpos$ = -128						; size = 4
_xlen$ = -124						; size = 4
_xsize$ = -120						; size = 4
_destBStep$ = -116					; size = 4
_destAStep$ = -112					; size = 4
_srcBStep$ = -108					; size = 4
_srcAStep$ = -104					; size = 4
_destOffset$ = -100					; size = 4
_srcOffset$ = -96					; size = 4
_destB$ = -92						; size = 4
_destA$ = -88						; size = 4
_srcB$ = -84						; size = 4
_srcA$ = -80						; size = 4
_bCount$ = -76						; size = 4
_aCount$ = -72						; size = 4
_pixtype$ = -68						; size = 4
_type$ = -64						; size = 4
_directValue$ = -56					; size = 4
_pDest$ = -48						; size = 4
_pSrc$ = -44						; size = 4
_baseMemory$ = -40					; size = 4
_intMemory$ = -36					; size = 4
_pix16$ = -28						; size = 2
_pDest16$ = -20						; size = 4
_pix32$ = -12						; size = 4
_pSrc32$ = -4						; size = 4
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_0@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_0

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 13   :   uint32 *pSrc32, pix32;
; 14   :   uint16 *pDest16, pix16;
; 15   :   void *intMemory, *baseMemory, *pSrc, *pDest;
; 16   :   uint32 directValue, type, pixtype;
; 17   :   uint32 aCount, bCount;
; 18   :   uint32 srcA, srcB, destA, destB, srcOffset, destOffset;
; 19   :   int32 srcAStep, srcBStep, destAStep, destBStep, xsize;
; 20   :   uint32 xlen, xpos, ylen, ypos, zcompare, bva;
; 21   :   uint32 mode, sdramBase, mpeBase, map, zmap, destZOffset, srcZOffset, mapOffset;
; 22   : 
; 23   :   bool bRead, bDirect, bDup, bRemote, bTrigger, bCompareZ, bUpdatePixel, bUpdateZ, bZTestResult;
; 24   : 
; 25   :   bRemote = flags & (1UL << 28);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 268435456				; 10000000H
	setne	cl
	mov	BYTE PTR _bRemote$[ebp], cl

; 26   :   bDirect = flags & (1UL << 27);

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 134217728				; 08000000H
	setne	al
	mov	BYTE PTR _bDirect$[ebp], al

; 27   :   bDup = flags & (3UL << 26); //bDup = dup | direct

	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 201326592				; 0c000000H
	setne	dl
	mov	BYTE PTR _bDup$[ebp], dl

; 28   :   bTrigger = flags & (1UL << 25);

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 33554432				; 02000000H
	setne	cl
	mov	BYTE PTR _bTrigger$[ebp], cl

; 29   :   bRead = flags & (1UL << 13);

	mov	edx, DWORD PTR _flags$[ebp]
	and	edx, 8192				; 00002000H
	setne	al
	mov	BYTE PTR _bRead$[ebp], al

; 30   :   xsize = (flags >> 13) & 0x7F8UL;

	mov	ecx, DWORD PTR _flags$[ebp]
	shr	ecx, 13					; 0000000dH
	and	ecx, 2040				; 000007f8H
	mov	DWORD PTR _xsize$[ebp], ecx

; 31   :   type = (flags >> 14) & 0x03UL;

	mov	edx, DWORD PTR _flags$[ebp]
	shr	edx, 14					; 0000000eH
	and	edx, 3
	mov	DWORD PTR _type$[ebp], edx

; 32   :   mode = flags & 0xFFFUL;

	mov	eax, DWORD PTR _flags$[ebp]
	and	eax, 4095				; 00000fffH
	mov	DWORD PTR _mode$[ebp], eax

; 33   :   zcompare = (flags >> 1) & 0x07UL;

	mov	ecx, DWORD PTR _flags$[ebp]
	shr	ecx, 1
	and	ecx, 7
	mov	DWORD PTR _zcompare$[ebp], ecx

; 34   :   pixtype = (flags >> 4) & 0x0FUL;

	mov	edx, DWORD PTR _flags$[ebp]
	shr	edx, 4
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _pixtype$[ebp], edx

; 35   :   bva = ((flags >> 7) & 0x06UL) | (flags & 0x01UL);

	mov	eax, DWORD PTR _flags$[ebp]
	shr	eax, 7
	and	eax, 6
	mov	ecx, DWORD PTR _flags$[ebp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR _bva$[ebp], eax

; 36   :   sdramBase = baseaddr & 0x7FFFFFFEUL;

	mov	edx, DWORD PTR _baseaddr$[ebp]
	and	edx, 2147483646				; 7ffffffeH
	mov	DWORD PTR _sdramBase$[ebp], edx

; 37   :   mpeBase = intaddr & 0x7FFFFFFCUL;

	mov	eax, DWORD PTR _intaddr$[ebp]
	and	eax, 2147483644				; 7ffffffcH
	mov	DWORD PTR _mpeBase$[ebp], eax

; 38   :   xlen = (xinfo >> 16) & 0x3FFUL;

	mov	ecx, DWORD PTR _xinfo$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 1023				; 000003ffH
	mov	DWORD PTR _xlen$[ebp], ecx

; 39   :   xpos = xinfo & 0x7FFUL;

	mov	edx, DWORD PTR _xinfo$[ebp]
	and	edx, 2047				; 000007ffH
	mov	DWORD PTR _xpos$[ebp], edx

; 40   :   ylen = (yinfo >> 16) & 0x3FFUL;

	mov	eax, DWORD PTR _yinfo$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR _ylen$[ebp], eax

; 41   :   ypos = yinfo & 0x7FFUL;

	mov	ecx, DWORD PTR _yinfo$[ebp]
	and	ecx, 2047				; 000007ffH
	mov	DWORD PTR _ypos$[ebp], ecx

; 42   : 
; 43   :   directValue = intaddr;

	mov	edx, DWORD PTR _intaddr$[ebp]
	mov	DWORD PTR _directValue$[ebp], edx

; 44   : 
; 45   :    if(bRemote)

	movzx	eax, BYTE PTR _bRemote$[ebp]
	test	eax, eax
	je	SHORT $LN17@BDMA_Type8

; 46   :   {
; 47   :     //internal address is system address (but still in MPE memory)
; 48   :     intMemory = nuonEnv->GetPointerToMemory(nuonEnv->mpe[(mpeBase >> 23) & 0x1FUL], mpeBase & 0x207FFFFF, false);

	push	0
	mov	ecx, DWORD PTR _mpeBase$[ebp]
	and	ecx, 545259519				; 207fffffH
	push	ecx
	mov	edx, DWORD PTR _mpeBase$[ebp]
	shr	edx, 23					; 00000017H
	and	edx, 31					; 0000001fH
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _intMemory$[ebp], eax

; 49   :   }
; 50   :   else

	jmp	SHORT $LN16@BDMA_Type8
$LN17@BDMA_Type8:

; 51   :   {
; 52   :     //internal address is local to MPE
; 53   :     intMemory = nuonEnv->GetPointerToMemory(the_mpe, mpeBase & 0x207FFFFF, false);

	push	0
	mov	edx, DWORD PTR _mpeBase$[ebp]
	and	edx, 545259519				; 207fffffH
	push	edx
	mov	eax, DWORD PTR _the_mpe$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _intMemory$[ebp], eax
$LN16@BDMA_Type8:

; 54   :   }
; 55   : 
; 56   :   //base address is always a system address (absolute)
; 57   :   baseMemory = nuonEnv->GetPointerToMemory(nuonEnv->mpe[(sdramBase >> 23) & 0x1FUL], sdramBase, false);

	push	0
	mov	ecx, DWORD PTR _sdramBase$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sdramBase$[ebp]
	shr	edx, 23					; 00000017H
	and	edx, 31					; 0000001fH
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _baseMemory$[ebp], eax

; 58   : 
; 59   :   pSrc = intMemory;

	mov	edx, DWORD PTR _intMemory$[ebp]
	mov	DWORD PTR _pSrc$[ebp], edx

; 60   :   pDest = baseMemory;

	mov	eax, DWORD PTR _baseMemory$[ebp]
	mov	DWORD PTR _pDest$[ebp], eax

; 61   : 
; 62   :   if(bDup)

	movzx	ecx, BYTE PTR _bDup$[ebp]
	test	ecx, ecx
	je	SHORT $LN15@BDMA_Type8

; 63   :   {
; 64   :     if(bDirect)

	movzx	edx, BYTE PTR _bDirect$[ebp]
	test	edx, edx
	je	SHORT $LN14@BDMA_Type8

; 65   :     {
; 66   :       //Direct and Dup: intaddr is data.
; 67   :       directValue = intaddr;

	mov	eax, DWORD PTR _intaddr$[ebp]
	mov	DWORD PTR _directValue$[ebp], eax

; 68   :       //swap back to big endian format
; 69   :       SwapScalarBytes(&directValue);

	lea	ecx, DWORD PTR _directValue$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 70   :     }
; 71   :     else

	jmp	SHORT $LN13@BDMA_Type8
$LN14@BDMA_Type8:

; 72   :     {
; 73   :       //Dup but not Direct: read scalar from memory, no need to swap
; 74   :       directValue = *(uint32 *)intMemory;

	mov	ecx, DWORD PTR _intMemory$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _directValue$[ebp], edx
$LN13@BDMA_Type8:

; 75   :     }
; 76   : 
; 77   :     pSrc = (void *)&directValue;

	lea	eax, DWORD PTR _directValue$[ebp]
	mov	DWORD PTR _pSrc$[ebp], eax

; 78   :     srcAStep = 0;

	mov	DWORD PTR _srcAStep$[ebp], 0

; 79   :     srcBStep = 0;

	mov	DWORD PTR _srcBStep$[ebp], 0

; 80   :   }
; 81   :   else

	jmp	SHORT $LN12@BDMA_Type8
$LN15@BDMA_Type8:

; 82   :   {
; 83   :     srcAStep = 1;

	mov	DWORD PTR _srcAStep$[ebp], 1

; 84   :     srcBStep = xlen;

	mov	ecx, DWORD PTR _xlen$[ebp]
	mov	DWORD PTR _srcBStep$[ebp], ecx
$LN12@BDMA_Type8:

; 85   :   }
; 86   : 
; 87   :   srcOffset = 0;

	mov	DWORD PTR _srcOffset$[ebp], 0

; 88   :   destOffset = ((ypos * (uint32)xsize)) + xpos;

	mov	edx, DWORD PTR _ypos$[ebp]
	imul	edx, DWORD PTR _xsize$[ebp]
	add	edx, DWORD PTR _xpos$[ebp]
	mov	DWORD PTR _destOffset$[ebp], edx

; 89   : 
; 90   :   //BVA = 000 (horizontal DMA, x increment, y increment)
; 91   :   destAStep = 1;

	mov	DWORD PTR _destAStep$[ebp], 1

; 92   :   destBStep = xsize;

	mov	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _destBStep$[ebp], eax

; 93   :   aCount = xlen;

	mov	ecx, DWORD PTR _xlen$[ebp]
	mov	DWORD PTR _aCount$[ebp], ecx

; 94   :   bCount = ylen;

	mov	edx, DWORD PTR _ylen$[ebp]
	mov	DWORD PTR _bCount$[ebp], edx

; 95   : 
; 96   :   pSrc32 = (uint32 *)pSrc + srcOffset;

	mov	eax, DWORD PTR _srcOffset$[ebp]
	mov	ecx, DWORD PTR _pSrc$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pSrc32$[ebp], edx

; 97   :   pDest16 = (uint16 *)pDest + destOffset;

	mov	eax, DWORD PTR _destOffset$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _pDest16$[ebp], edx

; 98   :   srcB = 0;

	mov	DWORD PTR _srcB$[ebp], 0

; 99   :   destB = 0;

	mov	DWORD PTR _destB$[ebp], 0

; 100  : 
; 101  :   if((GetPixBaseAddr(sdramBase,destOffset,2) >= nuonEnv->mainChannelLowerLimit) && (GetPixBaseAddr(sdramBase,destOffset,2) <= nuonEnv->mainChannelUpperLimit) ||
; 102  :       (GetPixBaseAddr(sdramBase,(destOffset+((xsize - 1)*ylen)+xlen),2) >= nuonEnv->mainChannelLowerLimit) && (GetPixBaseAddr(sdramBase,(destOffset+((xsize - 1)*ylen)+xlen),2) <= nuonEnv->mainChannelUpperLimit))

	mov	eax, DWORD PTR _destOffset$[ebp]
	mov	ecx, DWORD PTR _sdramBase$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	edx, DWORD PTR [eax+52]
	jb	SHORT $LN9@BDMA_Type8
	mov	ecx, DWORD PTR _destOffset$[ebp]
	mov	edx, DWORD PTR _sdramBase$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	eax, DWORD PTR [ecx+48]
	jbe	SHORT $LN10@BDMA_Type8
$LN9@BDMA_Type8:
	mov	edx, DWORD PTR _xsize$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _ylen$[ebp]
	add	edx, DWORD PTR _destOffset$[ebp]
	add	edx, DWORD PTR _xlen$[ebp]
	mov	eax, DWORD PTR _sdramBase$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	ecx, DWORD PTR [edx+52]
	jb	SHORT $LN11@BDMA_Type8
	mov	eax, DWORD PTR _xsize$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _ylen$[ebp]
	add	eax, DWORD PTR _destOffset$[ebp]
	add	eax, DWORD PTR _xlen$[ebp]
	mov	ecx, DWORD PTR _sdramBase$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	edx, DWORD PTR [eax+48]
	ja	SHORT $LN11@BDMA_Type8
$LN10@BDMA_Type8:

; 103  :   {
; 104  :     nuonEnv->bMainBufferModified = true;

	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	BYTE PTR [ecx+86], 1

; 105  :   }
; 106  :   else if((GetPixBaseAddr(sdramBase,destOffset,2) >= nuonEnv->overlayChannelLowerLimit) && (GetPixBaseAddr(sdramBase,destOffset,2) <= nuonEnv->overlayChannelUpperLimit) ||

	jmp	$LN4@BDMA_Type8
$LN11@BDMA_Type8:

; 107  :       (GetPixBaseAddr(sdramBase,(destOffset+((xsize - 1)*ylen)+xlen),2) >= nuonEnv->overlayChannelLowerLimit) && (GetPixBaseAddr(sdramBase,(destOffset+((xsize - 1)*ylen)+xlen),2) <= nuonEnv->overlayChannelUpperLimit))

	mov	edx, DWORD PTR _destOffset$[ebp]
	mov	eax, DWORD PTR _sdramBase$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	ecx, DWORD PTR [edx+60]
	jb	SHORT $LN5@BDMA_Type8
	mov	eax, DWORD PTR _destOffset$[ebp]
	mov	ecx, DWORD PTR _sdramBase$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	edx, DWORD PTR [eax+56]
	jbe	SHORT $LN6@BDMA_Type8
$LN5@BDMA_Type8:
	mov	ecx, DWORD PTR _xsize$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _ylen$[ebp]
	add	ecx, DWORD PTR _destOffset$[ebp]
	add	ecx, DWORD PTR _xlen$[ebp]
	mov	edx, DWORD PTR _sdramBase$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	eax, DWORD PTR [ecx+60]
	jb	SHORT $LN4@BDMA_Type8
	mov	edx, DWORD PTR _xsize$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _ylen$[ebp]
	add	edx, DWORD PTR _destOffset$[ebp]
	add	edx, DWORD PTR _xlen$[ebp]
	mov	eax, DWORD PTR _sdramBase$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	cmp	ecx, DWORD PTR [edx+56]
	ja	SHORT $LN4@BDMA_Type8
$LN6@BDMA_Type8:

; 108  :   {
; 109  :     nuonEnv->bOverlayBufferModified = true;

	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	BYTE PTR [eax+87], 1
$LN4@BDMA_Type8:

; 110  :   }
; 111  : 
; 112  :   while(bCount--)

	mov	ecx, DWORD PTR _bCount$[ebp]
	mov	DWORD PTR tv253[ebp], ecx
	mov	edx, DWORD PTR _bCount$[ebp]
	sub	edx, 1
	mov	DWORD PTR _bCount$[ebp], edx
	cmp	DWORD PTR tv253[ebp], 0
	je	$LN18@BDMA_Type8

; 113  :   {
; 114  :     srcA = 0;

	mov	DWORD PTR _srcA$[ebp], 0

; 115  :     destA = 0;

	mov	DWORD PTR _destA$[ebp], 0

; 116  :     aCount = xlen;

	mov	eax, DWORD PTR _xlen$[ebp]
	mov	DWORD PTR _aCount$[ebp], eax
$LN2@BDMA_Type8:

; 117  : 
; 118  :     while(aCount--)

	mov	ecx, DWORD PTR _aCount$[ebp]
	mov	DWORD PTR tv256[ebp], ecx
	mov	edx, DWORD PTR _aCount$[ebp]
	sub	edx, 1
	mov	DWORD PTR _aCount$[ebp], edx
	cmp	DWORD PTR tv256[ebp], 0
	je	SHORT $LN1@BDMA_Type8

; 119  :     {
; 120  :       pix32 = pSrc32[srcA + srcB];

	mov	eax, DWORD PTR _srcA$[ebp]
	add	eax, DWORD PTR _srcB$[ebp]
	mov	ecx, DWORD PTR _pSrc32$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pix32$[ebp], edx

; 121  :       SwapScalarBytes(&pix32);

	lea	ecx, DWORD PTR _pix32$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 122  :       pix16 = ((pix32 >> 16) & 0xFC00UL) | ((pix32 >> 14) & 0x03E0UL) | ((pix32 >> 11) & 0x001FUL);

	mov	eax, DWORD PTR _pix32$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 64512				; 0000fc00H
	mov	ecx, DWORD PTR _pix32$[ebp]
	shr	ecx, 14					; 0000000eH
	and	ecx, 992				; 000003e0H
	or	eax, ecx
	mov	edx, DWORD PTR _pix32$[ebp]
	shr	edx, 11					; 0000000bH
	and	edx, 31					; 0000001fH
	or	eax, edx
	mov	WORD PTR _pix16$[ebp], ax

; 123  :       SwapWordBytes(&pix16);

	lea	ecx, DWORD PTR _pix16$[ebp]
	call	?SwapWordBytes@@YIXPAG@Z		; SwapWordBytes

; 124  :       pDest16[destA + destB] = pix16;

	mov	eax, DWORD PTR _destA$[ebp]
	add	eax, DWORD PTR _destB$[ebp]
	mov	ecx, DWORD PTR _pDest16$[ebp]
	mov	dx, WORD PTR _pix16$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 125  : 
; 126  :       srcA += srcAStep;

	mov	eax, DWORD PTR _srcA$[ebp]
	add	eax, DWORD PTR _srcAStep$[ebp]
	mov	DWORD PTR _srcA$[ebp], eax

; 127  :       destA += 1;

	mov	ecx, DWORD PTR _destA$[ebp]
	add	ecx, 1
	mov	DWORD PTR _destA$[ebp], ecx

; 128  :     }

	jmp	$LN2@BDMA_Type8
$LN1@BDMA_Type8:

; 129  : 
; 130  :     srcB += srcBStep;

	mov	edx, DWORD PTR _srcB$[ebp]
	add	edx, DWORD PTR _srcBStep$[ebp]
	mov	DWORD PTR _srcB$[ebp], edx

; 131  :     destB += xsize;

	mov	eax, DWORD PTR _destB$[ebp]
	add	eax, DWORD PTR _xsize$[ebp]
	mov	DWORD PTR _destB$[ebp], eax

; 132  :   }

	jmp	$LN4@BDMA_Type8
$LN18@BDMA_Type8:

; 133  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@BDMA_Type8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@BDMA_Type8:
	DD	3
	DD	$LN23@BDMA_Type8
$LN23@BDMA_Type8:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN20@BDMA_Type8
	DD	-28					; ffffffe4H
	DD	2
	DD	$LN21@BDMA_Type8
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN22@BDMA_Type8
$LN22@BDMA_Type8:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN21@BDMA_Type8:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	49					; 00000031H
	DB	54					; 00000036H
	DB	0
$LN20@BDMA_Type8:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	0
?BDMA_Type8_Write_0@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_0
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_1@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_1@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_1

; 136  : {

	push	ebp
	mov	ebp, esp

; 137  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_1@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_1
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_2@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_2@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_2

; 140  : {

	push	ebp
	mov	ebp, esp

; 141  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_2@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_2
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_3@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_3
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_3@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_3

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_3@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_3
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_4@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_4@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_4

; 148  : {

	push	ebp
	mov	ebp, esp

; 149  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_4@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_4
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_5@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_5
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_5@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_5

; 152  : {

	push	ebp
	mov	ebp, esp

; 153  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_5@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_5
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_6@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_6
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_6@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_6

; 156  : {

	push	ebp
	mov	ebp, esp

; 157  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_6@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_6
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Write_7@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Write_7
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Write_7@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Write_7

; 160  : {

	push	ebp
	mov	ebp, esp

; 161  : }

	pop	ebp
	ret	0
?BDMA_Type8_Write_7@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Write_7
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_0@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_0
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_0@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_0

; 164  : {

	push	ebp
	mov	ebp, esp

; 165  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_0@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_0
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_1@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_1@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_1

; 168  : {

	push	ebp
	mov	ebp, esp

; 169  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_1@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_1
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_2@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_2@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_2

; 172  : {

	push	ebp
	mov	ebp, esp

; 173  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_2@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_2
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_3@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_3
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_3@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_3

; 176  : {

	push	ebp
	mov	ebp, esp

; 177  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_3@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_3
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_4@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_4@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_4

; 180  : {

	push	ebp
	mov	ebp, esp

; 181  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_4@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_4
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_5@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_5
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_5@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_5

; 184  : {

	push	ebp
	mov	ebp, esp

; 185  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_5@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_5
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_6@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_6
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_6@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_6

; 188  : {

	push	ebp
	mov	ebp, esp

; 189  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_6@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_6
_TEXT	ENDS
PUBLIC	?BDMA_Type8_Read_7@@YAXPAVMPE@@IIIII@Z		; BDMA_Type8_Read_7
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_the_mpe$ = 8						; size = 4
_flags$ = 12						; size = 4
_baseaddr$ = 16						; size = 4
_xinfo$ = 20						; size = 4
_yinfo$ = 24						; size = 4
_intaddr$ = 28						; size = 4
?BDMA_Type8_Read_7@@YAXPAVMPE@@IIIII@Z PROC		; BDMA_Type8_Read_7

; 192  : {

	push	ebp
	mov	ebp, esp

; 193  : }

	pop	ebp
	ret	0
?BDMA_Type8_Read_7@@YAXPAVMPE@@IIIII@Z ENDP		; BDMA_Type8_Read_7
_TEXT	ENDS
END

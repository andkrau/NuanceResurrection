; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\mpe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?timer_start@@3_KA				; timer_start
PUBLIC	?mirrorLookup@MPE@@2PAEA			; MPE::mirrorLookup
PUBLIC	?timeDelta@@3NA					; timeDelta
PUBLIC	?timer_end@@3_KA				; timer_end
PUBLIC	?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA ; nuanceHandlers
PUBLIC	?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA	; printHandlers
PUBLIC	?emitHandlers@@3PAP6AXPAVEmitterVariables@@AAVNuance@@@ZA ; emitHandlers
PUBLIC	?logfile@@3PAU_iobuf@@A				; logfile
EXTRN	?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SaveRegs
EXTRN	?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreMiscRegisterConstant
EXTRN	?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarRegisterConstant
EXTRN	?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarImmediate
EXTRN	?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarControlRegisterImmediate
EXTRN	?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZBilinearXY
EXTRN	?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZBilinearUV
EXTRN	?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZLinear
EXTRN	?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelBilinearXY
EXTRN	?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelBilinearUV
EXTRN	?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelLinear
EXTRN	?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorBilinearXY
EXTRN	?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorBilinearUV
EXTRN	?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorLinear
EXTRN	?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorBilinearXY
EXTRN	?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorBilinearUV
EXTRN	?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorLinear
EXTRN	?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarBilinearXY
EXTRN	?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarBilinearUV
EXTRN	?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarLinear
EXTRN	?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZAbsolute
EXTRN	?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelAbsolute
EXTRN	?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorAbsolute
EXTRN	?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorAbsolute
EXTRN	?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarControlRegisterAbsolute
EXTRN	?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarAbsolute
EXTRN	?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZBilinearXY
EXTRN	?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZBilinearUV
EXTRN	?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZLinear
EXTRN	?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelBilinearXY
EXTRN	?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelBilinearUV
EXTRN	?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelLinear
EXTRN	?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorBilinearXY
EXTRN	?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorBilinearUV
EXTRN	?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorLinear
EXTRN	?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorBilinearXY
EXTRN	?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorBilinearUV
EXTRN	?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorLinear
EXTRN	?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarBilinearXY
EXTRN	?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarBilinearUV
EXTRN	?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordBilinearXY
EXTRN	?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordBilinearUV
EXTRN	?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordLinear
EXTRN	?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteBilinearXY
EXTRN	?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteBilinearUV
EXTRN	?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteLinear
EXTRN	?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZAbsolute
EXTRN	?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelAbsolute
EXTRN	?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorAbsolute
EXTRN	?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorAbsolute
EXTRN	?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarAbsolute
EXTRN	?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordAbsolute
EXTRN	?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteAbsolute
EXTRN	?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarControlRegisterAbsolute
EXTRN	?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarLinear
EXTRN	?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushScalarRzi2
EXTRN	?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushScalarRzi1
EXTRN	?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushVectorRz
EXTRN	?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushVector
EXTRN	?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopScalarRzi2
EXTRN	?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopScalarRzi1
EXTRN	?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopVectorRz
EXTRN	?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopVector
EXTRN	?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_V
EXTRN	?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_SScalar
EXTRN	?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_SImmediate
EXTRN	?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Mirror
EXTRN	?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPVectorShiftSvshift
EXTRN	?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPVectorShiftImmediate
EXTRN	?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPScalarShiftSvshift
EXTRN	?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPScalarShiftImmediate
EXTRN	?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PVectorShiftSvshift
EXTRN	?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PVectorShiftImmediate
EXTRN	?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRvShiftSvshift
EXTRN	?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRvShiftImmediate
EXTRN	?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRuShiftSvshift
EXTRN	?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRuShiftImmediate
EXTRN	?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PScalarShiftSvshift
EXTRN	?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PScalarShiftImmediate
EXTRN	?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PImmediateShiftImmediate
EXTRN	?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVVectorShiftSvshift
EXTRN	?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVVectorShiftImmediate
EXTRN	?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRvShiftSvshift
EXTRN	?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRvShiftImmediate
EXTRN	?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRuShiftSvshift
EXTRN	?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRuShiftImmediate
EXTRN	?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVScalarShiftSvshift
EXTRN	?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVScalarShiftImmediate
EXTRN	?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVImmediateShiftImmediate
EXTRN	?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftLeftImmediate
EXTRN	?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftRightImmediate
EXTRN	?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftScalar
EXTRN	?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftScalar
EXTRN	?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftAcshift
EXTRN	?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftLeftImmediate
EXTRN	?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftRightImmediate
EXTRN	?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftAcshift
EXTRN	?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBMImmediateReverse
EXTRN	?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBM
EXTRN	?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDMImmediate
EXTRN	?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDM
EXTRN	?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalarShiftLeftImmediate
EXTRN	?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalarShiftRightImmediate
EXTRN	?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCImmediateReverse
EXTRN	?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCImmediate
EXTRN	?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalar
EXTRN	?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalarShiftLeftImmediate
EXTRN	?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalarShiftRightImmediate
EXTRN	?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCImmediateReverse
EXTRN	?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCImmediate
EXTRN	?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalar
EXTRN	?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalarShiftLeftImmediate
EXTRN	?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalarShiftRightImmediate
EXTRN	?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCImmediate
EXTRN	?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalar
EXTRN	?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarRotateScalar
EXTRN	?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftScalar
EXTRN	?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftLeftImmediate
EXTRN	?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftRightImmediate
EXTRN	?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORImmediateShiftScalar
EXTRN	?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalar
EXTRN	?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORImmediate
EXTRN	?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarRotateScalar
EXTRN	?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftScalar
EXTRN	?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftLeftImmediate
EXTRN	?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftRightImmediate
EXTRN	?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORImmediateShiftScalar
EXTRN	?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalar
EXTRN	?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORImmediate
EXTRN	?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarRotateScalar
EXTRN	?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftScalar
EXTRN	?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftLeftImmediate
EXTRN	?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftRightImmediate
EXTRN	?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTImmediateShiftScalar
EXTRN	?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalar
EXTRN	?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTImmediate
EXTRN	?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarRotateScalar
EXTRN	?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftScalar
EXTRN	?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftLeftImmediate
EXTRN	?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftRightImmediate
EXTRN	?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDImmediateShiftScalar
EXTRN	?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalar
EXTRN	?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDImmediate
EXTRN	?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalarShiftLeftImmediate
EXTRN	?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalarShiftRightImmediate
EXTRN	?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalar
EXTRN	?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPImmediateReverse
EXTRN	?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPImmediate
EXTRN	?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalarShiftLeftImmediate
EXTRN	?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalarShiftRightImmediate
EXTRN	?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalar
EXTRN	?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBImmediateReverse
EXTRN	?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBImmediate
EXTRN	?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalarShiftLeftImmediate
EXTRN	?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalarShiftRightImmediate
EXTRN	?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalar
EXTRN	?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDImmediate
EXTRN	?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUB_SV
EXTRN	?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADD_SV
EXTRN	?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUB_P
EXTRN	?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADD_P
EXTRN	?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROR
EXTRN	?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROL
EXTRN	?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROT
EXTRN	?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LSR
EXTRN	?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LS
EXTRN	?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ASR
EXTRN	?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ASL
EXTRN	?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_AS
EXTRN	?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SAT
EXTRN	?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MSB
EXTRN	?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_COPY
EXTRN	?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BUTT
EXTRN	?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BTST
EXTRN	?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BITSImmediate
EXTRN	?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BITSScalar
EXTRN	?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ABS
EXTRN	?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Modulo
EXTRN	?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ModuloOnly
EXTRN	?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Range
EXTRN	?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RangeOnly
EXTRN	?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRScalar
EXTRN	?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRScalarOnly
EXTRN	?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRImmediate
EXTRN	?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRImmediateOnly
EXTRN	?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRScalar
EXTRN	?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRScalarOnly
EXTRN	?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRImmediate
EXTRN	?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRImmediateOnly
EXTRN	?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECBoth
EXTRN	?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECRc0
EXTRN	?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECRc1
EXTRN	?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSConditional_NOP
EXTRN	?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSConditional
EXTRN	?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSAlways_NOP
EXTRN	?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSAlways
EXTRN	?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI2Conditional_NOP
EXTRN	?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI2Conditional
EXTRN	?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI1Conditional_NOP
EXTRN	?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI1Conditional
EXTRN	?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditionalIndirect_NOP
EXTRN	?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditionalIndirect
EXTRN	?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlwaysIndirect_NOP
EXTRN	?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlwaysIndirect
EXTRN	?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditional_NOP
EXTRN	?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditional
EXTRN	?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlways_NOP
EXTRN	?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlways
EXTRN	?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPConditionalIndirect_NOP
EXTRN	?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPConditionalIndirect
EXTRN	?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPAlwaysIndirect_NOP
EXTRN	?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPAlwaysIndirect
EXTRN	?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAConditional_NOP
EXTRN	?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAConditional
EXTRN	?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAAlways_NOP
EXTRN	?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAAlways
EXTRN	?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_NOP
EXTRN	?Print_SaveRegs@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SaveRegs
EXTRN	?Print_SaveFlags@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SaveFlags
EXTRN	?Print_CheckECUSkipCounter@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CheckECUSkipCounter
EXTRN	?Print_PacketEnd@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PacketEnd
EXTRN	?Print_PacketStart@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PacketStart
EXTRN	?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreMiscRegisterConstant
EXTRN	?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarRegisterConstant
EXTRN	?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarImmediate
EXTRN	?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarControlRegisterImmediate
EXTRN	?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZBilinearXY
EXTRN	?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZBilinearUV
EXTRN	?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZLinear
EXTRN	?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelBilinearXY
EXTRN	?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelBilinearUV
EXTRN	?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelLinear
EXTRN	?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorBilinearXY
EXTRN	?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorBilinearUV
EXTRN	?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorLinear
EXTRN	?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorBilinearXY
EXTRN	?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorBilinearUV
EXTRN	?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorLinear
EXTRN	?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarBilinearXY
EXTRN	?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarBilinearUV
EXTRN	?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarLinear
EXTRN	?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZAbsolute
EXTRN	?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelAbsolute
EXTRN	?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorControlRegisterAbsolute
EXTRN	?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorAbsolute
EXTRN	?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorAbsolute
EXTRN	?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarControlRegisterAbsolute
EXTRN	?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarAbsolute
EXTRN	?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZBilinearXY
EXTRN	?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZBilinearUV
EXTRN	?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZLinear
EXTRN	?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelBilinearXY
EXTRN	?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelBilinearUV
EXTRN	?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelLinear
EXTRN	?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorBilinearXY
EXTRN	?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorBilinearUV
EXTRN	?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorLinear
EXTRN	?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorBilinearXY
EXTRN	?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorBilinearUV
EXTRN	?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorLinear
EXTRN	?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarBilinearXY
EXTRN	?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarBilinearUV
EXTRN	?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordBilinearXY
EXTRN	?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordBilinearUV
EXTRN	?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordLinear
EXTRN	?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteBilinearXY
EXTRN	?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteBilinearUV
EXTRN	?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteLinear
EXTRN	?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZAbsolute
EXTRN	?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelAbsolute
EXTRN	?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorControlRegisterAbsolute
EXTRN	?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorAbsolute
EXTRN	?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorAbsolute
EXTRN	?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarAbsolute
EXTRN	?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordAbsolute
EXTRN	?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteAbsolute
EXTRN	?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarControlRegisterAbsolute
EXTRN	?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarLinear
EXTRN	?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PushScalarRzi2
EXTRN	?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PushScalarRzi1
EXTRN	?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PushVectorRz
EXTRN	?Print_PushVector@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PushVector
EXTRN	?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PopScalarRzi2
EXTRN	?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PopScalarRzi1
EXTRN	?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PopVectorRz
EXTRN	?Print_PopVector@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PopVector
EXTRN	?Print_MV_V@@YAIPADAAVNuance@@_N@Z:PROC		; Print_MV_V
EXTRN	?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MV_SScalar
EXTRN	?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MV_SImmediate
EXTRN	?Print_Mirror@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Mirror
EXTRN	?Print_DOTPVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPVectorShiftSvshift
EXTRN	?Print_DOTPVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPVectorShiftImmediate
EXTRN	?Print_DOTPScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPScalarShiftSvshift
EXTRN	?Print_DOTPScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPScalarShiftImmediate
EXTRN	?Print_MUL_PVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PVectorShiftSvshift
EXTRN	?Print_MUL_PVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PVectorShiftImmediate
EXTRN	?Print_MUL_PRvShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRvShiftSvshift
EXTRN	?Print_MUL_PRvShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRvShiftImmediate
EXTRN	?Print_MUL_PRuShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRuShiftSvshift
EXTRN	?Print_MUL_PRuShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRuShiftImmediate
EXTRN	?Print_MUL_PScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PScalarShiftSvshift
EXTRN	?Print_MUL_PScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PScalarShiftImmediate
EXTRN	?Print_MUL_PImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PImmediateShiftImmediate
EXTRN	?Print_MUL_SVVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVVectorShiftSvshift
EXTRN	?Print_MUL_SVVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVVectorShiftImmediate
EXTRN	?Print_MUL_SVRvShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRvShiftSvshift
EXTRN	?Print_MUL_SVRvShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRvShiftImmediate
EXTRN	?Print_MUL_SVRuShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRuShiftSvshift
EXTRN	?Print_MUL_SVRuShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRuShiftImmediate
EXTRN	?Print_MUL_SVScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVScalarShiftSvshift
EXTRN	?Print_MUL_SVScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVScalarShiftImmediate
EXTRN	?Print_MUL_SVImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVImmediateShiftImmediate
EXTRN	?Print_MULImmediateShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftLeftImmediate
EXTRN	?Print_MULImmediateShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftRightImmediate
EXTRN	?Print_MULImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftScalar
EXTRN	?Print_MULScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftScalar
EXTRN	?Print_MULImmediateShiftAcshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftAcshift
EXTRN	?Print_MULScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftLeftImmediate
EXTRN	?Print_MULScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftRightImmediate
EXTRN	?Print_MULScalarShiftAcshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftAcshift
EXTRN	?Print_SUBMImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBMImmediateReverse
EXTRN	?Print_SUBM@@YAIPADAAVNuance@@_N@Z:PROC		; Print_SUBM
EXTRN	?Print_ADDMImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDMImmediate
EXTRN	?Print_ADDM@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ADDM
EXTRN	?Print_CMPWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCScalarShiftLeftImmediate
EXTRN	?Print_CMPWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCScalarShiftRightImmediate
EXTRN	?Print_CMPWCImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCImmediateReverse
EXTRN	?Print_CMPWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCImmediate
EXTRN	?Print_CMPWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPWCScalar
EXTRN	?Print_SUBWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCScalarShiftLeftImmediate
EXTRN	?Print_SUBWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCScalarShiftRightImmediate
EXTRN	?Print_SUBWCImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCImmediateReverse
EXTRN	?Print_SUBWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCImmediate
EXTRN	?Print_SUBWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBWCScalar
EXTRN	?Print_ADDWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCScalarShiftLeftImmediate
EXTRN	?Print_ADDWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCScalarShiftRightImmediate
EXTRN	?Print_ADDWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCImmediate
EXTRN	?Print_ADDWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDWCScalar
EXTRN	?Print_EORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarRotateScalar
EXTRN	?Print_EORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftScalar
EXTRN	?Print_EORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftLeftImmediate
EXTRN	?Print_EORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftRightImmediate
EXTRN	?Print_EORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORImmediateShiftScalar
EXTRN	?Print_EORScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_EORScalar
EXTRN	?Print_EORImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_EORImmediate
EXTRN	?Print_ORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarRotateScalar
EXTRN	?Print_ORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftScalar
EXTRN	?Print_ORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftLeftImmediate
EXTRN	?Print_ORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftRightImmediate
EXTRN	?Print_ORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORImmediateShiftScalar
EXTRN	?Print_ORScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ORScalar
EXTRN	?Print_ORImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ORImmediate
EXTRN	?Print_FTSTScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarRotateScalar
EXTRN	?Print_FTSTScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftScalar
EXTRN	?Print_FTSTScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftLeftImmediate
EXTRN	?Print_FTSTScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftRightImmediate
EXTRN	?Print_FTSTImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTImmediateShiftScalar
EXTRN	?Print_FTSTScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_FTSTScalar
EXTRN	?Print_FTSTImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTImmediate
EXTRN	?Print_ANDScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarRotateScalar
EXTRN	?Print_ANDScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftScalar
EXTRN	?Print_ANDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftLeftImmediate
EXTRN	?Print_ANDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftRightImmediate
EXTRN	?Print_ANDImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDImmediateShiftScalar
EXTRN	?Print_ANDScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ANDScalar
EXTRN	?Print_ANDImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ANDImmediate
EXTRN	?Print_CMPScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPScalarShiftLeftImmediate
EXTRN	?Print_CMPScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPScalarShiftRightImmediate
EXTRN	?Print_CMPScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPScalar
EXTRN	?Print_CMPImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPImmediateReverse
EXTRN	?Print_CMPImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPImmediate
EXTRN	?Print_SUBScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBScalarShiftLeftImmediate
EXTRN	?Print_SUBScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBScalarShiftRightImmediate
EXTRN	?Print_SUBScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBScalar
EXTRN	?Print_SUBImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBImmediateReverse
EXTRN	?Print_SUBImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBImmediate
EXTRN	?Print_ADDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDScalarShiftLeftImmediate
EXTRN	?Print_ADDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDScalarShiftRightImmediate
EXTRN	?Print_ADDScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDScalar
EXTRN	?Print_ADDImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDImmediate
EXTRN	?Print_SUB_SV@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUB_SV
EXTRN	?Print_ADD_SV@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADD_SV
EXTRN	?Print_SUB_P@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUB_P
EXTRN	?Print_ADD_P@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADD_P
EXTRN	?Print_ROR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROR
EXTRN	?Print_ROL@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROL
EXTRN	?Print_ROT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROT
EXTRN	?Print_LSR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_LSR
EXTRN	?Print_LS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_LS
EXTRN	?Print_ASR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ASR
EXTRN	?Print_ASL@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ASL
EXTRN	?Print_AS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_AS
EXTRN	?Print_SAT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_SAT
EXTRN	?Print_MSB@@YAIPADAAVNuance@@_N@Z:PROC		; Print_MSB
EXTRN	?Print_COPY@@YAIPADAAVNuance@@_N@Z:PROC		; Print_COPY
EXTRN	?Print_BUTT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_BUTT
EXTRN	?Print_BTST@@YAIPADAAVNuance@@_N@Z:PROC		; Print_BTST
EXTRN	?Print_BITSImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BITSImmediate
EXTRN	?Print_BITSScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_BITSScalar
EXTRN	?Print_ABS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ABS
EXTRN	?Print_Modulo@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Modulo
EXTRN	?Print_Range@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Range
EXTRN	?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MVRScalar
EXTRN	?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MVRImmediate
EXTRN	?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDRScalar
EXTRN	?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDRImmediate
EXTRN	?Print_DEC@@YAIPADAAVNuance@@_N@Z:PROC		; Print_DEC
EXTRN	?Print_RTSConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSConditional_NOP
EXTRN	?Print_RTSConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSConditional
EXTRN	?Print_RTSAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSAlways_NOP
EXTRN	?Print_RTSAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_RTSAlways
EXTRN	?Print_RTI2Conditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI2Conditional_NOP
EXTRN	?Print_RTI2Conditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI2Conditional
EXTRN	?Print_RTI1Conditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI1Conditional_NOP
EXTRN	?Print_RTI1Conditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI1Conditional
EXTRN	?Print_JSRConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditionalIndirect_NOP
EXTRN	?Print_JSRConditionalIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditionalIndirect
EXTRN	?Print_JSRAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlwaysIndirect_NOP
EXTRN	?Print_JSRAlwaysIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlwaysIndirect
EXTRN	?Print_JSRConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditional_NOP
EXTRN	?Print_JSRConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditional
EXTRN	?Print_JSRAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlways_NOP
EXTRN	?Print_JSRAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_JSRAlways
EXTRN	?Print_JMPConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPConditionalIndirect_NOP
EXTRN	?Print_JMPConditionalIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPConditionalIndirect
EXTRN	?Print_JMPAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPAlwaysIndirect_NOP
EXTRN	?Print_JMPAlwaysIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPAlwaysIndirect
EXTRN	?Print_BRAConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAConditional_NOP
EXTRN	?Print_BRAConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAConditional
EXTRN	?Print_BRAAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAAlways_NOP
EXTRN	?Print_BRAAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_BRAAlways
EXTRN	?Print_Halt@@YAIPADAAVNuance@@_N@Z:PROC		; Print_Halt
EXTRN	?Print_ECU_NOP@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ECU_NOP
EXTRN	?Execute_SaveRegs@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SaveRegs
EXTRN	?Execute_SaveFlags@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SaveFlags
EXTRN	?Execute_CheckECUSkipCounter@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CheckECUSkipCounter
EXTRN	?Execute_StoreMiscRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreMiscRegisterConstant
EXTRN	?Execute_StoreScalarRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarRegisterConstant
EXTRN	?Execute_StoreScalarImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarImmediate
EXTRN	?Execute_StoreScalarControlRegisterImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarControlRegisterImmediate
EXTRN	?Execute_StorePixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZBilinearXY
EXTRN	?Execute_StorePixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZBilinearUV
EXTRN	?Execute_StorePixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZLinear
EXTRN	?Execute_StorePixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelBilinearXY
EXTRN	?Execute_StorePixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelBilinearUV
EXTRN	?Execute_StorePixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelLinear
EXTRN	?Execute_StoreVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorBilinearXY
EXTRN	?Execute_StoreVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorBilinearUV
EXTRN	?Execute_StoreVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorLinear
EXTRN	?Execute_StoreShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorBilinearXY
EXTRN	?Execute_StoreShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorBilinearUV
EXTRN	?Execute_StoreShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorLinear
EXTRN	?Execute_StoreScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarBilinearXY
EXTRN	?Execute_StoreScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarBilinearUV
EXTRN	?Execute_StoreScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarLinear
EXTRN	?Execute_StorePixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZAbsolute
EXTRN	?Execute_StorePixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelAbsolute
EXTRN	?Execute_StoreVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorControlRegisterAbsolute
EXTRN	?Execute_StoreVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorAbsolute
EXTRN	?Execute_StoreShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorAbsolute
EXTRN	?Execute_StoreScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarControlRegisterAbsolute
EXTRN	?Execute_StoreScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarAbsolute
EXTRN	?Execute_LoadPixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZBilinearXY
EXTRN	?Execute_LoadPixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZBilinearUV
EXTRN	?Execute_LoadPixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZLinear
EXTRN	?Execute_LoadPixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelBilinearXY
EXTRN	?Execute_LoadPixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelBilinearUV
EXTRN	?Execute_LoadPixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelLinear
EXTRN	?Execute_LoadVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorBilinearXY
EXTRN	?Execute_LoadVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorBilinearUV
EXTRN	?Execute_LoadVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorLinear
EXTRN	?Execute_LoadShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorBilinearXY
EXTRN	?Execute_LoadShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorBilinearUV
EXTRN	?Execute_LoadShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorLinear
EXTRN	?Execute_LoadScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarBilinearXY
EXTRN	?Execute_LoadScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarBilinearUV
EXTRN	?Execute_LoadWordBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordBilinearXY
EXTRN	?Execute_LoadWordBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordBilinearUV
EXTRN	?Execute_LoadWordLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordLinear
EXTRN	?Execute_LoadByteBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteBilinearXY
EXTRN	?Execute_LoadByteBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteBilinearUV
EXTRN	?Execute_LoadByteLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteLinear
EXTRN	?Execute_LoadPixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZAbsolute
EXTRN	?Execute_LoadPixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelAbsolute
EXTRN	?Execute_LoadVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorControlRegisterAbsolute
EXTRN	?Execute_LoadVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorAbsolute
EXTRN	?Execute_LoadShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorAbsolute
EXTRN	?Execute_LoadScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarAbsolute
EXTRN	?Execute_LoadWordAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordAbsolute
EXTRN	?Execute_LoadByteAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteAbsolute
EXTRN	?Execute_LoadScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarControlRegisterAbsolute
EXTRN	?Execute_LoadScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarLinear
EXTRN	?Execute_PushScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushScalarRzi2
EXTRN	?Execute_PushScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushScalarRzi1
EXTRN	?Execute_PushVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushVectorRz
EXTRN	?Execute_PushVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushVector
EXTRN	?Execute_PopScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopScalarRzi2
EXTRN	?Execute_PopScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopScalarRzi1
EXTRN	?Execute_PopVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopVectorRz
EXTRN	?Execute_PopVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopVector
EXTRN	?Execute_MV_V@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_V
EXTRN	?Execute_MV_SScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_SScalar
EXTRN	?Execute_MV_SImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_SImmediate
EXTRN	?Execute_Mirror@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Mirror
EXTRN	?Execute_DOTPVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPVectorShiftSvshift
EXTRN	?Execute_DOTPVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPVectorShiftImmediate
EXTRN	?Execute_DOTPScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPScalarShiftSvshift
EXTRN	?Execute_DOTPScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPScalarShiftImmediate
EXTRN	?Execute_MUL_PVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PVectorShiftSvshift
EXTRN	?Execute_MUL_PVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PVectorShiftImmediate
EXTRN	?Execute_MUL_PRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRvShiftSvshift
EXTRN	?Execute_MUL_PRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRvShiftImmediate
EXTRN	?Execute_MUL_PRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRuShiftSvshift
EXTRN	?Execute_MUL_PRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRuShiftImmediate
EXTRN	?Execute_MUL_PScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PScalarShiftSvshift
EXTRN	?Execute_MUL_PScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PScalarShiftImmediate
EXTRN	?Execute_MUL_PImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PImmediateShiftImmediate
EXTRN	?Execute_MUL_SVVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVVectorShiftSvshift
EXTRN	?Execute_MUL_SVVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVVectorShiftImmediate
EXTRN	?Execute_MUL_SVRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRvShiftSvshift
EXTRN	?Execute_MUL_SVRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRvShiftImmediate
EXTRN	?Execute_MUL_SVRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRuShiftSvshift
EXTRN	?Execute_MUL_SVRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRuShiftImmediate
EXTRN	?Execute_MUL_SVScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVScalarShiftSvshift
EXTRN	?Execute_MUL_SVScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVScalarShiftImmediate
EXTRN	?Execute_MUL_SVImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVImmediateShiftImmediate
EXTRN	?Execute_MULImmediateShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftLeftImmediate
EXTRN	?Execute_MULImmediateShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftRightImmediate
EXTRN	?Execute_MULImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftScalar
EXTRN	?Execute_MULScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftScalar
EXTRN	?Execute_MULImmediateShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftAcshift
EXTRN	?Execute_MULScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftLeftImmediate
EXTRN	?Execute_MULScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftRightImmediate
EXTRN	?Execute_MULScalarShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftAcshift
EXTRN	?Execute_SUBMImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBMImmediateReverse
EXTRN	?Execute_SUBM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBM
EXTRN	?Execute_ADDMImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDMImmediate
EXTRN	?Execute_ADDM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDM
EXTRN	?Execute_CMPWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalarShiftLeftImmediate
EXTRN	?Execute_CMPWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalarShiftRightImmediate
EXTRN	?Execute_CMPWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCImmediateReverse
EXTRN	?Execute_CMPWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCImmediate
EXTRN	?Execute_CMPWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalar
EXTRN	?Execute_SUBWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalarShiftLeftImmediate
EXTRN	?Execute_SUBWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalarShiftRightImmediate
EXTRN	?Execute_SUBWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCImmediateReverse
EXTRN	?Execute_SUBWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCImmediate
EXTRN	?Execute_SUBWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalar
EXTRN	?Execute_ADDWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalarShiftLeftImmediate
EXTRN	?Execute_ADDWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalarShiftRightImmediate
EXTRN	?Execute_ADDWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCImmediate
EXTRN	?Execute_ADDWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalar
EXTRN	?Execute_EORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarRotateScalar
EXTRN	?Execute_EORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftScalar
EXTRN	?Execute_EORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftLeftImmediate
EXTRN	?Execute_EORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftRightImmediate
EXTRN	?Execute_EORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORImmediateShiftScalar
EXTRN	?Execute_EORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalar
EXTRN	?Execute_EORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORImmediate
EXTRN	?Execute_ORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarRotateScalar
EXTRN	?Execute_ORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftScalar
EXTRN	?Execute_ORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftLeftImmediate
EXTRN	?Execute_ORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftRightImmediate
EXTRN	?Execute_ORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORImmediateShiftScalar
EXTRN	?Execute_ORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalar
EXTRN	?Execute_ORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORImmediate
EXTRN	?Execute_FTSTScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarRotateScalar
EXTRN	?Execute_FTSTScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftScalar
EXTRN	?Execute_FTSTScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftLeftImmediate
EXTRN	?Execute_FTSTScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftRightImmediate
EXTRN	?Execute_FTSTImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTImmediateShiftScalar
EXTRN	?Execute_FTSTScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalar
EXTRN	?Execute_FTSTImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTImmediate
EXTRN	?Execute_ANDScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarRotateScalar
EXTRN	?Execute_ANDScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftScalar
EXTRN	?Execute_ANDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftLeftImmediate
EXTRN	?Execute_ANDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftRightImmediate
EXTRN	?Execute_ANDImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDImmediateShiftScalar
EXTRN	?Execute_ANDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalar
EXTRN	?Execute_ANDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDImmediate
EXTRN	?Execute_CMPScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalarShiftLeftImmediate
EXTRN	?Execute_CMPScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalarShiftRightImmediate
EXTRN	?Execute_CMPScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalar
EXTRN	?Execute_CMPImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPImmediateReverse
EXTRN	?Execute_CMPImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPImmediate
EXTRN	?Execute_SUBScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalarShiftLeftImmediate
EXTRN	?Execute_SUBScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalarShiftRightImmediate
EXTRN	?Execute_SUBScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalar
EXTRN	?Execute_SUBImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBImmediateReverse
EXTRN	?Execute_SUBImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBImmediate
EXTRN	?Execute_ADDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalarShiftLeftImmediate
EXTRN	?Execute_ADDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalarShiftRightImmediate
EXTRN	?Execute_ADDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalar
EXTRN	?Execute_ADDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDImmediate
EXTRN	?Execute_SUB_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUB_SV
EXTRN	?Execute_ADD_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADD_SV
EXTRN	?Execute_SUB_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUB_P
EXTRN	?Execute_ADD_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADD_P
EXTRN	?Execute_ROR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROR
EXTRN	?Execute_ROL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROL
EXTRN	?Execute_ROT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROT
EXTRN	?Execute_LSR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LSR
EXTRN	?Execute_LS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LS
EXTRN	?Execute_ASR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ASR
EXTRN	?Execute_ASL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ASL
EXTRN	?Execute_AS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_AS
EXTRN	?Execute_SAT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SAT
EXTRN	?Execute_MSB@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MSB
EXTRN	?Execute_COPY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_COPY
EXTRN	?Execute_BUTT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BUTT
EXTRN	?Execute_BTST@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BTST
EXTRN	?Execute_BITSImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BITSImmediate
EXTRN	?Execute_BITSScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BITSScalar
EXTRN	?Execute_ABS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ABS
EXTRN	?Execute_Modulo@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Modulo
EXTRN	?Execute_ModuloOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ModuloOnly
EXTRN	?Execute_Range@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Range
EXTRN	?Execute_RangeOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RangeOnly
EXTRN	?Execute_MVRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRScalar
EXTRN	?Execute_MVRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRScalarOnly
EXTRN	?Execute_MVRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRImmediate
EXTRN	?Execute_MVRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRImmediateOnly
EXTRN	?Execute_ADDRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRScalar
EXTRN	?Execute_ADDRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRScalarOnly
EXTRN	?Execute_ADDRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRImmediate
EXTRN	?Execute_ADDRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRImmediateOnly
EXTRN	?Execute_DECBoth@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECBoth
EXTRN	?Execute_DECRc0@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECRc0
EXTRN	?Execute_DECRc1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECRc1
EXTRN	?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSConditional_NOP
EXTRN	?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSConditional
EXTRN	?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSAlways_NOP
EXTRN	?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSAlways
EXTRN	?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI2Conditional_NOP
EXTRN	?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI2Conditional
EXTRN	?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI1Conditional_NOP
EXTRN	?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI1Conditional
EXTRN	?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditionalIndirect_NOP
EXTRN	?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditionalIndirect
EXTRN	?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlwaysIndirect_NOP
EXTRN	?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlwaysIndirect
EXTRN	?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditional_NOP
EXTRN	?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditional
EXTRN	?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlways_NOP
EXTRN	?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlways
EXTRN	?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPConditionalIndirect_NOP
EXTRN	?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPConditionalIndirect
EXTRN	?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPAlwaysIndirect_NOP
EXTRN	?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPAlwaysIndirect
EXTRN	?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAConditional_NOP
EXTRN	?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAConditional
EXTRN	?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAAlways_NOP
EXTRN	?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAAlways
EXTRN	?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Halt
EXTRN	?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ECU_NOP
_BSS	SEGMENT
?timer_start@@3_KA DQ 01H DUP (?)			; timer_start
?mirrorLookup@MPE@@2PAEA DB 0100H DUP (?)		; MPE::mirrorLookup
?timeDelta@@3NA DQ 01H DUP (?)				; timeDelta
?timer_end@@3_KA DQ 01H DUP (?)				; timer_end
?logfile@@3PAU_iobuf@@A DD 01H DUP (?)			; logfile
_BSS	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG24023
	ORG $+4
?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA DD FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; nuanceHandlers
	DD	FLAT:?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECRc1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECRc0@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECBoth@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RangeOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Range@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ModuloOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Modulo@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ABS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BITSScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BITSImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BTST@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BUTT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_COPY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MSB@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SAT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_AS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ASL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ASR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LSR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADD_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUB_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADD_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUB_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDMImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBMImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Mirror@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_SImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_SScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_V@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarControlRegisterImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreMiscRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CheckECUSkipCounter@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SaveFlags@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SaveRegs@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA DD FLAT:?Print_ECU_NOP@@YAIPADAAVNuance@@_N@Z ; printHandlers
	DD	FLAT:?Print_Halt@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPAlwaysIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPConditionalIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlwaysIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditionalIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI1Conditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI1Conditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI2Conditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI2Conditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Range@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Range@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Modulo@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Modulo@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ABS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BITSScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BITSImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BTST@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BUTT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_COPY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MSB@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SAT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_AS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ASL@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ASR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LSR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROL@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADD_P@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUB_P@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADD_SV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUB_SV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDM@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDMImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBM@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBMImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftAcshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftAcshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRuShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRuShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRvShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRvShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRuShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRuShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRvShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRvShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Mirror@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_V@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopVector@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushVector@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PacketStart@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PacketEnd@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CheckECUSkipCounter@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SaveFlags@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SaveRegs@@YAIPADAAVNuance@@_N@Z
?emitHandlers@@3PAP6AXPAVEmitterVariables@@AAVNuance@@@ZA DD FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; emitHandlers
	DD	00H
	DD	FLAT:?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	00H
	DD	FLAT:?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	00H
	DD	FLAT:?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z
_DATA	ENDS
CONST	SEGMENT
$SG24023 DB	'bad allocation', 00H
	ORG $+1
$SG53382 DB	'w', 00H
	ORG $+2
$SG53383 DB	'logfile', 00H
$SG53385 DB	'w', 00H
	ORG $+2
$SG53386 DB	'commlog', 00H
$SG53744 DB	'%s = $%8.8lx', 0aH, 00H
	ORG $+2
$SG53918 DB	'breakpoint', 0aH, 00H
$SG53921 DB	'nop', 0aH, 00H
CONST	ENDS
PUBLIC	?Reset@MPE@@QAEXXZ				; MPE::Reset
PUBLIC	?InitStaticICacheEntries@MPE@@QAEXXZ		; MPE::InitStaticICacheEntries
PUBLIC	?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z ; NativeCodeCache::SetEmitVars
PUBLIC	?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ ; NativeCodeCache::GetEmitPointerAddress
PUBLIC	?SetOverlayLength@OverlayManager@@QAEXI@Z	; OverlayManager::SetOverlayLength
PUBLIC	?GenerateMirrorLookupTable@MPE@@QAEXXZ		; MPE::GenerateMirrorLookupTable
PUBLIC	?AllocateMPELocalMemory@MPE@@QAEXXZ		; MPE::AllocateMPELocalMemory
PUBLIC	??0MPE@@QAE@I@Z					; MPE::MPE
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?commLogFile@@3PAU_iobuf@@A:DWORD		; commLogFile
EXTRN	_fopen:PROC
EXTRN	??0SuperBlock@@QAE@PAVMPE@@II@Z:PROC		; SuperBlock::SuperBlock
EXTRN	??0OverlayManager@@QAE@XZ:PROC			; OverlayManager::OverlayManager
EXTRN	??0InstructionCache@@QAE@I@Z:PROC		; InstructionCache::InstructionCache
EXTRN	??0NativeCodeCache@@QAE@III@Z:PROC		; NativeCodeCache::NativeCodeCache
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$??0MPE@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$3
__ehfuncinfo$??0MPE@@QAE@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MPE@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\mpe.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv204 = -192						; size = 4
tv141 = -188						; size = 4
tv133 = -184						; size = 4
tv88 = -180						; size = 4
$T56179 = -176						; size = 4
$T56178 = -172						; size = 4
$T56175 = -168						; size = 4
$T56174 = -164						; size = 4
$T56171 = -160						; size = 4
$T56170 = -156						; size = 4
$T56167 = -152						; size = 4
$T56166 = -148						; size = 4
_overlayLengths$ = -140					; size = 16
_numTLBEntries$ = -116					; size = 16
_numCacheEntries$ = -92					; size = 16
_emitvars$ = -68					; size = 48
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_index$ = 8						; size = 4
??0MPE@@QAE@I@Z PROC					; MPE::MPE
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0MPE@@QAE@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 180				; 000000b4H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 774  :   EmitterVariables emitvars;
; 775  :   uint32 numCacheEntries[] = {4096,2048,2048,262144};

	mov	DWORD PTR _numCacheEntries$[ebp], 4096	; 00001000H
	mov	DWORD PTR _numCacheEntries$[ebp+4], 2048 ; 00000800H
	mov	DWORD PTR _numCacheEntries$[ebp+8], 2048 ; 00000800H
	mov	DWORD PTR _numCacheEntries$[ebp+12], 262144 ; 00040000H

; 776  :   uint32 numTLBEntries[] = {4096,2048,2048,98304};

	mov	DWORD PTR _numTLBEntries$[ebp], 4096	; 00001000H
	mov	DWORD PTR _numTLBEntries$[ebp+4], 2048	; 00000800H
	mov	DWORD PTR _numTLBEntries$[ebp+8], 2048	; 00000800H
	mov	DWORD PTR _numTLBEntries$[ebp+12], 98304 ; 00018000H

; 777  :   uint32 overlayLengths[] = {8192,4096,4096,4096};

	mov	DWORD PTR _overlayLengths$[ebp], 8192	; 00002000H
	mov	DWORD PTR _overlayLengths$[ebp+4], 4096	; 00001000H
	mov	DWORD PTR _overlayLengths$[ebp+8], 4096	; 00001000H
	mov	DWORD PTR _overlayLengths$[ebp+12], 4096 ; 00001000H

; 778  : 
; 779  :   numInterpreterCacheFlushes = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+644], 0

; 780  :   numNativeCodeCacheFlushes = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+648], 0

; 781  :   numNonCompilablePackets = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+652], 0

; 782  :   mpeIndex = index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+664], ecx

; 783  :   bStrictMemoryDependencyPolicy = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1344], 1

; 784  :   strictMemoryMiscInputDependencies = 0xFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1348], -1

; 785  :   strictMemoryMiscOutputDependencies = 0xFFFFFFFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1352], -1

; 786  :   AllocateMPELocalMemory();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?AllocateMPELocalMemory@MPE@@QAEXXZ	; MPE::AllocateMPELocalMemory

; 787  :   GenerateMirrorLookupTable();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GenerateMirrorLookupTable@MPE@@QAEXXZ	; MPE::GenerateMirrorLookupTable

; 788  :   nativeCodeCache = new NativeCodeCache(5UL*1024UL*1024UL, 0, numTLBEntries[mpeIndex & 0x03]);

	push	76					; 0000004cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T56167[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T56167[ebp], 0
	je	SHORT $LN6@MPE
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	and	eax, 3
	mov	ecx, DWORD PTR _numTLBEntries$[ebp+eax*4]
	push	ecx
	push	0
	push	5242880					; 00500000H
	mov	ecx, DWORD PTR $T56167[ebp]
	call	??0NativeCodeCache@@QAE@III@Z		; NativeCodeCache::NativeCodeCache
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN7@MPE
$LN6@MPE:
	mov	DWORD PTR tv88[ebp], 0
$LN7@MPE:
	mov	edx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T56166[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T56166[ebp]
	mov	DWORD PTR [eax+680], ecx

; 789  :   instructionCache = new InstructionCache(numCacheEntries[mpeIndex & 0x03]);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T56171[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T56171[ebp], 0
	je	SHORT $LN8@MPE
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	and	eax, 3
	mov	ecx, DWORD PTR _numCacheEntries$[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR $T56171[ebp]
	call	??0InstructionCache@@QAE@I@Z		; InstructionCache::InstructionCache
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN9@MPE
$LN8@MPE:
	mov	DWORD PTR tv133[ebp], 0
$LN9@MPE:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T56170[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T56170[ebp]
	mov	DWORD PTR [eax+672], ecx

; 790  :   overlayManager = new OverlayManager();

	push	1548					; 0000060cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T56175[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T56175[ebp], 0
	je	SHORT $LN10@MPE
	mov	ecx, DWORD PTR $T56175[ebp]
	call	??0OverlayManager@@QAE@XZ		; OverlayManager::OverlayManager
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN11@MPE
$LN10@MPE:
	mov	DWORD PTR tv141[ebp], 0
$LN11@MPE:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T56174[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T56174[ebp]
	mov	DWORD PTR [eax+684], ecx

; 791  :   overlayManager->SetOverlayLength(overlayLengths[mpeIndex]);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	mov	ecx, DWORD PTR _overlayLengths$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+684]
	call	?SetOverlayLength@OverlayManager@@QAEXI@Z ; OverlayManager::SetOverlayLength

; 792  :   bInvalidateInstructionCaches = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+641], 0

; 793  :   bInvalidateInterpreterCache = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+640], 0

; 794  :   
; 795  :   interpretNextPacket = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+620], 0

; 796  : 
; 797  :   emitvars.mpe = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _emitvars$[ebp], eax

; 798  :   emitvars.codeCache = nativeCodeCache;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+680]
	mov	DWORD PTR _emitvars$[ebp+4], edx

; 799  :   emitvars.regBase = (uint32)&cc;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 128				; 00000080H
	mov	DWORD PTR _emitvars$[ebp+20], eax

; 800  :   emitvars.tempRegBase = (uint32)&tempCC;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 320				; 00000140H
	mov	DWORD PTR _emitvars$[ebp+24], ecx

; 801  :   emitvars.ppEmitLoc = nativeCodeCache->GetEmitPointerAddress();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+680]
	call	?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ ; NativeCodeCache::GetEmitPointerAddress
	mov	DWORD PTR _emitvars$[ebp+44], eax

; 802  :   emitvars.patchMgr = nativeCodeCache->patchMgr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _emitvars$[ebp+8], edx

; 803  :   nativeCodeCache->SetEmitVars(emitvars);

	lea	eax, DWORD PTR _emitvars$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z ; NativeCodeCache::SetEmitVars

; 804  : 
; 805  :   //SuperBlock(mpe,maxPackets, maxInstructionsPerPacket)
; 806  :   superBlock = new SuperBlock(this,120,5);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T56179[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T56179[ebp], 0
	je	SHORT $LN12@MPE
	push	5
	push	120					; 00000078H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T56179[ebp]
	call	??0SuperBlock@@QAE@PAVMPE@@II@Z		; SuperBlock::SuperBlock
	mov	DWORD PTR tv204[ebp], eax
	jmp	SHORT $LN13@MPE
$LN12@MPE:
	mov	DWORD PTR tv204[ebp], 0
$LN13@MPE:
	mov	eax, DWORD PTR tv204[ebp]
	mov	DWORD PTR $T56178[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T56178[ebp]
	mov	DWORD PTR [ecx+676], edx

; 807  :   InitStaticICacheEntries();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitStaticICacheEntries@MPE@@QAEXXZ	; MPE::InitStaticICacheEntries

; 808  :   if(mpeIndex == LOG_MPE_INDEX)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+664], 1
	jne	SHORT $LN3@MPE

; 809  :   {      
; 810  :     if(!logfile)

	cmp	DWORD PTR ?logfile@@3PAU_iobuf@@A, 0	; logfile
	jne	SHORT $LN2@MPE

; 811  :     {
; 812  :       logfile = fopen("logfile","w");

	push	OFFSET $SG53382
	push	OFFSET $SG53383
	call	_fopen
	add	esp, 8
	mov	DWORD PTR ?logfile@@3PAU_iobuf@@A, eax	; logfile
$LN2@MPE:

; 813  :     }
; 814  : 
; 815  :     if(!commLogFile)

	cmp	DWORD PTR ?commLogFile@@3PAU_iobuf@@A, 0 ; commLogFile
	jne	SHORT $LN3@MPE

; 816  :     {
; 817  :       commLogFile = fopen("commlog","w");

	push	OFFSET $SG53385
	push	OFFSET $SG53386
	call	_fopen
	add	esp, 8
	mov	DWORD PTR ?commLogFile@@3PAU_iobuf@@A, eax ; commLogFile
$LN3@MPE:

; 818  :     }
; 819  :   }
; 820  :   Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@MPE@@QAEXXZ			; MPE::Reset

; 821  : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@MPE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN24@MPE:
	DD	4
	DD	$LN23@MPE
$LN23@MPE:
	DD	-68					; ffffffbcH
	DD	48					; 00000030H
	DD	$LN18@MPE
	DD	-92					; ffffffa4H
	DD	16					; 00000010H
	DD	$LN19@MPE
	DD	-116					; ffffff8cH
	DD	16					; 00000010H
	DD	$LN20@MPE
	DD	-140					; ffffff74H
	DD	16					; 00000010H
	DD	$LN21@MPE
$LN21@MPE:
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	115					; 00000073H
	DB	0
$LN20@MPE:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	76					; 0000004cH
	DB	66					; 00000042H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN19@MPE:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN18@MPE:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0MPE@@QAE@I@Z$0:
	mov	eax, DWORD PTR $T56167[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0MPE@@QAE@I@Z$1:
	mov	eax, DWORD PTR $T56171[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0MPE@@QAE@I@Z$2:
	mov	eax, DWORD PTR $T56175[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0MPE@@QAE@I@Z$3:
	mov	eax, DWORD PTR $T56179[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0MPE@@QAE@I@Z:
	mov	eax, OFFSET __ehfuncinfo$??0MPE@@QAE@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0MPE@@QAE@I@Z ENDP					; MPE::MPE
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.h
;	COMDAT ?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ PROC	; NativeCodeCache::GetEmitPointerAddress, COMDAT
; _this$ = ecx

; 56   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 57   :     return &pEmitLoc;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 58   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ ENDP	; NativeCodeCache::GetEmitPointerAddress
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vars$ = 8						; size = 4
?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z PROC ; NativeCodeCache::SetEmitVars, COMDAT
; _this$ = ecx

; 112  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  :     emitVars = vars;

	mov	esi, DWORD PTR _vars$[ebp]
	mov	edi, DWORD PTR _this$[ebp]
	add	edi, 28					; 0000001cH
	mov	ecx, 12					; 0000000cH
	rep movsd

; 114  :   }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z ENDP ; NativeCodeCache::SetEmitVars
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\overlaymanager.h
_TEXT	ENDS
;	COMDAT ?SetOverlayLength@OverlayManager@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_len$ = 8						; size = 4
?SetOverlayLength@OverlayManager@@QAEXI@Z PROC		; OverlayManager::SetOverlayLength, COMDAT
; _this$ = ecx

; 33   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :     overlayLength = len;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+1544], ecx

; 35   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetOverlayLength@OverlayManager@@QAEXI@Z ENDP		; OverlayManager::SetOverlayLength
_TEXT	ENDS
PUBLIC	?FreeMPELocalMemory@MPE@@QAEXXZ			; MPE::FreeMPELocalMemory
PUBLIC	??_GSuperBlock@@QAEPAXI@Z			; SuperBlock::`scalar deleting destructor'
PUBLIC	??_GInstructionCache@@QAEPAXI@Z			; InstructionCache::`scalar deleting destructor'
PUBLIC	??_GNativeCodeCache@@QAEPAXI@Z			; NativeCodeCache::`scalar deleting destructor'
PUBLIC	??1MPE@@QAE@XZ					; MPE::~MPE
EXTRN	_fclose:PROC
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\mpe.cpp
_TEXT	SEGMENT
tv83 = -44						; size = 4
tv75 = -40						; size = 4
tv69 = -36						; size = 4
$T56224 = -32						; size = 4
$T56223 = -28						; size = 4
$T56222 = -24						; size = 4
$T56219 = -20						; size = 4
$T56218 = -16						; size = 4
$T56215 = -12						; size = 4
$T56214 = -8						; size = 4
_this$ = -4						; size = 4
??1MPE@@QAE@XZ PROC					; MPE::~MPE
; _this$ = ecx

; 824  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 825  :   delete nativeCodeCache;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	mov	DWORD PTR $T56215[ebp], ecx
	mov	edx, DWORD PTR $T56215[ebp]
	mov	DWORD PTR $T56214[ebp], edx
	cmp	DWORD PTR $T56214[ebp], 0
	je	SHORT $LN6@MPE@2
	push	1
	mov	ecx, DWORD PTR $T56214[ebp]
	call	??_GNativeCodeCache@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN7@MPE@2
$LN6@MPE@2:
	mov	DWORD PTR tv69[ebp], 0
$LN7@MPE@2:

; 826  :   delete instructionCache;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	mov	DWORD PTR $T56219[ebp], ecx
	mov	edx, DWORD PTR $T56219[ebp]
	mov	DWORD PTR $T56218[ebp], edx
	cmp	DWORD PTR $T56218[ebp], 0
	je	SHORT $LN8@MPE@2
	push	1
	mov	ecx, DWORD PTR $T56218[ebp]
	call	??_GInstructionCache@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN9@MPE@2
$LN8@MPE@2:
	mov	DWORD PTR tv75[ebp], 0
$LN9@MPE@2:

; 827  :   delete overlayManager;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	mov	DWORD PTR $T56222[ebp], ecx
	mov	edx, DWORD PTR $T56222[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 828  :   delete superBlock;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+676]
	mov	DWORD PTR $T56224[ebp], ecx
	mov	edx, DWORD PTR $T56224[ebp]
	mov	DWORD PTR $T56223[ebp], edx
	cmp	DWORD PTR $T56223[ebp], 0
	je	SHORT $LN10@MPE@2
	push	1
	mov	ecx, DWORD PTR $T56223[ebp]
	call	??_GSuperBlock@@QAEPAXI@Z
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN11@MPE@2
$LN10@MPE@2:
	mov	DWORD PTR tv83[ebp], 0
$LN11@MPE@2:

; 829  :   if(mpeIndex == LOG_MPE_INDEX)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+664], 1
	jne	SHORT $LN3@MPE@2

; 830  :   {
; 831  :     if(logfile)

	cmp	DWORD PTR ?logfile@@3PAU_iobuf@@A, 0	; logfile
	je	SHORT $LN2@MPE@2

; 832  :     {
; 833  :       fclose(logfile);

	mov	ecx, DWORD PTR ?logfile@@3PAU_iobuf@@A	; logfile
	push	ecx
	call	_fclose
	add	esp, 4
$LN2@MPE@2:

; 834  :     }
; 835  : 
; 836  :     if(commLogFile)

	cmp	DWORD PTR ?commLogFile@@3PAU_iobuf@@A, 0 ; commLogFile
	je	SHORT $LN3@MPE@2

; 837  :     {
; 838  :       fclose(commLogFile);

	mov	edx, DWORD PTR ?commLogFile@@3PAU_iobuf@@A ; commLogFile
	push	edx
	call	_fclose
	add	esp, 4
$LN3@MPE@2:

; 839  :     }
; 840  :   }
; 841  :   FreeMPELocalMemory();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeMPELocalMemory@MPE@@QAEXXZ		; MPE::FreeMPELocalMemory

; 842  : }

	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1MPE@@QAE@XZ ENDP					; MPE::~MPE
_TEXT	ENDS
EXTRN	??1NativeCodeCache@@QAE@XZ:PROC			; NativeCodeCache::~NativeCodeCache
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GNativeCodeCache@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNativeCodeCache@@QAEPAXI@Z PROC			; NativeCodeCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NativeCodeCache@@QAE@XZ		; NativeCodeCache::~NativeCodeCache
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNativeCodeCache@@QAEPAXI@Z ENDP			; NativeCodeCache::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1InstructionCache@@QAE@XZ:PROC		; InstructionCache::~InstructionCache
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GInstructionCache@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInstructionCache@@QAEPAXI@Z PROC			; InstructionCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1InstructionCache@@QAE@XZ		; InstructionCache::~InstructionCache
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GInstructionCache@@QAEPAXI@Z ENDP			; InstructionCache::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1SuperBlock@@QAE@XZ:PROC			; SuperBlock::~SuperBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GSuperBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSuperBlock@@QAEPAXI@Z PROC				; SuperBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SuperBlock@@QAE@XZ			; SuperBlock::~SuperBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSuperBlock@@QAEPAXI@Z ENDP				; SuperBlock::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T56234 = -8						; size = 4
_this$ = -4						; size = 4
?AllocateMPELocalMemory@MPE@@QAEXXZ PROC		; MPE::AllocateMPELocalMemory
; _this$ = ecx

; 845  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 846  :   dtrom = new uint8[MPE_LOCAL_MEMORY_SIZE];

	push	8388608					; 00800000H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T56234[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T56234[ebp]
	mov	DWORD PTR [eax+560], ecx

; 847  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AllocateMPELocalMemory@MPE@@QAEXXZ ENDP		; MPE::AllocateMPELocalMemory
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T56236 = -8						; size = 4
_this$ = -4						; size = 4
?FreeMPELocalMemory@MPE@@QAEXXZ PROC			; MPE::FreeMPELocalMemory
; _this$ = ecx

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 851  :   delete [] dtrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+560]
	mov	DWORD PTR $T56236[ebp], ecx
	mov	edx, DWORD PTR $T56236[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 852  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FreeMPELocalMemory@MPE@@QAEXXZ ENDP			; MPE::FreeMPELocalMemory
; Function compile flags: /Odtp /RTCsu
_i$53425 = -12						; size = 4
_mirror$ = -5						; size = 1
_this$ = -4						; size = 4
?GenerateMirrorLookupTable@MPE@@QAEXXZ PROC		; MPE::GenerateMirrorLookupTable
; _this$ = ecx

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 856  :   uint8 mirror;
; 857  : 
; 858  :   for(uint32 i = 0; i <= 0xFF; i++)

	mov	DWORD PTR _i$53425[ebp], 0
	jmp	SHORT $LN3@GenerateMi
$LN2@GenerateMi:
	mov	eax, DWORD PTR _i$53425[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53425[ebp], eax
$LN3@GenerateMi:
	cmp	DWORD PTR _i$53425[ebp], 255		; 000000ffH
	ja	$LN4@GenerateMi

; 859  :   {
; 860  :     mirror = 0;

	mov	BYTE PTR _mirror$[ebp], 0

; 861  :     mirror |= ((i & 0x01) << 7) & 0x80;

	mov	ecx, DWORD PTR _i$53425[ebp]
	and	ecx, 1
	shl	ecx, 7
	and	ecx, 128				; 00000080H
	movzx	edx, BYTE PTR _mirror$[ebp]
	or	edx, ecx
	mov	BYTE PTR _mirror$[ebp], dl

; 862  :     mirror |= ((i & 0x02) << 5) & 0x40;

	mov	eax, DWORD PTR _i$53425[ebp]
	and	eax, 2
	shl	eax, 5
	and	eax, 64					; 00000040H
	movzx	ecx, BYTE PTR _mirror$[ebp]
	or	ecx, eax
	mov	BYTE PTR _mirror$[ebp], cl

; 863  :     mirror |= ((i & 0x04) << 3) & 0x20;

	mov	edx, DWORD PTR _i$53425[ebp]
	and	edx, 4
	shl	edx, 3
	and	edx, 32					; 00000020H
	movzx	eax, BYTE PTR _mirror$[ebp]
	or	eax, edx
	mov	BYTE PTR _mirror$[ebp], al

; 864  :     mirror |= ((i & 0x08) << 1) & 0x10;

	mov	ecx, DWORD PTR _i$53425[ebp]
	and	ecx, 8
	shl	ecx, 1
	and	ecx, 16					; 00000010H
	movzx	edx, BYTE PTR _mirror$[ebp]
	or	edx, ecx
	mov	BYTE PTR _mirror$[ebp], dl

; 865  :     mirror |= ((i & 0x10) >> 1) & 0x08;

	mov	eax, DWORD PTR _i$53425[ebp]
	and	eax, 16					; 00000010H
	shr	eax, 1
	and	eax, 8
	movzx	ecx, BYTE PTR _mirror$[ebp]
	or	ecx, eax
	mov	BYTE PTR _mirror$[ebp], cl

; 866  :     mirror |= ((i & 0x20) >> 3) & 0x04;

	mov	edx, DWORD PTR _i$53425[ebp]
	and	edx, 32					; 00000020H
	shr	edx, 3
	and	edx, 4
	movzx	eax, BYTE PTR _mirror$[ebp]
	or	eax, edx
	mov	BYTE PTR _mirror$[ebp], al

; 867  :     mirror |= ((i & 0x40) >> 5) & 0x02;

	mov	ecx, DWORD PTR _i$53425[ebp]
	and	ecx, 64					; 00000040H
	shr	ecx, 5
	and	ecx, 2
	movzx	edx, BYTE PTR _mirror$[ebp]
	or	edx, ecx
	mov	BYTE PTR _mirror$[ebp], dl

; 868  :     mirror |= ((i & 0x80) >> 7) & 0x01;

	mov	eax, DWORD PTR _i$53425[ebp]
	and	eax, 128				; 00000080H
	shr	eax, 7
	and	eax, 1
	movzx	ecx, BYTE PTR _mirror$[ebp]
	or	ecx, eax
	mov	BYTE PTR _mirror$[ebp], cl

; 869  : 
; 870  :     mirrorLookup[i] = mirror;

	mov	edx, DWORD PTR _i$53425[ebp]
	mov	al, BYTE PTR _mirror$[ebp]
	mov	BYTE PTR ?mirrorLookup@MPE@@2PAEA[edx], al
	jmp	$LN2@GenerateMi
$LN4@GenerateMi:

; 871  :   }
; 872  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenerateMirrorLookupTable@MPE@@QAEXXZ ENDP		; MPE::GenerateMirrorLookupTable
_TEXT	ENDS
PUBLIC	?InitializeBankTable@MPE@@QAEXPAE00@Z		; MPE::InitializeBankTable
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mainBusPtr$ = 8					; size = 4
_systemBusPtr$ = 12					; size = 4
_flashEEPROMPtr$ = 16					; size = 4
?InitializeBankTable@MPE@@QAEXPAE00@Z PROC		; MPE::InitializeBankTable
; _this$ = ecx

; 875  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 876  :   //Initialize the bank pointer lookup table for use with indirect
; 877  :   //loads and stores.  This table assumes that the only banks present
; 878  :   //are local MPE memory, system bus memory and main bus memory.  All
; 879  :   //other banks map to main bus memory in the hope that a bad memory address
; 880  :   //write will simply cause main bus graphics corruption
; 881  : 
; 882  :   //This table cannot distinguish between the ROM, reserved and other bus IO
; 883  :   //banks in the $F0000000/$F1000000/$FE000000 range but programs should
; 884  :   //never read or write in this range anyways.  If these banks are emulated
; 885  :   //at some future point, this table will need to expand to 256 entries in
; 886  :   //order to factor in the entire upper byte of the 32 bit address range
; 887  : 
; 888  :   bankPtrTable[0x0] = dtrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	mov	DWORD PTR [eax+688], edx

; 889  :   bankPtrTable[0x1] = dtrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	mov	DWORD PTR [eax+692], edx

; 890  :   bankPtrTable[0x2] = dtrom;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	mov	DWORD PTR [eax+696], edx

; 891  :   bankPtrTable[0x3] = mainBusPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mainBusPtr$[ebp]
	mov	DWORD PTR [eax+700], ecx

; 892  :   bankPtrTable[0x4] = mainBusPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mainBusPtr$[ebp]
	mov	DWORD PTR [edx+704], eax

; 893  :   bankPtrTable[0x5] = mainBusPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _mainBusPtr$[ebp]
	mov	DWORD PTR [ecx+708], edx

; 894  :   bankPtrTable[0x6] = mainBusPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mainBusPtr$[ebp]
	mov	DWORD PTR [eax+712], ecx

; 895  :   bankPtrTable[0x7] = mainBusPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mainBusPtr$[ebp]
	mov	DWORD PTR [edx+716], eax

; 896  :   bankPtrTable[0x8] = systemBusPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [ecx+720], edx

; 897  :   bankPtrTable[0x9] = systemBusPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [eax+724], ecx

; 898  :   bankPtrTable[0xA] = systemBusPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [edx+728], eax

; 899  :   bankPtrTable[0xB] = systemBusPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [ecx+732], edx

; 900  :   bankPtrTable[0xC] = systemBusPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [eax+736], ecx

; 901  :   bankPtrTable[0xD] = systemBusPtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [edx+740], eax

; 902  :   bankPtrTable[0xE] = systemBusPtr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _systemBusPtr$[ebp]
	mov	DWORD PTR [ecx+744], edx

; 903  :   bankPtrTable[0xF] = flashEEPROMPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flashEEPROMPtr$[ebp]
	mov	DWORD PTR [eax+748], ecx

; 904  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?InitializeBankTable@MPE@@QAEXPAE00@Z ENDP		; MPE::InitializeBankTable
_TEXT	ENDS
EXTRN	?Flush@NativeCodeCache@@QAEXXZ:PROC		; NativeCodeCache::Flush
EXTRN	?Invalidate@InstructionCache@@QAEXXZ:PROC	; InstructionCache::Invalidate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@MPE@@QAEXXZ PROC					; MPE::Reset
; _this$ = ecx

; 909  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 910  :   //Explicitly clear CSTATE bits to zero so that code works in debug mode
; 911  :   dcachectl &= ~0xF0000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+536]
	and	ecx, 268435455				; 0fffffffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+536], ecx

; 912  :   icachectl &= ~0xF0000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+540]
	and	ecx, 268435455				; 0fffffffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+540], ecx

; 913  : 
; 914  :   instructionCache->Invalidate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	call	?Invalidate@InstructionCache@@QAEXXZ	; InstructionCache::Invalidate

; 915  :   nativeCodeCache->Flush();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?Flush@NativeCodeCache@@QAEXXZ		; NativeCodeCache::Flush

; 916  : 
; 917  :   invalidateRegionStart = MPE_IRAM_BASE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+624], 540016640		; 20300000H

; 918  :   invalidateRegionEnd = (MPE_IRAM_BASE + OVERLAY_SIZE - 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 540024831		; 20301fffH

; 919  :   interpreterInvalidateRegionStart = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+632], 0

; 920  :   interpreterInvalidateRegionEnd = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+636], 0

; 921  : 
; 922  :   overlayIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+612], 0

; 923  : 
; 924  :   //Interpretation of Nuances require the use of the cc composite flags register 
; 925  :   bUsingCompositeFlags = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+600], 1

; 926  :   ecuSkipCounter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+576], 0

; 927  :   pcfetchnext = 0x20300000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+564], 540016640		; 20300000H

; 928  :   pcfetch = 0x20300000;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+400], 540016640		; 20300000H

; 929  :   pcroute = 0x20300000;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+404], 540016640		; 20300000H

; 930  :   pcexec = 0x20300000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+408], 540016640		; 20300000H

; 931  :   sp = 0x20001000;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+464], 536875008		; 20001000H

; 932  :   //mpectl is halted on reset and has the was-reset bit set
; 933  :   mpectl = MPECTRL_MPEWASRESET;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], 32768		; 00008000H

; 934  :   //all exceptions halt the processor
; 935  :   excephalten = 0x1FFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+396], 8191		; 00001fffH

; 936  :   //reset all exceptions
; 937  :   excepsrc = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+388], 0

; 938  :   //intctl is set to 0 on reset according to SDK docs
; 939  :   intctl = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+428], 0

; 940  :   //reset all interrupt sources
; 941  :   intsrc = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+420], 0

; 942  :   //reset interupt enable registers
; 943  :   inten1 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+432], 0

; 944  :   //set level 2 selector to software
; 945  :   inten2sel = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+444], 1

; 946  :   //enable other bus dma, no commands pending, no other bus activity
; 947  :   odmactl = 1UL << 5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+472], 32			; 00000020H

; 948  :   //set bus priority for MDMA transfers to 3 and clear all other bits
; 949  :   mdmactl = 3UL << 5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+480], 96			; 00000060H

; 950  :   commxmit0 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+496], 0

; 951  :   commxmit1 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+500], 0

; 952  :   commxmit2 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+504], 0

; 953  :   commxmit3 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+508], 0

; 954  :   commrecv0 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0

; 955  :   commrecv1 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+516], 0

; 956  :   commrecv2 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+520], 0

; 957  :   commrecv3 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+524], 0

; 958  :   acshift = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+184], 0

; 959  :   svshift = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+188], 0

; 960  :   commctl = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+492], 0

; 961  :   rc0 = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], 0

; 962  :   rc1 = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+136], 0

; 963  :   cc = (CC_COUNTER0_ZERO | CC_COUNTER1_ZERO);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+128], 96			; 00000060H

; 964  :   cycleCounter = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+584], 0
	mov	DWORD PTR [ecx+588], 0

; 965  :   //Nuon = aries 2, MPE release = aries 2, mpe identifier, halted on reset
; 966  :   configa = (3UL << 24) | (3UL << 16) | (mpeIndex << 8) | 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+664]
	shl	eax, 8
	or	eax, 50528256				; 03030000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+528], eax

; 967  :   configb = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+532], 0

; 968  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@MPE@@QAEXXZ ENDP					; MPE::Reset
_TEXT	ENDS
PUBLIC	?LoadBinaryFile@MPE@@QAE_NPAE_N@Z		; MPE::LoadBinaryFile
EXTRN	_close:PROC
EXTRN	_read:PROC
EXTRN	_filelength:PROC
EXTRN	_open:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buffer$ = -16						; size = 4
_byteLength$ = -12					; size = 4
_handle$ = -8						; size = 4
_this$ = -4						; size = 4
_filename$ = 8						; size = 4
_bIRAM$ = 12						; size = 1
?LoadBinaryFile@MPE@@QAE_NPAE_N@Z PROC			; MPE::LoadBinaryFile
; _this$ = ecx

; 971  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 972  :   int handle;
; 973  :   int byteLength;
; 974  :   uint8 *buffer = &dtrom[MPE_IROM_OFFSET];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+560]
	add	ecx, 2097152				; 00200000H
	mov	DWORD PTR _buffer$[ebp], ecx

; 975  : 
; 976  :   handle = open((char *)filename,_O_RDONLY|_O_BINARY,0);

	push	0
	push	32768					; 00008000H
	mov	edx, DWORD PTR _filename$[ebp]
	push	edx
	call	_open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _handle$[ebp], eax

; 977  :   if(handle >= 0)

	cmp	DWORD PTR _handle$[ebp], 0
	jl	SHORT $LN3@LoadBinary

; 978  :   {
; 979  :     byteLength = filelength(handle);

	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_filelength
	add	esp, 4
	mov	DWORD PTR _byteLength$[ebp], eax

; 980  : 
; 981  :     if(bIRAM)

	movzx	ecx, BYTE PTR _bIRAM$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@LoadBinary

; 982  :     {
; 983  :       buffer = &dtrom[MPE_IRAM_OFFSET];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+560]
	add	eax, 3145728				; 00300000H
	mov	DWORD PTR _buffer$[ebp], eax
$LN2@LoadBinary:

; 984  :     }
; 985  : 
; 986  :     read(handle, buffer, byteLength);

	mov	ecx, DWORD PTR _byteLength$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR _handle$[ebp]
	push	eax
	call	_read
	add	esp, 12					; 0000000cH

; 987  :     close(handle);

	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	call	_close
	add	esp, 4

; 988  :     return true;

	mov	al, 1
	jmp	SHORT $LN4@LoadBinary

; 989  :   }
; 990  :   else

	jmp	SHORT $LN4@LoadBinary
$LN3@LoadBinary:

; 991  :   {
; 992  :     return false;

	xor	al, al
$LN4@LoadBinary:

; 993  :   }
; 994  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?LoadBinaryFile@MPE@@QAE_NPAE_N@Z ENDP			; MPE::LoadBinaryFile
_TEXT	ENDS
PUBLIC	?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
PUBLIC	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
PUBLIC	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
PUBLIC	?GetPacketDelta@MPE@@QAEIPAEI@Z			; MPE::GetPacketDelta
PUBLIC	?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ; MPE::DecodeSingleInstruction
PUBLIC	?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket
EXTRN	?nuonEnv@@3PAVNuonEnvironment@@A:DWORD		; nuonEnv
EXTRN	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z:PROC ; InstructionCacheEntry::CopyInstructionData
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv158 = -364						; size = 4
_iLength$ = -358					; size = 1
_bCanEmitNativeCode$ = -357				; size = 1
_bTerminating$ = -349					; size = 1
_comboMiscOutDep$ = -344				; size = 4
_comboScalarOutDep$ = -340				; size = 4
_comboMiscInDep$ = -336					; size = 4
_comboScalarInDep$ = -332				; size = 4
_packetByteCount$ = -328				; size = 4
_immExt$ = -320						; size = 4
_baseIndex$ = -312					; size = 4
_memIndex$ = -308					; size = 4
_mulIndex$ = -304					; size = 4
_aluIndex$ = -300					; size = 4
_rcuIndex$ = -296					; size = 4
_ecuIndex$ = -292					; size = 4
_i$ = -288						; size = 4
_executionUnits$ = -284					; size = 4
_pStruct$ = -276					; size = 268
_this$ = -4						; size = 4
_iBuffer$ = 8						; size = 4
_pICacheEntry$ = 12					; size = 4
_options$ = 16						; size = 4
?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z PROC ; MPE::DecompressPacket
; _this$ = ecx

; 1079 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1080 :   InstructionCacheEntry pStruct;
; 1081 :   uint32 executionUnits, i;
; 1082 :   uint32 ecuIndex, rcuIndex, aluIndex, mulIndex, memIndex, baseIndex;
; 1083 :   uint32 immExt = 0;

	mov	DWORD PTR _immExt$[ebp], 0

; 1084 :   uint32 packetByteCount = 0;

	mov	DWORD PTR _packetByteCount$[ebp], 0

; 1085 :   uint32 comboScalarInDep;
; 1086 :   uint32 comboMiscInDep;
; 1087 :   uint32 comboScalarOutDep;
; 1088 :   uint32 comboMiscOutDep;
; 1089 :   bool bTerminating = false;

	mov	BYTE PTR _bTerminating$[ebp], 0

; 1090 :   bool bCanEmitNativeCode = true;

	mov	BYTE PTR _bCanEmitNativeCode$[ebp], 1

; 1091 :   uint8 iLength;
; 1092 : 
; 1093 :   pStruct.pcexec = pICacheEntry->pcexec;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pStruct$[ebp+28], ecx

; 1094 :   pICacheEntry->pcroute = pICacheEntry->pcexec;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+76], ecx

; 1095 :   pICacheEntry->nuanceCount = 0;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 0

; 1096 :   pStruct.packetInfo = 0;

	mov	DWORD PTR _pStruct$[ebp+24], 0

; 1097 : 
; 1098 :   for(i = 0; i < 5; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN136@Decompress
$LN135@Decompress:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN136@Decompress:
	cmp	DWORD PTR _i$[ebp], 5
	jae	$LN133@Decompress

; 1099 :   {
; 1100 :     pStruct.scalarInputDependencies[i] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pStruct$[ebp+ecx*4+188], 0

; 1101 :     pStruct.miscInputDependencies[i] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pStruct$[ebp+edx*4+208], 0

; 1102 :     pStruct.scalarOutputDependencies[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pStruct$[ebp+eax*4+228], 0

; 1103 :     pStruct.miscOutputDependencies[i] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _pStruct$[ebp+ecx*4+248], 0

; 1104 :     pICacheEntry->scalarInputDependencies[i] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+edx*4+188], 0

; 1105 :     pICacheEntry->miscInputDependencies[i] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+ecx*4+208], 0

; 1106 :     pICacheEntry->scalarOutputDependencies[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+eax*4+228], 0

; 1107 :     pICacheEntry->miscOutputDependencies[i] = 0;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+edx*4+248], 0

; 1108 :   }

	jmp	$LN135@Decompress
$LN133@Decompress:

; 1109 : 
; 1110 :   do
; 1111 :   {
; 1112 :     iLength = DecodeSingleInstruction(iBuffer,&pStruct,&immExt,bTerminating);

	lea	ecx, DWORD PTR _bTerminating$[ebp]
	push	ecx
	lea	edx, DWORD PTR _immExt$[ebp]
	push	edx
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iBuffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ; MPE::DecodeSingleInstruction
	mov	BYTE PTR _iLength$[ebp], al

; 1113 : 
; 1114 :     pICacheEntry->pcroute += iLength;

	movzx	edx, BYTE PTR _iLength$[ebp]
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	add	edx, DWORD PTR [eax+76]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+76], edx

; 1115 : 
; 1116 :     if(packetByteCount >= 128)

	cmp	DWORD PTR _packetByteCount$[ebp], 128	; 00000080H
	jb	SHORT $LN130@Decompress

; 1117 :     {
; 1118 :       pICacheEntry->pcroute = pICacheEntry->pcexec + 128;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 1119 :       break;

	jmp	SHORT $LN131@Decompress
$LN130@Decompress:

; 1120 :     }
; 1121 : 
; 1122 :     iBuffer += iLength;

	movzx	edx, BYTE PTR _iLength$[ebp]
	add	edx, DWORD PTR _iBuffer$[ebp]
	mov	DWORD PTR _iBuffer$[ebp], edx

; 1123 :   }
; 1124 :   while(!bTerminating);

	movzx	eax, BYTE PTR _bTerminating$[ebp]
	test	eax, eax
	je	SHORT $LN133@Decompress
$LN131@Decompress:

; 1125 : 
; 1126 :   pStruct.nuances[FIXED_FIELD(SLOT_ECU,FIELD_ECU_PCROUTE)] = pICacheEntry->pcroute;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR _pStruct$[ebp+100], edx

; 1127 : 
; 1128 :   if(pStruct.packetInfo & PACKETINFO_NEEDS_PCFETCHNEXT)

	mov	eax, DWORD PTR _pStruct$[ebp+24]
	and	eax, 268435456				; 10000000H
	je	SHORT $LN129@Decompress

; 1129 :   {
; 1130 :     pICacheEntry->pcfetchnext = pICacheEntry->pcroute + GetPacketDelta(iBuffer, 2);

	push	2
	mov	ecx, DWORD PTR _iBuffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPacketDelta@MPE@@QAEIPAEI@Z		; MPE::GetPacketDelta
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	add	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 1131 :     pStruct.nuances[FIXED_FIELD(SLOT_ECU,FIELD_ECU_PCFETCHNEXT)] = pICacheEntry->pcfetchnext;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _pStruct$[ebp+104], eax
$LN129@Decompress:

; 1132 :   }
; 1133 : 
; 1134 :   if(options & DECOMPRESS_OPTIONS_INHIBIT_ECU)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 4
	je	SHORT $LN128@Decompress

; 1135 :   {
; 1136 :     pStruct.packetInfo &= ~(PACKETINFO_ECU | PACKETINFO_BRANCH_CONDITIONAL | PACKETINFO_BRANCH_ALWAYS | PACKETINFO_BRANCH_NOP);

	mov	edx, DWORD PTR _pStruct$[ebp+24]
	and	edx, -234881029				; f1fffffbH
	mov	DWORD PTR _pStruct$[ebp+24], edx
$LN128@Decompress:

; 1137 :   }
; 1138 : 
; 1139 :   executionUnits = GETPACKETEXECUTIONUNITS(pStruct.packetInfo);

	mov	eax, DWORD PTR _pStruct$[ebp+24]
	and	eax, 124				; 0000007cH
	shr	eax, 2
	mov	DWORD PTR _executionUnits$[ebp], eax

; 1140 :  
; 1141 :   switch(executionUnits)

	mov	ecx, DWORD PTR _executionUnits$[ebp]
	mov	DWORD PTR tv158[ebp], ecx
	cmp	DWORD PTR tv158[ebp], 31		; 0000001fH
	ja	$LN126@Decompress
	mov	edx, DWORD PTR tv158[ebp]
	jmp	DWORD PTR $LN144@Decompress[edx*4]
$LN125@Decompress:

; 1142 :   {
; 1143 :     case 0:
; 1144 :       pICacheEntry->nuanceCount = 0;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1145 :       break;

	jmp	$LN126@Decompress
$LN124@Decompress:

; 1146 :     case (PACKETINFO_ECU >> 2):
; 1147 :       pICacheEntry->nuanceCount = 1;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 1

; 1148 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1149 :       break;

	jmp	$LN126@Decompress
$LN123@Decompress:

; 1150 :     case (PACKETINFO_RCU >> 2):
; 1151 :       pICacheEntry->nuanceCount = 1;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 1

; 1152 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1153 :       break;

	jmp	$LN126@Decompress
$LN122@Decompress:

; 1154 :     case ((PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1155 :       pICacheEntry->nuanceCount = 2;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 2

; 1156 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 1
	je	SHORT $LN121@Decompress

; 1157 :       {
; 1158 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1159 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1160 :       }
; 1161 :       else

	jmp	SHORT $LN120@Decompress
$LN121@Decompress:

; 1162 :       {
; 1163 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1164 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN120@Decompress:

; 1165 :       }    
; 1166 :       break;

	jmp	$LN126@Decompress
$LN119@Decompress:

; 1167 :     case (PACKETINFO_MEM >> 2):
; 1168 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1169 :       pICacheEntry->nuanceCount = 1;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 1

; 1170 :       break;

	jmp	$LN126@Decompress
$LN118@Decompress:

; 1171 :     case ((PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1172 :       pICacheEntry->nuanceCount = 2;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 2

; 1173 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ECU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN116@Decompress
	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	jne	SHORT $LN116@Decompress
	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN117@Decompress
$LN116@Decompress:

; 1174 :       {
; 1175 :         memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1176 :         ecuIndex = 1;

	mov	DWORD PTR _ecuIndex$[ebp], 1

; 1177 :       }
; 1178 :       else

	jmp	SHORT $LN115@Decompress
$LN117@Decompress:

; 1179 :       {
; 1180 :         memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1181 :         ecuIndex = 0;

	mov	DWORD PTR _ecuIndex$[ebp], 0
$LN115@Decompress:

; 1182 :       }       
; 1183 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecuIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1184 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _memIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1185 :       break;

	jmp	$LN126@Decompress
$LN114@Decompress:

; 1186 :     case ((PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1187 :       pICacheEntry->nuanceCount = 2;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 2

; 1188 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN112@Decompress
	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN113@Decompress
$LN112@Decompress:

; 1189 :       {
; 1190 :         memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1191 :         rcuIndex = 1;

	mov	DWORD PTR _rcuIndex$[ebp], 1

; 1192 :       }
; 1193 :       else

	jmp	SHORT $LN111@Decompress
$LN113@Decompress:

; 1194 :       {
; 1195 :         memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1196 :         rcuIndex = 0;

	mov	DWORD PTR _rcuIndex$[ebp], 0
$LN111@Decompress:

; 1197 :       }       
; 1198 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _rcuIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1199 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1200 :       break;

	jmp	$LN126@Decompress
$LN110@Decompress:

; 1201 :     case ((PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1202 :       pICacheEntry->nuanceCount = 3;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 3

; 1203 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	$LN109@Decompress

; 1204 :       {
; 1205 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN107@Decompress
	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN108@Decompress
$LN107@Decompress:

; 1206 :         {
; 1207 :           memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1208 :           rcuIndex = 1;

	mov	DWORD PTR _rcuIndex$[ebp], 1

; 1209 :         }
; 1210 :         else

	jmp	SHORT $LN106@Decompress
$LN108@Decompress:

; 1211 :         {
; 1212 :           memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1213 :           rcuIndex = 0;

	mov	DWORD PTR _rcuIndex$[ebp], 0
$LN106@Decompress:

; 1214 :         }        
; 1215 :         pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _rcuIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1216 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _memIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1217 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1218 :       }
; 1219 :       else

	jmp	SHORT $LN105@Decompress
$LN109@Decompress:

; 1220 :       {
; 1221 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN104@Decompress

; 1222 :         {
; 1223 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1224 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1225 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1226 :         }
; 1227 :         else

	jmp	SHORT $LN105@Decompress
$LN104@Decompress:

; 1228 :         {
; 1229 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MEM,SLOT_ECU,SLOT_RCU);

	push	1
	push	0
	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN105@Decompress:

; 1230 :         }
; 1231 :       }
; 1232 :       break;

	jmp	$LN126@Decompress
$LN102@Decompress:

; 1233 :     case (PACKETINFO_MUL >> 2):
; 1234 :       pICacheEntry->nuanceCount = 1;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 1

; 1235 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1236 :       break;

	jmp	$LN126@Decompress
$LN101@Decompress:

; 1237 :     case ((PACKETINFO_MUL | PACKETINFO_ECU) >> 2):
; 1238 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1239 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	SHORT $LN100@Decompress

; 1240 :       {
; 1241 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1242 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1243 :       }
; 1244 :       else

	jmp	SHORT $LN99@Decompress
$LN100@Decompress:

; 1245 :       {
; 1246 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1247 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN99@Decompress:

; 1248 :       }
; 1249 :       break;

	jmp	$LN126@Decompress
$LN98@Decompress:

; 1250 :     case ((PACKETINFO_MUL | PACKETINFO_RCU) >> 2):
; 1251 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1252 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MUL))

	push	3
	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN97@Decompress

; 1253 :       {
; 1254 :         mulIndex = 0;

	mov	DWORD PTR _mulIndex$[ebp], 0

; 1255 :         rcuIndex = 1;

	mov	DWORD PTR _rcuIndex$[ebp], 1

; 1256 :       }
; 1257 :       else

	jmp	SHORT $LN96@Decompress
$LN97@Decompress:

; 1258 :       {
; 1259 :         mulIndex = 1;

	mov	DWORD PTR _mulIndex$[ebp], 1

; 1260 :         rcuIndex = 0;

	mov	DWORD PTR _rcuIndex$[ebp], 0
$LN96@Decompress:

; 1261 :       }
; 1262 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

	push	1
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rcuIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1263 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _mulIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1264 :       break;

	jmp	$LN126@Decompress
$LN95@Decompress:

; 1265 :     case ((PACKETINFO_MUL | PACKETINFO_RCU | PACKETINFO_ECU) >> 2): 
; 1266 :       pICacheEntry->nuanceCount = 3;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 3

; 1267 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 1
	je	SHORT $LN94@Decompress

; 1268 :       {
; 1269 :         baseIndex = 0;

	mov	DWORD PTR _baseIndex$[ebp], 0

; 1270 :         ecuIndex = 2;

	mov	DWORD PTR _ecuIndex$[ebp], 2

; 1271 :       }
; 1272 :       else

	jmp	SHORT $LN93@Decompress
$LN94@Decompress:

; 1273 :       {
; 1274 :         baseIndex = 1;

	mov	DWORD PTR _baseIndex$[ebp], 1

; 1275 :         ecuIndex = 0;

	mov	DWORD PTR _ecuIndex$[ebp], 0
$LN93@Decompress:

; 1276 :       }
; 1277 : 
; 1278 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MUL))

	push	3
	push	1
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN92@Decompress

; 1279 :       {
; 1280 :         mulIndex = baseIndex + 0;

	mov	edx, DWORD PTR _baseIndex$[ebp]
	mov	DWORD PTR _mulIndex$[ebp], edx

; 1281 :         rcuIndex = baseIndex + 1;

	mov	eax, DWORD PTR _baseIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _rcuIndex$[ebp], eax

; 1282 :       }
; 1283 :       else

	jmp	SHORT $LN91@Decompress
$LN92@Decompress:

; 1284 :       {
; 1285 :         mulIndex = baseIndex + 1;

	mov	ecx, DWORD PTR _baseIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mulIndex$[ebp], ecx

; 1286 :         rcuIndex = baseIndex + 0;

	mov	edx, DWORD PTR _baseIndex$[ebp]
	mov	DWORD PTR _rcuIndex$[ebp], edx
$LN91@Decompress:

; 1287 :       }
; 1288 :       
; 1289 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecuIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1290 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _rcuIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1291 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mulIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1292 :       break;

	jmp	$LN126@Decompress
$LN90@Decompress:

; 1293 :     case ((PACKETINFO_MUL | PACKETINFO_MEM) >> 2):
; 1294 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1295 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_MUL,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN88@Decompress
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN89@Decompress
$LN88@Decompress:

; 1296 :       {
; 1297 :         memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1298 :         mulIndex = 1;

	mov	DWORD PTR _mulIndex$[ebp], 1

; 1299 :       }
; 1300 :       else

	jmp	SHORT $LN87@Decompress
$LN89@Decompress:

; 1301 :       {
; 1302 :         memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1303 :         mulIndex = 0;

	mov	DWORD PTR _mulIndex$[ebp], 0
$LN87@Decompress:

; 1304 :       }       
; 1305 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mulIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1306 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1307 :       break;

	jmp	$LN126@Decompress
$LN86@Decompress:

; 1308 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1309 :       pICacheEntry->nuanceCount = 3;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 3

; 1310 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 1
	je	$LN85@Decompress

; 1311 :       {
; 1312 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_MUL,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN83@Decompress
	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN84@Decompress
$LN83@Decompress:

; 1313 :         {
; 1314 :           memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1315 :           mulIndex = 1;

	mov	DWORD PTR _mulIndex$[ebp], 1

; 1316 :         }
; 1317 :         else

	jmp	SHORT $LN82@Decompress
$LN84@Decompress:

; 1318 :         {
; 1319 :           memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1320 :           mulIndex = 0;

	mov	DWORD PTR _mulIndex$[ebp], 0
$LN82@Decompress:

; 1321 :         }       
; 1322 :         
; 1323 :         pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mulIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1324 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1325 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1326 :       }
; 1327 :       else

	jmp	SHORT $LN81@Decompress
$LN85@Decompress:

; 1328 :       {
; 1329 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN80@Decompress

; 1330 :         {
; 1331 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1332 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1333 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1334 :         }
; 1335 :         else

	jmp	SHORT $LN81@Decompress
$LN80@Decompress:

; 1336 :         {
; 1337 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_ECU);

	push	0
	push	4
	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN81@Decompress:

; 1338 :         }
; 1339 :       }
; 1340 :       break;

	jmp	$LN126@Decompress
$LN78@Decompress:

; 1341 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1342 :       pICacheEntry->nuanceCount = 3;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 3

; 1343 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN77@Decompress

; 1344 :       {
; 1345 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1346 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_MUL);

	push	3
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1347 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1348 :       }
; 1349 :       else

	jmp	SHORT $LN76@Decompress
$LN77@Decompress:

; 1350 :       {
; 1351 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN76@Decompress:

; 1352 :       }
; 1353 :       break;

	jmp	$LN126@Decompress
$LN75@Decompress:

; 1354 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1355 :       pICacheEntry->nuanceCount = 4;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 4

; 1356 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 1
	je	$LN74@Decompress

; 1357 :       {
; 1358 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN73@Decompress

; 1359 :         {
; 1360 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1361 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1362 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

	push	3
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1363 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1364 :         }
; 1365 :         else

	jmp	SHORT $LN72@Decompress
$LN73@Decompress:

; 1366 :         {
; 1367 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1368 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN72@Decompress:

; 1369 :         }
; 1370 :       }
; 1371 :       else

	jmp	$LN71@Decompress
$LN74@Decompress:

; 1372 :       {
; 1373 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN70@Decompress

; 1374 :         {
; 1375 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1376 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1377 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1378 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1379 :         }
; 1380 :         else

	jmp	SHORT $LN71@Decompress
$LN70@Decompress:

; 1381 :         {
; 1382 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1383 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN71@Decompress:

; 1384 :         }
; 1385 :       }
; 1386 :       break;

	jmp	$LN126@Decompress
$LN68@Decompress:

; 1387 :     case (PACKETINFO_ALU >> 2):
; 1388 :       pICacheEntry->nuanceCount = 1;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 1

; 1389 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1390 :       break;

	jmp	$LN126@Decompress
$LN67@Decompress:

; 1391 :     case ((PACKETINFO_ALU | PACKETINFO_ECU) >> 2):
; 1392 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1393 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	SHORT $LN66@Decompress

; 1394 :       {
; 1395 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1396 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1397 :       }
; 1398 :       else

	jmp	SHORT $LN65@Decompress
$LN66@Decompress:

; 1399 :       {
; 1400 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1401 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN65@Decompress:

; 1402 :       }
; 1403 :       break;

	jmp	$LN126@Decompress
$LN64@Decompress:

; 1404 :     case ((PACKETINFO_ALU | PACKETINFO_RCU) >> 2):
; 1405 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1406 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1407 :       pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1408 :       break;

	jmp	$LN126@Decompress
$LN63@Decompress:

; 1409 :     case ((PACKETINFO_ALU | PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1410 :       pICacheEntry->nuanceCount = 3;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 3

; 1411 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	SHORT $LN62@Decompress

; 1412 :       {
; 1413 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1414 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1415 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1416 :       }
; 1417 :       else

	jmp	SHORT $LN61@Decompress
$LN62@Decompress:

; 1418 :       {
; 1419 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1420 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1421 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN61@Decompress:

; 1422 :       }
; 1423 :       break;

	jmp	$LN126@Decompress
$LN60@Decompress:

; 1424 :     case ((PACKETINFO_ALU | PACKETINFO_MEM) >> 2):
; 1425 :       pICacheEntry->nuanceCount = 2;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 2

; 1426 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN58@Decompress
	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN59@Decompress
$LN58@Decompress:

; 1427 :       {
; 1428 :         memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1429 :         aluIndex = 1;

	mov	DWORD PTR _aluIndex$[ebp], 1

; 1430 :       }
; 1431 :       else

	jmp	SHORT $LN57@Decompress
$LN59@Decompress:

; 1432 :       {
; 1433 :         memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1434 :         aluIndex = 0;

	mov	DWORD PTR _aluIndex$[ebp], 0
$LN57@Decompress:

; 1435 :       }       
; 1436 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1437 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _aluIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1438 :       break;

	jmp	$LN126@Decompress
$LN56@Decompress:

; 1439 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1440 :       pICacheEntry->nuanceCount = 3;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 3

; 1441 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 1
	je	$LN55@Decompress

; 1442 :       {
; 1443 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

	push	4
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN53@Decompress
	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN54@Decompress
$LN53@Decompress:

; 1444 :         {
; 1445 :           memIndex = 0;

	mov	DWORD PTR _memIndex$[ebp], 0

; 1446 :           aluIndex = 1;

	mov	DWORD PTR _aluIndex$[ebp], 1

; 1447 :         }
; 1448 :         else

	jmp	SHORT $LN52@Decompress
$LN54@Decompress:

; 1449 :         {
; 1450 :           memIndex = 1;

	mov	DWORD PTR _memIndex$[ebp], 1

; 1451 :           aluIndex = 0;

	mov	DWORD PTR _aluIndex$[ebp], 0
$LN52@Decompress:

; 1452 :         }       
; 1453 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1454 :         pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _aluIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1455 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1456 :       }
; 1457 :       else

	jmp	SHORT $LN51@Decompress
$LN55@Decompress:

; 1458 :       {
; 1459 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN50@Decompress

; 1460 :         {
; 1461 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1462 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1463 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1464 :         }
; 1465 :         else

	jmp	SHORT $LN51@Decompress
$LN50@Decompress:

; 1466 :         {
; 1467 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_ECU);

	push	0
	push	4
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN51@Decompress:

; 1468 :         }
; 1469 :       }
; 1470 :       break;

	jmp	$LN126@Decompress
$LN48@Decompress:

; 1471 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1472 :       pICacheEntry->nuanceCount = 3;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 3

; 1473 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN47@Decompress

; 1474 :       {
; 1475 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1476 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1477 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1478 :       }
; 1479 :       else

	jmp	SHORT $LN46@Decompress
$LN47@Decompress:

; 1480 :       {
; 1481 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN46@Decompress:

; 1482 :       }
; 1483 :       break;

	jmp	$LN126@Decompress
$LN45@Decompress:

; 1484 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1485 :       pICacheEntry->nuanceCount = 4;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 4

; 1486 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	$LN44@Decompress

; 1487 :       {
; 1488 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN43@Decompress

; 1489 :         {
; 1490 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1491 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1492 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1493 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1494 :         }
; 1495 :         else

	jmp	SHORT $LN42@Decompress
$LN43@Decompress:

; 1496 :         {
; 1497 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1498 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
$LN42@Decompress:

; 1499 :         }
; 1500 :       }
; 1501 :       else

	jmp	$LN41@Decompress
$LN44@Decompress:

; 1502 :       {
; 1503 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN40@Decompress

; 1504 :         {    
; 1505 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1506 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1507 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_RCU);

	push	1
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1508 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1509 :         }
; 1510 :         else

	jmp	SHORT $LN41@Decompress
$LN40@Decompress:

; 1511 :         {
; 1512 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1513 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

	push	1
	push	4
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN41@Decompress:

; 1514 :         }
; 1515 :       }
; 1516 :       break;

	jmp	$LN126@Decompress
$LN38@Decompress:

; 1517 :     case ((PACKETINFO_ALU | PACKETINFO_MUL) >> 2):
; 1518 :       pICacheEntry->nuanceCount = 2;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 2

; 1519 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MUL))

	push	3
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN37@Decompress

; 1520 :       {
; 1521 :         mulIndex = 0;

	mov	DWORD PTR _mulIndex$[ebp], 0

; 1522 :         aluIndex = 1;

	mov	DWORD PTR _aluIndex$[ebp], 1

; 1523 :       }
; 1524 :       else

	jmp	SHORT $LN36@Decompress
$LN37@Decompress:

; 1525 :       {
; 1526 :         mulIndex = 1;

	mov	DWORD PTR _mulIndex$[ebp], 1

; 1527 :         aluIndex = 0;

	mov	DWORD PTR _aluIndex$[ebp], 0
$LN36@Decompress:

; 1528 :       }
; 1529 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mulIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1530 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _aluIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1531 :       break;

	jmp	$LN126@Decompress
$LN35@Decompress:

; 1532 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_ECU) >> 2):
; 1533 :       pICacheEntry->nuanceCount = 3;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 3

; 1534 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 1
	je	SHORT $LN34@Decompress

; 1535 :       {
; 1536 :         ecuIndex = 2;

	mov	DWORD PTR _ecuIndex$[ebp], 2

; 1537 :         baseIndex = 0;

	mov	DWORD PTR _baseIndex$[ebp], 0

; 1538 :       }
; 1539 :       else

	jmp	SHORT $LN33@Decompress
$LN34@Decompress:

; 1540 :       {
; 1541 :         ecuIndex = 0;

	mov	DWORD PTR _ecuIndex$[ebp], 0

; 1542 :         baseIndex = 1;

	mov	DWORD PTR _baseIndex$[ebp], 1
$LN33@Decompress:

; 1543 :       }
; 1544 :       
; 1545 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MUL))

	push	3
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN32@Decompress

; 1546 :       {
; 1547 :         mulIndex = baseIndex + 0;

	mov	edx, DWORD PTR _baseIndex$[ebp]
	mov	DWORD PTR _mulIndex$[ebp], edx

; 1548 :         aluIndex = baseIndex + 1;

	mov	eax, DWORD PTR _baseIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _aluIndex$[ebp], eax

; 1549 :       }
; 1550 :       else

	jmp	SHORT $LN31@Decompress
$LN32@Decompress:

; 1551 :       {
; 1552 :         mulIndex = baseIndex + 1;

	mov	ecx, DWORD PTR _baseIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _mulIndex$[ebp], ecx

; 1553 :         aluIndex = baseIndex + 0;

	mov	edx, DWORD PTR _baseIndex$[ebp]
	mov	DWORD PTR _aluIndex$[ebp], edx
$LN31@Decompress:

; 1554 :       }
; 1555 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ecuIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1556 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	mov	eax, DWORD PTR _mulIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1557 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aluIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1558 :       break;

	jmp	$LN126@Decompress
$LN30@Decompress:

; 1559 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_RCU) >> 2):
; 1560 :       pICacheEntry->nuanceCount = 3;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 3

; 1561 :       ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

	push	1
	push	3
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1562 :       break;

	jmp	$LN126@Decompress
$LN29@Decompress:

; 1563 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1564 :       pICacheEntry->nuanceCount = 4;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 4

; 1565 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	SHORT $LN28@Decompress

; 1566 :       {
; 1567 :         pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1568 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

	push	1
	push	3
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1569 :       }
; 1570 :       else

	jmp	SHORT $LN27@Decompress
$LN28@Decompress:

; 1571 :       {
; 1572 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1573 :         ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

	push	1
	push	3
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN27@Decompress:

; 1574 :       }
; 1575 :       break;

	jmp	$LN126@Decompress
$LN26@Decompress:

; 1576 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM) >> 2):
; 1577 :       pICacheEntry->nuanceCount = 3;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+20], 3

; 1578 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN25@Decompress

; 1579 :       {
; 1580 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1581 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1582 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

	push	3
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1583 :       }
; 1584 :       else

	jmp	SHORT $LN24@Decompress
$LN25@Decompress:

; 1585 :       {
; 1586 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

	push	4
	push	3
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN24@Decompress:

; 1587 :       }
; 1588 :       break;

	jmp	$LN126@Decompress
$LN23@Decompress:

; 1589 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1590 :       pICacheEntry->nuanceCount = 4;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 4

; 1591 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1
	je	$LN22@Decompress

; 1592 :       {
; 1593 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 2
	je	SHORT $LN21@Decompress

; 1594 :         {
; 1595 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1596 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1597 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1598 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1599 :         }
; 1600 :         else

	jmp	SHORT $LN20@Decompress
$LN21@Decompress:

; 1601 :         {
; 1602 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

	push	0
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1603 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

	push	4
	push	3
	push	2
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN20@Decompress:

; 1604 :         }
; 1605 :       }
; 1606 :       else

	jmp	$LN19@Decompress
$LN22@Decompress:

; 1607 :       {
; 1608 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN18@Decompress

; 1609 :         {
; 1610 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1611 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1612 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1613 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_MUL);

	push	3
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1614 :         }
; 1615 :         else

	jmp	SHORT $LN19@Decompress
$LN18@Decompress:

; 1616 :         {
; 1617 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1618 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

	push	4
	push	3
	push	2
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
$LN19@Decompress:

; 1619 :         }
; 1620 :       }
; 1621 :       break;

	jmp	$LN126@Decompress
$LN16@Decompress:

; 1622 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1623 :       pICacheEntry->nuanceCount = 4;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+20], 4

; 1624 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 2
	je	SHORT $LN15@Decompress

; 1625 :       {
; 1626 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1627 :         ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

	push	1
	push	3
	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1628 :       }
; 1629 :       else

	jmp	SHORT $LN14@Decompress
$LN15@Decompress:

; 1630 :       {
; 1631 :         ScheduleInstructionQuartet(pICacheEntry,0,&pStruct);

	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
$LN14@Decompress:

; 1632 :       }
; 1633 :       break;

	jmp	$LN126@Decompress
$LN13@Decompress:

; 1634 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1635 :       pICacheEntry->nuanceCount = 5;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 5

; 1636 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 1
	je	$LN12@Decompress

; 1637 :       {
; 1638 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN11@Decompress

; 1639 :         {
; 1640 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1641 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

	push	1
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1642 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

	push	2
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1643 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_MUL);

	push	3
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1644 :           pICacheEntry->CopyInstructionData(4,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1645 :         }
; 1646 :         else

	jmp	SHORT $LN10@Decompress
$LN11@Decompress:

; 1647 :         {
; 1648 :           pICacheEntry->CopyInstructionData(4,&pStruct,SLOT_ECU);

	push	0
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1649 :           ScheduleInstructionQuartet(pICacheEntry,0,&pStruct);

	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
$LN10@Decompress:

; 1650 :         }
; 1651 :       }
; 1652 :       else

	jmp	SHORT $LN126@Decompress
$LN12@Decompress:

; 1653 :       {
; 1654 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

	mov	eax, DWORD PTR _options$[ebp]
	and	eax, 2
	je	SHORT $LN8@Decompress

; 1655 :         {
; 1656 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

	push	4
	lea	ecx, DWORD PTR _pStruct$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1657 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1658 :           ScheduleInstructionTriplet(pICacheEntry,2,&pStruct,SLOT_RCU,SLOT_ALU,SLOT_MUL);

	push	3
	push	2
	push	1
	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1659 :         }
; 1660 :         else

	jmp	SHORT $LN126@Decompress
$LN8@Decompress:

; 1661 :         {
; 1662 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

	push	0
	lea	edx, DWORD PTR _pStruct$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1663 :           ScheduleInstructionQuartet(pICacheEntry,1,&pStruct);

	lea	eax, DWORD PTR _pStruct$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
$LN126@Decompress:

; 1664 :         }
; 1665 :       }
; 1666 :       break;
; 1667 :   }
; 1668 : 
; 1669 :   comboScalarInDep = 0;

	mov	DWORD PTR _comboScalarInDep$[ebp], 0

; 1670 :   comboMiscInDep = 0;

	mov	DWORD PTR _comboMiscInDep$[ebp], 0

; 1671 :   comboScalarOutDep = pICacheEntry->scalarOutputDependencies[0];

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+228]
	mov	DWORD PTR _comboScalarOutDep$[ebp], eax

; 1672 :   comboMiscOutDep = pICacheEntry->miscOutputDependencies[0];

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	mov	DWORD PTR _comboMiscOutDep$[ebp], edx

; 1673 : 
; 1674 :   for(i = 1; i < 5; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN6@Decompress
$LN5@Decompress:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@Decompress:
	cmp	DWORD PTR _i$[ebp], 5
	jae	$LN4@Decompress

; 1675 :   {
; 1676 :     comboScalarInDep |= (pICacheEntry->scalarInputDependencies[i] & comboScalarOutDep);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+188]
	and	eax, DWORD PTR _comboScalarOutDep$[ebp]
	or	eax, DWORD PTR _comboScalarInDep$[ebp]
	mov	DWORD PTR _comboScalarInDep$[ebp], eax

; 1677 :     comboMiscInDep |= (pICacheEntry->miscInputDependencies[i] & comboMiscOutDep);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+208]
	and	eax, DWORD PTR _comboMiscOutDep$[ebp]
	or	eax, DWORD PTR _comboMiscInDep$[ebp]
	mov	DWORD PTR _comboMiscInDep$[ebp], eax

; 1678 :     comboScalarOutDep |= pICacheEntry->scalarOutputDependencies[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR _comboScalarOutDep$[ebp]
	or	eax, DWORD PTR [edx+ecx*4+228]
	mov	DWORD PTR _comboScalarOutDep$[ebp], eax

; 1679 :     comboMiscOutDep |= pICacheEntry->miscOutputDependencies[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR _comboMiscOutDep$[ebp]
	or	eax, DWORD PTR [edx+ecx*4+248]
	mov	DWORD PTR _comboMiscOutDep$[ebp], eax

; 1680 :   }

	jmp	$LN5@Decompress
$LN4@Decompress:

; 1681 : 
; 1682 :   pICacheEntry->packetInfo = pStruct.packetInfo;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR _pStruct$[ebp+24]
	mov	DWORD PTR [ecx+24], edx

; 1683 :   pICacheEntry->ecuConditionCode = pStruct.ecuConditionCode;

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pStruct$[ebp+84]
	mov	DWORD PTR [eax+84], ecx

; 1684 : 
; 1685 :   if(!nuonEnv->compilerOptions.bAllowCompile)

	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	movzx	eax, BYTE PTR [edx+119]
	test	eax, eax
	jne	SHORT $LN3@Decompress

; 1686 :   {
; 1687 :     pICacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 1073741824				; 40000000H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN3@Decompress:

; 1688 :   }
; 1689 : 
; 1690 :   if(comboScalarInDep | comboMiscInDep)

	mov	ecx, DWORD PTR _comboScalarInDep$[ebp]
	or	ecx, DWORD PTR _comboMiscInDep$[ebp]
	je	$LN2@Decompress

; 1691 :   {
; 1692 :     pICacheEntry->packetInfo |= PACKETINFO_DEPENDENCY_PRESENT;

	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+24]
	or	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 1693 : 
; 1694 :     pICacheEntry->pScalarRegs = tempScalarRegs;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+36], edx

; 1695 :     pICacheEntry->pIndexRegs = &tempRx;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 332				; 0000014cH
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 1696 :     pICacheEntry->pRzRegs = &tempRz;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 348				; 0000015cH
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 1697 :     pICacheEntry->pCounterRegs = &tempRc0;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 324				; 00000144H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+44], edx

; 1698 :     pICacheEntry->pAcshift = &tempAcshift;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 376				; 00000178H
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+52], ecx

; 1699 :     pICacheEntry->pSvshift = &tempSvshift;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 380				; 0000017cH
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 1700 :     pICacheEntry->pXyctl = &tempXyctl;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 360				; 00000168H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+60], edx

; 1701 :     pICacheEntry->pUvctl = &tempUvctl;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 364				; 0000016cH
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 1702 :     pICacheEntry->pXyrange = &tempXyrange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 368				; 00000170H
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+68], eax

; 1703 :     pICacheEntry->pUvrange = &tempUvrange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 372				; 00000174H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+72], edx

; 1704 :   }
; 1705 :   else

	jmp	$LN1@Decompress
$LN2@Decompress:

; 1706 :   {
; 1707 :     pICacheEntry->pScalarRegs = regs;

	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 1708 :     pICacheEntry->pIndexRegs = &rx;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 140				; 0000008cH
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1709 :     pICacheEntry->pRzRegs = &rz;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 156				; 0000009cH
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+48], edx

; 1710 :     pICacheEntry->pCounterRegs = &rc0;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 1711 :     pICacheEntry->pAcshift = &acshift;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 1712 :     pICacheEntry->pSvshift = &svshift;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+56], edx

; 1713 :     pICacheEntry->pXyctl = &xyctl;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 1714 :     pICacheEntry->pUvctl = &uvctl;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 172				; 000000acH
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 1715 :     pICacheEntry->pXyrange = &xyrange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [eax+68], edx

; 1716 :     pICacheEntry->pUvrange = &uvrange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 180				; 000000b4H
	mov	edx, DWORD PTR _pICacheEntry$[ebp]
	mov	DWORD PTR [edx+72], ecx
$LN1@Decompress:

; 1717 :   }
; 1718 : 
; 1719 :   pICacheEntry->handlers[0] = pICacheEntry->nuances[0];

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR [eax], edx

; 1720 :   pICacheEntry->handlers[1] = pICacheEntry->nuances[5];

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax+4], edx

; 1721 :   pICacheEntry->handlers[2] = pICacheEntry->nuances[10];

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+8], edx

; 1722 :   pICacheEntry->handlers[3] = pICacheEntry->nuances[15];

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR [eax+12], edx

; 1723 :   pICacheEntry->handlers[4] = pICacheEntry->nuances[20];

	mov	eax, DWORD PTR _pICacheEntry$[ebp]
	mov	ecx, DWORD PTR _pICacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR [eax+16], edx

; 1724 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN143@Decompress
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 364				; 0000016cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN143@Decompress:
	DD	3
	DD	$LN142@Decompress
$LN142@Decompress:
	DD	-276					; fffffeecH
	DD	268					; 0000010cH
	DD	$LN139@Decompress
	DD	-320					; fffffec0H
	DD	4
	DD	$LN140@Decompress
	DD	-349					; fffffea3H
	DD	1
	DD	$LN141@Decompress
$LN141@Decompress:
	DB	98					; 00000062H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	0
$LN140@Decompress:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN139@Decompress:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN144@Decompress:
	DD	$LN125@Decompress
	DD	$LN124@Decompress
	DD	$LN123@Decompress
	DD	$LN122@Decompress
	DD	$LN119@Decompress
	DD	$LN118@Decompress
	DD	$LN114@Decompress
	DD	$LN110@Decompress
	DD	$LN102@Decompress
	DD	$LN101@Decompress
	DD	$LN98@Decompress
	DD	$LN95@Decompress
	DD	$LN90@Decompress
	DD	$LN86@Decompress
	DD	$LN78@Decompress
	DD	$LN75@Decompress
	DD	$LN68@Decompress
	DD	$LN67@Decompress
	DD	$LN64@Decompress
	DD	$LN63@Decompress
	DD	$LN60@Decompress
	DD	$LN56@Decompress
	DD	$LN48@Decompress
	DD	$LN45@Decompress
	DD	$LN38@Decompress
	DD	$LN35@Decompress
	DD	$LN30@Decompress
	DD	$LN29@Decompress
	DD	$LN26@Decompress
	DD	$LN23@Decompress
	DD	$LN16@Decompress
	DD	$LN13@Decompress
?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ENDP ; MPE::DecompressPacket
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPacketDelta@MPE@@QAEIPAEI@Z
_TEXT	SEGMENT
_bTerminating$ = -8					; size = 1
_packetBytes$ = -7					; size = 1
_deltaBytes$ = -6					; size = 1
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_iPtr$ = 8						; size = 4
_numLevels$ = 12					; size = 4
?GetPacketDelta@MPE@@QAEIPAEI@Z PROC			; MPE::GetPacketDelta, COMDAT
; _this$ = ecx

; 1008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1009 :   uint8 opcode;
; 1010 :   uint8 deltaBytes, packetBytes;
; 1011 :   bool bTerminating;
; 1012 : 
; 1013 :   packetBytes = 0;

	mov	BYTE PTR _packetBytes$[ebp], 0

; 1014 :   deltaBytes = 0;

	mov	BYTE PTR _deltaBytes$[ebp], 0
$LN13@GetPacketD:

; 1015 : 
; 1016 :   while(numLevels != 0)

	cmp	DWORD PTR _numLevels$[ebp], 0
	je	$LN12@GetPacketD

; 1017 :   {
; 1018 :     opcode = *iPtr;

	mov	eax, DWORD PTR _iPtr$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _opcode$[ebp], cl

; 1019 :     if(opcode <= 0x3F)

	movzx	edx, BYTE PTR _opcode$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN11@GetPacketD

; 1020 :     {
; 1021 :       bTerminating = true;

	mov	BYTE PTR _bTerminating$[ebp], 1

; 1022 :       deltaBytes += 2;

	movzx	eax, BYTE PTR _deltaBytes$[ebp]
	add	eax, 2
	mov	BYTE PTR _deltaBytes$[ebp], al

; 1023 :       packetBytes += 2;

	movzx	ecx, BYTE PTR _packetBytes$[ebp]
	add	ecx, 2
	mov	BYTE PTR _packetBytes$[ebp], cl

; 1024 :       iPtr += 2;

	mov	edx, DWORD PTR _iPtr$[ebp]
	add	edx, 2
	mov	DWORD PTR _iPtr$[ebp], edx

; 1025 :     }
; 1026 :     else

	jmp	$LN10@GetPacketD
$LN11@GetPacketD:

; 1027 :     {
; 1028 :       //Instruction is not a 16 bit ALU instruction
; 1029 : 
; 1030 :       //If 16 bit non-terminating non-ALU instruction, control instruction
; 1031 :       //or 32 bit immediate extension
; 1032 :       if(opcode < 0x88 || opcode > 0x9F)

	movzx	eax, BYTE PTR _opcode$[ebp]
	cmp	eax, 136				; 00000088H
	jl	SHORT $LN8@GetPacketD
	movzx	ecx, BYTE PTR _opcode$[ebp]
	cmp	ecx, 159				; 0000009fH
	jle	SHORT $LN9@GetPacketD
$LN8@GetPacketD:

; 1033 :       {
; 1034 :         //If not a control instruction (PAD, NOP or BREAKPOINT)
; 1035 :         if((opcode & 0xFC) != 0x80)

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 252				; 000000fcH
	cmp	edx, 128				; 00000080H
	je	SHORT $LN7@GetPacketD

; 1036 :         {
; 1037 :           //if bit 15 is set, the instruction is a packet terminator
; 1038 :           bTerminating = (opcode & 0x80);

	movzx	eax, BYTE PTR _opcode$[ebp]
	and	eax, 128				; 00000080H
	setne	cl
	mov	BYTE PTR _bTerminating$[ebp], cl

; 1039 :         }
; 1040 :         else

	jmp	SHORT $LN6@GetPacketD
$LN7@GetPacketD:

; 1041 :         {
; 1042 :           //if bit 8 is set, the instruction is a terminating breakpoint or NOP
; 1043 :           bTerminating = (opcode & 0x01);

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 1
	mov	BYTE PTR _bTerminating$[ebp], dl
$LN6@GetPacketD:

; 1044 :         }
; 1045 : 
; 1046 :         deltaBytes += 2;

	movzx	eax, BYTE PTR _deltaBytes$[ebp]
	add	eax, 2
	mov	BYTE PTR _deltaBytes$[ebp], al

; 1047 :         packetBytes += 2;

	movzx	ecx, BYTE PTR _packetBytes$[ebp]
	add	ecx, 2
	mov	BYTE PTR _packetBytes$[ebp], cl

; 1048 :         iPtr += 2;

	mov	edx, DWORD PTR _iPtr$[ebp]
	add	edx, 2
	mov	DWORD PTR _iPtr$[ebp], edx
	jmp	SHORT $LN10@GetPacketD
$LN9@GetPacketD:

; 1049 :       }
; 1050 :       else if(opcode >= 0x90)

	movzx	eax, BYTE PTR _opcode$[ebp]
	cmp	eax, 144				; 00000090H
	jl	SHORT $LN4@GetPacketD

; 1051 :       {
; 1052 :         //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 1053 :         bTerminating = *(iPtr + 2) & 0x10;

	mov	ecx, DWORD PTR _iPtr$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	and	edx, 16					; 00000010H
	setne	al
	mov	BYTE PTR _bTerminating$[ebp], al

; 1054 :         deltaBytes += 4;

	movzx	ecx, BYTE PTR _deltaBytes$[ebp]
	add	ecx, 4
	mov	BYTE PTR _deltaBytes$[ebp], cl

; 1055 :         packetBytes += 4;

	movzx	edx, BYTE PTR _packetBytes$[ebp]
	add	edx, 4
	mov	BYTE PTR _packetBytes$[ebp], dl

; 1056 :         iPtr += 4;

	mov	eax, DWORD PTR _iPtr$[ebp]
	add	eax, 4
	mov	DWORD PTR _iPtr$[ebp], eax

; 1057 :       }
; 1058 :       else

	jmp	SHORT $LN10@GetPacketD
$LN4@GetPacketD:

; 1059 :       {
; 1060 :         //32 bit extension (preceeding 48/64 bit instruction)
; 1061 :         bTerminating = false;

	mov	BYTE PTR _bTerminating$[ebp], 0

; 1062 :         deltaBytes += 4;

	movzx	ecx, BYTE PTR _deltaBytes$[ebp]
	add	ecx, 4
	mov	BYTE PTR _deltaBytes$[ebp], cl

; 1063 :         packetBytes += 4;

	movzx	edx, BYTE PTR _packetBytes$[ebp]
	add	edx, 4
	mov	BYTE PTR _packetBytes$[ebp], dl

; 1064 :         iPtr += 4;

	mov	eax, DWORD PTR _iPtr$[ebp]
	add	eax, 4
	mov	DWORD PTR _iPtr$[ebp], eax
$LN10@GetPacketD:

; 1065 :       }
; 1066 :     }
; 1067 : 
; 1068 :     if(bTerminating || (packetBytes >= 128))

	movzx	ecx, BYTE PTR _bTerminating$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@GetPacketD
	movzx	edx, BYTE PTR _packetBytes$[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN2@GetPacketD
$LN1@GetPacketD:

; 1069 :     {
; 1070 :       numLevels--;

	mov	eax, DWORD PTR _numLevels$[ebp]
	sub	eax, 1
	mov	DWORD PTR _numLevels$[ebp], eax

; 1071 :       packetBytes = 0;

	mov	BYTE PTR _packetBytes$[ebp], 0
$LN2@GetPacketD:

; 1072 :     }
; 1073 :   }

	jmp	$LN13@GetPacketD
$LN12@GetPacketD:

; 1074 : 
; 1075 :   return deltaBytes;

	movzx	eax, BYTE PTR _deltaBytes$[ebp]

; 1076 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetPacketDelta@MPE@@QAEIPAEI@Z ENDP			; MPE::GetPacketDelta
_TEXT	ENDS
EXTRN	?OnesCount@@YAII@Z:PROC				; OnesCount
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z
_TEXT	SEGMENT
_yMiscOutDep$ = -36					; size = 4
_xMiscOutDep$ = -32					; size = 4
_yScalarOutDep$ = -28					; size = 4
_xScalarOutDep$ = -24					; size = 4
_yMiscInDep$ = -20					; size = 4
_xMiscInDep$ = -16					; size = 4
_yScalarInDep$ = -12					; size = 4
_xScalarInDep$ = -8					; size = 4
_this$ = -4						; size = 4
_entry$ = 8						; size = 4
_slot1$ = 12						; size = 4
_slot2$ = 16						; size = 4
?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z PROC ; MPE::ChooseInstructionPairOrdering, COMDAT
; _this$ = ecx

; 1727 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1728 :   uint32 xScalarInDep, yScalarInDep, xMiscInDep, yMiscInDep;
; 1729 :   uint32 xScalarOutDep, yScalarOutDep, xMiscOutDep, yMiscOutDep;
; 1730 : 
; 1731 :   xScalarInDep = entry->scalarInputDependencies[slot1];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+188]
	mov	DWORD PTR _xScalarInDep$[ebp], edx

; 1732 :   yScalarInDep = entry->scalarInputDependencies[slot2];

	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+188]
	mov	DWORD PTR _yScalarInDep$[ebp], edx

; 1733 :   xMiscInDep = entry->miscInputDependencies[slot1];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+208]
	mov	DWORD PTR _xMiscInDep$[ebp], edx

; 1734 :   yMiscInDep = entry->miscInputDependencies[slot2];

	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+208]
	mov	DWORD PTR _yMiscInDep$[ebp], edx

; 1735 :   xScalarOutDep = entry->scalarOutputDependencies[slot1];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+228]
	mov	DWORD PTR _xScalarOutDep$[ebp], edx

; 1736 :   yScalarOutDep = entry->scalarOutputDependencies[slot2];

	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+228]
	mov	DWORD PTR _yScalarOutDep$[ebp], edx

; 1737 :   xMiscOutDep = entry->miscOutputDependencies[slot1];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+248]
	mov	DWORD PTR _xMiscOutDep$[ebp], edx

; 1738 :   yMiscOutDep = entry->miscOutputDependencies[slot2];

	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+248]
	mov	DWORD PTR _yMiscOutDep$[ebp], edx

; 1739 :   return (OnesCount(yScalarInDep & xScalarOutDep) + OnesCount(yMiscInDep & xMiscOutDep)) 
; 1740 :     > (OnesCount(xScalarInDep & yScalarOutDep) + OnesCount(xMiscInDep & yMiscOutDep));

	mov	eax, DWORD PTR _yScalarInDep$[ebp]
	and	eax, DWORD PTR _xScalarOutDep$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _yMiscInDep$[ebp]
	and	ecx, DWORD PTR _xMiscOutDep$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	edx, DWORD PTR _xScalarInDep$[ebp]
	and	edx, DWORD PTR _yScalarOutDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	edi, eax
	mov	eax, DWORD PTR _xMiscInDep$[ebp]
	and	eax, DWORD PTR _yMiscOutDep$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	edi, eax
	cmp	edi, esi
	sbb	eax, eax
	neg	eax

; 1741 : }

	pop	edi
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ENDP ; MPE::ChooseInstructionPairOrdering
_TEXT	ENDS
;	COMDAT ?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 02H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot3
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
_DATA	ENDS
;	COMDAT ?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 01H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot2
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DD	01H
_DATA	ENDS
;	COMDAT ?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 00H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot1
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
; Function compile flags: /Odtp /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_scores$ = -76						; size = 24
_minIndex$ = -48					; size = 4
_minVal$ = -44						; size = 4
_i$ = -40						; size = 4
_tempMiscInDep$ = -36					; size = 4
_tempScalarInDep$ = -32					; size = 4
_comboMiscOutDep13$ = -28				; size = 4
_comboMiscOutDep23$ = -24				; size = 4
_comboMiscOutDep12$ = -20				; size = 4
_comboScalarOutDep13$ = -16				; size = 4
_comboScalarOutDep23$ = -12				; size = 4
_comboScalarOutDep12$ = -8				; size = 4
_this$ = -4						; size = 4
_destEntry$ = 8						; size = 4
_baseSlot$ = 12						; size = 4
_srcEntry$ = 16						; size = 4
_slot1$ = 20						; size = 4
_slot2$ = 24						; size = 4
_slot3$ = 28						; size = 4
?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z PROC ; MPE::ScheduleInstructionTriplet
; _this$ = ecx

; 1744 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1745 :   static uint32 destSlot1[6] = {0,0,1,1,2,2};
; 1746 :   static uint32 destSlot2[6] = {1,2,2,0,0,1};
; 1747 :   static uint32 destSlot3[6] = {2,1,0,2,1,0};
; 1748 : 
; 1749 :   uint32 comboScalarOutDep12, comboScalarOutDep23, comboScalarOutDep13;
; 1750 :   uint32 comboMiscOutDep12, comboMiscOutDep23, comboMiscOutDep13;
; 1751 :   uint32 tempScalarInDep, tempMiscInDep, i, minVal, minIndex;
; 1752 :   uint32 scores[6];
; 1753 :   
; 1754 : /*
; 1755 :   After completion, scores will contain the dependency count for the following permuations:
; 1756 :   {[1,2,3],[1,3,2],[2,3,1],[2,1,3],[3,1,2],[3,2,1]}.  Choose the permutation with the lowest
; 1757 :   score.
; 1758 : */
; 1759 : 
; 1760 :   comboScalarOutDep12 = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+228]
	or	eax, DWORD PTR [esi+edx*4+228]
	mov	DWORD PTR _comboScalarOutDep12$[ebp], eax

; 1761 :   comboMiscOutDep12 = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+248]
	or	ecx, DWORD PTR [esi+eax*4+248]
	mov	DWORD PTR _comboMiscOutDep12$[ebp], ecx

; 1762 : 
; 1763 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep12;

	mov	edx, DWORD PTR _slot3$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+188]
	and	ecx, DWORD PTR _comboScalarOutDep12$[ebp]
	mov	DWORD PTR _tempScalarInDep$[ebp], ecx

; 1764 :   tempMiscInDep = srcEntry->miscInputDependencies[slot3] & comboMiscOutDep12;

	mov	edx, DWORD PTR _slot3$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+208]
	and	ecx, DWORD PTR _comboMiscOutDep12$[ebp]
	mov	DWORD PTR _tempMiscInDep$[ebp], ecx

; 1765 : 
; 1766 :   scores[0] = 
; 1767 :     OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1768 :               (tempScalarInDep)) +
; 1769 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1770 :               (tempMiscInDep));

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+188]
	and	edx, DWORD PTR [esi+ecx*4+228]
	or	edx, DWORD PTR _tempScalarInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot1$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
	and	eax, DWORD PTR [edi+edx*4+248]
	or	eax, DWORD PTR _tempMiscInDep$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp], esi

; 1771 : 
; 1772 :   scores[3] = 
; 1773 :     OnesCount((srcEntry->scalarInputDependencies[slot1] & srcEntry->scalarOutputDependencies[slot2]) |
; 1774 :               (tempScalarInDep)) +
; 1775 :     OnesCount((srcEntry->miscInputDependencies[slot1] & srcEntry->miscOutputDependencies[slot2]) |
; 1776 :               (tempMiscInDep));

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+188]
	and	ecx, DWORD PTR [esi+eax*4+228]
	or	ecx, DWORD PTR _tempScalarInDep$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _slot1$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot2$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+208]
	and	edx, DWORD PTR [edi+ecx*4+248]
	or	edx, DWORD PTR _tempMiscInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+12], esi

; 1777 : 
; 1778 :   comboScalarOutDep13 = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot3];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+228]
	or	eax, DWORD PTR [esi+edx*4+228]
	mov	DWORD PTR _comboScalarOutDep13$[ebp], eax

; 1779 :   comboMiscOutDep13 = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot3];

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+248]
	or	ecx, DWORD PTR [esi+eax*4+248]
	mov	DWORD PTR _comboMiscOutDep13$[ebp], ecx

; 1780 : 
; 1781 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot2] & comboScalarOutDep13;

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+188]
	and	ecx, DWORD PTR _comboScalarOutDep13$[ebp]
	mov	DWORD PTR _tempScalarInDep$[ebp], ecx

; 1782 :   tempMiscInDep = srcEntry->miscInputDependencies[slot2] & comboMiscOutDep13;

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+208]
	and	ecx, DWORD PTR _comboMiscOutDep13$[ebp]
	mov	DWORD PTR _tempMiscInDep$[ebp], ecx

; 1783 : 
; 1784 :   scores[1] = 
; 1785 :     OnesCount((srcEntry->scalarInputDependencies[slot3] & srcEntry->scalarOutputDependencies[slot1]) |
; 1786 :               (tempScalarInDep)) +
; 1787 :     OnesCount((srcEntry->miscInputDependencies[slot3] & srcEntry->miscOutputDependencies[slot1]) |
; 1788 :               (tempMiscInDep));

	mov	edx, DWORD PTR _slot3$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+188]
	and	edx, DWORD PTR [esi+ecx*4+228]
	or	edx, DWORD PTR _tempScalarInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot1$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
	and	eax, DWORD PTR [edi+edx*4+248]
	or	eax, DWORD PTR _tempMiscInDep$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+4], esi

; 1789 : 
; 1790 :   scores[4] = 
; 1791 :     OnesCount((srcEntry->scalarInputDependencies[slot1] & srcEntry->scalarOutputDependencies[slot3]) |
; 1792 :               (tempScalarInDep)) +
; 1793 :     OnesCount((srcEntry->miscInputDependencies[slot1] & srcEntry->miscOutputDependencies[slot3]) |
; 1794 :               (tempMiscInDep));

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+188]
	and	ecx, DWORD PTR [esi+eax*4+228]
	or	ecx, DWORD PTR _tempScalarInDep$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _slot1$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot3$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+208]
	and	edx, DWORD PTR [edi+ecx*4+248]
	or	edx, DWORD PTR _tempMiscInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+16], esi

; 1795 : 
; 1796 :   comboScalarOutDep23 = srcEntry->scalarOutputDependencies[slot2] | srcEntry->scalarOutputDependencies[slot3];

	mov	eax, DWORD PTR _slot2$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+228]
	or	eax, DWORD PTR [esi+edx*4+228]
	mov	DWORD PTR _comboScalarOutDep23$[ebp], eax

; 1797 :   comboMiscOutDep23 = srcEntry->miscOutputDependencies[slot2] | srcEntry->miscOutputDependencies[slot3];

	mov	ecx, DWORD PTR _slot2$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+248]
	or	ecx, DWORD PTR [esi+eax*4+248]
	mov	DWORD PTR _comboMiscOutDep23$[ebp], ecx

; 1798 : 
; 1799 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot1] & comboScalarOutDep23;

	mov	edx, DWORD PTR _slot1$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+188]
	and	ecx, DWORD PTR _comboScalarOutDep23$[ebp]
	mov	DWORD PTR _tempScalarInDep$[ebp], ecx

; 1800 :   tempMiscInDep = srcEntry->miscInputDependencies[slot1] & comboMiscOutDep23;

	mov	edx, DWORD PTR _slot1$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+208]
	and	ecx, DWORD PTR _comboMiscOutDep23$[ebp]
	mov	DWORD PTR _tempMiscInDep$[ebp], ecx

; 1801 : 
; 1802 :   scores[2] = 
; 1803 :     OnesCount((srcEntry->scalarInputDependencies[slot3] & srcEntry->scalarOutputDependencies[slot2]) |
; 1804 :               (tempScalarInDep)) +
; 1805 :     OnesCount((srcEntry->miscInputDependencies[slot3] & srcEntry->miscOutputDependencies[slot2]) |
; 1806 :               (tempMiscInDep));

	mov	edx, DWORD PTR _slot3$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+188]
	and	edx, DWORD PTR [esi+ecx*4+228]
	or	edx, DWORD PTR _tempScalarInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot2$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
	and	eax, DWORD PTR [edi+edx*4+248]
	or	eax, DWORD PTR _tempMiscInDep$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+8], esi

; 1807 : 
; 1808 :   scores[5] = 
; 1809 :     OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot3]) |
; 1810 :               (tempScalarInDep)) +
; 1811 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot3]) |
; 1812 :               (tempMiscInDep));

	mov	ecx, DWORD PTR _slot2$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+188]
	and	ecx, DWORD PTR [esi+eax*4+228]
	or	ecx, DWORD PTR _tempScalarInDep$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot3$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+208]
	and	edx, DWORD PTR [edi+ecx*4+248]
	or	edx, DWORD PTR _tempMiscInDep$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+20], esi

; 1813 : 
; 1814 :   minVal = scores[0];

	mov	eax, DWORD PTR _scores$[ebp]
	mov	DWORD PTR _minVal$[ebp], eax

; 1815 :   minIndex = 0;

	mov	DWORD PTR _minIndex$[ebp], 0

; 1816 : 
; 1817 :   for(i = 1; i < 6; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@ScheduleIn
$LN3@ScheduleIn:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@ScheduleIn:
	cmp	DWORD PTR _i$[ebp], 6
	jae	SHORT $LN2@ScheduleIn

; 1818 :   {
; 1819 :     if(scores[i] <= minVal)

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _scores$[ebp+edx*4]
	cmp	eax, DWORD PTR _minVal$[ebp]
	ja	SHORT $LN1@ScheduleIn

; 1820 :     {
; 1821 :       minIndex = i;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _minIndex$[ebp], ecx

; 1822 :       minVal = scores[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _scores$[ebp+edx*4]
	mov	DWORD PTR _minVal$[ebp], eax
$LN1@ScheduleIn:

; 1823 :     }
; 1824 :   }

	jmp	SHORT $LN3@ScheduleIn
$LN2@ScheduleIn:

; 1825 : 
; 1826 :   destEntry->CopyInstructionData(baseSlot + destSlot1[minIndex], srcEntry, slot1);

	mov	ecx, DWORD PTR _slot1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _minIndex$[ebp]
	mov	ecx, DWORD PTR _baseSlot$[ebp]
	add	ecx, DWORD PTR ?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1827 :   destEntry->CopyInstructionData(baseSlot + destSlot2[minIndex], srcEntry, slot2);

	mov	edx, DWORD PTR _slot2$[ebp]
	push	edx
	mov	eax, DWORD PTR _srcEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minIndex$[ebp]
	mov	edx, DWORD PTR _baseSlot$[ebp]
	add	edx, DWORD PTR ?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[ecx*4]
	push	edx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1828 :   destEntry->CopyInstructionData(baseSlot + destSlot3[minIndex], srcEntry, slot3);

	mov	eax, DWORD PTR _slot3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _minIndex$[ebp]
	mov	eax, DWORD PTR _baseSlot$[ebp]
	add	eax, DWORD PTR ?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1829 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ScheduleIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN9@ScheduleIn:
	DD	1
	DD	$LN8@ScheduleIn
$LN8@ScheduleIn:
	DD	-76					; ffffffb4H
	DD	24					; 00000018H
	DD	$LN7@ScheduleIn
$LN7@ScheduleIn:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ENDP ; MPE::ScheduleInstructionTriplet
_TEXT	ENDS
PUBLIC	?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z ; MPE::ScoreInstructionTriplet
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_comboMiscOutDep$ = -12					; size = 4
_comboScalarOutDep$ = -8				; size = 4
_this$ = -4						; size = 4
_srcEntry$ = 8						; size = 4
_slot1$ = 12						; size = 4
_slot2$ = 16						; size = 4
_slot3$ = 20						; size = 4
?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z PROC ; MPE::ScoreInstructionTriplet
; _this$ = ecx

; 1832 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1833 :   uint32 comboScalarOutDep, comboMiscOutDep;
; 1834 : 
; 1835 :   comboMiscOutDep = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+248]
	or	eax, DWORD PTR [esi+edx*4+248]
	mov	DWORD PTR _comboMiscOutDep$[ebp], eax

; 1836 :   comboScalarOutDep = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+228]
	or	ecx, DWORD PTR [esi+eax*4+228]
	mov	DWORD PTR _comboScalarOutDep$[ebp], ecx

; 1837 : 
; 1838 :   return OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1839 :     (srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep)) +
; 1840 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1841 :     (srcEntry->miscInputDependencies[slot3] & comboMiscOutDep));

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+188]
	and	edx, DWORD PTR [esi+ecx*4+228]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+188]
	and	eax, DWORD PTR _comboScalarOutDep$[ebp]
	or	edx, eax
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _slot2$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot1$[ebp]
	mov	edi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+208]
	and	ecx, DWORD PTR [edi+eax*4+248]
	mov	edx, DWORD PTR _slot3$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+208]
	and	edx, DWORD PTR _comboMiscOutDep$[ebp]
	or	ecx, edx
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	eax, esi

; 1842 : }

	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z ENDP ; MPE::ScoreInstructionTriplet
_TEXT	ENDS
PUBLIC	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_comboMiscOutDep$ = -12					; size = 4
_comboScalarOutDep$ = -8				; size = 4
_this$ = -4						; size = 4
_comboScalarDep$ = 8					; size = 4
_comboMiscDep$ = 12					; size = 4
_srcEntry$ = 16						; size = 4
_slot1$ = 20						; size = 4
_slot2$ = 24						; size = 4
_slot3$ = 28						; size = 4
?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z PROC ; MPE::GetInstructionTripletDependencies
; _this$ = ecx

; 1845 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1846 :   uint32 comboScalarOutDep, comboMiscOutDep;
; 1847 : 
; 1848 :   comboMiscOutDep = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];

	mov	eax, DWORD PTR _slot1$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+248]
	or	eax, DWORD PTR [esi+edx*4+248]
	mov	DWORD PTR _comboMiscOutDep$[ebp], eax

; 1849 :   comboScalarOutDep = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR _slot2$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+228]
	or	ecx, DWORD PTR [esi+eax*4+228]
	mov	DWORD PTR _comboScalarOutDep$[ebp], ecx

; 1850 : 
; 1851 :   *comboMiscDep = (srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1852 :     (srcEntry->miscInputDependencies[slot3] & comboMiscOutDep);

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+208]
	and	edx, DWORD PTR [esi+ecx*4+248]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
	and	eax, DWORD PTR _comboMiscOutDep$[ebp]
	or	edx, eax
	mov	ecx, DWORD PTR _comboMiscDep$[ebp]
	mov	DWORD PTR [ecx], edx

; 1853 :   *comboScalarDep = (srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1854 :     (srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep);

	mov	edx, DWORD PTR _slot2$[ebp]
	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _slot1$[ebp]
	mov	esi, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+188]
	and	edx, DWORD PTR [esi+ecx*4+228]
	mov	eax, DWORD PTR _slot3$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+188]
	and	eax, DWORD PTR _comboScalarOutDep$[ebp]
	or	edx, eax
	mov	ecx, DWORD PTR _comboScalarDep$[ebp]
	mov	DWORD PTR [ecx], edx

; 1855 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ENDP ; MPE::GetInstructionTripletDependencies
_TEXT	ENDS
;	COMDAT ?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 03H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotMEM
	DD	03H
	DD	03H
	DD	00H
	DD	00H
	DD	01H
_DATA	ENDS
;	COMDAT ?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 02H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotMUL
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	02H
_DATA	ENDS
;	COMDAT ?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 01H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotALU
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
_DATA	ENDS
;	COMDAT ?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 00H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotRCU
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	00H
; Function compile flags: /Odtp /RTCsu
_DATA	ENDS
_TEXT	SEGMENT
_scores$ = -92						; size = 24
_i$ = -64						; size = 4
_minIndex$ = -60					; size = 4
_minVal$ = -56						; size = 4
_tempMiscDep2$ = -52					; size = 4
_tempScalarDep2$ = -48					; size = 4
_tempMiscDep1$ = -40					; size = 4
_tempScalarDep1$ = -28					; size = 4
_comboMiscOutDep2$ = -20				; size = 4
_comboMiscOutDep1$ = -16				; size = 4
_comboScalarOutDep2$ = -12				; size = 4
_comboScalarOutDep1$ = -8				; size = 4
_this$ = -4						; size = 4
_destEntry$ = 8						; size = 4
_baseSlot$ = 12						; size = 4
_srcEntry$ = 16						; size = 4
?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z PROC ; MPE::ScheduleInstructionQuartet
; _this$ = ecx

; 1858 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1859 :   static uint32 destSlotRCU[6] = {0,0,1,1,2,0};
; 1860 :   static uint32 destSlotALU[6] = {1,2,2,3,3,3};
; 1861 :   static uint32 destSlotMUL[6] = {2,1,0,2,1,2};
; 1862 :   static uint32 destSlotMEM[6] = {3,3,3,0,0,1};
; 1863 : 
; 1864 :   uint32 comboScalarOutDep1, comboScalarOutDep2;
; 1865 :   uint32 comboMiscOutDep1, comboMiscOutDep2;
; 1866 :   uint32 tempScalarDep1, tempMiscDep1, tempScalarDep2, tempMiscDep2;
; 1867 :   uint32 minVal, minIndex, i;
; 1868 :   uint32 scores[6];
; 1869 : 
; 1870 :   tempScalarDep1 = srcEntry->scalarOutputDependencies[SLOT_RCU] | srcEntry->scalarOutputDependencies[SLOT_MUL];

	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+232]
	or	edx, DWORD PTR [ecx+240]
	mov	DWORD PTR _tempScalarDep1$[ebp], edx

; 1871 :   tempMiscDep1 = srcEntry->miscOutputDependencies[SLOT_RCU] | srcEntry->miscOutputDependencies[SLOT_MUL];

	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [eax+252]
	or	edx, DWORD PTR [ecx+260]
	mov	DWORD PTR _tempMiscDep1$[ebp], edx

; 1872 :   
; 1873 :   comboScalarOutDep1 = srcEntry->scalarOutputDependencies[SLOT_ALU] | tempScalarDep1;

	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+236]
	or	ecx, DWORD PTR _tempScalarDep1$[ebp]
	mov	DWORD PTR _comboScalarOutDep1$[ebp], ecx

; 1874 :   comboMiscOutDep1 = srcEntry->miscOutputDependencies[SLOT_ALU] | tempMiscDep1;

	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [edx+256]
	or	eax, DWORD PTR _tempMiscDep1$[ebp]
	mov	DWORD PTR _comboMiscOutDep1$[ebp], eax

; 1875 : 
; 1876 :   comboScalarOutDep2 = srcEntry->scalarOutputDependencies[SLOT_MEM] | tempScalarDep1;

	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	or	edx, DWORD PTR _tempScalarDep1$[ebp]
	mov	DWORD PTR _comboScalarOutDep2$[ebp], edx

; 1877 :   comboMiscOutDep2 = srcEntry->miscOutputDependencies[SLOT_MEM] | tempMiscDep1;

	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+264]
	or	ecx, DWORD PTR _tempMiscDep1$[ebp]
	mov	DWORD PTR _comboMiscOutDep2$[ebp], ecx

; 1878 : 
; 1879 :   tempScalarDep2 = srcEntry->scalarInputDependencies[SLOT_MEM] & comboScalarOutDep1;

	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [edx+204]
	and	eax, DWORD PTR _comboScalarOutDep1$[ebp]
	mov	DWORD PTR _tempScalarDep2$[ebp], eax

; 1880 :   tempMiscDep2 = srcEntry->miscInputDependencies[SLOT_MEM] & comboMiscOutDep1;

	mov	ecx, DWORD PTR _srcEntry$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	and	edx, DWORD PTR _comboMiscOutDep1$[ebp]
	mov	DWORD PTR _tempMiscDep2$[ebp], edx

; 1881 : 
; 1882 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_ALU,SLOT_MUL);

	push	3
	push	2
	push	1
	mov	eax, DWORD PTR _srcEntry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempMiscDep1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempScalarDep1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1883 :   scores[0] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	eax, DWORD PTR _tempScalarDep1$[ebp]
	or	eax, DWORD PTR _tempScalarDep2$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _tempMiscDep1$[ebp]
	or	ecx, DWORD PTR _tempMiscDep2$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp], esi

; 1884 : 
; 1885 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_MUL,SLOT_ALU);

	push	2
	push	3
	push	1
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	lea	eax, DWORD PTR _tempMiscDep1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempScalarDep1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1886 :   scores[1] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	edx, DWORD PTR _tempScalarDep1$[ebp]
	or	edx, DWORD PTR _tempScalarDep2$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _tempMiscDep1$[ebp]
	or	eax, DWORD PTR _tempMiscDep2$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+4], esi

; 1887 : 
; 1888 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MUL,SLOT_RCU,SLOT_ALU);

	push	2
	push	1
	push	3
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempMiscDep1$[ebp]
	push	edx
	lea	eax, DWORD PTR _tempScalarDep1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1889 :   scores[2] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	ecx, DWORD PTR _tempScalarDep1$[ebp]
	or	ecx, DWORD PTR _tempScalarDep2$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _tempMiscDep1$[ebp]
	or	edx, DWORD PTR _tempMiscDep2$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+8], esi

; 1890 : 
; 1891 :   tempScalarDep2 = srcEntry->scalarInputDependencies[SLOT_ALU] & comboScalarOutDep2;

	mov	eax, DWORD PTR _srcEntry$[ebp]
	mov	ecx, DWORD PTR [eax+196]
	and	ecx, DWORD PTR _comboScalarOutDep2$[ebp]
	mov	DWORD PTR _tempScalarDep2$[ebp], ecx

; 1892 :   tempMiscDep2 = srcEntry->miscInputDependencies[SLOT_ALU] & comboMiscOutDep2;

	mov	edx, DWORD PTR _srcEntry$[ebp]
	mov	eax, DWORD PTR [edx+216]
	and	eax, DWORD PTR _comboMiscOutDep2$[ebp]
	mov	DWORD PTR _tempMiscDep2$[ebp], eax

; 1893 : 
; 1894 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MEM,SLOT_RCU,SLOT_MUL);

	push	3
	push	1
	push	4
	mov	ecx, DWORD PTR _srcEntry$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempMiscDep1$[ebp]
	push	edx
	lea	eax, DWORD PTR _tempScalarDep1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1895 :   scores[3] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	ecx, DWORD PTR _tempScalarDep1$[ebp]
	or	ecx, DWORD PTR _tempScalarDep2$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	edx, DWORD PTR _tempMiscDep1$[ebp]
	or	edx, DWORD PTR _tempMiscDep2$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+12], esi

; 1896 : 
; 1897 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MEM,SLOT_MUL,SLOT_RCU);

	push	1
	push	3
	push	4
	mov	eax, DWORD PTR _srcEntry$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempMiscDep1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tempScalarDep1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1898 :   scores[4] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	eax, DWORD PTR _tempScalarDep1$[ebp]
	or	eax, DWORD PTR _tempScalarDep2$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _tempMiscDep1$[ebp]
	or	ecx, DWORD PTR _tempMiscDep2$[ebp]
	push	ecx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+16], esi

; 1899 :  
; 1900 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_MEM,SLOT_MUL);

	push	3
	push	4
	push	1
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	lea	eax, DWORD PTR _tempMiscDep1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tempScalarDep1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1901 :   scores[5] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

	mov	edx, DWORD PTR _tempScalarDep1$[ebp]
	or	edx, DWORD PTR _tempScalarDep2$[ebp]
	push	edx
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	mov	esi, eax
	mov	eax, DWORD PTR _tempMiscDep1$[ebp]
	or	eax, DWORD PTR _tempMiscDep2$[ebp]
	push	eax
	call	?OnesCount@@YAII@Z			; OnesCount
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _scores$[ebp+20], esi

; 1902 : 
; 1903 :   minVal = scores[0];

	mov	ecx, DWORD PTR _scores$[ebp]
	mov	DWORD PTR _minVal$[ebp], ecx

; 1904 :   minIndex = 0;

	mov	DWORD PTR _minIndex$[ebp], 0

; 1905 : 
; 1906 :   for(i = 1; i < 6; i++)

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@ScheduleIn@2
$LN3@ScheduleIn@2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@ScheduleIn@2:
	cmp	DWORD PTR _i$[ebp], 6
	jae	SHORT $LN2@ScheduleIn@2

; 1907 :   {
; 1908 :     if(scores[i] <= minVal)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scores$[ebp+eax*4]
	cmp	ecx, DWORD PTR _minVal$[ebp]
	ja	SHORT $LN1@ScheduleIn@2

; 1909 :     {
; 1910 :       minIndex = i;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _minIndex$[ebp], edx

; 1911 :       minVal = scores[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _scores$[ebp+eax*4]
	mov	DWORD PTR _minVal$[ebp], ecx
$LN1@ScheduleIn@2:

; 1912 :     }
; 1913 :   }

	jmp	SHORT $LN3@ScheduleIn@2
$LN2@ScheduleIn@2:

; 1914 : 
; 1915 :   destEntry->CopyInstructionData(baseSlot + destSlotRCU[minIndex], srcEntry, SLOT_RCU);

	push	1
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _minIndex$[ebp]
	mov	ecx, DWORD PTR _baseSlot$[ebp]
	add	ecx, DWORD PTR ?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1916 :   destEntry->CopyInstructionData(baseSlot + destSlotALU[minIndex], srcEntry, SLOT_ALU);

	push	2
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _minIndex$[ebp]
	mov	ecx, DWORD PTR _baseSlot$[ebp]
	add	ecx, DWORD PTR ?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1917 :   destEntry->CopyInstructionData(baseSlot + destSlotMUL[minIndex], srcEntry, SLOT_MUL);

	push	3
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _minIndex$[ebp]
	mov	ecx, DWORD PTR _baseSlot$[ebp]
	add	ecx, DWORD PTR ?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1918 :   destEntry->CopyInstructionData(baseSlot + destSlotMEM[minIndex], srcEntry, SLOT_MEM);

	push	4
	mov	edx, DWORD PTR _srcEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _minIndex$[ebp]
	mov	ecx, DWORD PTR _baseSlot$[ebp]
	add	ecx, DWORD PTR ?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[eax*4]
	push	ecx
	mov	ecx, DWORD PTR _destEntry$[ebp]
	call	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1919 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ScheduleIn@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN11@ScheduleIn@2:
	DD	3
	DD	$LN10@ScheduleIn@2
$LN10@ScheduleIn@2:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN7@ScheduleIn@2
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN8@ScheduleIn@2
	DD	-92					; ffffffa4H
	DD	24					; 00000018H
	DD	$LN9@ScheduleIn@2
$LN9@ScheduleIn@2:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN8@ScheduleIn@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
$LN7@ScheduleIn@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ENDP ; MPE::ScheduleInstructionQuartet
_TEXT	ENDS
PUBLIC	?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z ; LogMemoryLocation
EXTRN	_fprintf:PROC
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z:PROC ; NuonEnvironment::GetPointerToMemory
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_value$ = -8						; size = 4
_outFile$ = 8						; size = 4
_varname$ = 12						; size = 4
_address$ = 16						; size = 4
_mpe$ = 20						; size = 4
?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z PROC	; LogMemoryLocation

; 1922 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1923 :   uint32 value = *((uint32 *)nuonEnv->GetPointerToMemory(mpe,address));

	push	1
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mpe$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _value$[ebp], edx

; 1924 :   SwapScalarBytes(&value);

	lea	ecx, DWORD PTR _value$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 1925 :   fprintf(outFile,"%s = $%8.8lx\n",varname,value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _varname$[ebp]
	push	ecx
	push	OFFSET $SG53744
	mov	edx, DWORD PTR _outFile$[ebp]
	push	edx
	call	_fprintf
	add	esp, 16					; 00000010H

; 1926 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@LogMemoryL
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@LogMemoryL:
	DD	1
	DD	$LN4@LogMemoryL
$LN4@LogMemoryL:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@LogMemoryL
$LN3@LogMemoryL:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z ENDP	; LogMemoryLocation
_TEXT	ENDS
PUBLIC	?UpdateInvalidateRegion@MPE@@QAEXII@Z		; MPE::UpdateInvalidateRegion
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -24						; size = 4
tv84 = -20						; size = 4
tv77 = -16						; size = 4
tv72 = -12						; size = 4
_end$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_length$ = 12						; size = 4
?UpdateInvalidateRegion@MPE@@QAEXII@Z PROC		; MPE::UpdateInvalidateRegion
; _this$ = ecx

; 1929 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1930 :   uint32 end = (start + length - 1);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	DWORD PTR _end$[ebp], edx

; 1931 : 
; 1932 :   invalidateRegionStart = (((start < invalidateRegionStart) || !invalidateRegionStart) ? start : invalidateRegionStart);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+624]
	jb	SHORT $LN3@UpdateInva
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+624], 0
	je	SHORT $LN3@UpdateInva
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+624]
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN4@UpdateInva
$LN3@UpdateInva:
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv72[ebp], edx
$LN4@UpdateInva:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [eax+624], ecx

; 1933 :   invalidateRegionEnd = ((end > invalidateRegionEnd) ? end : invalidateRegionEnd);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR [edx+628]
	jbe	SHORT $LN5@UpdateInva
	mov	ecx, DWORD PTR _end$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@UpdateInva
$LN5@UpdateInva:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+628]
	mov	DWORD PTR tv77[ebp], eax
$LN6@UpdateInva:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR [ecx+628], edx

; 1934 : 
; 1935 :   interpreterInvalidateRegionStart = (((start < interpreterInvalidateRegionStart) || !interpreterInvalidateRegionStart) ? start : interpreterInvalidateRegionStart);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+632]
	jb	SHORT $LN7@UpdateInva
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+632], 0
	je	SHORT $LN7@UpdateInva
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+632]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN8@UpdateInva
$LN7@UpdateInva:
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv84[ebp], edx
$LN8@UpdateInva:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR [eax+632], ecx

; 1936 :   interpreterInvalidateRegionEnd = ((end > interpreterInvalidateRegionEnd) ? end : interpreterInvalidateRegionEnd);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _end$[ebp]
	cmp	eax, DWORD PTR [edx+636]
	jbe	SHORT $LN9@UpdateInva
	mov	ecx, DWORD PTR _end$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
	jmp	SHORT $LN10@UpdateInva
$LN9@UpdateInva:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+636]
	mov	DWORD PTR tv89[ebp], eax
$LN10@UpdateInva:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [ecx+636], edx

; 1937 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?UpdateInvalidateRegion@MPE@@QAEXII@Z ENDP		; MPE::UpdateInvalidateRegion
_TEXT	ENDS
PUBLIC	?Halt@MPE@@QAEXXZ				; MPE::Halt
PUBLIC	?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ; MPE::ExecuteNuances
PUBLIC	?SetEntryValid@InstructionCache@@QAEXI@Z	; InstructionCache::SetEntryValid
PUBLIC	?GetPointerToMemoryBank@MPE@@QAEPAEI@Z		; MPE::GetPointerToMemoryBank
PUBLIC	?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ; MPE::CompileNativeCodeBlock
PUBLIC	?ClearCompiledStates@InstructionCache@@QAEXXZ	; InstructionCache::ClearCompiledStates
PUBLIC	?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ	; NativeCodeCache::IsBeyondThreshold
PUBLIC	?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry
PUBLIC	?GetOverlayMask@OverlayManager@@QAEIXZ		; OverlayManager::GetOverlayMask
PUBLIC	?FetchDecodeExecute@MPE@@QAE_NXZ		; MPE::FetchDecodeExecute
EXTRN	?CallPEHandler@@YAXPAVMPE@@I@Z:PROC		; CallPEHandler
EXTRN	?bCallingMediaCallback@@3_NA:BYTE		; bCallingMediaCallback
EXTRN	?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA:BYTE		; BiosJumpTable
EXTRN	?PrintBlockToFile@SuperBlock@@QAEXW4SuperBlockCompileType@@I@Z:PROC ; SuperBlock::PrintBlockToFile
EXTRN	?InvalidateRegion@InstructionCache@@QAEXII@Z:PROC ; InstructionCache::InvalidateRegion
EXTRN	?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z:PROC ; NativeCodeCache::FindNativeCodeCacheEntry
EXTRN	?FlushRegion@NativeCodeCache@@QAEXII@Z:PROC	; NativeCodeCache::FlushRegion
EXTRN	?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z:PROC	; OverlayManager::FindOverlay
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_nativeCodeCacheEntryPoint$ = -84			; size = 4
_bCacheEntryValid$ = -76				; size = 4
_blockExecuteCount$ = -68				; size = 4
_bError$ = -53						; size = 1
_bInvalidateOverlayRegion$ = -41			; size = 1
_pcexecLookupValue$ = -36				; size = 4
_i$ = -24						; size = 4
_nInstructions$ = -20					; size = 4
_pNuance$ = -16						; size = 4
_pInstructionCacheEntry$ = -12				; size = 4
_pNativeCodeCacheEntry$ = -8				; size = 4
_this$ = -4						; size = 4
?FetchDecodeExecute@MPE@@QAE_NXZ PROC			; MPE::FetchDecodeExecute
; _this$ = ecx

; 1940 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1941 :   NativeCodeCacheEntry *pNativeCodeCacheEntry;
; 1942 :   InstructionCacheEntry *pInstructionCacheEntry;
; 1943 :   Nuance *pNuance;
; 1944 :   uint32 nInstructions, i, oldOverlayIndex, newOverlayIndex, pcexecLookupValue;
; 1945 :   bool bInvalidateOverlayRegion;
; 1946 :   bool bError;
; 1947 :   bool memory_valid;
; 1948 :   uint32 blockExecuteCount = 100;

	mov	DWORD PTR _blockExecuteCount$[ebp], 100	; 00000064H

; 1949 :   uint32 bCacheEntryValid;
; 1950 : 
; 1951 :   NativeCodeCacheEntryPoint nativeCodeCacheEntryPoint;
; 1952 : 
; 1953 :   cycleCounter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], 0
	mov	DWORD PTR [eax+588], 0

; 1954 : 
; 1955 :   if(mpectl & MPECTRL_MPEGO)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	and	edx, 2
	je	$LN65@FetchDecod

; 1956 :   {
; 1957 :     //StartPerformanceTimer();
; 1958 : 
; 1959 :     bInvalidateOverlayRegion = false;

	mov	BYTE PTR _bInvalidateOverlayRegion$[ebp], 0

; 1960 :     nativeCodeCacheEntryPoint = 0;

	mov	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], 0

; 1961 :     pNativeCodeCacheEntry = 0;

	mov	DWORD PTR _pNativeCodeCacheEntry$[ebp], 0

; 1962 :     pInstructionCacheEntry = 0;

	mov	DWORD PTR _pInstructionCacheEntry$[ebp], 0

; 1963 : 
; 1964 :     /* Force 16 bit alignment of pcexec */
; 1965 :     pcexec &= ~0x01UL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+408], ecx

; 1966 : 
; 1967 :     /* Check for interrupts and update pcexec, rzi1 and rzi2 if an interrupt is to be serviced */
; 1968 : 
; 1969 :     if(intsrc && (ecuSkipCounter == 0))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+420], 0
	je	$LN64@FetchDecod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+576], 0
	jne	$LN64@FetchDecod

; 1970 :     {
; 1971 :       //Test imaskHw2 bit
; 1972 :       if((intctl & (1UL << 5)) == 0)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+428]
	and	eax, 32					; 00000020H
	jne	$LN64@FetchDecod

; 1973 :       {
; 1974 :         //imaskHw2 not set
; 1975 :         //Test to see if the level 2 interrupt has occurred
; 1976 :         if(intsrc & (1UL << inten2sel))

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+444]
	shl	edx, cl
	mov	eax, DWORD PTR _this$[ebp]
	and	edx, DWORD PTR [eax+420]
	je	SHORT $LN62@FetchDecod

; 1977 :         {
; 1978 :           //Test imaskSw2 mask
; 1979 :           if((intctl & (1UL << 7)) == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+428]
	and	edx, 128				; 00000080H
	jne	SHORT $LN61@FetchDecod

; 1980 :           {
; 1981 :             //imaskSw2 not set so jump to the level 2 interrupt vector
; 1982 :             rzi2 = pcexec;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	mov	DWORD PTR [eax+164], edx

; 1983 :             pcexec = intvec2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+416]
	mov	DWORD PTR [eax+408], edx

; 1984 :             //set imaskHw2 flag
; 1985 :             intctl |= (1UL << 5);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	or	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+428], ecx
$LN61@FetchDecod:

; 1986 :           }
; 1987 :         }

	jmp	SHORT $LN64@FetchDecod
$LN62@FetchDecod:

; 1988 :         else if((intctl & ((1UL << 3) | (1UL << 1))) == 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+428]
	and	ecx, 10					; 0000000aH
	jne	SHORT $LN64@FetchDecod

; 1989 :         {
; 1990 :           //imaskHw2 not set
; 1991 :           //neither imaskSw1 nor imaskHw1 set
; 1992 :           //Test to see if an enabled level 1 interrupt has occurred
; 1993 :           if(intsrc & inten1)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+420]
	and	ecx, DWORD PTR [eax+432]
	je	SHORT $LN64@FetchDecod

; 1994 :           {
; 1995 :             //Jump to the level 1 interrupt vector
; 1996 :             rzi1 = pcexec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR [edx+160], ecx

; 1997 :             pcexec = intvec1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR [edx+408], ecx

; 1998 :             //set imaskHw1 flag
; 1999 :             intctl |= (1UL << 1);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+428]
	or	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+428], eax
$LN64@FetchDecod:

; 2000 :           }
; 2001 :         }
; 2002 :       }
; 2003 :     }
; 2004 : 
; 2005 :     pcexecLookupValue = pcexec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	mov	DWORD PTR _pcexecLookupValue$[ebp], eax

; 2006 : 
; 2007 :     /* Now check to see if the MPE is executing out of local MPE memory.  If it is, then check to see if the MPE is executing */
; 2008 :     /* code within a region that has been marked for invalidation.  If executing with an invalidated region, the overlay manager */
; 2009 :     /* needs to hash the local MPE memory and see if the hash matches that of any existing compiled overlays in its list.  If it */
; 2010 :     /* can't find a match, a new overlay index is allocated or an existing set of compiled overlay code is replaced.  It a match is */
; 2011 :     /* made then that index is used.  Once an index is assigned, the index is combined with the current pcexec value to map the overlay */
; 2012 :     /* to an unused region of the Nuon address space to allow multiple sets of compiled overlays to co-exist even when the overlays */
; 2013 :     /* correspond to the same physical memory addresses.  As an example, the first set of code to be executed from MPE memory will be */
; 2014 :     /* assigned overlay index 0 and the compiled code will be assigned to the code cache range $20300000-$20307FFF.  If new overlay code
; 2015 :     /* is loaded into the MPE local memory and executed, the hash will not match that of overlay index 0 and so overlay index 1 will be */
; 2016 :     /* assigned with a code cache range of $20308000-$2030FFFF.  This is an important optimization as games like Tempest 3000 load */
; 2017 :     /* multiple overlays into the MPEs several times per frame.  If compiled overlay code was not allowed to exist, the overlay code would */
; 2018 :     /* require compiliation every time new overlay code was loaded into an MPE even when ping-ponging between two sets of overlay code. */
; 2019 :     /* The code cache entries would also require invalidation each time this happened. */
; 2020 : 
; 2021 :     if((pcexec < (MPE_IRAM_BASE + OVERLAY_SIZE)) && (pcexec >= MPE_IRAM_BASE))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+408], 540024832		; 20302000H
	jae	$LN57@FetchDecod
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+408], 540016640		; 20300000H
	jb	$LN57@FetchDecod

; 2022 :     {
; 2023 :       //pcexec is within local MPE IRAM address space
; 2024 :       if((pcexec <= invalidateRegionEnd) && (pcexec >= invalidateRegionStart))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+408]
	cmp	edx, DWORD PTR [ecx+628]
	ja	$LN56@FetchDecod
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+408]
	cmp	edx, DWORD PTR [ecx+624]
	jb	$LN56@FetchDecod

; 2025 :       {
; 2026 :         //pcexec is within MPE IRAM region that has been modified since the last time it was hashed
; 2027 : 
; 2028 :         overlayIndex = overlayManager->FindOverlay((uint32 *)&dtrom[MPE_IRAM_OFFSET], bInvalidateOverlayRegion);

	lea	eax, DWORD PTR _bInvalidateOverlayRegion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+560]
	add	edx, 3145728				; 00300000H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+684]
	call	?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z ; OverlayManager::FindOverlay
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+612], eax

; 2029 : 
; 2030 :         //Get the new overlay mask
; 2031 :         overlayMask = overlayManager->GetOverlayMask();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+684]
	call	?GetOverlayMask@OverlayManager@@QAEIXZ	; OverlayManager::GetOverlayMask
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+616], eax

; 2032 : 
; 2033 :         //Invalidate the interpreter cache because these entries are not mapped to unique address ranges
; 2034 :         
; 2035 :         //numInterpreterCacheFlushes++;
; 2036 :         //instructionCache->InvalidateRegion(invalidateRegionStart, invalidateRegionEnd);
; 2037 :         bInvalidateInterpreterCache = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+640], 1

; 2038 : 
; 2039 :         if(bInvalidateOverlayRegion)

	movzx	eax, BYTE PTR _bInvalidateOverlayRegion$[ebp]
	test	eax, eax
	je	SHORT $ResetInvalidateRegion$53780

; 2040 :         {
; 2041 :           //The overlay manager assigned a previously used overlay ID so invalidate the code cache entries
; 2042 :           //associated with the overlay address range
; 2043 :           numNativeCodeCacheFlushes++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+648], edx

; 2044 :           nativeCodeCache->FlushRegion(invalidateRegionStart | overlayMask, invalidateRegionEnd | overlayMask);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+628]
	or	eax, DWORD PTR [edx+616]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+624]
	or	eax, DWORD PTR [edx+616]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?FlushRegion@NativeCodeCache@@QAEXII@Z	; NativeCodeCache::FlushRegion
$ResetInvalidateRegion$53780:

; 2045 :         }
; 2046 : ResetInvalidateRegion:
; 2047 :         //Reset the IRAM invalidation indicators
; 2048 :         invalidateRegionStart = 0xFFFFFFFFUL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+624], -1

; 2049 :         invalidateRegionEnd = 0x00000000UL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+628], 0
$LN56@FetchDecod:

; 2050 :       }
; 2051 : 
; 2052 :       //Modify the pcexec lookup value.  If pcexec is not within MPE IRAM, the lookup value will remain equal to
; 2053 :       //pcexec otherwise it will be equal to pcexec ORed with the overlay mask
; 2054 : 
; 2055 :       pcexecLookupValue |= overlayMask;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pcexecLookupValue$[ebp]
	or	edx, DWORD PTR [ecx+616]
	mov	DWORD PTR _pcexecLookupValue$[ebp], edx

; 2056 :     }
; 2057 :     else

	jmp	$LN54@FetchDecod
$LN57@FetchDecod:

; 2058 :     {
; 2059 :       if(bInvalidateInstructionCaches)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+641]
	test	ecx, ecx
	je	$LN54@FetchDecod

; 2060 :       {
; 2061 :         bInvalidateInstructionCaches = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+641], 0

; 2062 :         instructionCache->Invalidate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	call	?Invalidate@InstructionCache@@QAEXXZ	; InstructionCache::Invalidate

; 2063 :         numInterpreterCacheFlushes++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+644]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+644], edx

; 2064 :         numNativeCodeCacheFlushes++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+648], edx

; 2065 :         if((mpeIndex == 0) || (mpeIndex == 3))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+664], 0
	je	SHORT $LN51@FetchDecod
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+664], 3
	jne	SHORT $LN54@FetchDecod
$LN51@FetchDecod:

; 2066 :         {
; 2067 :           nativeCodeCache->FlushRegion(MAIN_BUS_BASE, MAIN_BUS_BASE + MAIN_BUS_SIZE - 1);

	push	1082130431				; 407fffffH
	push	1073741824				; 40000000H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	call	?FlushRegion@NativeCodeCache@@QAEXII@Z	; NativeCodeCache::FlushRegion

; 2068 :           nativeCodeCache->FlushRegion(SYSTEM_BUS_BASE, SYSTEM_BUS_BASE + SYSTEM_BUS_SIZE - 1);

	push	-2139095041				; 807fffffH
	push	-2147483648				; 80000000H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?FlushRegion@NativeCodeCache@@QAEXII@Z	; NativeCodeCache::FlushRegion
$LN54@FetchDecod:

; 2069 :         }
; 2070 :       }
; 2071 :     }
; 2072 : 
; 2073 :     if(!(ecuSkipCounter | interpretNextPacket))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+576]
	or	ecx, DWORD PTR [eax+620]
	jne	$find_icache_entry$53810
$find_code_cache_entry$53786:

; 2074 :     {
; 2075 : find_code_cache_entry:
; 2076 :       if(pNativeCodeCacheEntry = nativeCodeCache->FindNativeCodeCacheEntry(pcexecLookupValue))

	mov	edx, DWORD PTR _pcexecLookupValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	call	?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ; NativeCodeCache::FindNativeCodeCacheEntry
	mov	DWORD PTR _pNativeCodeCacheEntry$[ebp], eax
	cmp	DWORD PTR _pNativeCodeCacheEntry$[ebp], 0
	je	SHORT $LN49@FetchDecod

; 2077 :       {
; 2078 :         nativeCodeCacheEntryPoint = pNativeCodeCacheEntry->entryPoint;

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], edx
	jmp	$execute_block$53788

; 2079 :         goto execute_block;

	jmp	$execute_block$53788
$LN49@FetchDecod:

; 2080 :       }
; 2081 :     
; 2082 :       if(bInvalidateInterpreterCache)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+640]
	test	ecx, ecx
	je	SHORT $LN47@FetchDecod

; 2083 :       {
; 2084 :         numInterpreterCacheFlushes++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+644]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+644], eax

; 2085 :         instructionCache->InvalidateRegion(interpreterInvalidateRegionStart, interpreterInvalidateRegionEnd);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+636]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+632]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	call	?InvalidateRegion@InstructionCache@@QAEXII@Z ; InstructionCache::InvalidateRegion

; 2086 :         bInvalidateInterpreterCache = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+640], 0

; 2087 :         interpreterInvalidateRegionStart = 0xFFFFFFFFUL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+632], -1

; 2088 :         interpreterInvalidateRegionEnd = 0x00000000;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+636], 0
$LN47@FetchDecod:

; 2089 :       }
; 2090 : 
; 2091 :       bCacheEntryValid = 1;

	mov	DWORD PTR _bCacheEntryValid$[ebp], 1

; 2092 :       pInstructionCacheEntry = instructionCache->FindInstructionCacheEntry(pcexec,bCacheEntryValid);

	lea	ecx, DWORD PTR _bCacheEntryValid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+672]
	call	?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry
	mov	DWORD PTR _pInstructionCacheEntry$[ebp], eax

; 2093 :       if(bCacheEntryValid && (pcexec == pInstructionCacheEntry->pcexec))

	cmp	DWORD PTR _bCacheEntryValid$[ebp], 0
	je	$LN46@FetchDecod
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	ecx, DWORD PTR [edx+408]
	cmp	ecx, DWORD PTR [eax+28]
	jne	$LN46@FetchDecod
$check_compile_threshhold$53792:

; 2094 :       {
; 2095 : check_compile_threshhold:
; 2096 :         if(!(pInstructionCacheEntry->packetInfo & (PACKETINFO_COMPILED | PACKETINFO_NEVERCOMPILE)) && (pInstructionCacheEntry->frequencyCount >= COMPILE_THRESHOLD))

	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, -1073741824			; c0000000H
	jne	$LN45@FetchDecod
	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	cmp	DWORD PTR [ecx+32], 50			; 00000032H
	jb	$LN45@FetchDecod

; 2097 :         {
; 2098 :           if(nativeCodeCache->IsBeyondThreshold())

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+680]
	call	?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ ; NativeCodeCache::IsBeyondThreshold
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN44@FetchDecod

; 2099 :           {
; 2100 :             numNativeCodeCacheFlushes++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+648]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+648], edx

; 2101 :             nativeCodeCache->Flush();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?Flush@NativeCodeCache@@QAEXXZ		; NativeCodeCache::Flush

; 2102 :             instructionCache->ClearCompiledStates();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+672]
	call	?ClearCompiledStates@InstructionCache@@QAEXXZ ; InstructionCache::ClearCompiledStates
$LN44@FetchDecod:

; 2103 :           }
; 2104 : 
; 2105 : //#define COMPILE_TYPE SUPERBLOCKCOMPILETYPE_IL_BLOCK
; 2106 : #define COMPILE_TYPE SUPERBLOCKCOMPILETYPE_NATIVE_CODE_BLOCK
; 2107 : 
; 2108 :           nativeCodeCacheEntryPoint = CompileNativeCodeBlock(pcexecLookupValue, COMPILE_TYPE, bError);

	push	0
	lea	eax, DWORD PTR _bError$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _pcexecLookupValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ; MPE::CompileNativeCodeBlock
	mov	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], eax

; 2109 :           if(!bError)

	movzx	edx, BYTE PTR _bError$[ebp]
	test	edx, edx
	jne	SHORT $LN43@FetchDecod

; 2110 :           {
; 2111 :             pNativeCodeCacheEntry = nativeCodeCache->FindNativeCodeCacheEntry(pcexecLookupValue);

	mov	eax, DWORD PTR _pcexecLookupValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+680]
	call	?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ; NativeCodeCache::FindNativeCodeCacheEntry
	mov	DWORD PTR _pNativeCodeCacheEntry$[ebp], eax

; 2112 :             if(nuonEnv->compilerOptions.bDumpBlocks)

	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	movzx	eax, BYTE PTR [edx+120]
	test	eax, eax
	je	SHORT $LN42@FetchDecod

; 2113 :             {
; 2114 :               //if(pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_NATIVE_CODE_BLOCK)
; 2115 :               //if(pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_BLOCK)
; 2116 :               {
; 2117 :                 superBlock->PrintBlockToFile(pNativeCodeCacheEntry->compileType, pNativeCodeCacheEntry->codeSize);

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+676]
	call	?PrintBlockToFile@SuperBlock@@QAEXW4SuperBlockCompileType@@I@Z ; SuperBlock::PrintBlockToFile
$LN42@FetchDecod:

; 2118 :               }
; 2119 :             }
; 2120 : 
; 2121 :             pInstructionCacheEntry->packetInfo |= PACKETINFO_COMPILED;

	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, -2147483648			; 80000000H
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [edx+24], ecx
	jmp	$execute_block$53788

; 2122 :             goto execute_block;

	jmp	$execute_block$53788

; 2123 :           }
; 2124 :           else

	jmp	SHORT $LN40@FetchDecod
$LN43@FetchDecod:

; 2125 :           {
; 2126 :             if(((int32)nativeCodeCacheEntryPoint) == -1)

	cmp	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], -1
	jne	SHORT $LN39@FetchDecod

; 2127 :             {
; 2128 :               pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 1073741824				; 40000000H
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [edx+24], ecx

; 2129 :               numNonCompilablePackets++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+652]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+652], ecx
	jmp	SHORT $LN38@FetchDecod
$LN39@FetchDecod:

; 2130 :             }
; 2131 :             else if(nativeCodeCacheEntryPoint == 0)

	cmp	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], 0
	jne	SHORT $LN38@FetchDecod

; 2132 :             {
; 2133 :               numNativeCodeCacheFlushes++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+648]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+648], ecx

; 2134 :               nativeCodeCache->Flush();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	call	?Flush@NativeCodeCache@@QAEXXZ		; NativeCodeCache::Flush

; 2135 :               instructionCache->ClearCompiledStates();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+672]
	call	?ClearCompiledStates@InstructionCache@@QAEXXZ ; InstructionCache::ClearCompiledStates
$LN38@FetchDecod:

; 2136 :             }
; 2137 : 
; 2138 :             nativeCodeCacheEntryPoint = 0;

	mov	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], 0
	jmp	$execute_block$53788

; 2139 :             goto execute_block;

	jmp	$execute_block$53788
$LN40@FetchDecod:

; 2140 :           }
; 2141 :         }
; 2142 :         else

	jmp	SHORT $LN46@FetchDecod
$LN45@FetchDecod:

; 2143 :         {
; 2144 :           pInstructionCacheEntry->frequencyCount++;

	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, 1
	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2145 :           if(!pInstructionCacheEntry->frequencyCount)

	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN34@FetchDecod

; 2146 :           {
; 2147 :             pInstructionCacheEntry->frequencyCount--;

	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, 1
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [edx+32], ecx
$LN34@FetchDecod:

; 2148 :           }

	jmp	$execute_block$53788

; 2149 :           goto execute_block;

	jmp	$execute_block$53788
$LN46@FetchDecod:

; 2150 :         }
; 2151 :       }

	jmp	SHORT $create_icache_entry$53807

; 2152 : 
; 2153 :       goto create_icache_entry;

	jmp	SHORT $create_icache_entry$53807

; 2154 :     }
; 2155 :     else

	jmp	$LN31@FetchDecod
$find_icache_entry$53810:

; 2156 :     {
; 2157 : find_icache_entry:
; 2158 :       bCacheEntryValid = 1;

	mov	DWORD PTR _bCacheEntryValid$[ebp], 1

; 2159 :       pInstructionCacheEntry = instructionCache->FindInstructionCacheEntry(pcexec,bCacheEntryValid);

	lea	eax, DWORD PTR _bCacheEntryValid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+672]
	call	?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry
	mov	DWORD PTR _pInstructionCacheEntry$[ebp], eax

; 2160 :       if(bCacheEntryValid && (pcexec == pInstructionCacheEntry->pcexec))

	cmp	DWORD PTR _bCacheEntryValid$[ebp], 0
	je	SHORT $create_icache_entry$53807
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	eax, DWORD PTR [ecx+408]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $create_icache_entry$53807
	jmp	$execute_block$53788

; 2161 :       {
; 2162 :         goto execute_block;

	jmp	$execute_block$53788
$create_icache_entry$53807:

; 2163 :       }
; 2164 : 
; 2165 : create_icache_entry:
; 2166 :       pInstructionCacheEntry->pcexec = pcexec;

	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	mov	DWORD PTR [ecx+28], eax

; 2167 :       pInstructionCacheEntry->frequencyCount = 1;

	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [ecx+32], 1

; 2168 :       if(pcexec < ROM_BIOS_BASE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+408], -268435456		; f0000000H
	jae	SHORT $LN28@FetchDecod

; 2169 :       {
; 2170 :         DecompressPacket(GetPointerToMemoryBank(pcexec),pInstructionCacheEntry,DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST);

	push	1
	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPointerToMemoryBank@MPE@@QAEPAEI@Z	; MPE::GetPointerToMemoryBank
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket

; 2171 :         if(((pcexec >= BIOS_JUMPTABLE_START) && (pcexec <= BIOS_JUMPTABLE_END))  || (pInstructionCacheEntry->packetInfo & PACKETINFO_BREAKPOINT))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+408], -2147483648	; 80000000H
	jb	SHORT $LN25@FetchDecod
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+408], -2147482881	; 800002ffH
	jbe	SHORT $LN26@FetchDecod
$LN25@FetchDecod:
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+24]
	and	eax, 2
	je	SHORT $LN27@FetchDecod
$LN26@FetchDecod:

; 2172 :         {
; 2173 :           pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;            

	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	or	edx, 1073741824				; 40000000H
	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [eax+24], edx
$LN27@FetchDecod:

; 2174 :         }
; 2175 :       }
; 2176 :       else

	jmp	SHORT $LN24@FetchDecod
$LN28@FetchDecod:

; 2177 :       {
; 2178 :         pInstructionCacheEntry->nuanceCount = 0;

	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 2179 :         pInstructionCacheEntry->pcroute = 0;

	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [edx+76], 0

; 2180 :         pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

	mov	eax, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	or	ecx, 1073741824				; 40000000H
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	DWORD PTR [edx+24], ecx
$LN24@FetchDecod:

; 2181 :       }
; 2182 :       instructionCache->SetEntryValid(pcexec);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+672]
	call	?SetEntryValid@InstructionCache@@QAEXI@Z ; InstructionCache::SetEntryValid
$execute_block$53788:

; 2183 : execute_block:
; 2184 :       interpretNextPacket = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+620], 0

; 2185 : 
; 2186 :     //StopPerformanceTimer();
; 2187 :     //timeDelta = GetTimeDeltaMs();
; 2188 : 
; 2189 : #ifdef LOG_STUFF
; 2190 :       if(LOG_MPE_INDEX == mpeIndex)
; 2191 :       {
; 2192 :         fprintf(logfile,"pcexec: %8.8x\n",pcexec);
; 2193 :       }
; 2194 : #endif
; 2195 : 
; 2196 :       if(nativeCodeCacheEntryPoint)

	cmp	DWORD PTR _nativeCodeCacheEntryPoint$[ebp], 0
	je	$LN23@FetchDecod

; 2197 :       {
; 2198 :         pNativeCodeCacheEntry->accessCount += 1;

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	DWORD PTR [eax+32], edx

; 2199 :         cycleCounter += pNativeCodeCacheEntry->numPackets;

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+584]
	mov	ecx, DWORD PTR [ecx+588]
	adc	ecx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], edx
	mov	DWORD PTR [eax+588], ecx

; 2200 : 
; 2201 :         if(!pNativeCodeCacheEntry->accessCount)

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	SHORT $LN22@FetchDecod

; 2202 :         {
; 2203 :           pNativeCodeCacheEntry->accessCount -= 1;          

	mov	edx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+32]
	sub	eax, 1
	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	DWORD PTR [ecx+32], eax
$LN22@FetchDecod:

; 2204 :         }
; 2205 : 
; 2206 :         if((pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_BLOCK) || (pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_SINGLE))

	mov	edx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	cmp	DWORD PTR [edx+8], 2
	je	SHORT $LN20@FetchDecod
	mov	eax, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	$LN21@FetchDecod
$LN20@FetchDecod:

; 2207 :         {
; 2208 :           nInstructions = pNativeCodeCacheEntry->numInstructions;

	mov	ecx, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _nInstructions$[ebp], edx

; 2209 :           pNuance = (Nuance *)nativeCodeCacheEntryPoint;

	mov	eax, DWORD PTR _nativeCodeCacheEntryPoint$[ebp]
	mov	DWORD PTR _pNuance$[ebp], eax

; 2210 :           bInterpretedBranchTaken = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+642], 0

; 2211 :           prevPcexec = pcexec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR [edx+568], ecx

; 2212 :           for(i = 0; i < nInstructions; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@FetchDecod
$LN18@FetchDecod:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN19@FetchDecod:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nInstructions$[ebp]
	jae	SHORT $LN17@FetchDecod

; 2213 :           {
; 2214 :             (nuanceHandlers[pNuance->fields[0]])(*this,*pICacheEntry,*pNuance);

	mov	esi, esp
	mov	ecx, DWORD PTR _pNuance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+668]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNuance$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA[eax*4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2215 :             pNuance++;

	mov	edx, DWORD PTR _pNuance$[ebp]
	add	edx, 20					; 00000014H
	mov	DWORD PTR _pNuance$[ebp], edx

; 2216 : 
; 2217 :             if(bInterpretedBranchTaken)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+642]
	test	ecx, ecx
	je	SHORT $LN16@FetchDecod

; 2218 :             {
; 2219 :               pcexec = pcfetchnext;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+564]
	mov	DWORD PTR [edx+408], ecx
	jmp	$check_for_halt$53827

; 2220 :               goto check_for_halt;

	jmp	$check_for_halt$53827
$LN16@FetchDecod:

; 2221 :             }
; 2222 :           }

	jmp	SHORT $LN18@FetchDecod
$LN17@FetchDecod:

; 2223 :           pcexec = pNativeCodeCacheEntry->nextVirtualAddress;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pNativeCodeCacheEntry$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+408], ecx
	jmp	$check_for_halt$53827

; 2224 :           goto check_for_halt;

	jmp	$check_for_halt$53827

; 2225 :         }
; 2226 :         else

	jmp	SHORT $LN13@FetchDecod
$LN21@FetchDecod:

; 2227 :         {
; 2228 :           prevPcexec = pcexec;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR [edx+568], ecx

; 2229 :           //do
; 2230 :           {
; 2231 :             nativeCodeCacheEntryPoint();

	mov	esi, esp
	call	DWORD PTR _nativeCodeCacheEntryPoint$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@FetchDecod:

; 2232 :             //blockExecuteCount--;
; 2233 :           } 
; 2234 :           //while((pcexec == prevPcexec) && (mpectl & MPECTRL_MPEGO) && !ecuSkipCounter && blockExecuteCount);       
; 2235 :         }
; 2236 :       }
; 2237 :       else

	jmp	$LN12@FetchDecod
$LN23@FetchDecod:

; 2238 :       {
; 2239 :         if(pcexec < ROM_BIOS_BASE)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+408], -268435456		; f0000000H
	jae	SHORT $LN11@FetchDecod

; 2240 :         {
; 2241 :           cycleCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+588]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], ecx
	mov	DWORD PTR [eax+588], edx

; 2242 : 
; 2243 :           prevPcexec = pcexec;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	mov	DWORD PTR [ecx+568], eax

; 2244 :           pcroute = pInstructionCacheEntry->pcroute;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pInstructionCacheEntry$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+404], eax

; 2245 :           pcexec = pcroute;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+404]
	mov	DWORD PTR [ecx+408], eax

; 2246 :           ExecuteNuances(*pInstructionCacheEntry);

	mov	ecx, DWORD PTR _pInstructionCacheEntry$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ; MPE::ExecuteNuances
	jmp	$LN10@FetchDecod
$LN11@FetchDecod:

; 2247 :         }
; 2248 :         else if(pcexec < 0xF0008000)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+408], -268402688		; f0008000H
	jae	SHORT $LN9@FetchDecod

; 2249 :         {
; 2250 :           cycleCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+588]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], ecx
	mov	DWORD PTR [eax+588], edx

; 2251 :           //Execute BIOS function: force to one of 256 entries
; 2252 :           BiosJumpTable[(pcexec >> 1) & 0xFF](this);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	shr	eax, 1
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR ?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA[eax*4]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2253 : 
; 2254 :           if(!bCallingMediaCallback)

	movzx	edx, BYTE PTR ?bCallingMediaCallback@@3_NA ; bCallingMediaCallback
	test	edx, edx
	jne	SHORT $LN8@FetchDecod

; 2255 :           {
; 2256 :             //Perform an implicit RTS, nop
; 2257 :             pcexec = rz;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR [eax+408], edx
$LN8@FetchDecod:

; 2258 :           }
; 2259 :         }
; 2260 :         else

	jmp	SHORT $LN10@FetchDecod
$LN9@FetchDecod:

; 2261 :         {
; 2262 :           //Execute PE function
; 2263 :           cycleCounter++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+584]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+588]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+584], ecx
	mov	DWORD PTR [eax+588], edx

; 2264 :           CallPEHandler(this, pcexec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?CallPEHandler@@YAXPAVMPE@@I@Z		; CallPEHandler
	add	esp, 8

; 2265 :           if(!bCallingMediaCallback)

	movzx	ecx, BYTE PTR ?bCallingMediaCallback@@3_NA ; bCallingMediaCallback
	test	ecx, ecx
	jne	SHORT $LN10@FetchDecod

; 2266 :           {
; 2267 :             //Perform an implicit RTS, nop
; 2268 :             pcexec = rz;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+156]
	mov	DWORD PTR [edx+408], ecx
$LN10@FetchDecod:

; 2269 :           }
; 2270 :         }
; 2271 :         
; 2272 :         bCallingMediaCallback = false;

	mov	BYTE PTR ?bCallingMediaCallback@@3_NA, 0 ; bCallingMediaCallback
$LN12@FetchDecod:

; 2273 :       }
; 2274 : 
; 2275 :       if(ecuSkipCounter)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+576], 0
	je	SHORT $check_for_halt$53827

; 2276 :       {
; 2277 :         ecuSkipCounter--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+576]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+576], ecx

; 2278 :         if(!ecuSkipCounter)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+576], 0
	jne	SHORT $check_for_halt$53827

; 2279 :         {
; 2280 : #ifdef LOG_BIOS_CALLS
; 2281 :           if(((pcfetchnext >= 0x80000000) && (pcfetchnext <= 0x8000FFFF)) && (mpeIndex == LOG_MPE_INDEX))
; 2282 :           {
; 2283 :             if(logfile)
; 2284 :             {
; 2285 :               if(pcfetchnext >= 0x80008000)
; 2286 :               {
; 2287 : #ifdef LOG_ADDRESS_ONLY
; 2288 :                 fprintf(logfile,"PE CALL: $%8.8lX\n",pcfetchnext);
; 2289 :                 fflush(logfile);
; 2290 : #else
; 2291 :                 //fprintf(logfile,"PE CALL: %s ($%8.8lX): V0 = [$%lX,$%lX,$%lX,%lX], R4 = %lX, R5 = %lX\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2292 :                 fprintf(logfile,"PE CALL: %s ($%8.8lX)n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2293 :                 fflush(logfile);
; 2294 : #endif
; 2295 :               }
; 2296 :               else
; 2297 :               {
; 2298 : #ifdef LOG_ADDRESS_ONLY
; 2299 :                 fprintf(logfile,"BIOS CALL: %s ($%8.8lX)\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext);
; 2300 :                 fflush(logfile);
; 2301 : #else
; 2302 :                 fprintf(logfile,"BIOS CALL: %s ($%8.8lX): V0 = [$%lX,$%lX,$%lX,%lX], R4 = %lX, R5 = %lX\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2303 :                 fflush(logfile);
; 2304 : #endif
; 2305 :               }
; 2306 :             }
; 2307 :           }
; 2308 : #endif
; 2309 :           pcexec = pcfetchnext;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+564]
	mov	DWORD PTR [ecx+408], eax
$check_for_halt$53827:

; 2310 :         }
; 2311 :       }
; 2312 :       
; 2313 : check_for_halt:
; 2314 : 
; 2315 :       if(excephalten & excepsrc)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+396]
	and	eax, DWORD PTR [edx+388]
	je	SHORT $LN3@FetchDecod

; 2316 :       {
; 2317 :         Halt();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Halt@MPE@@QAEXXZ			; MPE::Halt
	jmp	SHORT $LN31@FetchDecod
$LN3@FetchDecod:

; 2318 :       }
; 2319 :       else if(pcexec == breakpointAddress)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+408]
	cmp	eax, DWORD PTR [edx+572]
	jne	SHORT $LN31@FetchDecod

; 2320 :       {
; 2321 :         mpectl &= ~MPECTRL_MPEGO;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+384], edx
$LN31@FetchDecod:

; 2322 :       }
; 2323 : 
; 2324 :     }
; 2325 :     
; 2326 :     //StopPerformanceTimer();
; 2327 :     //timeDelta = GetTimeDeltaMs();
; 2328 :     return true;

	mov	al, 1
	jmp	SHORT $LN66@FetchDecod
$LN65@FetchDecod:

; 2329 :   }
; 2330 : 
; 2331 :   //StopPerformanceTimer();
; 2332 :   //timeDelta = GetTimeDeltaMs();
; 2333 :   return false;

	xor	al, al
$LN66@FetchDecod:

; 2334 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN72@FetchDecod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN72@FetchDecod:
	DD	3
	DD	$LN71@FetchDecod
$LN71@FetchDecod:
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN68@FetchDecod
	DD	-53					; ffffffcbH
	DD	1
	DD	$LN69@FetchDecod
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN70@FetchDecod
$LN70@FetchDecod:
	DB	98					; 00000062H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN69@FetchDecod:
	DB	98					; 00000062H
	DB	69					; 00000045H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN68@FetchDecod:
	DB	98					; 00000062H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	79					; 0000004fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?FetchDecodeExecute@MPE@@QAE_NXZ ENDP			; MPE::FetchDecodeExecute
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\instructioncache.h
_TEXT	ENDS
;	COMDAT ?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z
_TEXT	SEGMENT
_cacheEntryIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_addressKey$ = 8					; size = 4
_bValid$ = 12						; size = 4
?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z PROC ; InstructionCache::FindInstructionCacheEntry, COMDAT
; _this$ = ecx

; 158  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 159  :     uint32 cacheEntryIndex = (addressKey >> 1) & (numEntries - 1);

	mov	eax, DWORD PTR _addressKey$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	and	eax, edx
	mov	DWORD PTR _cacheEntryIndex$[ebp], eax

; 160  : 
; 161  :     if(bValid)

	mov	eax, DWORD PTR _bValid$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@FindInstru

; 162  :     {
; 163  :       bValid = validBitmap[cacheEntryIndex >> 5];

	mov	ecx, DWORD PTR _cacheEntryIndex$[ebp]
	shr	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _bValid$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx], eax

; 164  :       bValid &= (0x80000000UL >> (cacheEntryIndex & 0x1FUL));

	mov	ecx, DWORD PTR _cacheEntryIndex$[ebp]
	and	ecx, 31					; 0000001fH
	mov	edx, -2147483648			; 80000000H
	shr	edx, cl
	mov	eax, DWORD PTR _bValid$[ebp]
	and	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _bValid$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@FindInstru:

; 165  :     }
; 166  :     return &cacheEntries[cacheEntryIndex];

	mov	eax, DWORD PTR _cacheEntryIndex$[ebp]
	imul	eax, 268				; 0000010cH
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+4]

; 167  :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ENDP ; InstructionCache::FindInstructionCacheEntry
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetEntryValid@InstructionCache@@QAEXI@Z
_TEXT	SEGMENT
_cacheEntryIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_addressKey$ = 8					; size = 4
?SetEntryValid@InstructionCache@@QAEXI@Z PROC		; InstructionCache::SetEntryValid, COMDAT
; _this$ = ecx

; 170  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 171  :     uint32 cacheEntryIndex = (addressKey >> 1) & (numEntries - 1);

	mov	eax, DWORD PTR _addressKey$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	and	eax, edx
	mov	DWORD PTR _cacheEntryIndex$[ebp], eax

; 172  :     validBitmap[cacheEntryIndex >> 5] |= (0x80000000UL >> (cacheEntryIndex & 0x1FUL));

	mov	eax, DWORD PTR _cacheEntryIndex$[ebp]
	shr	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cacheEntryIndex$[ebp]
	and	ecx, 31					; 0000001fH
	mov	esi, -2147483648			; 80000000H
	shr	esi, cl
	or	esi, DWORD PTR [edx+eax*4]
	mov	eax, DWORD PTR _cacheEntryIndex$[ebp]
	shr	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4], esi

; 173  :   }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEntryValid@InstructionCache@@QAEXI@Z ENDP		; InstructionCache::SetEntryValid
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearCompiledStates@InstructionCache@@QAEXXZ
_TEXT	SEGMENT
_i$15614 = -8						; size = 4
_this$ = -4						; size = 4
?ClearCompiledStates@InstructionCache@@QAEXXZ PROC	; InstructionCache::ClearCompiledStates, COMDAT
; _this$ = ecx

; 176  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 177  :     for(uint32 i = 0; i < numEntries; i++)

	mov	DWORD PTR _i$15614[ebp], 0
	jmp	SHORT $LN3@ClearCompi
$LN2@ClearCompi:
	mov	eax, DWORD PTR _i$15614[ebp]
	add	eax, 1
	mov	DWORD PTR _i$15614[ebp], eax
$LN3@ClearCompi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$15614[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN4@ClearCompi

; 178  :     {
; 179  :       cacheEntries[i].packetInfo &= ~PACKETINFO_COMPILED;

	mov	eax, DWORD PTR _i$15614[ebp]
	imul	eax, 268				; 0000010cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+eax+24]
	and	eax, 2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _i$15614[ebp]
	imul	ecx, 268				; 0000010cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [edx+ecx+24], eax

; 180  :     }

	jmp	SHORT $LN2@ClearCompi
$LN4@ClearCompi:

; 181  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearCompiledStates@InstructionCache@@QAEXXZ ENDP	; InstructionCache::ClearCompiledStates
_TEXT	ENDS
PUBLIC	?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ	; NativeCodeCache::GetUsedCodeBufferSize
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.h
;	COMDAT ?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ PROC	; NativeCodeCache::IsBeyondThreshold, COMDAT
; _this$ = ecx

; 102  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 103  :     return GetUsedCodeBufferSize() > warningThreshold;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ ; NativeCodeCache::GetUsedCodeBufferSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	sbb	eax, eax
	neg	eax

; 104  :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ ENDP	; NativeCodeCache::IsBeyondThreshold
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ PROC	; NativeCodeCache::GetUsedCodeBufferSize, COMDAT
; _this$ = ecx

; 77   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 78   :     return (uint32)(pEmitLoc - ptrNativeCodeBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx+8]

; 79   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ ENDP	; NativeCodeCache::GetUsedCodeBufferSize
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\overlaymanager.h
_TEXT	ENDS
;	COMDAT ?GetOverlayMask@OverlayManager@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOverlayMask@OverlayManager@@QAEIXZ PROC		; OverlayManager::GetOverlayMask, COMDAT
; _this$ = ecx

; 18   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 19   :     return (currentOverlayIndex << 13);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	shl	eax, 13					; 0000000dH

; 20   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetOverlayMask@OverlayManager@@QAEIXZ ENDP		; OverlayManager::GetOverlayMask
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\mpe.h
_TEXT	ENDS
;	COMDAT ?Halt@MPE@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Halt@MPE@@QAEXXZ PROC					; MPE::Halt, COMDAT
; _this$ = ecx

; 471  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 472  :     mpectl &= ~MPECTRL_MPEGO;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], ecx

; 473  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Halt@MPE@@QAEXXZ ENDP					; MPE::Halt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPointerToMemoryBank@MPE@@QAEPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_address$ = 8						; size = 4
?GetPointerToMemoryBank@MPE@@QAEPAEI@Z PROC		; MPE::GetPointerToMemoryBank, COMDAT
; _this$ = ecx

; 492  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 493  :     return bankPtrTable[address >> 28] + (address & MPE_VALID_MEMORY_MASK);

	mov	eax, DWORD PTR _address$[ebp]
	shr	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _address$[ebp]
	and	ecx, 8388607				; 007fffffH
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+eax*4+688]
	mov	eax, ecx

; 494  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetPointerToMemoryBank@MPE@@QAEPAEI@Z ENDP		; MPE::GetPointerToMemoryBank
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\mpe.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?InitStaticICacheEntries@MPE@@QAEXXZ PROC		; MPE::InitStaticICacheEntries
; _this$ = ecx

; 2337 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2338 :   ICacheEntry_SaveRegs.pScalarRegs = tempScalarRegs;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+844], eax

; 2339 :   ICacheEntry_SaveRegs.pIndexRegs = &tempRx;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 332				; 0000014cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+848], edx

; 2340 :   ICacheEntry_SaveRegs.pRzRegs = &tempRz;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 348				; 0000015cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+856], ecx

; 2341 :   ICacheEntry_SaveRegs.pCounterRegs = &tempRc0;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 324				; 00000144H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+852], eax

; 2342 :   ICacheEntry_SaveRegs.pAcshift = &tempAcshift;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 376				; 00000178H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+860], edx

; 2343 :   ICacheEntry_SaveRegs.pSvshift = &tempSvshift;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 380				; 0000017cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+864], ecx

; 2344 :   ICacheEntry_SaveRegs.pXyctl = &tempXyctl;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 360				; 00000168H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+868], eax

; 2345 :   ICacheEntry_SaveRegs.pUvctl = &tempUvctl;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 364				; 0000016cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+872], edx

; 2346 :   ICacheEntry_SaveRegs.pXyrange = &tempXyrange;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 368				; 00000170H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+876], ecx

; 2347 :   ICacheEntry_SaveRegs.pUvrange = &tempUvrange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 372				; 00000174H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+880], eax

; 2348 :   
; 2349 :   ICacheEntry_SaveFlags.pScalarRegs = regs;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1112], eax

; 2350 :   ICacheEntry_SaveFlags.pIndexRegs = &rx;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1116], ecx

; 2351 :   ICacheEntry_SaveFlags.pRzRegs = &rz;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 156				; 0000009cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1124], eax

; 2352 :   ICacheEntry_SaveFlags.pCounterRegs = &rc0;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1120], edx

; 2353 :   ICacheEntry_SaveFlags.pAcshift = &acshift;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 184				; 000000b8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1128], ecx

; 2354 :   ICacheEntry_SaveFlags.pSvshift = &svshift;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 188				; 000000bcH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1132], eax

; 2355 :   ICacheEntry_SaveFlags.pXyctl = &xyctl;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 168				; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1136], edx

; 2356 :   ICacheEntry_SaveFlags.pUvctl = &uvctl;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1140], ecx

; 2357 :   ICacheEntry_SaveFlags.pXyrange = &xyrange;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1144], eax

; 2358 :   ICacheEntry_SaveFlags.pUvrange = &uvrange;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 180				; 000000b4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1148], edx

; 2359 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitStaticICacheEntries@MPE@@QAEXXZ ENDP		; MPE::InitStaticICacheEntries
_TEXT	ENDS
PUBLIC	?SaveRegisters@MPE@@QAEXXZ			; MPE::SaveRegisters
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SaveRegisters@MPE@@QAEXXZ PROC				; MPE::SaveRegisters
; _this$ = ecx

; 2362 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2363 :   memcpy(tempScalarRegs, regs, sizeof(uint32) * 32);

	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2364 :   memcpy(&tempRc0, &rc0, sizeof(uint32) * 15);

	push	60					; 0000003cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 324				; 00000144H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2365 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SaveRegisters@MPE@@QAEXXZ ENDP				; MPE::SaveRegisters
; Function compile flags: /Odtp /RTCsu
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_entry$ = 8						; size = 4
?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z PROC ; MPE::ExecuteNuances
; _this$ = ecx

; 2368 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2369 :   uint32 i;
; 2370 : 
; 2371 :   if(entry.packetInfo & PACKETINFO_BREAKPOINT)

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 2
	je	SHORT $LN8@ExecuteNua

; 2372 :   {
; 2373 :     excepsrc |= 0x04;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+388]
	or	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+388], eax

; 2374 :     if(excephalten & 0x04)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+396]
	and	eax, 4
	je	SHORT $LN7@ExecuteNua

; 2375 :     {
; 2376 :       //clear mpego bit
; 2377 :       mpectl &= ~MPECTRL_MPEGO;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+384]
	and	edx, -3					; fffffffdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+384], edx

; 2378 :     }
; 2379 :     else

	jmp	SHORT $LN8@ExecuteNua
$LN7@ExecuteNua:

; 2380 :     {
; 2381 :       //set exception bit in interrupt source register
; 2382 :       intsrc |= 0x01;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+420]
	or	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+420], edx
$LN8@ExecuteNua:

; 2383 :     }
; 2384 :   }
; 2385 : 
; 2386 :   if(!(entry.packetInfo & PACKETINFO_NOP))

	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	and	edx, 1
	jne	$LN9@ExecuteNua

; 2387 :   {
; 2388 :     if(entry.packetInfo & PACKETINFO_DEPENDENCY_PRESENT)

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 128				; 00000080H
	je	SHORT $LN4@ExecuteNua

; 2389 :     {
; 2390 :       memcpy(tempScalarRegs, regs, sizeof(uint32) * 32);

	push	128					; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2391 :       memcpy(&tempRc0, &rc0, sizeof(uint32) * 15);

	push	60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 324				; 00000144H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@ExecuteNua:

; 2392 :     }
; 2393 : 
; 2394 :     tempCC = cc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR [eax+320], edx

; 2395 : 
; 2396 :     for(i = 0; i < entry.nuanceCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ExecuteNua
$LN2@ExecuteNua:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ExecuteNua:
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jae	SHORT $LN9@ExecuteNua

; 2397 :     {
; 2398 :       (nuanceHandlers[entry.handlers[i]])(*this,entry,*((Nuance *)(&entry.nuances[FIXED_FIELD(i,0)])));

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 5
	mov	ecx, DWORD PTR _entry$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+88]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR ?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA[ecx*4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2399 :     }

	jmp	SHORT $LN2@ExecuteNua
$LN9@ExecuteNua:

; 2400 :   }
; 2401 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ENDP ; MPE::ExecuteNuances
_TEXT	ENDS
EXTRN	?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MUL32
EXTRN	?DecodeInstruction_ALU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ALU32
EXTRN	?DecodeInstruction_MEM32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MEM32
EXTRN	?DecodeInstruction_ECU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ECU32
EXTRN	?DecodeInstruction_RCU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_RCU16
EXTRN	?DecodeInstruction_ECU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ECU16
EXTRN	?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MUL16
EXTRN	?DecodeInstruction_MEM16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MEM16
EXTRN	?DecodeInstruction_ALU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ALU16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv151 = -12						; size = 4
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_iPtr$ = 8						; size = 4
_entry$ = 12						; size = 4
_immExt$ = 16						; size = 4
_bTerminating$ = 20					; size = 4
?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z PROC ; MPE::DecodeSingleInstruction
; _this$ = ecx

; 2404 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2405 :   //if 16 bit ALU instruction
; 2406 :   uint8 opcode = *iPtr;

	mov	eax, DWORD PTR _iPtr$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _opcode$[ebp], cl

; 2407 :   if(opcode <= 0x3F)

	movzx	edx, BYTE PTR _opcode$[ebp]
	cmp	edx, 63					; 0000003fH
	jg	SHORT $LN21@DecodeSing

; 2408 :   {
; 2409 :     DecodeInstruction_ALU16(iPtr,entry,immExt);

	mov	eax, DWORD PTR _immExt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _entry$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iPtr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_ALU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ALU16

; 2410 :     bTerminating = true;

	mov	eax, DWORD PTR _bTerminating$[ebp]
	mov	BYTE PTR [eax], 1

; 2411 :     *immExt = 0;

	mov	ecx, DWORD PTR _immExt$[ebp]
	mov	DWORD PTR [ecx], 0

; 2412 :     return 2;

	mov	al, 2
	jmp	$LN22@DecodeSing

; 2413 :   }
; 2414 :   else

	jmp	$LN20@DecodeSing
$LN21@DecodeSing:

; 2415 :   {
; 2416 :     //Instruction is not a 16 bit ALU instruction
; 2417 : 
; 2418 :     //If 16 bit non-terminating non-ALU instruction, control instruction
; 2419 :     //or 32 bit immediate extension
; 2420 :     if(opcode < 0x88 || opcode > 0x9F)

	movzx	edx, BYTE PTR _opcode$[ebp]
	cmp	edx, 136				; 00000088H
	jl	SHORT $LN18@DecodeSing
	movzx	eax, BYTE PTR _opcode$[ebp]
	cmp	eax, 159				; 0000009fH
	jle	$LN19@DecodeSing
$LN18@DecodeSing:

; 2421 :     {
; 2422 :       //If not a control instruction (PAD, NOP or BREAKPOINT)
; 2423 :       if((opcode & 0xFC) != 0x80)

	movzx	ecx, BYTE PTR _opcode$[ebp]
	and	ecx, 252				; 000000fcH
	cmp	ecx, 128				; 00000080H
	je	$LN17@DecodeSing

; 2424 :       {
; 2425 :         if((opcode & 0x7F) <= 0x67)

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 127				; 0000007fH
	cmp	edx, 103				; 00000067H
	jg	SHORT $LN16@DecodeSing

; 2426 :         {
; 2427 :           if((opcode & 0x7F) >= 0x48)

	movzx	eax, BYTE PTR _opcode$[ebp]
	and	eax, 127				; 0000007fH
	cmp	eax, 72					; 00000048H
	jl	SHORT $LN15@DecodeSing

; 2428 :           {
; 2429 :             DecodeInstruction_MEM16(iPtr,entry,immExt);

	mov	ecx, DWORD PTR _immExt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _iPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_MEM16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MEM16

; 2430 :           }
; 2431 :           else

	jmp	SHORT $LN14@DecodeSing
$LN15@DecodeSing:

; 2432 :           {
; 2433 :             DecodeInstruction_MUL16(iPtr,entry,immExt);

	mov	ecx, DWORD PTR _immExt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _iPtr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL16
$LN14@DecodeSing:

; 2434 :           }
; 2435 :         }
; 2436 :         else

	jmp	SHORT $LN13@DecodeSing
$LN16@DecodeSing:

; 2437 :         {
; 2438 :           if((opcode & 0x7F) <= 0x73)

	movzx	ecx, BYTE PTR _opcode$[ebp]
	and	ecx, 127				; 0000007fH
	cmp	ecx, 115				; 00000073H
	jg	SHORT $LN12@DecodeSing

; 2439 :           {
; 2440 :             DecodeInstruction_ECU16(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_ECU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ECU16

; 2441 :           }
; 2442 :           else

	jmp	SHORT $LN13@DecodeSing
$LN12@DecodeSing:

; 2443 :           {
; 2444 :             DecodeInstruction_RCU16(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_RCU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_RCU16
$LN13@DecodeSing:

; 2445 :           }
; 2446 :         }
; 2447 : 
; 2448 :         //if bit 15 is set, the instruction is a packet terminator
; 2449 :         bTerminating = (opcode & 0x80);

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 128				; 00000080H
	setne	al
	mov	ecx, DWORD PTR _bTerminating$[ebp]
	mov	BYTE PTR [ecx], al

; 2450 :       }
; 2451 :       else

	jmp	SHORT $LN10@DecodeSing
$LN17@DecodeSing:

; 2452 :       {
; 2453 :         //PAD, NOP, or BREAKPOINT.
; 2454 :         entry->packetInfo |= (opcode & 0x03);

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 3
	mov	eax, DWORD PTR _entry$[ebp]
	or	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _entry$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 2455 : 
; 2456 :         //if bit 8 is set, the instruction is a terminating breakpoint or NOP
; 2457 :         bTerminating = (opcode & 0x01);

	movzx	edx, BYTE PTR _opcode$[ebp]
	and	edx, 1
	mov	eax, DWORD PTR _bTerminating$[ebp]
	mov	BYTE PTR [eax], dl
$LN10@DecodeSing:

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

	mov	ecx, DWORD PTR _immExt$[ebp]
	mov	DWORD PTR [ecx], 0

; 2461 :       return 2;

	mov	al, 2
	jmp	$LN22@DecodeSing
	jmp	$LN20@DecodeSing
$LN19@DecodeSing:

; 2462 :     }
; 2463 :     else if(opcode >= 0x90)

	movzx	edx, BYTE PTR _opcode$[ebp]
	cmp	edx, 144				; 00000090H
	jl	$LN8@DecodeSing

; 2464 :     {
; 2465 :       switch((opcode & 0x0C) >> 2)

	movzx	eax, BYTE PTR _opcode$[ebp]
	and	eax, 12					; 0000000cH
	sar	eax, 2
	mov	DWORD PTR tv151[ebp], eax
	cmp	DWORD PTR tv151[ebp], 3
	ja	SHORT $LN6@DecodeSing
	mov	ecx, DWORD PTR tv151[ebp]
	jmp	DWORD PTR $LN24@DecodeSing[ecx*4]
$LN5@DecodeSing:

; 2466 :       {
; 2467 :         case 0:
; 2468 :           DecodeInstruction_ECU32(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_ECU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ECU32

; 2469 :           break;

	jmp	SHORT $LN6@DecodeSing
$LN4@DecodeSing:

; 2470 :         case 1:
; 2471 :           DecodeInstruction_MEM32(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_MEM32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MEM32

; 2472 :           break;

	jmp	SHORT $LN6@DecodeSing
$LN3@DecodeSing:

; 2473 :         case 2:
; 2474 :           DecodeInstruction_ALU32(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_ALU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ALU32

; 2475 :           break;

	jmp	SHORT $LN6@DecodeSing
$LN2@DecodeSing:

; 2476 :         case 3:
; 2477 :           DecodeInstruction_MUL32(iPtr,entry,immExt);

	mov	edx, DWORD PTR _immExt$[ebp]
	push	edx
	mov	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL32
$LN6@DecodeSing:

; 2478 :           break;
; 2479 :       }
; 2480 : 
; 2481 :       //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 2482 :       bTerminating = *(iPtr + 2) & 0x10;

	mov	edx, DWORD PTR _iPtr$[ebp]
	movzx	eax, BYTE PTR [edx+2]
	and	eax, 16					; 00000010H
	setne	cl
	mov	edx, DWORD PTR _bTerminating$[ebp]
	mov	BYTE PTR [edx], cl

; 2483 :       *immExt = 0;

	mov	eax, DWORD PTR _immExt$[ebp]
	mov	DWORD PTR [eax], 0

; 2484 :       return 4;

	mov	al, 4
	jmp	SHORT $LN22@DecodeSing

; 2485 :     }
; 2486 :     else

	jmp	SHORT $LN20@DecodeSing
$LN8@DecodeSing:

; 2487 :     {
; 2488 :       //32 bit extension (preceeding 48/64 bit instruction)
; 2489 :       *immExt = *((uint32 *)iPtr);

	mov	ecx, DWORD PTR _immExt$[ebp]
	mov	edx, DWORD PTR _iPtr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 2490 :       SwapScalarBytes(immExt);

	mov	ecx, DWORD PTR _immExt$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 2491 :       bTerminating = false;

	mov	ecx, DWORD PTR _bTerminating$[ebp]
	mov	BYTE PTR [ecx], 0

; 2492 :       return 4;

	mov	al, 4
	jmp	SHORT $LN22@DecodeSing
$LN20@DecodeSing:

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;

	xor	al, al
$LN22@DecodeSing:

; 2496 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN24@DecodeSing:
	DD	$LN5@DecodeSing
	DD	$LN4@DecodeSing
	DD	$LN3@DecodeSing
	DD	$LN2@DecodeSing
?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ENDP ; MPE::DecodeSingleInstruction
_TEXT	ENDS
EXTRN	?CompileBlock@SuperBlock@@QAEP6AXXZPAVMPE@@IAAVNativeCodeCache@@W4SuperBlockCompileType@@_NAA_N@Z:PROC ; SuperBlock::CompileBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pcexec$ = 8						; size = 4
_compileType$ = 12					; size = 4
_bError$ = 16						; size = 4
_bSinglePacket$ = 20					; size = 1
?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z PROC ; MPE::CompileNativeCodeBlock
; _this$ = ecx

; 2499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2500 :   return superBlock->CompileBlock(this, pcexec, *nativeCodeCache, compileType, bSinglePacket, bError);

	mov	eax, DWORD PTR _bError$[ebp]
	push	eax
	mov	cl, BYTE PTR _bSinglePacket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _compileType$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+680]
	push	ecx
	mov	edx, DWORD PTR _pcexec$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+676]
	call	?CompileBlock@SuperBlock@@QAEP6AXXZPAVMPE@@IAAVNativeCodeCache@@W4SuperBlockCompileType@@_NAA_N@Z ; SuperBlock::CompileBlock

; 2501 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ENDP ; MPE::CompileNativeCodeBlock
_TEXT	ENDS
PUBLIC	?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket
EXTRN	_sprintf:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$53912 = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_entry$ = 12						; size = 4
?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z PROC ; MPE::PrintInstructionCachePacket
; _this$ = ecx

; 2504 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2505 :   if(entry.nuanceCount != 0)

	mov	eax, DWORD PTR _entry$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN7@PrintInstr

; 2506 :   {
; 2507 :     for(uint32 i = 0; i < entry.nuanceCount; i++)

	mov	DWORD PTR _i$53912[ebp], 0
	jmp	SHORT $LN6@PrintInstr
$LN5@PrintInstr:
	mov	ecx, DWORD PTR _i$53912[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$53912[ebp], ecx
$LN6@PrintInstr:
	mov	edx, DWORD PTR _entry$[ebp]
	mov	eax, DWORD PTR _i$53912[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN7@PrintInstr

; 2508 :     {
; 2509 :       buffer += (printHandlers[entry.handlers[i]])(buffer, *((Nuance *)(&entry.nuances[FIXED_FIELD(i,0)])), true);

	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _i$53912[ebp]
	imul	ecx, 5
	mov	edx, DWORD PTR _entry$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+88]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$53912[ebp]
	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR ?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA[ecx*4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	add	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _buffer$[ebp], eax

; 2510 :     }

	jmp	SHORT $LN5@PrintInstr
$LN7@PrintInstr:

; 2511 :   }
; 2512 :   
; 2513 :   if(entry.packetInfo & PACKETINFO_BREAKPOINT)

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 2
	je	SHORT $LN3@PrintInstr

; 2514 :   {
; 2515 :       sprintf(buffer,"breakpoint\n");

	push	OFFSET $SG53918
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
	jmp	SHORT $LN8@PrintInstr
$LN3@PrintInstr:

; 2516 :   }
; 2517 :   else if(entry.packetInfo & PACKETINFO_NOP)

	mov	eax, DWORD PTR _entry$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	and	ecx, 1
	je	SHORT $LN8@PrintInstr

; 2518 :   {
; 2519 :     sprintf(buffer,"nop\n");

	push	OFFSET $SG53921
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_sprintf
	add	esp, 8
$LN8@PrintInstr:

; 2520 :   }
; 2521 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ENDP ; MPE::PrintInstructionCachePacket
_TEXT	ENDS
PUBLIC	?PrintInstructionCachePacket@MPE@@QAEXPADI@Z	; MPE::PrintInstructionCachePacket
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pEntry$ = -300						; size = 4
_bCacheEntryValid$ = -292				; size = 4
_memPtr$ = -284						; size = 4
_entry$ = -276						; size = 268
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_address$ = 12						; size = 4
?PrintInstructionCachePacket@MPE@@QAEXPADI@Z PROC	; MPE::PrintInstructionCachePacket
; _this$ = ecx

; 2524 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2525 :   InstructionCacheEntry entry;
; 2526 :   uint8 *memPtr;
; 2527 :   uint32 bCacheEntryValid;
; 2528 : 
; 2529 :   bCacheEntryValid = 1;

	mov	DWORD PTR _bCacheEntryValid$[ebp], 1

; 2530 :   InstructionCacheEntry *pEntry = instructionCache->FindInstructionCacheEntry(address,bCacheEntryValid);

	lea	eax, DWORD PTR _bCacheEntryValid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+672]
	call	?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry
	mov	DWORD PTR _pEntry$[ebp], eax

; 2531 :   
; 2532 :   if(bCacheEntryValid && (address == pEntry->pcexec))

	cmp	DWORD PTR _bCacheEntryValid$[ebp], 0
	je	SHORT $LN2@PrintInstr@2
	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	ecx, DWORD PTR _address$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN2@PrintInstr@2

; 2533 :   {
; 2534 :     PrintInstructionCachePacket(buffer,*pEntry);

	mov	edx, DWORD PTR _pEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket

; 2535 :   }
; 2536 :   else

	jmp	SHORT $LN3@PrintInstr@2
$LN2@PrintInstr@2:

; 2537 :   {
; 2538 :     entry.pcexec = address;

	mov	ecx, DWORD PTR _address$[ebp]
	mov	DWORD PTR _entry$[ebp+28], ecx

; 2539 :     memPtr = GetPointerToMemoryBank(address);

	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPointerToMemoryBank@MPE@@QAEPAEI@Z	; MPE::GetPointerToMemoryBank
	mov	DWORD PTR _memPtr$[ebp], eax

; 2540 :     DecompressPacket(memPtr,&entry);

	push	0
	lea	eax, DWORD PTR _entry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _memPtr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket

; 2541 :     PrintInstructionCachePacket(buffer,entry);    

	lea	edx, DWORD PTR _entry$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket
$LN3@PrintInstr@2:

; 2542 :   }
; 2543 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@PrintInstr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN8@PrintInstr@2:
	DD	2
	DD	$LN7@PrintInstr@2
$LN7@PrintInstr@2:
	DD	-276					; fffffeecH
	DD	268					; 0000010cH
	DD	$LN5@PrintInstr@2
	DD	-292					; fffffedcH
	DD	4
	DD	$LN6@PrintInstr@2
$LN6@PrintInstr@2:
	DB	98					; 00000062H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN5@PrintInstr@2:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?PrintInstructionCachePacket@MPE@@QAEXPADI@Z ENDP	; MPE::PrintInstructionCachePacket
_TEXT	ENDS
PUBLIC	?InvalidateICacheRegion@MPE@@QAEXII@Z		; MPE::InvalidateICacheRegion
PUBLIC	?ExecuteSingleStep@MPE@@QAEXXZ			; MPE::ExecuteSingleStep
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ExecuteSingleStep@MPE@@QAEXXZ PROC			; MPE::ExecuteSingleStep
; _this$ = ecx

; 2546 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2547 :   InvalidateICacheRegion(pcexec, pcexec);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+408]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateICacheRegion@MPE@@QAEXII@Z	; MPE::InvalidateICacheRegion

; 2548 :   nativeCodeCache->FlushRegion(pcexec, pcexec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+408]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+680]
	call	?FlushRegion@NativeCodeCache@@QAEXII@Z	; NativeCodeCache::FlushRegion

; 2549 :   FetchDecodeExecute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FetchDecodeExecute@MPE@@QAE_NXZ	; MPE::FetchDecodeExecute

; 2550 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ExecuteSingleStep@MPE@@QAEXXZ ENDP			; MPE::ExecuteSingleStep
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\mpe.h
_TEXT	ENDS
;	COMDAT ?InvalidateICacheRegion@MPE@@QAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
?InvalidateICacheRegion@MPE@@QAEXII@Z PROC		; MPE::InvalidateICacheRegion, COMDAT
; _this$ = ecx

; 460  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 461  :     numInterpreterCacheFlushes++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+644]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+644], ecx

; 462  :     instructionCache->InvalidateRegion(start, end);

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+672]
	call	?InvalidateRegion@InstructionCache@@QAEXII@Z ; InstructionCache::InvalidateRegion

; 463  :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InvalidateICacheRegion@MPE@@QAEXII@Z ENDP		; MPE::InvalidateICacheRegion
_TEXT	ENDS
END

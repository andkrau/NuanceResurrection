; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitMisc.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_NOP
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitmisc.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_NOP

; 9    : {

	push	ebp
	mov	ebp, esp

; 10   :   //Nothing to emit, so just return
; 11   :   return;
; 12   : }

	pop	ebp
	ret	0
?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_NOP
_TEXT	ENDS
PUBLIC	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z	; Emit_ExitBlock
EXTRN	?X86Emit_RETN@NativeCodeCache@@QAEXG@Z:PROC	; NativeCodeCache::X86Emit_RETN
EXTRN	?X86Emit_POPAD@NativeCodeCache@@QAEXXZ:PROC	; NativeCodeCache::X86Emit_POPAD
EXTRN	?X86Emit_EMMS@NativeCodeCache@@QAEXXZ:PROC	; NativeCodeCache::X86Emit_EMMS
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z PROC	; Emit_ExitBlock

; 15   : {

	push	ebp
	mov	ebp, esp

; 16   :   if(vars->bSaveRegs)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	je	SHORT $LN1@Emit_ExitB

; 17   :   {
; 18   :     vars->codeCache->X86Emit_EMMS();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_EMMS@NativeCodeCache@@QAEXXZ	; NativeCodeCache::X86Emit_EMMS
$LN1@Emit_ExitB:

; 19   :   }
; 20   : 
; 21   :   vars->codeCache->X86Emit_POPAD();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_POPAD@NativeCodeCache@@QAEXXZ	; NativeCodeCache::X86Emit_POPAD

; 22   :   vars->codeCache->X86Emit_RETN();

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_RETN@NativeCodeCache@@QAEXG@Z	; NativeCodeCache::X86Emit_RETN

; 23   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ENDP	; Emit_ExitBlock
_TEXT	ENDS
PUBLIC	?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_SaveRegs
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQRM
EXTRN	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVQMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_testMask$ = -12					; size = 4
_offset$ = -8						; size = 4
_i$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_SaveRegs

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 27   :   int32 i, offset;
; 28   :   uint32 testMask = 0xF;

	mov	DWORD PTR _testMask$[ebp], 15		; 0000000fH

; 29   : 
; 30   :   offset = -128;

	mov	DWORD PTR _offset$[ebp], -128		; ffffff80H

; 31   : 
; 32   :   for(i = 8; i > 0; i--)

	mov	DWORD PTR _i$[ebp], 8
	jmp	SHORT $LN7@Emit_SaveR
$LN6@Emit_SaveR:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Emit_SaveR:
	cmp	DWORD PTR _i$[ebp], 0
	jle	$LN5@Emit_SaveR

; 33   :   {
; 34   :     if(testMask & nuance.fields[1])

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR _testMask$[ebp]
	and	edx, DWORD PTR [ecx+4]
	je	SHORT $LN4@Emit_SaveR

; 35   :     {
; 36   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm0, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, offset);

	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	push	0
	push	4
	push	6
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 37   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm1, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, offset+8);

	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 8
	push	edx
	push	0
	push	4
	push	6
	push	33					; 00000021H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 38   : 
; 39   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm0, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, offset);

	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	push	0
	push	4
	push	7
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 40   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm1, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, offset+8);

	mov	eax, DWORD PTR _offset$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	4
	push	7
	push	33					; 00000021H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM
$LN4@Emit_SaveR:

; 41   :     }
; 42   :     offset += 16;

	mov	edx, DWORD PTR _offset$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _offset$[ebp], edx

; 43   :     testMask <<= 4;

	mov	eax, DWORD PTR _testMask$[ebp]
	shl	eax, 4
	mov	DWORD PTR _testMask$[ebp], eax

; 44   :   }

	jmp	$LN6@Emit_SaveR
$LN5@Emit_SaveR:

; 45   : 
; 46   :   if(nuance.fields[2] & DEPENDENCY_FLAG_ALLFLAGS)

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 67076096				; 03ff8000H
	je	SHORT $LN3@Emit_SaveR

; 47   :   {
; 48   :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->cc));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 128				; 00000080H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 49   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->tempCC));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 320				; 00000140H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN3@Emit_SaveR:

; 50   :   }
; 51   : 
; 52   :   if(nuance.fields[2])

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN8@Emit_SaveR

; 53   :   {
; 54   :     if(nuance.fields[2] & ~DEPENDENCY_FLAG_ALLFLAGS)

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, -67076097				; fc007fffH
	je	$LN8@Emit_SaveR

; 55   :     {
; 56   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm0, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 0*sizeof(uint64));

	push	0
	push	0
	push	4
	push	6
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 57   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm1, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 1*sizeof(uint64));

	push	8
	push	0
	push	4
	push	6
	push	33					; 00000021H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 58   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm2, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 2*sizeof(uint64));

	push	16					; 00000010H
	push	0
	push	4
	push	6
	push	34					; 00000022H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 59   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm3, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 3*sizeof(uint64));

	push	24					; 00000018H
	push	0
	push	4
	push	6
	push	35					; 00000023H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 60   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm4, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 4*sizeof(uint64));

	push	32					; 00000020H
	push	0
	push	4
	push	6
	push	36					; 00000024H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 61   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm5, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 5*sizeof(uint64));

	push	40					; 00000028H
	push	0
	push	4
	push	6
	push	37					; 00000025H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 62   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm6, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 6*sizeof(uint64));

	push	48					; 00000030H
	push	0
	push	4
	push	6
	push	38					; 00000026H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 63   :       vars->codeCache->X86Emit_MOVQMR(x86Reg_mm7, x86BaseReg_esi, x86IndexReg_none, x86Scale_1, 7*sizeof(uint64));

	push	56					; 00000038H
	push	0
	push	4
	push	6
	push	39					; 00000027H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR

; 64   : 
; 65   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm0, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 0*sizeof(uint64));

	push	0
	push	0
	push	4
	push	7
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 66   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm1, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 1*sizeof(uint64));

	push	8
	push	0
	push	4
	push	7
	push	33					; 00000021H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 67   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm2, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 2*sizeof(uint64));

	push	16					; 00000010H
	push	0
	push	4
	push	7
	push	34					; 00000022H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 68   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm3, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 3*sizeof(uint64));

	push	24					; 00000018H
	push	0
	push	4
	push	7
	push	35					; 00000023H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 69   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm4, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 4*sizeof(uint64));

	push	32					; 00000020H
	push	0
	push	4
	push	7
	push	36					; 00000024H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 70   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm5, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 5*sizeof(uint64));

	push	40					; 00000028H
	push	0
	push	4
	push	7
	push	37					; 00000025H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 71   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm6, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 6*sizeof(uint64));

	push	48					; 00000030H
	push	0
	push	4
	push	7
	push	38					; 00000026H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM

; 72   :       vars->codeCache->X86Emit_MOVQRM(x86Reg_mm7, x86BaseReg_edi, x86IndexReg_none, x86Scale_1, 7*sizeof(uint64));

	push	56					; 00000038H
	push	0
	push	4
	push	7
	push	39					; 00000027H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM
$LN8@Emit_SaveR:

; 73   :     }
; 74   :   }
; 75   : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_SaveRegs
_TEXT	ENDS
PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
PUBLIC	?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreScalarRegisterConstant
EXTRN	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORIM
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
EXTRN	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_flagValues$ = -28					; size = 4
_flagMask$ = -24					; size = 4
_ccDisp$ = -20						; size = 4
_destRegDisp$ = -16					; size = 4
_ccWriteBaseReg$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreScalarRegisterConstant

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 79   :   uint32 destRegIndex = nuance.fields[FIELD_CONSTANT_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 80   :   x86BaseReg destRegWriteBaseReg = GetScalarRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 81   :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 82   :   int32 destRegDisp = GetScalarRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 83   :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 84   :   uint32 flagMask = nuance.fields[FIELD_CONSTANT_FLAGMASK];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _flagMask$[ebp], eax

; 85   :   uint32 flagValues = (nuance.fields[FIELD_CONSTANT_FLAGVALUES] & flagMask);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, DWORD PTR _flagMask$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx

; 86   : 
; 87   :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_CONSTANT_VALUE], x86MemPtr_dword, destRegWriteBaseReg,x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	eax, DWORD PTR _destRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 88   :   if(flagMask)

	cmp	DWORD PTR _flagMask$[ebp], 0
	je	SHORT $LN4@Emit_Store

; 89   :   {
; 90   :     //If any of the flags represented by the mask are to be set to 0, clear all of the flags first
; 91   :     if(~flagValues)

	mov	edx, DWORD PTR _flagValues$[ebp]
	not	edx
	test	edx, edx
	je	SHORT $LN2@Emit_Store

; 92   :     {
; 93   :       vars->codeCache->X86Emit_ANDIM(~flagMask, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _flagMask$[ebp]
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN2@Emit_Store:

; 94   :     }
; 95   : 
; 96   :     //If any of the flags represented by the mask are to be set to 1, set the flags
; 97   :     if(flagValues)

	cmp	DWORD PTR _flagValues$[ebp], 0
	je	SHORT $LN4@Emit_Store

; 98   :     {
; 99   :       vars->codeCache->X86Emit_ORIM(flagValues, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _flagValues$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN4@Emit_Store:

; 100  :     }
; 101  :   }
; 102  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreScalarRegisterConstant
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegWriteBaseReg, COMDAT

; 47   : {

	push	ebp
	mov	ebp, esp

; 48   :   return x86BaseReg_esi;

	mov	eax, 6

; 49   : }

	pop	ebp
	ret	0
?GetScalarRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_StoreMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.cpp
_TEXT	SEGMENT
tv82 = -32						; size = 4
_flagValues$ = -28					; size = 4
_flagMask$ = -24					; size = 4
_ccDisp$ = -20						; size = 4
_destRegDisp$ = -16					; size = 4
_ccWriteBaseReg$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_StoreMiscRegisterConstant

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 106  :   uint32 destRegIndex = nuance.fields[FIELD_CONSTANT_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 107  :   x86BaseReg destRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 108  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 109  :   int32 destRegDisp = GetMiscRegEmitDisp(vars,destRegIndex+1);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 110  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 111  :   uint32 flagMask = nuance.fields[FIELD_CONSTANT_FLAGMASK];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _flagMask$[ebp], eax

; 112  :   uint32 flagValues = (nuance.fields[FIELD_CONSTANT_FLAGVALUES] & flagMask);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, DWORD PTR _flagMask$[ebp]
	mov	DWORD PTR _flagValues$[ebp], edx

; 113  : 
; 114  :   if(destRegIndex != CONSTANT_REG_DISCARD)

	cmp	DWORD PTR _destRegIndex$[ebp], 32	; 00000020H
	je	SHORT $LN9@Emit_Store@2

; 115  :   {
; 116  :     switch(destRegIndex)

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	mov	DWORD PTR tv82[ebp], eax
	cmp	DWORD PTR tv82[ebp], 14			; 0000000eH
	ja	SHORT $LN9@Emit_Store@2
	mov	ecx, DWORD PTR tv82[ebp]
	movzx	edx, BYTE PTR $LN12@Emit_Store@2[ecx]
	jmp	DWORD PTR $LN13@Emit_Store@2[edx*4]
$LN4@Emit_Store@2:

; 117  :     {
; 118  :       case CONSTANT_REG_RC0:
; 119  :         if(nuance.fields[FIELD_CONSTANT_VALUE])
; 120  :         {
; 121  :         }
; 122  :       case CONSTANT_REG_RX:
; 123  :       case CONSTANT_REG_RY:
; 124  :       case CONSTANT_REG_RU:
; 125  :       case CONSTANT_REG_RV:
; 126  :       case CONSTANT_REG_RC1:
; 127  :       case CONSTANT_REG_RZ:
; 128  :       case CONSTANT_REG_XYCTL:
; 129  :       case CONSTANT_REG_UVCTL:
; 130  :       case CONSTANT_REG_XYRANGE:
; 131  :       case CONSTANT_REG_UVRANGE:
; 132  :       case CONSTANT_REG_ACSHIFT:
; 133  :       case CONSTANT_REG_SVSHIFT:
; 134  :         vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_CONSTANT_VALUE], x86MemPtr_dword, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	ecx, DWORD PTR _destRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM
$LN9@Emit_Store@2:

; 135  :     }
; 136  :   }
; 137  :   
; 138  :   if(flagMask)

	cmp	DWORD PTR _flagMask$[ebp], 0
	je	SHORT $LN10@Emit_Store@2

; 139  :   {
; 140  :     //If any of the flags represented by the mask are to be set to 0, clear all of the flags first
; 141  :     if(~flagValues)

	mov	eax, DWORD PTR _flagValues$[ebp]
	not	eax
	test	eax, eax
	je	SHORT $LN2@Emit_Store@2

; 142  :     {
; 143  :       vars->codeCache->X86Emit_ANDIM(~flagMask, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	ecx, DWORD PTR _ccDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _flagMask$[ebp]
	not	eax
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN2@Emit_Store@2:

; 144  :     }
; 145  : 
; 146  :     //If any of the flags represented by the mask are to be set to 1, set the flags
; 147  :     if(flagValues)

	cmp	DWORD PTR _flagValues$[ebp], 0
	je	SHORT $LN10@Emit_Store@2

; 148  :     {
; 149  :       vars->codeCache->X86Emit_ORIM(flagValues, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _flagValues$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN10@Emit_Store@2:

; 150  :     }
; 151  :   }
; 152  : }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@Emit_Store@2:
	DD	$LN4@Emit_Store@2
	DD	$LN9@Emit_Store@2
$LN12@Emit_Store@2:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_StoreMiscRegisterConstant
_TEXT	ENDS
END

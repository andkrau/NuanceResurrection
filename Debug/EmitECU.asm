; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitECU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
PUBLIC	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
EXTRN	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z:PROC ; NativeCodeCache::X86Emit_JMPI_Label
EXTRN	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_XORRR
EXTRN	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHLIR
EXTRN	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_MOVRR
EXTRN	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_CMPIR
EXTRN	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ANDIR
EXTRN	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z:PROC ; NativeCodeCache::X86Emit_JCC_Label
EXTRN	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_TESTIR
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitecu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv78 = -12						; size = 4
_ccRegDisp$ = -8					; size = 4
_ccRegReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_condition$ = 12					; size = 4
_conditionFalseLabel$ = 16				; size = 4
_conditionTrueLabel$ = 20				; size = 4
?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z PROC	; EmitConditionCheck

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 13   :   x86BaseReg ccRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccRegReadBaseReg$[ebp], eax

; 14   :   int32 ccRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccRegDisp$[ebp], eax

; 15   : 
; 16   :   if(condition == ECU_CONDITION_T)

	cmp	DWORD PTR _condition$[ebp], 17		; 00000011H
	jne	SHORT $LN35@EmitCondit

; 17   :   {
; 18   :     //conditon is always true
; 19   :     return;

	jmp	$LN36@EmitCondit
$LN35@EmitCondit:

; 20   :   }
; 21   : 
; 22   :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax,ccRegReadBaseReg,x86IndexReg_none,x86Scale_1,ccRegDisp);

	mov	edx, DWORD PTR _ccRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccRegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 23   : 
; 24   :   switch(condition)

	mov	edx, DWORD PTR _condition$[ebp]
	mov	DWORD PTR tv78[ebp], edx
	cmp	DWORD PTR tv78[ebp], 31			; 0000001fH
	ja	$LN36@EmitCondit
	mov	eax, DWORD PTR tv78[ebp]
	jmp	DWORD PTR $LN38@EmitCondit[eax*4]
$LN32@EmitCondit:

; 25   :   {
; 26   :     case 0:
; 27   :       //ne (checked)
; 28   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 29   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 30   :       return;

	jmp	$LN36@EmitCondit
$LN31@EmitCondit:

; 31   :     case 1:
; 32   :       //c0z (checked)
; 33   :       vars->codeCache->X86Emit_TESTIR(CC_COUNTER0_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	32					; 00000020H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 34   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 35   :       return;

	jmp	$LN36@EmitCondit
$LN30@EmitCondit:

; 36   :     case 2:
; 37   :       //c1z (checked)
; 38   :       vars->codeCache->X86Emit_TESTIR(CC_COUNTER1_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	64					; 00000040H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 39   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 40   :       return;

	jmp	$LN36@EmitCondit
$LN29@EmitCondit:

; 41   :     case 3:
; 42   :       //cc (checked)
; 43   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_CARRY,x86Reg_eax);

	push	16					; 00000010H
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 44   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 45   :       return;

	jmp	$LN36@EmitCondit
$LN28@EmitCondit:

; 46   :     case 4:
; 47   :       //eq (checked)
; 48   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 49   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 50   :       return;

	jmp	$LN36@EmitCondit
$LN27@EmitCondit:

; 51   :     case 5:
; 52   :       //cs (checked)
; 53   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_CARRY,x86Reg_eax);

	push	16					; 00000010H
	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 54   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 55   :       return;

	jmp	$LN36@EmitCondit
$LN26@EmitCondit:

; 56   :     case 6:
; 57   :       //vc (checked)
; 58   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 59   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 60   :       return;

	jmp	$LN36@EmitCondit
$LN25@EmitCondit:

; 61   :     case 7:
; 62   :       //vs (checked)
; 63   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 64   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 65   :       return;

	jmp	$LN36@EmitCondit
$LN24@EmitCondit:

; 66   :     case 8:
; 67   :       //lt (checked)
; 68   :       vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE|CC_ALU_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	12					; 0000000cH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 69   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 70   :       vars->codeCache->X86Emit_CMPIR(CC_ALU_NEGATIVE|CC_ALU_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 71   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 72   :       return;

	jmp	$LN36@EmitCondit
$LN23@EmitCondit:

; 73   :     case 9:
; 74   :       //mvc (checked)
; 75   :       vars->codeCache->X86Emit_TESTIR(CC_MUL_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 76   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 77   :       return;

	jmp	$LN36@EmitCondit
$LN22@EmitCondit:

; 78   :     case 10:
; 79   :       //mvs (checked)
; 80   :       vars->codeCache->X86Emit_TESTIR(CC_MUL_OVERFLOW,x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 81   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 82   :       return;

	jmp	$LN36@EmitCondit
$LN21@EmitCondit:

; 83   :     case 11:
; 84   :       //hi (checked)
; 85   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_CARRY|CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	3
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 86   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 87   :       return;

	jmp	$LN36@EmitCondit
$LN20@EmitCondit:

; 88   :     case 12:
; 89   :       //le (checked)
; 90   :       vars->codeCache->X86Emit_TESTIR(CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 91   :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionTrueLabel);

	mov	ecx, DWORD PTR _conditionTrueLabel$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 92   :       vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 93   :       vars->codeCache->X86Emit_ANDIR(CC_ALU_OVERFLOW, x86Reg_eax);

	push	16					; 00000010H
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 94   :       vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ebx);

	push	19					; 00000013H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 95   :       //shift CC_ALU_OVERFLOW flag into position of CC_ALU_NEGATIVE bit
; 96   :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax,1);

	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 97   :       //ebx = CC_ALU_OVERFLOW ^ CC_ALU_NEGATIVE
; 98   :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 99   :       //if result is zero, the condition is false
; 100  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 101  :       return;

	jmp	$LN36@EmitCondit
$LN19@EmitCondit:

; 102  :     case 13:
; 103  :       //ls (checked)
; 104  :       vars->codeCache->X86Emit_TESTIR(CC_ALU_CARRY|CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	3
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 105  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 106  :       return;

	jmp	$LN36@EmitCondit
$LN18@EmitCondit:

; 107  :     case 14:
; 108  :       //pl (checked)
; 109  :       vars->codeCache->X86Emit_TESTIR(CC_ALU_NEGATIVE,x86Reg_eax);

	push	16					; 00000010H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 110  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 111  :       return;

	jmp	$LN36@EmitCondit
$LN17@EmitCondit:

; 112  :     case 15:
; 113  :       //mi (checked)
; 114  :       vars->codeCache->X86Emit_TESTIR(CC_ALU_NEGATIVE,x86Reg_eax);

	push	16					; 00000010H
	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 115  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 116  :       return;

	jmp	$LN36@EmitCondit
$LN16@EmitCondit:

; 117  :     case 16:
; 118  :       //gt (checked)
; 119  :       vars->codeCache->X86Emit_TESTIR(CC_ALU_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 120  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 121  :       vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 122  :       vars->codeCache->X86Emit_ANDIR(CC_ALU_OVERFLOW, x86Reg_eax);

	push	16					; 00000010H
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 123  :       vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ebx);

	push	19					; 00000013H
	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 124  :       //shift CC_ALU_OVERFLOW flag into position of CC_ALU_NEGATIVE bit
; 125  :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax,1);

	push	1
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 126  :       //ebx = CC_ALU_OVERFLOW ^ CC_ALU_NEGATIVE
; 127  :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 128  :       //if result is non-zero, the condition is false
; 129  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 130  :       return; 

	jmp	$LN36@EmitCondit
$LN15@EmitCondit:

; 131  :     case 17:
; 132  :       //always (checked)
; 133  :       return;

	jmp	$LN36@EmitCondit
$LN14@EmitCondit:

; 134  :     case 18:
; 135  :       //modmi (checked)
; 136  :       vars->codeCache->X86Emit_TESTIR(CC_MODMI,x86Reg_eax);

	push	16					; 00000010H
	push	256					; 00000100H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 137  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 138  :       return;

	jmp	$LN36@EmitCondit
$LN13@EmitCondit:

; 139  :     case 19:
; 140  :       //modpl (checked)
; 141  :       vars->codeCache->X86Emit_TESTIR(CC_MODMI,x86Reg_eax);

	push	16					; 00000010H
	push	256					; 00000100H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 142  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 143  :       return;

	jmp	$LN36@EmitCondit
$LN12@EmitCondit:

; 144  :     case 20:
; 145  :       //ge (checked)
; 146  :       vars->codeCache->X86Emit_MOVRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 147  :       vars->codeCache->X86Emit_ANDIR(CC_ALU_OVERFLOW, x86Reg_eax);

	push	16					; 00000010H
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 148  :       vars->codeCache->X86Emit_ANDIR(CC_ALU_NEGATIVE, x86Reg_ebx);

	push	19					; 00000013H
	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 149  :       //shift CC_ALU_OVERFLOW flag into position of CC_ALU_NEGATIVE bit
; 150  :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax,1);

	push	1
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 151  :       //ebx = CC_ALU_OVERFLOW ^ CC_ALU_NEGATIVE
; 152  :       vars->codeCache->X86Emit_XORRR(x86Reg_ebx,x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 153  :       //if result is non-zero, the condition is false
; 154  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 155  :       return;

	jmp	$LN36@EmitCondit
$LN11@EmitCondit:

; 156  :     case 21:
; 157  :       //modge (checked)
; 158  :       vars->codeCache->X86Emit_TESTIR(CC_MODGE,x86Reg_eax);

	push	16					; 00000010H
	push	128					; 00000080H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 159  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 160  :       return;

	jmp	$LN36@EmitCondit
$LN10@EmitCondit:

; 161  :     case 22:
; 162  :       //modlt (checked)
; 163  :       vars->codeCache->X86Emit_TESTIR(CC_MODGE,x86Reg_eax);

	push	16					; 00000010H
	push	128					; 00000080H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 164  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 165  :       return;

	jmp	$LN36@EmitCondit
$LN9@EmitCondit:

; 166  :     case 23:
; 167  :       //never (checked)
; 168  :       vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 169  :       return;

	jmp	$LN36@EmitCondit
$LN8@EmitCondit:

; 170  :     case 24:
; 171  :       //c0ne (checked)
; 172  :       vars->codeCache->X86Emit_TESTIR(CC_COUNTER0_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	32					; 00000020H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 173  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 174  :       return;

	jmp	$LN36@EmitCondit
$LN7@EmitCondit:

; 175  :     case 25:
; 176  :       //never (checked)
; 177  :       vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 178  :       return;

	jmp	$LN36@EmitCondit
$LN6@EmitCondit:

; 179  :     case 26: 
; 180  :       //never (checked)
; 181  :       vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 182  :       return;

	jmp	$LN36@EmitCondit
$LN5@EmitCondit:

; 183  :     case 27:
; 184  :       //cf0lo (checked)
; 185  :       vars->codeCache->X86Emit_TESTIR(CC_COPROCESSOR0,x86Reg_eax);

	push	16					; 00000010H
	push	512					; 00000200H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 186  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 187  :       return;

	jmp	$LN36@EmitCondit
$LN4@EmitCondit:

; 188  :     case 28:
; 189  :       //c1ne (checked)
; 190  :       vars->codeCache->X86Emit_TESTIR(CC_COUNTER1_ZERO,x86Reg_eax);

	push	16					; 00000010H
	push	64					; 00000040H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 191  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 192  :       return;

	jmp	$LN36@EmitCondit
$LN3@EmitCondit:

; 193  :     case 29:
; 194  :       //cf0hi (checked)
; 195  :       vars->codeCache->X86Emit_TESTIR(CC_COPROCESSOR0,x86Reg_eax);

	push	16					; 00000010H
	push	512					; 00000200H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 196  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	ecx, DWORD PTR _conditionFalseLabel$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 197  :       return;

	jmp	SHORT $LN36@EmitCondit
$LN2@EmitCondit:

; 198  :     case 30:
; 199  :       //cf1lo (checked)
; 200  :       vars->codeCache->X86Emit_TESTIR(CC_COPROCESSOR1,x86Reg_eax);

	push	16					; 00000010H
	push	1024					; 00000400H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 201  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, conditionFalseLabel);

	mov	eax, DWORD PTR _conditionFalseLabel$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 202  :       return;

	jmp	SHORT $LN36@EmitCondit
$LN1@EmitCondit:

; 203  :     case 31:
; 204  :       //cf1hi (checked)
; 205  :       vars->codeCache->X86Emit_TESTIR(CC_COPROCESSOR1,x86Reg_eax);

	push	16					; 00000010H
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR

; 206  :       vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_Z, conditionFalseLabel);

	mov	edx, DWORD PTR _conditionFalseLabel$[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN36@EmitCondit:

; 207  :       return;
; 208  :    }
; 209  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN38@EmitCondit:
	DD	$LN32@EmitCondit
	DD	$LN31@EmitCondit
	DD	$LN30@EmitCondit
	DD	$LN29@EmitCondit
	DD	$LN28@EmitCondit
	DD	$LN27@EmitCondit
	DD	$LN26@EmitCondit
	DD	$LN25@EmitCondit
	DD	$LN24@EmitCondit
	DD	$LN23@EmitCondit
	DD	$LN22@EmitCondit
	DD	$LN21@EmitCondit
	DD	$LN20@EmitCondit
	DD	$LN19@EmitCondit
	DD	$LN18@EmitCondit
	DD	$LN17@EmitCondit
	DD	$LN16@EmitCondit
	DD	$LN15@EmitCondit
	DD	$LN14@EmitCondit
	DD	$LN13@EmitCondit
	DD	$LN12@EmitCondit
	DD	$LN11@EmitCondit
	DD	$LN10@EmitCondit
	DD	$LN9@EmitCondit
	DD	$LN8@EmitCondit
	DD	$LN7@EmitCondit
	DD	$LN6@EmitCondit
	DD	$LN5@EmitCondit
	DD	$LN4@EmitCondit
	DD	$LN3@EmitCondit
	DD	$LN2@EmitCondit
	DD	$LN1@EmitCondit
?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ENDP	; EmitConditionCheck
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegReadBaseReg, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 53   :   uint32 mask = regIndex;

	mov	eax, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR _mask$[ebp], eax

; 54   : 
; 55   :   if(!regIndex)

	cmp	DWORD PTR _regIndex$[ebp], 0
	jne	SHORT $LN4@GetMiscReg

; 56   :   {
; 57   :     mask = DEPENDENCY_FLAG_ALLFLAGS;

	mov	DWORD PTR _mask$[ebp], 67076096		; 03ff8000H

; 58   :   }
; 59   :   else

	jmp	SHORT $LN3@GetMiscReg
$LN4@GetMiscReg:

; 60   :   {
; 61   :     mask = MISC_REG_DEPENDENCY_MASK(regIndex - 1);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$[ebp], edx
$LN3@GetMiscReg:

; 62   :   }
; 63   :     
; 64   : 
; 65   :   if(vars->miscRegDep & mask)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN2@GetMiscReg

; 66   :   {
; 67   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN5@GetMiscReg

; 68   :   }
; 69   :   else

	jmp	SHORT $LN5@GetMiscReg
$LN2@GetMiscReg:

; 70   :   {
; 71   :     return x86BaseReg_esi;

	mov	eax, 6
$LN5@GetMiscReg:

; 72   :   }
; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
_TEXT	ENDS
PUBLIC	?SetLabelPointer@PatchManager@@QAEXIPAE@Z	; PatchManager::SetLabelPointer
PUBLIC	?GetEmitLoc@EmitterVariables@@QAEPAEXZ		; EmitterVariables::GetEmitLoc
PUBLIC	?Reset@PatchManager@@QAEXXZ			; PatchManager::Reset
PUBLIC	?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BRAAlways
EXTRN	?ApplyPatches@PatchManager@@QAEXXZ:PROC		; PatchManager::ApplyPatches
EXTRN	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVIM
EXTRN	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_TESTRR
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitecu.cpp
_TEXT	SEGMENT
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_address$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BRAAlways

; 212  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 213  : 
; 214  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _address$[ebp], ecx

; 215  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 216  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 217  : 
; 218  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 219  : 
; 220  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_BRAAl

; 221  :   {
; 222  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 223  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 224  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_BRAAl:

; 225  :   }
; 226  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 227  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	2
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 228  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 229  : 
; 230  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 231  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 232  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BRAAlways
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?Reset@PatchManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PatchManager@@QAEXXZ PROC			; PatchManager::Reset, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 56   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PatchManager@@QAEXXZ ENDP			; PatchManager::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetLabelPointer@PatchManager@@QAEXIPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
_ptr$ = 12						; size = 4
?SetLabelPointer@PatchManager@@QAEXIPAE@Z PROC		; PatchManager::SetLabelPointer, COMDAT
; _this$ = ecx

; 69   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     labelPointers[labelIndex] = ptr;

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx+eax*4+1024], edx

; 71   :     numLabels++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1284], ecx

; 72   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabelPointer@PatchManager@@QAEXIPAE@Z ENDP		; PatchManager::SetLabelPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetEmitLoc@EmitterVariables@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitLoc@EmitterVariables@@QAEPAEXZ PROC		; EmitterVariables::GetEmitLoc, COMDAT
; _this$ = ecx

; 31   :   uint8 *GetEmitLoc() { return *ppEmitLoc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitLoc@EmitterVariables@@QAEPAEXZ ENDP		; EmitterVariables::GetEmitLoc
_TEXT	ENDS
PUBLIC	?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BRAAlways_NOP
EXTRN	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z:PROC ; Emit_ExitBlock
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitecu.cpp
_TEXT	SEGMENT
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_address$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BRAAlways_NOP

; 235  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 236  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _address$[ebp], ecx

; 237  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 238  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 239  : 
; 240  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 241  : 
; 242  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_BRAAl@2

; 243  :   {
; 244  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 245  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 246  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_BRAAl@2:

; 247  :   }
; 248  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 249  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	2
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 250  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 251  :   Emit_ExitBlock(vars);

	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 252  : 
; 253  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 254  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 255  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BRAAlways_NOP
_TEXT	ENDS
PUBLIC	?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BRAConditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_address$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BRAConditional

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 259  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _address$[ebp], ecx

; 260  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 261  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 262  : 
; 263  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 264  : 
; 265  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_BRACo

; 266  :   {
; 267  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 268  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 269  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_BRACo:

; 270  :   }
; 271  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 272  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 273  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	2
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 274  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 275  : 
; 276  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 277  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 278  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BRAConditional
_TEXT	ENDS
PUBLIC	?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_BRAConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_address$ = -4						; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_BRAConditional_NOP

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 282  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _address$[ebp], ecx

; 283  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 284  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 285  : 
; 286  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 287  : 
; 288  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_BRACo@2

; 289  :   {
; 290  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 291  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 292  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_BRACo@2:

; 293  :   }
; 294  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 295  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 296  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	2
	mov	ecx, DWORD PTR _address$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 297  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 298  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 299  : 
; 300  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 301  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 302  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_BRAConditional_NOP
_TEXT	ENDS
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
PUBLIC	?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JMPAlwaysIndirect
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -16					; size = 4
_src1RegReadBaseReg$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JMPAlwaysIndirect

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 306  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 307  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 308  : 
; 309  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 310  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 311  : 
; 312  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 313  : 
; 314  :   if(vars->bCheckECUSkipCounter)

	mov	ecx, DWORD PTR _vars$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@Emit_JMPAl

; 315  :   {
; 316  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 317  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 318  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JMPAl:

; 319  :   }
; 320  : 
; 321  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 322  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 323  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 324  : 
; 325  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 326  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 327  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JMPAlwaysIndirect
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegReadBaseReg, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if(vars->scalarRegDep & SCALAR_REG_DEPENDENCY_MASK(regIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _regIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+28]
	je	SHORT $LN2@GetScalarR

; 37   :   {
; 38   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN3@GetScalarR

; 39   :   }
; 40   :   else

	jmp	SHORT $LN3@GetScalarR
$LN2@GetScalarR:

; 41   :   {
; 42   :     return x86BaseReg_esi;

	mov	eax, 6
$LN3@GetScalarR:

; 43   :   }
; 44   : }

	pop	ebp
	ret	0
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JMPAlwaysIndirect_NOP
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitecu.cpp
_TEXT	SEGMENT
_src1RegDisp$ = -16					; size = 4
_src1RegReadBaseReg$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JMPAlwaysIndirect_NOP

; 330  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 331  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 332  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 333  : 
; 334  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 335  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 336  : 
; 337  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 338  : 
; 339  :   if(vars->bCheckECUSkipCounter)

	mov	ecx, DWORD PTR _vars$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@Emit_JMPAl@2

; 340  :   {
; 341  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 342  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 343  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JMPAl@2:

; 344  :   }
; 345  : 
; 346  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 347  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 348  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 349  :   Emit_ExitBlock(vars);

	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 350  : 
; 351  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 352  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 353  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JMPAlwaysIndirect_NOP
_TEXT	ENDS
PUBLIC	?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JMPConditionalIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -20					; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JMPConditionalIndirect

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 357  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 358  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 359  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 360  : 
; 361  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 362  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 363  : 
; 364  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 365  : 
; 366  :   if(vars->bCheckECUSkipCounter)

	mov	ecx, DWORD PTR _vars$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@Emit_JMPCo

; 367  :   {
; 368  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 369  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 370  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JMPCo:

; 371  :   }
; 372  : 
; 373  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 374  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 375  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 376  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 377  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 378  : 
; 379  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 380  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 381  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JMPConditionalIndirect
_TEXT	ENDS
PUBLIC	?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JMPConditionalIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -20					; size = 4
_src1RegReadBaseReg$ = -16				; size = 4
_l_condition_true$ = -12				; size = 4
_l_skip_ecu$ = -8					; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JMPConditionalIndirect_NOP

; 384  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 385  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 386  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 387  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 388  : 
; 389  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	edx, DWORD PTR _src1RegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 390  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 391  : 
; 392  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 393  : 
; 394  :   if(vars->bCheckECUSkipCounter)

	mov	ecx, DWORD PTR _vars$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@Emit_JMPCo@2

; 395  :   {
; 396  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 397  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 398  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JMPCo@2:

; 399  :   }
; 400  : 
; 401  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 402  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 403  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	eax, DWORD PTR _src1RegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 404  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 405  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 406  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 407  : 
; 408  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 409  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 410  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JMPConditionalIndirect_NOP
_TEXT	ENDS
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegWriteBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRAlways

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 414  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 415  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 416  : 
; 417  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 418  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 419  : 
; 420  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 421  : 
; 422  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_JSRAl

; 423  :   {
; 424  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 425  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 426  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRAl:

; 427  :   }
; 428  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	2
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 429  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCFETCHNEXT], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 430  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 431  : 
; 432  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 433  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 434  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRAlways
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
_TEXT	ENDS
PUBLIC	?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRAlways_NOP
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitecu.cpp
_TEXT	SEGMENT
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegWriteBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRAlways_NOP

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 438  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 439  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 440  : 
; 441  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 442  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 443  : 
; 444  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 445  : 
; 446  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_JSRAl@2

; 447  :   {
; 448  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 449  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 450  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRAl@2:

; 451  :   }
; 452  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	2
	mov	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 453  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCROUTE], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 454  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 455  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 456  : 
; 457  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 458  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 459  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRAlways_NOP
_TEXT	ENDS
PUBLIC	?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRConditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegWriteBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRConditional

; 462  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 463  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 464  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 465  : 
; 466  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 467  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 468  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 469  : 
; 470  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 471  : 
; 472  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_JSRCo

; 473  :   {
; 474  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 475  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 476  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRCo:

; 477  :   }
; 478  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 479  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 480  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	2
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 481  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCFETCHNEXT], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 482  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 483  : 
; 484  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 485  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 486  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRConditional
_TEXT	ENDS
PUBLIC	?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegWriteBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRConditional_NOP

; 489  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 490  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 491  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 492  : 
; 493  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 494  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 495  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 496  : 
; 497  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 498  : 
; 499  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_JSRCo@2

; 500  :   {
; 501  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 502  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 503  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRCo@2:

; 504  :   }
; 505  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 506  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 507  :   vars->codeCache->X86Emit_MOVIM(address, x86MemPtr_dword, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	2
	mov	eax, DWORD PTR _address$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 508  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCROUTE], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 509  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 510  :   Emit_ExitBlock(vars);

	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 511  : 
; 512  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 513  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 514  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRConditional_NOP
_TEXT	ENDS
PUBLIC	?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRAlwaysIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -24					; size = 4
_src1RegReadBaseReg$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_rzRegDisp$ = -12					; size = 4
_rzRegWriteBaseReg$ = -8				; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRAlwaysIndirect

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 518  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 519  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 520  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 521  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 522  : 
; 523  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 524  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 525  : 
; 526  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 527  : 
; 528  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_JSRAl@3

; 529  :   {
; 530  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 531  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 532  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRAl@3:

; 533  :   }
; 534  : 
; 535  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 536  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 537  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCFETCHNEXT], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 538  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 539  : 
; 540  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 541  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 542  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRAlwaysIndirect
_TEXT	ENDS
PUBLIC	?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRAlwaysIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -24					; size = 4
_src1RegReadBaseReg$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_rzRegDisp$ = -12					; size = 4
_rzRegWriteBaseReg$ = -8				; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRAlwaysIndirect_NOP

; 545  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 546  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 547  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 548  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 549  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 550  : 
; 551  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 552  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 553  : 
; 554  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 555  : 
; 556  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_JSRAl@4

; 557  :   {
; 558  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 559  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 560  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRAl@4:

; 561  :   }
; 562  : 
; 563  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	ecx, DWORD PTR _src1RegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 564  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 565  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCROUTE], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 566  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 567  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 568  : 
; 569  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 570  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 571  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRAlwaysIndirect_NOP
_TEXT	ENDS
PUBLIC	?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRConditionalIndirect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -28					; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_rzRegDisp$ = -12					; size = 4
_rzRegWriteBaseReg$ = -8				; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRConditionalIndirect

; 574  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 575  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 576  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 577  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 578  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 579  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 580  : 
; 581  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 582  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 583  : 
; 584  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 585  : 
; 586  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_JSRCo@3

; 587  :   {
; 588  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 589  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 590  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRCo@3:

; 591  :   }
; 592  : 
; 593  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 594  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 595  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 596  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 597  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCFETCHNEXT], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 598  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 599  : 
; 600  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 601  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 602  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRConditionalIndirect
_TEXT	ENDS
PUBLIC	?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_JSRConditionalIndirect_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_src1RegDisp$ = -28					; size = 4
_src1RegReadBaseReg$ = -24				; size = 4
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_rzRegDisp$ = -12					; size = 4
_rzRegWriteBaseReg$ = -8				; size = 4
_src1RegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_JSRConditionalIndirect_NOP

; 605  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 606  :   uint32 src1RegIndex = nuance.fields[FIELD_ECU_ADDRESS];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _src1RegIndex$[ebp], ecx

; 607  :   x86BaseReg rzRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegWriteBaseReg$[ebp], eax

; 608  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 609  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 610  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 611  : 
; 612  :   x86BaseReg src1RegReadBaseReg = GetScalarRegReadBaseReg(vars,src1RegIndex);

	mov	ecx, DWORD PTR _src1RegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _src1RegReadBaseReg$[ebp], eax

; 613  :   int32 src1RegDisp = GetScalarRegEmitDisp(vars,src1RegIndex);

	mov	eax, DWORD PTR _src1RegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _src1RegDisp$[ebp], eax

; 614  : 
; 615  :   vars->patchMgr->Reset();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 616  : 
; 617  :   if(vars->bCheckECUSkipCounter)

	mov	eax, DWORD PTR _vars$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN1@Emit_JSRCo@4

; 618  :   {
; 619  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 620  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 621  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	push	5
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_JSRCo@4:

; 622  :   }
; 623  : 
; 624  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 625  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 626  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, src1RegReadBaseReg, x86IndexReg_none, x86Scale_1, src1RegDisp);

	mov	edx, DWORD PTR _src1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _src1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 627  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 628  :   vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_ECU_PCROUTE], x86MemPtr_dword, rzRegWriteBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	edx, DWORD PTR _rzRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzRegWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 629  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 630  :   Emit_ExitBlock(vars);

	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 631  : 
; 632  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 633  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 634  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_JSRConditionalIndirect_NOP
_TEXT	ENDS
PUBLIC	?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTSAlways
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTSAlways

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 638  :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 639  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 640  : 
; 641  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 642  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 643  : 
; 644  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 645  : 
; 646  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_RTSAl

; 647  :   {
; 648  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 649  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 650  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_RTSAl:

; 651  :   }
; 652  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	eax, DWORD PTR _rzRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 653  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 654  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 655  : 
; 656  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 657  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 658  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTSAlways
_TEXT	ENDS
PUBLIC	?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTSAlways_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTSAlways_NOP

; 661  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 662  :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 663  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 664  : 
; 665  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 666  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 667  : 
; 668  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 669  : 
; 670  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_RTSAl@2

; 671  :   {
; 672  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 673  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 674  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_RTSAl@2:

; 675  :   }
; 676  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	eax, DWORD PTR _rzRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 677  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 564				; 00000234H
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 678  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 576				; 00000240H
	push	ecx
	push	2
	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 679  :   Emit_ExitBlock(vars);

	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 680  : 
; 681  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 682  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 683  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTSAlways_NOP
_TEXT	ENDS
PUBLIC	?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTSConditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTSConditional

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 687  :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 688  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 689  : 
; 690  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 691  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 692  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 693  : 
; 694  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 695  : 
; 696  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_RTSCo

; 697  :   {
; 698  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 699  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 700  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_RTSCo:

; 701  :   }
; 702  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 703  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 704  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 705  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 706  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 707  : 
; 708  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 709  :   vars->patchMgr->ApplyPatches();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 710  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTSConditional
_TEXT	ENDS
PUBLIC	?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTSConditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzRegDisp$ = -8					; size = 4
_rzRegReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTSConditional_NOP

; 713  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 714  :   x86BaseReg rzRegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZ);

	push	7
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzRegReadBaseReg$[ebp], eax

; 715  :   int32 rzRegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZ);

	push	7
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzRegDisp$[ebp], eax

; 716  : 
; 717  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 718  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 719  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 720  : 
; 721  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 722  : 
; 723  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN1@Emit_RTSCo@2

; 724  :   {
; 725  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 726  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 727  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN1@Emit_RTSCo@2:

; 728  :   }
; 729  :   EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l_skip_ecu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H

; 730  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_condition_true$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 731  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzRegReadBaseReg, x86IndexReg_none, x86Scale_1, rzRegDisp);

	mov	ecx, DWORD PTR _rzRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rzRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 732  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 564				; 00000234H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 733  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	2
	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 734  :   Emit_ExitBlock(vars);

	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 735  : 
; 736  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 737  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 738  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTSConditional_NOP
_TEXT	ENDS
PUBLIC	?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTI1Conditional
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzi1RegDisp$ = -8					; size = 4
_rzi1RegReadBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTI1Conditional

; 741  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 742  :   x86BaseReg rzi1RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi1RegReadBaseReg$[ebp], eax

; 743  :   int32 rzi1RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi1RegDisp$[ebp], eax

; 744  : 
; 745  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 746  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 747  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 748  : 
; 749  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 750  : 
; 751  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN2@Emit_RTI1C

; 752  :   {
; 753  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 754  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 755  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN2@Emit_RTI1C:

; 756  :   }
; 757  :   if(nuance.fields[FIELD_ECU_CONDITION] != ECU_CONDITION_T)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN1@Emit_RTI1C

; 758  :   {
; 759  :     EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H
$LN1@Emit_RTI1C:

; 760  :   }
; 761  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 762  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzi1RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi1RegDisp);

	mov	edx, DWORD PTR _rzi1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzi1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 763  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 764  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 765  :   vars->codeCache->X86Emit_ANDIM(~(1UL << 1), x86MemPtr_dword, (uint32)&(vars->mpe->intctl));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 428				; 000001acH
	push	eax
	push	2
	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 766  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 767  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 768  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTI1Conditional
_TEXT	ENDS
PUBLIC	?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTI1Conditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzi1RegDisp$ = -8					; size = 4
_rzi1RegReadBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTI1Conditional_NOP

; 771  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 772  :   x86BaseReg rzi1RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI1);

	push	8
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi1RegReadBaseReg$[ebp], eax

; 773  :   int32 rzi1RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI1);

	push	8
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi1RegDisp$[ebp], eax

; 774  : 
; 775  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 776  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 777  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 778  : 
; 779  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 780  : 
; 781  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN2@Emit_RTI1C@2

; 782  :   {
; 783  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 784  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 785  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN2@Emit_RTI1C@2:

; 786  :   }
; 787  :   if(nuance.fields[FIELD_ECU_CONDITION] != ECU_CONDITION_T)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN1@Emit_RTI1C@2

; 788  :   {
; 789  :     EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H
$LN1@Emit_RTI1C@2:

; 790  :   }
; 791  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 792  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzi1RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi1RegDisp);

	mov	edx, DWORD PTR _rzi1RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzi1RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 793  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 794  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 795  :   vars->codeCache->X86Emit_ANDIM(~(1UL << 1), x86MemPtr_dword, (uint32)&(vars->mpe->intctl));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 428				; 000001acH
	push	eax
	push	2
	push	-3					; fffffffdH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 796  :   Emit_ExitBlock(vars);

	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 797  : 
; 798  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 799  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 800  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTI1Conditional_NOP
_TEXT	ENDS
PUBLIC	?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTI2Conditional
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzi2RegDisp$ = -8					; size = 4
_rzi2RegReadBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTI2Conditional

; 803  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 804  :   x86BaseReg rzi2RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi2RegReadBaseReg$[ebp], eax

; 805  :   int32 rzi2RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi2RegDisp$[ebp], eax

; 806  : 
; 807  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 808  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 809  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 810  : 
; 811  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 812  : 
; 813  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN2@Emit_RTI2C

; 814  :   {
; 815  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 816  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 817  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN2@Emit_RTI2C:

; 818  :   }
; 819  :   if(nuance.fields[FIELD_ECU_CONDITION] != ECU_CONDITION_T)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN1@Emit_RTI2C

; 820  :   {
; 821  :     EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H
$LN1@Emit_RTI2C:

; 822  :   }
; 823  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 824  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzi2RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi2RegDisp);

	mov	edx, DWORD PTR _rzi2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzi2RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 825  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 826  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 827  :   vars->codeCache->X86Emit_ANDIM(~(1UL << 5), x86MemPtr_dword, (uint32)&(vars->mpe->intctl));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 428				; 000001acH
	push	eax
	push	2
	push	-33					; ffffffdfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 828  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 829  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 830  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTI2Conditional
_TEXT	ENDS
PUBLIC	?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RTI2Conditional_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_l_condition_true$ = -20				; size = 4
_l_skip_ecu$ = -16					; size = 4
_address$ = -12						; size = 4
_rzi2RegDisp$ = -8					; size = 4
_rzi2RegReadBaseReg$ = -4				; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RTI2Conditional_NOP

; 833  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 834  :   x86BaseReg rzi2RegReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RZI2);

	push	9
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rzi2RegReadBaseReg$[ebp], eax

; 835  :   int32 rzi2RegDisp = GetMiscRegEmitDisp(vars,REGINDEX_RZI2);

	push	9
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rzi2RegDisp$[ebp], eax

; 836  : 
; 837  :   uint32 address = nuance.fields[FIELD_ECU_ADDRESS];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address$[ebp], eax

; 838  :   uint32 l_skip_ecu = 0;

	mov	DWORD PTR _l_skip_ecu$[ebp], 0

; 839  :   uint32 l_condition_true = 1;

	mov	DWORD PTR _l_condition_true$[ebp], 1

; 840  : 
; 841  :   vars->patchMgr->Reset();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 842  : 
; 843  :   if(vars->bCheckECUSkipCounter)

	mov	edx, DWORD PTR _vars$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN2@Emit_RTI2C@2

; 844  :   {
; 845  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 576				; 00000240H
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 846  :     vars->codeCache->X86Emit_TESTRR(x86Reg_eax, x86Reg_eax);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR

; 847  :     vars->codeCache->X86Emit_JCC_Label(vars->patchMgr, X86_CC_NZ, l_skip_ecu);

	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	push	5
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
$LN2@Emit_RTI2C@2:

; 848  :   }
; 849  :   if(nuance.fields[FIELD_ECU_CONDITION] != ECU_CONDITION_T)

	mov	eax, DWORD PTR _nuance$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN1@Emit_RTI2C@2

; 850  :   {
; 851  :     EmitConditionCheck(vars, nuance.fields[FIELD_ECU_CONDITION], l_skip_ecu, l_condition_true);

	mov	ecx, DWORD PTR _l_condition_true$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l_skip_ecu$[ebp]
	push	edx
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?EmitConditionCheck@@YAXPAVEmitterVariables@@III@Z ; EmitConditionCheck
	add	esp, 16					; 00000010H
$LN1@Emit_RTI2C@2:

; 852  :   }
; 853  :   vars->patchMgr->SetLabelPointer(l_condition_true, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_condition_true$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 854  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rzi2RegReadBaseReg, x86IndexReg_none, x86Scale_1, rzi2RegDisp);

	mov	edx, DWORD PTR _rzi2RegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rzi2RegReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 855  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, (uint32)&(vars->mpe->pcfetchnext));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 564				; 00000234H
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM

; 856  :   vars->codeCache->X86Emit_MOVIM(1, x86MemPtr_dword, (uint32)&(vars->mpe->ecuSkipCounter));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 576				; 00000240H
	push	eax
	push	2
	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM

; 857  :   vars->codeCache->X86Emit_ANDIM(~(1UL << 5), x86MemPtr_dword, (uint32)&(vars->mpe->intctl));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 428				; 000001acH
	push	eax
	push	2
	push	-33					; ffffffdfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM

; 858  :   Emit_ExitBlock(vars);

	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?Emit_ExitBlock@@YAXPAVEmitterVariables@@@Z ; Emit_ExitBlock
	add	esp, 4

; 859  : 
; 860  :   vars->patchMgr->SetLabelPointer(l_skip_ecu, vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	eax, DWORD PTR _l_skip_ecu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 861  :   vars->patchMgr->ApplyPatches();

	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 862  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RTI2Conditional_NOP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\bios.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?SetISRExitHook@@YAXPAVMPE@@@Z			; SetISRExitHook
PUBLIC	?KPrintf@@YAXPAVMPE@@@Z				; KPrintf
PUBLIC	?PatchJumptable@@YAXPAVMPE@@@Z			; PatchJumptable
PUBLIC	?UnimplementedMediaHandler@@YAXPAVMPE@@@Z	; UnimplementedMediaHandler
PUBLIC	?BiosPauseMsg@@YAXPAVMPE@@@Z			; BiosPauseMsg
PUBLIC	?BiosPoll@@YAXPAVMPE@@@Z			; BiosPoll
PUBLIC	?BiosExit@@YAXPAVMPE@@@Z			; BiosExit
PUBLIC	?InitBios@@YAXPAVMPE@@@Z			; InitBios
PUBLIC	?IntGetVector@@YAXPAVMPE@@@Z			; IntGetVector
PUBLIC	?IntSetVector@@YAXPAVMPE@@@Z			; IntSetVector
PUBLIC	?UnimplementedCacheHandler@@YAXPAVMPE@@@Z	; UnimplementedCacheHandler
PUBLIC	?NullBiosHandler@@YAXPAVMPE@@@Z			; NullBiosHandler
PUBLIC	?AssemblyBiosHandler@@YAXPAVMPE@@@Z		; AssemblyBiosHandler
PUBLIC	?InterruptVectors@@3PAIA			; InterruptVectors
PUBLIC	?BiosRoutineNames@@3PAPADA			; BiosRoutineNames
PUBLIC	?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA		; BiosJumpTable
EXTRN	?MPEStatus@@YAXPAVMPE@@@Z:PROC			; MPEStatus
EXTRN	?SetDefaultColor@@YAXPAVMPE@@@Z:PROC		; SetDefaultColor
EXTRN	?MPERunThread@@YAXPAVMPE@@@Z:PROC		; MPERunThread
EXTRN	?DeviceDetect@@YAXPAVMPE@@@Z:PROC		; DeviceDetect
EXTRN	?MediaShutdownMPE@@YAXPAVMPE@@@Z:PROC		; MediaShutdownMPE
EXTRN	?MediaInitMPE@@YAXPAVMPE@@@Z:PROC		; MediaInitMPE
EXTRN	?MPELoad@@YAXPAVMPE@@@Z:PROC			; MPELoad
EXTRN	?MPEWriteRegister@@YAXPAVMPE@@@Z:PROC		; MPEWriteRegister
EXTRN	?MPEReadRegister@@YAXPAVMPE@@@Z:PROC		; MPEReadRegister
EXTRN	?MPERun@@YAXPAVMPE@@@Z:PROC			; MPERun
EXTRN	?MPEStop@@YAXPAVMPE@@@Z:PROC			; MPEStop
EXTRN	?DMADo@@YAXPAVMPE@@@Z:PROC			; DMADo
EXTRN	?DMAWait@@YAXPAVMPE@@@Z:PROC			; DMAWait
EXTRN	?SpinWait@@YAXPAVMPE@@@Z:PROC			; SpinWait
EXTRN	?MediaIoctl@@YAXPAVMPE@@@Z:PROC			; MediaIoctl
EXTRN	?MediaWrite@@YAXPAVMPE@@@Z:PROC			; MediaWrite
EXTRN	?MediaRead@@YAXPAVMPE@@@Z:PROC			; MediaRead
EXTRN	?MediaGetInfo@@YAXPAVMPE@@@Z:PROC		; MediaGetInfo
EXTRN	?MediaGetDevicesAvailable@@YAXPAVMPE@@@Z:PROC	; MediaGetDevicesAvailable
EXTRN	?MediaClose@@YAXPAVMPE@@@Z:PROC			; MediaClose
EXTRN	?MediaOpen@@YAXPAVMPE@@@Z:PROC			; MediaOpen
EXTRN	?FileUnlink@@YAXPAVMPE@@@Z:PROC			; FileUnlink
EXTRN	?FileLstat@@YAXPAVMPE@@@Z:PROC			; FileLstat
EXTRN	?FileLink@@YAXPAVMPE@@@Z:PROC			; FileLink
EXTRN	?FileLseek@@YAXPAVMPE@@@Z:PROC			; FileLseek
EXTRN	?FileIsatty@@YAXPAVMPE@@@Z:PROC			; FileIsatty
EXTRN	?FileStat@@YAXPAVMPE@@@Z:PROC			; FileStat
EXTRN	?FileFstat@@YAXPAVMPE@@@Z:PROC			; FileFstat
EXTRN	?FileIoctl@@YAXPAVMPE@@@Z:PROC			; FileIoctl
EXTRN	?FileWrite@@YAXPAVMPE@@@Z:PROC			; FileWrite
EXTRN	?FileRead@@YAXPAVMPE@@@Z:PROC			; FileRead
EXTRN	?FileClose@@YAXPAVMPE@@@Z:PROC			; FileClose
EXTRN	?FileOpen@@YAXPAVMPE@@@Z:PROC			; FileOpen
EXTRN	?DMABiLinear@@YAXPAVMPE@@@Z:PROC		; DMABiLinear
EXTRN	?DMALinear@@YAXPAVMPE@@@Z:PROC			; DMALinear
EXTRN	?MemLocalScratch@@YAXPAVMPE@@@Z:PROC		; MemLocalScratch
EXTRN	?MemFree@@YAXPAVMPE@@@Z:PROC			; MemFree
EXTRN	?MemAlloc@@YAXPAVMPE@@@Z:PROC			; MemAlloc
EXTRN	?MemInit@@YAXPAVMPE@@@Z:PROC			; MemInit
EXTRN	?AudioSetDMABuffer@@YAXPAVMPE@@@Z:PROC		; AudioSetDMABuffer
EXTRN	?AudioMute@@YAXPAVMPE@@@Z:PROC			; AudioMute
EXTRN	?AudioReset@@YAXPAVMPE@@@Z:PROC			; AudioReset
EXTRN	?AudioSetSampleRate@@YAXPAVMPE@@@Z:PROC		; AudioSetSampleRate
EXTRN	?AudioQuerySampleRates@@YAXPAVMPE@@@Z:PROC	; AudioQuerySampleRates
EXTRN	?AudioSetChannelMode@@YAXPAVMPE@@@Z:PROC	; AudioSetChannelMode
EXTRN	?AudioQueryChannelMode@@YAXPAVMPE@@@Z:PROC	; AudioQueryChannelMode
EXTRN	?VidSetCLUTRange@@YAXPAVMPE@@@Z:PROC		; VidSetCLUTRange
EXTRN	?VidChangeScroll@@YAXPAVMPE@@@Z:PROC		; VidChangeScroll
EXTRN	?VidChangeBase@@YAXPAVMPE@@@Z:PROC		; VidChangeBase
EXTRN	?VidQueryConfig@@YAXPAVMPE@@@Z:PROC		; VidQueryConfig
EXTRN	?VidConfig@@YAXPAVMPE@@@Z:PROC			; VidConfig
EXTRN	?VidSetup@@YAXPAVMPE@@@Z:PROC			; VidSetup
EXTRN	?MPEsAvailable@@YAXPAVMPE@@@Z:PROC		; MPEsAvailable
EXTRN	?MPEFree@@YAXPAVMPE@@@Z:PROC			; MPEFree
EXTRN	?MPEAllocSpecific@@YAXPAVMPE@@@Z:PROC		; MPEAllocSpecific
EXTRN	?MPEAlloc@@YAXPAVMPE@@@Z:PROC			; MPEAlloc
EXTRN	?TimeElapsed@@YAXPAVMPE@@@Z:PROC		; TimeElapsed
EXTRN	?TimerInit@@YAXPAVMPE@@@Z:PROC			; TimerInit
EXTRN	?TimeOfDay@@YAXPAVMPE@@@Z:PROC			; TimeOfDay
EXTRN	?ControllerInitialize@@YAXPAVMPE@@@Z:PROC	; ControllerInitialize
_BSS	SEGMENT
?InterruptVectors@@3PAIA DD 01H DUP (?)			; InterruptVectors
_BSS	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG67109
	ORG $+4
?BiosRoutineNames@@3PAPADA DD FLAT:$SG77885		; BiosRoutineNames
	DD	FLAT:$SG77886
	DD	FLAT:$SG77887
	DD	FLAT:$SG77888
	DD	FLAT:$SG77889
	DD	FLAT:$SG77890
	DD	FLAT:$SG77891
	DD	FLAT:$SG77892
	DD	FLAT:$SG77893
	DD	FLAT:$SG77894
	DD	FLAT:$SG77895
	DD	FLAT:$SG77896
	DD	FLAT:$SG77897
	DD	FLAT:$SG77898
	DD	FLAT:$SG77899
	DD	FLAT:$SG77900
	DD	FLAT:$SG77901
	DD	FLAT:$SG77902
	DD	FLAT:$SG77903
	DD	FLAT:$SG77904
	DD	FLAT:$SG77905
	DD	FLAT:$SG77906
	DD	FLAT:$SG77907
	DD	FLAT:$SG77908
	DD	FLAT:$SG77909
	DD	FLAT:$SG77910
	DD	FLAT:$SG77911
	DD	FLAT:$SG77912
	DD	FLAT:$SG77913
	DD	FLAT:$SG77914
	DD	FLAT:$SG77915
	DD	FLAT:$SG77916
	DD	FLAT:$SG77917
	DD	FLAT:$SG77918
	DD	FLAT:$SG77919
	DD	FLAT:$SG77920
	DD	FLAT:$SG77921
	DD	FLAT:$SG77922
	DD	FLAT:$SG77923
	DD	FLAT:$SG77924
	DD	FLAT:$SG77925
	DD	FLAT:$SG77926
	DD	FLAT:$SG77927
	DD	FLAT:$SG77928
	DD	FLAT:$SG77929
	DD	FLAT:$SG77930
	DD	FLAT:$SG77931
	DD	FLAT:$SG77932
	DD	FLAT:$SG77933
	DD	FLAT:$SG77934
	DD	FLAT:$SG77935
	DD	FLAT:$SG77936
	DD	FLAT:$SG77937
	DD	FLAT:$SG77938
	DD	FLAT:$SG77939
	DD	FLAT:$SG77940
	DD	FLAT:$SG77941
	DD	FLAT:$SG77942
	DD	FLAT:$SG77943
	DD	FLAT:$SG77944
	DD	FLAT:$SG77945
	DD	FLAT:$SG77946
	DD	FLAT:$SG77947
	DD	FLAT:$SG77948
	DD	FLAT:$SG77949
	DD	FLAT:$SG77950
	DD	FLAT:$SG77951
	DD	FLAT:$SG77952
	DD	FLAT:$SG77953
	DD	FLAT:$SG77954
	DD	FLAT:$SG77955
	DD	FLAT:$SG77956
	DD	FLAT:$SG77957
	DD	FLAT:$SG77958
	DD	FLAT:$SG77959
	DD	FLAT:$SG77960
	DD	FLAT:$SG77961
	DD	FLAT:$SG77962
	DD	FLAT:$SG77963
	DD	FLAT:$SG77964
	DD	FLAT:$SG77965
	DD	FLAT:$SG77966
	DD	FLAT:$SG77967
	DD	FLAT:$SG77968
	DD	FLAT:$SG77969
	DD	FLAT:$SG77970
	DD	FLAT:$SG77971
	DD	FLAT:$SG77972
	DD	FLAT:$SG77973
	DD	FLAT:$SG77974
	DD	FLAT:$SG77975
	DD	FLAT:$SG77976
	DD	FLAT:$SG77977
	DD	FLAT:$SG77978
	DD	FLAT:$SG77979
	DD	FLAT:$SG77980
	DD	FLAT:$SG77981
	DD	FLAT:$SG77982
	DD	FLAT:$SG77983
	DD	FLAT:$SG77984
	DD	FLAT:$SG77985
	DD	FLAT:$SG77986
	DD	FLAT:$SG77987
	DD	FLAT:$SG77988
	DD	FLAT:$SG77989
	DD	FLAT:$SG77990
	DD	FLAT:$SG77991
	DD	FLAT:$SG77992
	DD	FLAT:$SG77993
	DD	FLAT:$SG77994
	DD	FLAT:$SG77995
	DD	FLAT:$SG77996
	DD	FLAT:$SG77997
	DD	FLAT:$SG77998
	DD	FLAT:$SG77999
	DD	FLAT:$SG78000
	DD	FLAT:$SG78001
	DD	FLAT:$SG78002
	DD	FLAT:$SG78003
	DD	FLAT:$SG78004
	DD	FLAT:$SG78005
	DD	FLAT:$SG78006
	DD	FLAT:$SG78007
	DD	FLAT:$SG78008
	DD	FLAT:$SG78009
	DD	FLAT:$SG78010
	DD	FLAT:$SG78011
	DD	FLAT:$SG78012
	DD	FLAT:$SG78013
	DD	FLAT:$SG78014
	DD	FLAT:$SG78015
	DD	FLAT:$SG78016
	DD	FLAT:$SG78017
	DD	FLAT:$SG78018
	DD	FLAT:$SG78019
	DD	FLAT:$SG78020
	DD	FLAT:$SG78021
	DD	FLAT:$SG78022
	DD	FLAT:$SG78023
	DD	FLAT:$SG78024
	DD	FLAT:$SG78025
	DD	FLAT:$SG78026
	DD	FLAT:$SG78027
	DD	FLAT:$SG78028
	DD	FLAT:$SG78029
	DD	FLAT:$SG78030
	DD	FLAT:$SG78031
	DD	FLAT:$SG78032
	DD	FLAT:$SG78033
	DD	FLAT:$SG78034
	DD	FLAT:$SG78035
	ORG $+1444
?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA DD FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z ; BiosJumpTable
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?ControllerInitialize@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?TimeOfDay@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedCacheHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedCacheHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedCacheHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedCacheHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?TimerInit@@YAXPAVMPE@@@Z
	DD	FLAT:?TimeElapsed@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEAlloc@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEAllocSpecific@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEFree@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEsAvailable@@YAXPAVMPE@@@Z
	DD	FLAT:?IntSetVector@@YAXPAVMPE@@@Z
	DD	FLAT:?IntGetVector@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?VidSetup@@YAXPAVMPE@@@Z
	DD	FLAT:?VidConfig@@YAXPAVMPE@@@Z
	DD	FLAT:?VidQueryConfig@@YAXPAVMPE@@@Z
	DD	FLAT:?VidChangeBase@@YAXPAVMPE@@@Z
	DD	FLAT:?VidChangeScroll@@YAXPAVMPE@@@Z
	DD	FLAT:?VidSetCLUTRange@@YAXPAVMPE@@@Z
	DD	FLAT:?InitBios@@YAXPAVMPE@@@Z
	DD	FLAT:?BiosExit@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?BiosPoll@@YAXPAVMPE@@@Z
	DD	FLAT:?BiosPauseMsg@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioQueryChannelMode@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioSetChannelMode@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioQuerySampleRates@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioSetSampleRate@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioReset@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioMute@@YAXPAVMPE@@@Z
	DD	FLAT:?AudioSetDMABuffer@@YAXPAVMPE@@@Z
	DD	FLAT:?MemInit@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MemAlloc@@YAXPAVMPE@@@Z
	DD	FLAT:?MemFree@@YAXPAVMPE@@@Z
	DD	FLAT:?MemLocalScratch@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?DMALinear@@YAXPAVMPE@@@Z
	DD	FLAT:?DMABiLinear@@YAXPAVMPE@@@Z
	DD	FLAT:?FileOpen@@YAXPAVMPE@@@Z
	DD	FLAT:?FileClose@@YAXPAVMPE@@@Z
	DD	FLAT:?FileRead@@YAXPAVMPE@@@Z
	DD	FLAT:?FileWrite@@YAXPAVMPE@@@Z
	DD	FLAT:?FileIoctl@@YAXPAVMPE@@@Z
	DD	FLAT:?FileFstat@@YAXPAVMPE@@@Z
	DD	FLAT:?FileStat@@YAXPAVMPE@@@Z
	DD	FLAT:?FileIsatty@@YAXPAVMPE@@@Z
	DD	FLAT:?FileLseek@@YAXPAVMPE@@@Z
	DD	FLAT:?FileLink@@YAXPAVMPE@@@Z
	DD	FLAT:?FileLstat@@YAXPAVMPE@@@Z
	DD	FLAT:?FileUnlink@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaOpen@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaClose@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaGetDevicesAvailable@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaGetInfo@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedMediaHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaRead@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaWrite@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaIoctl@@YAXPAVMPE@@@Z
	DD	FLAT:?SpinWait@@YAXPAVMPE@@@Z
	DD	FLAT:?UnimplementedCacheHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?DMAWait@@YAXPAVMPE@@@Z
	DD	FLAT:?DMADo@@YAXPAVMPE@@@Z
	DD	FLAT:?PatchJumptable@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEStop@@YAXPAVMPE@@@Z
	DD	FLAT:?MPERun@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEReadRegister@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEWriteRegister@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?AssemblyBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MPELoad@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaInitMPE@@YAXPAVMPE@@@Z
	DD	FLAT:?MediaShutdownMPE@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?DeviceDetect@@YAXPAVMPE@@@Z
	DD	FLAT:?MPERunThread@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?SetDefaultColor@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?MPEStatus@@YAXPAVMPE@@@Z
	DD	FLAT:?KPrintf@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	DD	FLAT:?SetISRExitHook@@YAXPAVMPE@@@Z
	DD	FLAT:?NullBiosHandler@@YAXPAVMPE@@@Z
	ORG $+420
_DATA	ENDS
CONST	SEGMENT
$SG67109 DB	'bad allocation', 00H
	ORG $+1
$SG77885 DB	'CommSend', 00H
	ORG $+3
$SG77886 DB	'CommSendInfo', 00H
	ORG $+3
$SG77887 DB	'CommRecvInfo', 00H
	ORG $+3
$SG77888 DB	'CommRecvInfoQuery', 00H
	ORG $+2
$SG77889 DB	'CommSendRecv', 00H
	ORG $+3
$SG77890 DB	'CommSendRecvInfo', 00H
	ORG $+3
$SG77891 DB	'ControllerInitialize', 00H
	ORG $+3
$SG77892 DB	'ControllerExtendedInfo', 00H
	ORG $+1
$SG77893 DB	'TimeOfDay', 00H
	ORG $+2
$SG77894 DB	'DCacheSyncRegion', 00H
	ORG $+3
$SG77895 DB	'DCacheSync', 00H
	ORG $+1
$SG77896 DB	'DCacheInvalidateRegion', 00H
	ORG $+1
$SG77897 DB	'DCacheFlush', 00H
$SG77898 DB	'TimerInit', 00H
	ORG $+2
$SG77899 DB	'TimeElapsed', 00H
$SG77900 DB	'TimeToSleep', 00H
$SG77901 DB	'MPEAlloc', 00H
	ORG $+3
$SG77902 DB	'MPEAllocSpecific', 00H
	ORG $+3
$SG77903 DB	'MPEFree', 00H
$SG77904 DB	'MPEsAvailable', 00H
	ORG $+2
$SG77905 DB	'IntSetVectorX', 00H
	ORG $+2
$SG77906 DB	'IntGetVector', 00H
	ORG $+3
$SG77907 DB	'VidSync', 00H
$SG77908 DB	'VidSetup', 00H
	ORG $+3
$SG77909 DB	'VidConfig', 00H
	ORG $+2
$SG77910 DB	'VidQueryConfig', 00H
	ORG $+1
$SG77911 DB	'VidChangeBase', 00H
	ORG $+2
$SG77912 DB	'VidChangeScroll', 00H
$SG77913 DB	'VidSetCLUTRange', 00H
$SG77914 DB	'BiosInit', 00H
	ORG $+3
$SG77915 DB	'BiosExit', 00H
	ORG $+3
$SG77916 DB	'BiosReboot', 00H
	ORG $+1
$SG77917 DB	'BiosPoll', 00H
	ORG $+3
$SG77918 DB	'BiosPauseMsg', 00H
	ORG $+3
$SG77919 DB	'AudioQueryChannelMode', 00H
	ORG $+2
$SG77920 DB	'AudioSetChannelMode', 00H
$SG77921 DB	'AudioQuerySampleRate', 00H
	ORG $+3
$SG77922 DB	'AudioSetSampleRate', 00H
	ORG $+1
$SG77923 DB	'AudioReset', 00H
	ORG $+1
$SG77924 DB	'AudioMute', 00H
	ORG $+2
$SG77925 DB	'AudioSetDMABuffer', 00H
	ORG $+2
$SG77926 DB	'MemInit', 00H
$SG77927 DB	'MemAdd', 00H
	ORG $+1
$SG77928 DB	'MemAlloc', 00H
	ORG $+3
$SG77929 DB	'MemFree', 00H
$SG77930 DB	'MemLocalScratch', 00H
$SG77931 DB	'MemLoadCoffX', 00H
	ORG $+3
$SG77932 DB	'DownloadCoff', 00H
	ORG $+3
$SG77933 DB	'StreamLoadCoff', 00H
	ORG $+1
$SG77934 DB	'DMALinear', 00H
	ORG $+2
$SG77935 DB	'DMABiLinear', 00H
$SG77936 DB	'FileOpen', 00H
	ORG $+3
$SG77937 DB	'FileClose', 00H
	ORG $+2
$SG77938 DB	'FileRead', 00H
	ORG $+3
$SG77939 DB	'FileWrite', 00H
	ORG $+2
$SG77940 DB	'FileIoctl', 00H
	ORG $+2
$SG77941 DB	'FileFstat', 00H
	ORG $+2
$SG77942 DB	'FileStat', 00H
	ORG $+3
$SG77943 DB	'FileIsatty', 00H
	ORG $+1
$SG77944 DB	'FileLseek', 00H
	ORG $+2
$SG77945 DB	'FileLink', 00H
	ORG $+3
$SG77946 DB	'FileLstat', 00H
	ORG $+2
$SG77947 DB	'FileUnlink', 00H
	ORG $+1
$SG77948 DB	'NetAccept', 00H
	ORG $+2
$SG77949 DB	'NetBind', 00H
$SG77950 DB	'NetConnect', 00H
	ORG $+1
$SG77951 DB	'NetGethostname', 00H
	ORG $+1
$SG77952 DB	'NetGetpeername', 00H
	ORG $+1
$SG77953 DB	'NetGetsockname', 00H
	ORG $+1
$SG77954 DB	'NetGetsockopt', 00H
	ORG $+2
$SG77955 DB	'NetListen', 00H
	ORG $+2
$SG77956 DB	'NetRecv', 00H
$SG77957 DB	'NetRecvfrom', 00H
$SG77958 DB	'NetRecvmsg', 00H
	ORG $+1
$SG77959 DB	'NetSend', 00H
$SG77960 DB	'NetSendmsg', 00H
	ORG $+1
$SG77961 DB	'NetSendto', 00H
	ORG $+2
$SG77962 DB	'NetSethostname', 00H
	ORG $+1
$SG77963 DB	'NetSetsockopt', 00H
	ORG $+2
$SG77964 DB	'NetShutdown', 00H
$SG77965 DB	'NetSocket', 00H
	ORG $+2
$SG77966 DB	'CommSendDirect', 00H
	ORG $+1
$SG77967 DB	'comm_recv', 00H
	ORG $+2
$SG77968 DB	'comm_query', 00H
	ORG $+1
$SG77969 DB	'_serial_delay', 00H
	ORG $+2
$SG77970 DB	'_serial_read', 00H
	ORG $+3
$SG77971 DB	'_serial_write', 00H
	ORG $+2
$SG77972 DB	'_serial_write_direct', 00H
	ORG $+3
$SG77973 DB	'MediaOpen', 00H
	ORG $+2
$SG77974 DB	'MediaClose', 00H
	ORG $+1
$SG77975 DB	'MediaGetDevicesAvailable', 00H
	ORG $+3
$SG77976 DB	'MediaGetInfo', 00H
	ORG $+3
$SG77977 DB	'MediaGetStatus', 00H
	ORG $+1
$SG77978 DB	'MediaRead', 00H
	ORG $+2
$SG77979 DB	'MediaWrite', 00H
	ORG $+1
$SG77980 DB	'MediaIoctl', 00H
	ORG $+1
$SG77981 DB	'spinwait', 00H
	ORG $+3
$SG77982 DB	'CacheConfigX', 00H
	ORG $+3
$SG77983 DB	'LoadGame', 00H
	ORG $+3
$SG77984 DB	'LoadPE', 00H
	ORG $+1
$SG77985 DB	'Dma_wait', 00H
	ORG $+3
$SG77986 DB	'Dma_do', 00H
	ORG $+1
$SG77987 DB	'PatchJumptable', 00H
	ORG $+1
$SG77988 DB	'BiosResume', 00H
	ORG $+1
$SG77989 DB	'MPEStop', 00H
$SG77990 DB	'MPERun', 00H
	ORG $+1
$SG77991 DB	'MPEWait', 00H
$SG77992 DB	'MPEReadRegister', 00H
$SG77993 DB	'MPEWriteRegister', 00H
	ORG $+3
$SG77994 DB	'SetParentalControl', 00H
	ORG $+1
$SG77995 DB	'GetParentalControl', 00H
	ORG $+1
$SG77996 DB	'BiosGetInfo', 00H
$SG77997 DB	'LoadTest', 00H
	ORG $+3
$SG77998 DB	'MPELoad', 00H
$SG77999 DB	'MPEAllocThread', 00H
	ORG $+1
$SG78000 DB	'MediaInitMPE', 00H
	ORG $+3
$SG78001 DB	'MediaShutdownMPE', 00H
	ORG $+3
$SG78002 DB	'SecureForPE', 00H
$SG78003 DB	'StartImageValid', 00H
$SG78004 DB	'SetStartImage', 00H
	ORG $+2
$SG78005 DB	'GetStartImage', 00H
	ORG $+2
$SG78006 DB	'FindName', 00H
	ORG $+3
$SG78007 DB	'DeviceDetect', 00H
	ORG $+3
$SG78008 DB	'MPERunThread', 00H
	ORG $+3
$SG78009 DB	'BiosIRMask', 00H
	ORG $+1
$SG78010 DB	'DiskChange', 00H
	ORG $+1
$SG78011 DB	'DiskGetTotalSlots', 00H
	ORG $+2
$SG78012 DB	'pf_add_driver', 00H
	ORG $+2
$SG78013 DB	'SetDefaultColor', 00H
$SG78014 DB	'DisplayBootImage', 00H
	ORG $+3
$SG78015 DB	'serial_write_cmd', 00H
	ORG $+3
$SG78016 DB	'GetMemDevice', 00H
	ORG $+3
$SG78017 DB	'WriteMemDevSector', 00H
	ORG $+2
$SG78018 DB	'ReadMemDev', 00H
	ORG $+1
$SG78019 DB	'AttachFsDevice', 00H
	ORG $+1
$SG78020 DB	'DiskEject', 00H
	ORG $+2
$SG78021 DB	'DiskRetract', 00H
$SG78022 DB	'GetSystemSettingsB', 00H
	ORG $+1
$SG78023 DB	'GetSystemSetting?', 00H
	ORG $+2
$SG78024 DB	'SetSystemSetting??', 00H
	ORG $+1
$SG78025 DB	'GetSystemSettingLe', 00H
	ORG $+1
$SG78026 DB	'LoadSystemSettings', 00H
	ORG $+1
$SG78027 DB	'StoreSystemSetting', 00H
	ORG $+1
$SG78028 DB	'mount', 00H
	ORG $+2
$SG78029 DB	'MPEStatus', 00H
	ORG $+2
$SG78030 DB	'kprintf', 00H
$SG78031 DB	'ControllerPollRate', 00H
	ORG $+1
$SG78032 DB	'VidSetOutputType', 00H
	ORG $+3
$SG78033 DB	'LoadDefaultSystemSettings', 00H
	ORG $+2
$SG78034 DB	'SetISRExitHook', 00H
	ORG $+1
$SG78035 DB	'CompatibilityMode', 00H
	ORG $+2
$SG78042 DB	'Unimplemented Media Routine', 00H
$SG78043 DB	'This BIOS Handler does nothing', 00H
	ORG $+1
$SG78050 DB	'Unimplemented Comm Routine', 00H
	ORG $+1
$SG78051 DB	'This BIOS Handler does nothing', 00H
	ORG $+1
$SG78156 DB	'bios.cof', 00H
	ORG $+3
$SG78158 DB	'Could not load bios.cof', 00H
$SG78159 DB	'Missing File!', 00H
CONST	ENDS
PUBLIC	?UnimplementedFileHandler@@YAXPAVMPE@@@Z	; UnimplementedFileHandler
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\bios.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
?UnimplementedFileHandler@@YAXPAVMPE@@@Z PROC		; UnimplementedFileHandler

; 186  : {

	push	ebp
	mov	ebp, esp

; 187  :   //::MessageBox(NULL,"This BIOS Handler does nothing","Unimplemented File Routine",MB_OK);
; 188  : }

	pop	ebp
	ret	0
?UnimplementedFileHandler@@YAXPAVMPE@@@Z ENDP		; UnimplementedFileHandler
_TEXT	ENDS
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
?UnimplementedMediaHandler@@YAXPAVMPE@@@Z PROC		; UnimplementedMediaHandler

; 191  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 192  :   MessageBox(NULL,"This BIOS Handler does nothing","Unimplemented Media Routine",MB_OK);

	mov	esi, esp
	push	0
	push	OFFSET $SG78042
	push	OFFSET $SG78043
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 193  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?UnimplementedMediaHandler@@YAXPAVMPE@@@Z ENDP		; UnimplementedMediaHandler
; Function compile flags: /Odtp /RTCsu
_mpe$ = 8						; size = 4
?UnimplementedCacheHandler@@YAXPAVMPE@@@Z PROC		; UnimplementedCacheHandler

; 196  : {

	push	ebp
	mov	ebp, esp

; 197  :   //::MessageBox(NULL,"This BIOS Handler does nothing","Unimplemented Cache Routine",MB_OK);
; 198  : }

	pop	ebp
	ret	0
?UnimplementedCacheHandler@@YAXPAVMPE@@@Z ENDP		; UnimplementedCacheHandler
_TEXT	ENDS
PUBLIC	?UnimplementedCommHandler@@YAXPAVMPE@@@Z	; UnimplementedCommHandler
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
?UnimplementedCommHandler@@YAXPAVMPE@@@Z PROC		; UnimplementedCommHandler

; 201  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 202  :   MessageBox(NULL,"This BIOS Handler does nothing","Unimplemented Comm Routine",MB_OK);

	mov	esi, esp
	push	0
	push	OFFSET $SG78050
	push	OFFSET $SG78051
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 203  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?UnimplementedCommHandler@@YAXPAVMPE@@@Z ENDP		; UnimplementedCommHandler
; Function compile flags: /Odtp /RTCsu
_mpe$ = 8						; size = 4
?NullBiosHandler@@YAXPAVMPE@@@Z PROC			; NullBiosHandler

; 206  : {

	push	ebp
	mov	ebp, esp

; 207  :   //char msg[512];
; 208  :   //sprintf(msg,"This BIOS Handler does nothing: %ld",(mpe->pcexec >> 1) & 0xFFUL);
; 209  :   //::MessageBox(NULL,msg,"Unimplemented BIOS Routine",MB_OK);
; 210  :   return;
; 211  : }

	pop	ebp
	ret	0
?NullBiosHandler@@YAXPAVMPE@@@Z ENDP			; NullBiosHandler
; Function compile flags: /Odtp /RTCsu
_mpe$ = 8						; size = 4
?AssemblyBiosHandler@@YAXPAVMPE@@@Z PROC		; AssemblyBiosHandler

; 214  : {

	push	ebp
	mov	ebp, esp

; 215  :   return;
; 216  : }

	pop	ebp
	ret	0
?AssemblyBiosHandler@@YAXPAVMPE@@@Z ENDP		; AssemblyBiosHandler
_TEXT	ENDS
EXTRN	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z:PROC ; NuonEnvironment::GetPointerToMemory
EXTRN	?nuonEnv@@3PAVNuonEnvironment@@A:DWORD		; nuonEnv
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_newvec$ = -12						; size = 4
_mpe$ = 8						; size = 4
?SetISRExitHook@@YAXPAVMPE@@@Z PROC			; SetISRExitHook

; 224  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 225  :   uint32 oldvec;
; 226  :   uint32 newvec;
; 227  : 
; 228  :   newvec = mpe->regs[0];

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _newvec$[ebp], ecx

; 229  : #ifdef LITTLE_ENDIAN
; 230  :   SwapScalarBytes(&newvec);

	lea	ecx, DWORD PTR _newvec$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 231  : #endif
; 232  :   *((uint32 *)nuonEnv->GetPointerToMemory(mpe,ISR_EXIT_HOOK_ADDRESS)) = newvec;

	push	1
	push	-2139095920				; 807ffc90H
	mov	edx, DWORD PTR _mpe$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	ecx, DWORD PTR _newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 233  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetISRExit
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@SetISRExit:
	DD	1
	DD	$LN4@SetISRExit
$LN4@SetISRExit:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@SetISRExit
$LN3@SetISRExit:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
?SetISRExitHook@@YAXPAVMPE@@@Z ENDP			; SetISRExitHook
_TEXT	ENDS
PUBLIC	?InstallCommHandler@@YA_NPAVMPE@@IPAI1@Z	; InstallCommHandler
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_bFound$ = -29						; size = 1
_pHandlers$ = -28					; size = 4
_numHandlers$ = -20					; size = 4
_i$ = -8						; size = 4
_the_mpe$ = 8						; size = 4
_address$ = 12						; size = 4
_handlerList$ = 16					; size = 4
_nHandlers$ = 20					; size = 4
?InstallCommHandler@@YA_NPAVMPE@@IPAI1@Z PROC		; InstallCommHandler

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 237  :   uint32 i;
; 238  :   uint32 numHandlers = *((uint32 *)nuonEnv->GetPointerToMemory(the_mpe,NUM_INSTALLED_COMMRECV_HANDLERS_ADDRESS));

	push	1
	push	-2139095608				; 807ffdc8H
	mov	eax, DWORD PTR _the_mpe$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _numHandlers$[ebp], ecx

; 239  :   uint32 *pHandlers = handlerList;

	mov	edx, DWORD PTR _handlerList$[ebp]
	mov	DWORD PTR _pHandlers$[ebp], edx

; 240  :   bool bFound = false;

	mov	BYTE PTR _bFound$[ebp], 0

; 241  : 
; 242  : #ifdef LITTLE_ENDIAN
; 243  :   SwapScalarBytes(&address);

	lea	ecx, DWORD PTR _address$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 244  :   SwapScalarBytes(&numHandlers);

	lea	ecx, DWORD PTR _numHandlers$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 245  : #endif
; 246  : 
; 247  :   for(i = 0; i < numHandlers; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@InstallCom
$LN7@InstallCom:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@InstallCom:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numHandlers$[ebp]
	jae	SHORT $LN6@InstallCom

; 248  :   {
; 249  :     if(address == *pHandlers)

	mov	edx, DWORD PTR _pHandlers$[ebp]
	mov	eax, DWORD PTR _address$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN5@InstallCom

; 250  :     {
; 251  :       bFound = true;

	mov	BYTE PTR _bFound$[ebp], 1

; 252  :       break;

	jmp	SHORT $LN6@InstallCom
$LN5@InstallCom:

; 253  :     }
; 254  :     pHandlers++;

	mov	ecx, DWORD PTR _pHandlers$[ebp]
	add	ecx, 4
	mov	DWORD PTR _pHandlers$[ebp], ecx

; 255  :   }

	jmp	SHORT $LN7@InstallCom
$LN6@InstallCom:

; 256  : 
; 257  :   //Didn't find it and the list is full
; 258  :   if(i >= MAX_RECV_HANDLERS)

	cmp	DWORD PTR _i$[ebp], 88			; 00000058H
	jb	SHORT $LN4@InstallCom

; 259  :   {
; 260  :     return false;

	xor	al, al
	jmp	$LN9@InstallCom

; 261  :     *nHandlers = MAX_RECV_HANDLERS;

	mov	edx, DWORD PTR _nHandlers$[ebp]
	mov	DWORD PTR [edx], 88			; 00000058H
$LN4@InstallCom:

; 262  :   }
; 263  : 
; 264  :   //Didn't find it in the list and there is room so install it
; 265  :   if(!bFound)

	movzx	eax, BYTE PTR _bFound$[ebp]
	test	eax, eax
	jne	SHORT $LN2@InstallCom

; 266  :   {
; 267  :     *pHandlers = address;

	mov	ecx, DWORD PTR _pHandlers$[ebp]
	mov	edx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [ecx], edx

; 268  :     i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 269  :     *nHandlers = i;

	mov	ecx, DWORD PTR _nHandlers$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx], edx

; 270  : #ifdef LITTLE_ENDIAN
; 271  :   SwapScalarBytes(&i);

	lea	ecx, DWORD PTR _i$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 272  : #endif
; 273  :     *((uint32 *)nuonEnv->GetPointerToMemory(the_mpe,NUM_INSTALLED_COMMRECV_HANDLERS_ADDRESS)) = i;

	push	1
	push	-2139095608				; 807ffdc8H
	mov	eax, DWORD PTR _the_mpe$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx

; 274  :     return true;

	mov	al, 1
	jmp	SHORT $LN9@InstallCom
$LN2@InstallCom:

; 275  :   }
; 276  : 
; 277  :   //Found it in the list so uninstall it, shifting remaining handlers by one
; 278  :   while(i < (MAX_RECV_HANDLERS - 1))

	cmp	DWORD PTR _i$[ebp], 87			; 00000057H
	jae	SHORT $LN1@InstallCom

; 279  :   {
; 280  :     *pHandlers = *(pHandlers+1);

	mov	edx, DWORD PTR _pHandlers$[ebp]
	mov	eax, DWORD PTR _pHandlers$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx

; 281  :     pHandlers++;

	mov	edx, DWORD PTR _pHandlers$[ebp]
	add	edx, 4
	mov	DWORD PTR _pHandlers$[ebp], edx

; 282  :     i++;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 283  :   }

	jmp	SHORT $LN2@InstallCom
$LN1@InstallCom:

; 284  :   *pHandlers = 0;

	mov	ecx, DWORD PTR _pHandlers$[ebp]
	mov	DWORD PTR [ecx], 0

; 285  :   
; 286  :   numHandlers--;

	mov	edx, DWORD PTR _numHandlers$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numHandlers$[ebp], edx

; 287  :   *nHandlers = numHandlers;

	mov	eax, DWORD PTR _nHandlers$[ebp]
	mov	ecx, DWORD PTR _numHandlers$[ebp]
	mov	DWORD PTR [eax], ecx

; 288  : #ifdef LITTLE_ENDIAN
; 289  :   SwapScalarBytes(&numHandlers);

	lea	ecx, DWORD PTR _numHandlers$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 290  : #endif
; 291  :   *((uint32 *)nuonEnv->GetPointerToMemory(the_mpe,NUM_INSTALLED_COMMRECV_HANDLERS_ADDRESS)) = numHandlers;

	push	1
	push	-2139095608				; 807ffdc8H
	mov	edx, DWORD PTR _the_mpe$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	ecx, DWORD PTR _numHandlers$[ebp]
	mov	DWORD PTR [eax], ecx

; 292  :   return false;

	xor	al, al
$LN9@InstallCom:

; 293  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@InstallCom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@InstallCom:
	DD	2
	DD	$LN13@InstallCom
$LN13@InstallCom:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN11@InstallCom
	DD	-20					; ffffffecH
	DD	4
	DD	$LN12@InstallCom
$LN12@InstallCom:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN11@InstallCom:
	DB	105					; 00000069H
	DB	0
?InstallCommHandler@@YA_NPAVMPE@@IPAI1@Z ENDP		; InstallCommHandler
; Function compile flags: /Odtp /RTCsu
_which$ = -4						; size = 4
_the_mpe$ = 8						; size = 4
?IntGetVector@@YAXPAVMPE@@@Z PROC			; IntGetVector

; 296  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 297  :   uint32 which = the_mpe->regs[0];

	mov	eax, DWORD PTR _the_mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _which$[ebp], ecx

; 298  : 
; 299  :   the_mpe->regs[0] = 0;

	mov	edx, DWORD PTR _the_mpe$[ebp]
	mov	DWORD PTR [edx], 0

; 300  : 
; 301  :   InterruptVectors = (uint32 *)nuonEnv->GetPointerToMemory(the_mpe,INTERRUPT_VECTOR_ADDRESS);

	push	1
	push	-2139095600				; 807ffdd0H
	mov	eax, DWORD PTR _the_mpe$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR ?InterruptVectors@@3PAIA, eax	; InterruptVectors

; 302  : 
; 303  :   if(which < 32)

	cmp	DWORD PTR _which$[ebp], 32		; 00000020H
	jae	SHORT $LN2@IntGetVect

; 304  :   {
; 305  :     the_mpe->regs[0] = InterruptVectors[which];

	mov	ecx, DWORD PTR _the_mpe$[ebp]
	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR ?InterruptVectors@@3PAIA	; InterruptVectors
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx], edx

; 306  : #ifdef LITTLE_ENDIAN
; 307  :     SwapScalarBytes(&(the_mpe->regs[0]));

	mov	ecx, DWORD PTR _the_mpe$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes
$LN2@IntGetVect:

; 308  : #endif
; 309  :   }
; 310  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IntGetVector@@YAXPAVMPE@@@Z ENDP			; IntGetVector
; Function compile flags: /Odtp /RTCsu
_numHandlers$ = -24					; size = 4
_recvHandlers$ = -16					; size = 4
_newvec$ = -8						; size = 4
_which$ = -4						; size = 4
_mpe$ = 8						; size = 4
?IntSetVector@@YAXPAVMPE@@@Z PROC			; IntSetVector

; 313  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 314  :   uint32 which = mpe->regs[0];

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _which$[ebp], ecx

; 315  :   uint32 newvec = mpe->regs[1];

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newvec$[ebp], eax

; 316  :   uint32 index, *recvHandlers;
; 317  :   uint32 numHandlers;
; 318  : 
; 319  :   mpe->regs[0] = 0;

	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx], 0

; 320  : 
; 321  :   if(which < 32)

	cmp	DWORD PTR _which$[ebp], 32		; 00000020H
	jae	$LN8@IntSetVect

; 322  :   {
; 323  :     if(which == 4)

	cmp	DWORD PTR _which$[ebp], 4
	jne	SHORT $LN6@IntSetVect

; 324  :     {
; 325  :       if(newvec < MPE_ADDR_SPACE_BASE)

	cmp	DWORD PTR _newvec$[ebp], 536870912	; 20000000H
	jae	SHORT $LN5@IntSetVect

; 326  :       {
; 327  :         return;

	jmp	$LN8@IntSetVect
$LN5@IntSetVect:

; 328  :       }
; 329  : 
; 330  :       recvHandlers = ((uint32 *)nuonEnv->GetPointerToMemory(mpe,COMMRECV_HANDLER_LIST_ADDRESS));

	push	1
	push	-2139095472				; 807ffe50H
	mov	edx, DWORD PTR _mpe$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _recvHandlers$[ebp], eax

; 331  :       if(InstallCommHandler(mpe, newvec, recvHandlers, &numHandlers))

	lea	eax, DWORD PTR _numHandlers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _recvHandlers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR _mpe$[ebp]
	push	eax
	call	?InstallCommHandler@@YA_NPAVMPE@@IPAI1@Z ; InstallCommHandler
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@IntSetVect

; 332  :       {
; 333  :         mpe->regs[0] = newvec;

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR _newvec$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@IntSetVect:

; 334  :       }
; 335  :     }
; 336  :     else

	jmp	$LN8@IntSetVect
$LN6@IntSetVect:

; 337  :     {
; 338  :       InterruptVectors = (uint32 *)nuonEnv->GetPointerToMemory(mpe,INTERRUPT_VECTOR_ADDRESS);

	push	1
	push	-2139095600				; 807ffdd0H
	mov	ecx, DWORD PTR _mpe$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR ?InterruptVectors@@3PAIA, eax	; InterruptVectors

; 339  :       mpe->regs[0] = InterruptVectors[which];

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR _which$[ebp]
	mov	ecx, DWORD PTR ?InterruptVectors@@3PAIA	; InterruptVectors
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], eax

; 340  : 
; 341  :       if(!newvec)

	cmp	DWORD PTR _newvec$[ebp], 0
	jne	SHORT $LN2@IntSetVect

; 342  :       {
; 343  :         //disable the interrupt
; 344  :         mpe->inten1 &= (~(1UL << which));

	mov	edx, 1
	mov	ecx, DWORD PTR _which$[ebp]
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _mpe$[ebp]
	and	edx, DWORD PTR [eax+432]
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+432], edx

; 345  : 
; 346  :       }
; 347  :       else

	jmp	SHORT $LN1@IntSetVect
$LN2@IntSetVect:

; 348  :       {
; 349  :         //Not needed in this implementation, but needed if this IntSetVector is moved to aries assembly
; 350  :         mpe->intsrc &= (~(1UL << which));

	mov	edx, 1
	mov	ecx, DWORD PTR _which$[ebp]
	shl	edx, cl
	not	edx
	mov	eax, DWORD PTR _mpe$[ebp]
	and	edx, DWORD PTR [eax+420]
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+420], edx

; 351  :         //Enable the interrupt in case it was previously disabled
; 352  :         mpe->inten1 |= (1UL << which);

	mov	edx, 1
	mov	ecx, DWORD PTR _which$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _mpe$[ebp]
	or	edx, DWORD PTR [eax+432]
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx+432], edx
$LN1@IntSetVect:

; 353  :       }
; 354  :       InterruptVectors[which] = newvec;

	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR ?InterruptVectors@@3PAIA	; InterruptVectors
	mov	ecx, DWORD PTR _newvec$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx

; 355  : #ifdef LITTLE_ENDIAN
; 356  :       SwapScalarBytes(&InterruptVectors[which]);

	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR ?InterruptVectors@@3PAIA	; InterruptVectors
	lea	ecx, DWORD PTR [eax+edx*4]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes
$LN8@IntSetVect:

; 357  : #endif
; 358  :     }
; 359  :   }
; 360  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@IntSetVect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@IntSetVect:
	DD	1
	DD	$LN11@IntSetVect
$LN11@IntSetVect:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@IntSetVect
$LN10@IntSetVect:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?IntSetVector@@YAXPAVMPE@@@Z ENDP			; IntSetVector
_TEXT	ENDS
PUBLIC	?Halt@MPE@@QAEXXZ				; MPE::Halt
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_return_value$ = -4					; size = 4
_mpe$ = 8						; size = 4
?BiosExit@@YAXPAVMPE@@@Z PROC				; BiosExit

; 363  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 364  :   uint32 return_value;
; 365  : 
; 366  :   return_value = mpe->regs[0];

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _return_value$[ebp], ecx

; 367  :   mpe->Halt();

	mov	ecx, DWORD PTR _mpe$[ebp]
	call	?Halt@MPE@@QAEXXZ			; MPE::Halt

; 368  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BiosExit@@YAXPAVMPE@@@Z ENDP				; BiosExit
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\mpe.h
_TEXT	ENDS
;	COMDAT ?Halt@MPE@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Halt@MPE@@QAEXXZ PROC					; MPE::Halt, COMDAT
; _this$ = ecx

; 471  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 472  :     mpectl &= ~MPECTRL_MPEGO;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+384]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+384], ecx

; 473  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Halt@MPE@@QAEXXZ ENDP					; MPE::Halt
_TEXT	ENDS
PUBLIC	?PatchJumptable@@YAIII@Z			; PatchJumptable
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\bios.cpp
_TEXT	SEGMENT
_inst$ = -48						; size = 4
_immExt$ = -36						; size = 4
_oldAddress$ = -28					; size = 4
_oldEntryInst$ = -20					; size = 4
_oldEntryImmExt$ = -8					; size = 4
_vectorAddress$ = 8					; size = 4
_newEntry$ = 12						; size = 4
?PatchJumptable@@YAIII@Z PROC				; PatchJumptable

; 371  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 372  :   uint32 oldEntryImmExt;
; 373  :   uint32 oldEntryInst;
; 374  :   uint32 oldAddress;
; 375  :   uint32 immExt;
; 376  :   uint32 inst;
; 377  : 
; 378  :   newEntry >>= 1;

	mov	eax, DWORD PTR _newEntry$[ebp]
	shr	eax, 1
	mov	DWORD PTR _newEntry$[ebp], eax

; 379  : 
; 380  :   //create 64 bit JMP <newEntry>, nop instruction
; 381  :   inst = 0x9220BA00UL | ((newEntry & 0x1FUL) << 16) | ((newEntry & 0x1FE0UL) >> 5);

	mov	ecx, DWORD PTR _newEntry$[ebp]
	and	ecx, 31					; 0000001fH
	shl	ecx, 16					; 00000010H
	or	ecx, -1843348992			; 9220ba00H
	mov	edx, DWORD PTR _newEntry$[ebp]
	and	edx, 8160				; 00001fe0H
	shr	edx, 5
	or	ecx, edx
	mov	DWORD PTR _inst$[ebp], ecx

; 382  :   immExt = 0x88000000UL | ((newEntry & 0x7FFFE000UL) >> 4);

	mov	eax, DWORD PTR _newEntry$[ebp]
	and	eax, 2147475456				; 7fffe000H
	shr	eax, 4
	or	eax, -2013265920			; 88000000H
	mov	DWORD PTR _immExt$[ebp], eax

; 383  :   //get the old entry stored in the BIOS vector address
; 384  :   oldEntryImmExt = *((uint32 *)(&(nuonEnv->systemBusDRAM[vectorAddress - SYSTEM_BUS_BASE + 0])));

	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _vectorAddress$[ebp]
	mov	ecx, DWORD PTR [eax+edx-2147483648]
	mov	DWORD PTR _oldEntryImmExt$[ebp], ecx

; 385  :   oldEntryInst = *((uint32 *)(&(nuonEnv->systemBusDRAM[vectorAddress - SYSTEM_BUS_BASE + 4])));

	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _vectorAddress$[ebp]
	mov	edx, DWORD PTR [ecx+eax-2147483644]
	mov	DWORD PTR _oldEntryInst$[ebp], edx

; 386  :   SwapScalarBytes(&inst);

	lea	ecx, DWORD PTR _inst$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 387  :   SwapScalarBytes(&immExt);

	lea	ecx, DWORD PTR _immExt$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 388  :   SwapScalarBytes(&oldEntryImmExt);

	lea	ecx, DWORD PTR _oldEntryImmExt$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 389  :   SwapScalarBytes(&oldEntryInst);

	lea	ecx, DWORD PTR _oldEntryInst$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 390  :   //load the new entry into the BIOS vector
; 391  :   *((uint32 *)(&(nuonEnv->systemBusDRAM[vectorAddress - SYSTEM_BUS_BASE + 0]))) = immExt;

	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _vectorAddress$[ebp]
	mov	eax, DWORD PTR _immExt$[ebp]
	mov	DWORD PTR [edx+ecx-2147483648], eax

; 392  :   *((uint32 *)(&(nuonEnv->systemBusDRAM[vectorAddress - SYSTEM_BUS_BASE + 4]))) = inst;

	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _vectorAddress$[ebp]
	mov	ecx, DWORD PTR _inst$[ebp]
	mov	DWORD PTR [eax+edx-2147483644], ecx

; 393  : 
; 394  :   //extract the old BIOS function address from the previous entry's JMP instruction
; 395  :   oldAddress = (((oldEntryImmExt & 0x7FFFE00UL) << 4) | ((oldEntryInst & 0xFFUL) << 5) | ((oldEntryInst & 0x1F0000) >> 16)) << 1;

	mov	edx, DWORD PTR _oldEntryImmExt$[ebp]
	and	edx, 134217216				; 07fffe00H
	shl	edx, 4
	mov	eax, DWORD PTR _oldEntryInst$[ebp]
	and	eax, 255				; 000000ffH
	shl	eax, 5
	or	edx, eax
	mov	ecx, DWORD PTR _oldEntryInst$[ebp]
	and	ecx, 2031616				; 001f0000H
	shr	ecx, 16					; 00000010H
	or	edx, ecx
	shl	edx, 1
	mov	DWORD PTR _oldAddress$[ebp], edx

; 396  : 
; 397  :   return oldAddress;

	mov	eax, DWORD PTR _oldAddress$[ebp]

; 398  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@PatchJumpt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN8@PatchJumpt:
	DD	4
	DD	$LN7@PatchJumpt
$LN7@PatchJumpt:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@PatchJumpt
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@PatchJumpt
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN5@PatchJumpt
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN6@PatchJumpt
$LN6@PatchJumpt:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN5@PatchJumpt:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN4@PatchJumpt:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN3@PatchJumpt:
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	73					; 00000049H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?PatchJumptable@@YAIII@Z ENDP				; PatchJumptable
; Function compile flags: /Odtp /RTCsu
_newAddress$ = -8					; size = 4
_vectorAddress$ = -4					; size = 4
_mpe$ = 8						; size = 4
?PatchJumptable@@YAXPAVMPE@@@Z PROC			; PatchJumptable

; 401  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 402  :   uint32 vectorAddress, newAddress, oldAddress;
; 403  : 
; 404  :   vectorAddress = mpe->regs[0];

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vectorAddress$[ebp], ecx

; 405  :   newAddress = mpe->regs[1];

	mov	edx, DWORD PTR _mpe$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _newAddress$[ebp], eax

; 406  : 
; 407  :   mpe->regs[0] = PatchJumptable(vectorAddress, newAddress);

	mov	ecx, DWORD PTR _newAddress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vectorAddress$[ebp]
	push	edx
	call	?PatchJumptable@@YAIII@Z		; PatchJumptable
	add	esp, 8
	mov	ecx, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [ecx], eax

; 408  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PatchJumptable@@YAXPAVMPE@@@Z ENDP			; PatchJumptable
_TEXT	ENDS
PUBLIC	?BiosGetInfo@@YAXPAVMPE@@@Z			; BiosGetInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mpe$ = 8						; size = 4
?BiosGetInfo@@YAXPAVMPE@@@Z PROC			; BiosGetInfo

; 411  : {

	push	ebp
	mov	ebp, esp

; 412  :   mpe->regs[0] = 0x80760000;

	mov	eax, DWORD PTR _mpe$[ebp]
	mov	DWORD PTR [eax], -2139750400		; 80760000H

; 413  : }

	pop	ebp
	ret	0
?BiosGetInfo@@YAXPAVMPE@@@Z ENDP			; BiosGetInfo
; Function compile flags: /Odtp /RTCsu
_framebuffer$ = -12					; size = 4
_msg$ = -8						; size = 4
_rval$ = -4						; size = 4
_the_mpe$ = 8						; size = 4
?BiosPauseMsg@@YAXPAVMPE@@@Z PROC			; BiosPauseMsg

; 571  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 572  :   uint32 rval = the_mpe->regs[0];

	mov	eax, DWORD PTR _the_mpe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rval$[ebp], ecx

; 573  :   char *msg = (char *)nuonEnv->GetPointerToMemory(the_mpe,the_mpe->regs[1]);

	push	1
	mov	edx, DWORD PTR _the_mpe$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _the_mpe$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _msg$[ebp], eax

; 574  :   uint8 *framebuffer = (uint8 *)nuonEnv->GetPointerToMemory(the_mpe,the_mpe->regs[2]);

	push	1
	mov	edx, DWORD PTR _the_mpe$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _the_mpe$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _framebuffer$[ebp], eax

; 575  : 
; 576  :   //allow application to continue
; 577  :   the_mpe->regs[0] = kPollContinue;

	mov	edx, DWORD PTR _the_mpe$[ebp]
	mov	DWORD PTR [edx], 0

; 578  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BiosPauseMsg@@YAXPAVMPE@@@Z ENDP			; BiosPauseMsg
; Function compile flags: /Odtp /RTCsu
_the_mpe$ = 8						; size = 4
?BiosPoll@@YAXPAVMPE@@@Z PROC				; BiosPoll

; 581  : {

	push	ebp
	mov	ebp, esp

; 582  :   //no events
; 583  :   the_mpe->regs[0] = 0;

	mov	eax, DWORD PTR _the_mpe$[ebp]
	mov	DWORD PTR [eax], 0

; 584  : }

	pop	ebp
	ret	0
?BiosPoll@@YAXPAVMPE@@@Z ENDP				; BiosPoll
_TEXT	ENDS
EXTRN	?TimerInit@@YAXII@Z:PROC			; TimerInit
EXTRN	?MediaInitMPE@@YAXI@Z:PROC			; MediaInitMPE
EXTRN	?structOverlayChannelPrev@@3UVidChannel@@A:BYTE	; structOverlayChannelPrev
EXTRN	?structMainChannelPrev@@3UVidChannel@@A:BYTE	; structMainChannelPrev
EXTRN	?structOverlayChannel@@3UVidChannel@@A:BYTE	; structOverlayChannel
EXTRN	?structMainChannel@@3UVidChannel@@A:BYTE	; structMainChannel
EXTRN	?InitDVDJumpTable@@YAXXZ:PROC			; InitDVDJumpTable
EXTRN	?WriteControlRegister@MPE@@QAEXII@Z:PROC	; MPE::WriteControlRegister
EXTRN	?ResetMPEFlags@@YAXPAVMPE@@@Z:PROC		; ResetMPEFlags
EXTRN	?LoadCoffFile@MPE@@QAE_NPAD_NH@Z:PROC		; MPE::LoadCoffFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -16						; size = 4
_loadStatus$ = -9					; size = 1
_the_mpe$ = 8						; size = 4
?InitBios@@YAXPAVMPE@@@Z PROC				; InitBios

; 587  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 588  :   uint32 *IntVectors, *RecvHandlers;
; 589  :   bool loadStatus = false;

	mov	BYTE PTR _loadStatus$[ebp], 0

; 590  :   uint32 i;
; 591  : 
; 592  :   loadStatus = nuonEnv->mpe[3]->LoadCoffFile("bios.cof",false);

	push	-1
	push	0
	push	OFFSET $SG78156
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+12]
	call	?LoadCoffFile@MPE@@QAE_NPAD_NH@Z	; MPE::LoadCoffFile
	mov	BYTE PTR _loadStatus$[ebp], al

; 593  : 
; 594  :   if(!loadStatus)

	movzx	ecx, BYTE PTR _loadStatus$[ebp]
	test	ecx, ecx
	jne	SHORT $LN21@InitBios

; 595  :   {
; 596  :     ::MessageBox(NULL,"Missing File!","Could not load bios.cof",MB_OK);

	mov	esi, esp
	push	0
	push	OFFSET $SG78158
	push	OFFSET $SG78159
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@InitBios:

; 597  :   }
; 598  : 
; 599  :   //Reset MPEAlloc flags to reset values
; 600  :   ResetMPEFlags(the_mpe);

	mov	edx, DWORD PTR _the_mpe$[ebp]
	push	edx
	call	?ResetMPEFlags@@YAXPAVMPE@@@Z		; ResetMPEFlags
	add	esp, 4

; 601  : 
; 602  :   //MEMORY MANAGEMENT INITIALIZATION
; 603  :   MemInit(the_mpe);

	mov	eax, DWORD PTR _the_mpe$[ebp]
	push	eax
	call	?MemInit@@YAXPAVMPE@@@Z			; MemInit
	add	esp, 4

; 604  : 
; 605  :   //HAL Setup
; 606  :   //HalSetup();
; 607  : 
; 608  :   for(i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@InitBios
$LN19@InitBios:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@InitBios:
	cmp	DWORD PTR _i$[ebp], 4
	jae	$LN18@InitBios

; 609  :   {
; 610  :     nuonEnv->mpe[i]->WriteControlRegister(0xB0UL, INTVEC1_HANDLER_ADDRESS);

	push	-2139749510				; 8076037aH
	push	176					; 000000b0H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+edx*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister

; 611  :     nuonEnv->mpe[i]->WriteControlRegister(0xC0UL, INTVEC2_HANDLER_ADDRESS);

	push	-2139749248				; 80760480H
	push	192					; 000000c0H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister

; 612  : 
; 613  :     if(i == 3)

	cmp	DWORD PTR _i$[ebp], 3
	jne	SHORT $LN17@InitBios

; 614  :     {
; 615  :       nuonEnv->mpe[i]->WriteControlRegister(0x110UL, 0);

	push	0
	push	272					; 00000110H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+eax*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister

; 616  :       //Commrecv needs to be enabled immediately as level2 because some programs use CommRecv and and CommRecvQuery to obtain comm packets
; 617  :       //rather than installing a user comm ISR
; 618  :       nuonEnv->mpe[i]->WriteControlRegister(0x130UL, kIntrCommRecv);

	push	4
	push	304					; 00000130H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+edx*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister
	jmp	SHORT $LN16@InitBios
$LN17@InitBios:

; 619  :     }
; 620  :     else if(i == 0)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN15@InitBios

; 621  :     {
; 622  :       //Don't need to set anything for level1... InitMediaMPE will enable commrecv when minibios is loaded
; 623  :       //nuonEnv->mpe[i]->WriteControlRegister(0x110UL, INT_COMMRECV);
; 624  :       nuonEnv->mpe[i]->WriteControlRegister(0x130UL, kIntrHost);

	push	26					; 0000001aH
	push	304					; 00000130H
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [edx+ecx*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister

; 625  :     }
; 626  :     else

	jmp	SHORT $LN16@InitBios
$LN15@InitBios:

; 627  :     {
; 628  :       nuonEnv->mpe[i]->WriteControlRegister(0x110UL, 0);

	push	0
	push	272					; 00000110H
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [ecx+eax*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister

; 629  :       nuonEnv->mpe[i]->WriteControlRegister(0x130UL, kIntrHost);

	push	26					; 0000001aH
	push	304					; 00000130H
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	mov	ecx, DWORD PTR [eax+edx*4]
	call	?WriteControlRegister@MPE@@QAEXII@Z	; MPE::WriteControlRegister
$LN16@InitBios:

; 630  :     }
; 631  :   }

	jmp	$LN19@InitBios
$LN18@InitBios:

; 632  : 
; 633  :   //Patch the jump table for the first 151 entries
; 634  :   for(i = 0; i < ((0x4B0UL >> 3) + 1); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@InitBios
$LN12@InitBios:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@InitBios:
	cmp	DWORD PTR _i$[ebp], 151			; 00000097H
	jae	SHORT $LN11@InitBios

; 635  :   {
; 636  :     if(BiosJumpTable[i] != AssemblyImplemented)

	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR ?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA[edx*4], OFFSET ?AssemblyBiosHandler@@YAXPAVMPE@@@Z ; AssemblyBiosHandler
	je	SHORT $LN10@InitBios

; 637  :     {
; 638  :       PatchJumptable(SYSTEM_BUS_BASE + (i << 3UL), ROM_BIOS_BASE + (i << 1));

	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+eax-268435456]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx*8-2147483648]
	push	eax
	call	?PatchJumptable@@YAIII@Z		; PatchJumptable
	add	esp, 8
$LN10@InitBios:

; 639  :     }
; 640  :   }

	jmp	SHORT $LN12@InitBios
$LN11@InitBios:

; 641  : 
; 642  :   //Fill Bios Handler entries from 151 to 255 to NullBiosHandler
; 643  :   for(i = ((0x4B0UL >> 3) + 1); i <= 255; i++)

	mov	DWORD PTR _i$[ebp], 151			; 00000097H
	jmp	SHORT $LN9@InitBios
$LN8@InitBios:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@InitBios:
	cmp	DWORD PTR _i$[ebp], 255			; 000000ffH
	ja	SHORT $LN7@InitBios

; 644  :   {
; 645  :     BiosJumpTable[i] = NullBiosHandler;

	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA[edx*4], OFFSET ?NullBiosHandler@@YAXPAVMPE@@@Z ; NullBiosHandler

; 646  :   }

	jmp	SHORT $LN8@InitBios
$LN7@InitBios:

; 647  : 
; 648  :   //DVD JUMP TABLE INITIALIZATION
; 649  :   InitDVDJumpTable();

	call	?InitDVDJumpTable@@YAXXZ		; InitDVDJumpTable

; 650  : 
; 651  :   //DEFAULT VIDCHANNEL INITIALIZATION
; 652  :   structMainChannel.base = (void*)0x40000000;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+4, 1073741824 ; 40000000H

; 653  :   structMainChannel.src_width = 720;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+32, 720 ; 000002d0H

; 654  :   structMainChannel.src_height = 480;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+36, 480 ; 000001e0H

; 655  :   structMainChannel.dest_width = 720;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+16, 720 ; 000002d0H

; 656  :   structMainChannel.dest_height = 480;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+20, 480 ; 000001e0H

; 657  :   structMainChannel.src_xoff = 0;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+24, 0

; 658  :   structMainChannel.src_yoff = 0;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+28, 0

; 659  :   structMainChannel.dest_xoff = 0;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+8, 0

; 660  :   structMainChannel.dest_yoff = 0;

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A+12, 0

; 661  :   structMainChannel.dmaflags = (4 << 4);

	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A, 64 ; 00000040H

; 662  :   for(i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@InitBios
$LN5@InitBios:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@InitBios:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN4@InitBios

; 663  :   {
; 664  :     structMainChannel.reserved[i] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?structMainChannel@@3UVidChannel@@A[ecx*4+44], 0

; 665  :   }

	jmp	SHORT $LN5@InitBios
$LN4@InitBios:

; 666  :   structOverlayChannel.base = (void*)0x40000000;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+4, 1073741824 ; 40000000H

; 667  :   structOverlayChannel.src_width = 720;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+32, 720 ; 000002d0H

; 668  :   structOverlayChannel.src_height = 480;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+36, 480 ; 000001e0H

; 669  :   structOverlayChannel.dest_width = 720;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+16, 720 ; 000002d0H

; 670  :   structOverlayChannel.dest_height = 480;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+20, 480 ; 000001e0H

; 671  :   structOverlayChannel.src_xoff = 0;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+24, 0

; 672  :   structOverlayChannel.src_yoff = 0;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+28, 0

; 673  :   structOverlayChannel.dest_xoff = 0;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+8, 0

; 674  :   structOverlayChannel.dest_yoff = 0;

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A+12, 0

; 675  :   structOverlayChannel.dmaflags = (4 << 4);

	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A, 64 ; 00000040H

; 676  :   structOverlayChannel.alpha = 0xFF;

	mov	BYTE PTR ?structOverlayChannel@@3UVidChannel@@A+41, 255 ; 000000ffH

; 677  :   for(i = 0; i < 4; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@InitBios
$LN2@InitBios:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@InitBios:
	cmp	DWORD PTR _i$[ebp], 4
	jae	SHORT $LN1@InitBios

; 678  :   {
; 679  :     structOverlayChannel.reserved[i] = 0;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR ?structOverlayChannel@@3UVidChannel@@A[eax*4+44], 0

; 680  :   }

	jmp	SHORT $LN2@InitBios
$LN1@InitBios:

; 681  :   structMainChannelPrev.base = 0;

	mov	DWORD PTR ?structMainChannelPrev@@3UVidChannel@@A+4, 0

; 682  :   structMainChannelPrev.src_width = 0;

	mov	DWORD PTR ?structMainChannelPrev@@3UVidChannel@@A+32, 0

; 683  :   structOverlayChannelPrev.base = 0;

	mov	DWORD PTR ?structOverlayChannelPrev@@3UVidChannel@@A+4, 0

; 684  :   structOverlayChannelPrev.src_width = 0;

	mov	DWORD PTR ?structOverlayChannelPrev@@3UVidChannel@@A+32, 0

; 685  :   
; 686  :   //MINIBIOS INITIALIZATION
; 687  : 
; 688  :   //Start up the minibios on MPE0
; 689  :   MediaInitMPE((uint32)0);

	push	0
	call	?MediaInitMPE@@YAXI@Z			; MediaInitMPE
	add	esp, 4

; 690  : 
; 691  :   //TIMER INITIALIZATION
; 692  :   TimerInit(2,16000);

	push	16000					; 00003e80H
	push	2
	call	?TimerInit@@YAXII@Z			; TimerInit
	add	esp, 8

; 693  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitBios@@YAXPAVMPE@@@Z ENDP				; InitBios
; Function compile flags: /Odtp /RTCsu
_str$ = -16						; size = 4
_pStr$ = -8						; size = 4
_mpe$ = 8						; size = 4
?KPrintf@@YAXPAVMPE@@@Z PROC				; KPrintf

; 696  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 697  :   uint32 pStr = *((uint32 *)(nuonEnv->GetPointerToMemory(mpe,mpe->regs[31],true)));

	push	1
	mov	eax, DWORD PTR _mpe$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	edx, DWORD PTR _mpe$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pStr$[ebp], eax

; 698  :   char *str;
; 699  : 
; 700  :   SwapScalarBytes(&pStr);

	lea	ecx, DWORD PTR _pStr$[ebp]
	call	?SwapScalarBytes@@YIXPAI@Z		; SwapScalarBytes

; 701  :   if(pStr)

	cmp	DWORD PTR _pStr$[ebp], 0
	je	SHORT $LN2@KPrintf

; 702  :   {
; 703  :     str = (char *)(nuonEnv->GetPointerToMemory(mpe,pStr,true));

	push	1
	mov	ecx, DWORD PTR _pStr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mpe$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
	call	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
	mov	DWORD PTR _str$[ebp], eax
$LN2@KPrintf:

; 704  :     //MessageBox(NULL,(char *)str,"kprintf",MB_OK);
; 705  :   }
; 706  :   
; 707  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@KPrintf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@KPrintf:
	DD	1
	DD	$LN5@KPrintf
$LN5@KPrintf:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@KPrintf
$LN4@KPrintf:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?KPrintf@@YAXPAVMPE@@@Z ENDP				; KPrintf
_TEXT	ENDS
END

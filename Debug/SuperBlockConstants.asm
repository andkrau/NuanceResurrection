; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\SuperBlockConstants.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?PropagateConstants_PacketStart@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_PacketStart
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\superblockconstants.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_constants$ = 8						; size = 4
?PropagateConstants_PacketStart@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_PacketStart

; 4    : {

	push	ebp
	mov	ebp, esp

; 5    : }

	pop	ebp
	ret	0
?PropagateConstants_PacketStart@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_PacketStart
_TEXT	ENDS
PUBLIC	?CommitConstants@SuperBlockConstants@@QAEXXZ	; SuperBlockConstants::CommitConstants
PUBLIC	?PropagateConstants_PacketEnd@@YAXAAVSuperBlockConstants@@@Z ; PropagateConstants_PacketEnd
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_constants$ = 8						; size = 4
?PropagateConstants_PacketEnd@@YAXAAVSuperBlockConstants@@@Z PROC ; PropagateConstants_PacketEnd

; 8    : {

	push	ebp
	mov	ebp, esp

; 9    :   constants.CommitConstants();

	mov	ecx, DWORD PTR _constants$[ebp]
	call	?CommitConstants@SuperBlockConstants@@QAEXXZ ; SuperBlockConstants::CommitConstants

; 10   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?PropagateConstants_PacketEnd@@YAXAAVSuperBlockConstants@@@Z ENDP ; PropagateConstants_PacketEnd
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?CommitConstants@SuperBlockConstants@@QAEXXZ
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?CommitConstants@SuperBlockConstants@@QAEXXZ PROC	; SuperBlockConstants::CommitConstants, COMDAT
; _this$ = ecx

; 185  :   {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 186  :     uint32 i;
; 187  :     scalarRegisterConstantsStatus = tempScalarRegisterConstantsStatus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+564]
	mov	DWORD PTR [eax+556], edx

; 188  :     miscRegisterConstantsStatus = tempMiscRegisterConstantsStatus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+568]
	mov	DWORD PTR [eax+560], edx

; 189  :     if(scalarRegisterConstantsStatus)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+556], 0
	je	SHORT $LN8@CommitCons

; 190  :     {
; 191  :       for(i = 0; i < 32; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CommitCons
$LN6@CommitCons:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@CommitCons:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN8@CommitCons

; 192  :       {
; 193  :         scalarRegisterConstants[i] = tempScalarRegisterConstants[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+44]
	mov	DWORD PTR [eax+edx*4+300], ecx

; 194  :       }

	jmp	SHORT $LN6@CommitCons
$LN8@CommitCons:

; 195  :     }
; 196  :     if(miscRegisterConstantsStatus)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+560], 0
	je	SHORT $LN9@CommitCons

; 197  :     {
; 198  :       for(i = 0; i < 32; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@CommitCons
$LN2@CommitCons:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@CommitCons:
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	jae	SHORT $LN9@CommitCons

; 199  :       {
; 200  :         miscRegisterConstants[i] = tempMiscRegisterConstants[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [esi+eax*4+172]
	mov	DWORD PTR [edx+ecx*4+428], eax

; 201  :       }

	jmp	SHORT $LN2@CommitCons
$LN9@CommitCons:

; 202  :     }
; 203  :   }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CommitConstants@SuperBlockConstants@@QAEXXZ ENDP	; SuperBlockConstants::CommitConstants
_TEXT	ENDS
PUBLIC	?FirstInstruction@SuperBlockConstants@@QAEXXZ	; SuperBlockConstants::FirstInstruction
PUBLIC	?ClearConstants@SuperBlockConstants@@QAEXXZ	; SuperBlockConstants::ClearConstants
PUBLIC	??0SuperBlockConstants@@QAE@PAVMPE@@PAVSuperBlock@@@Z ; SuperBlockConstants::SuperBlockConstants
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pMPE$ = 8						; size = 4
_sBlock$ = 12						; size = 4
??0SuperBlockConstants@@QAE@PAVMPE@@PAVSuperBlock@@@Z PROC ; SuperBlockConstants::SuperBlockConstants
; _this$ = ecx

; 13   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 14   :   pSuperBlock = sBlock;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sBlock$[ebp]
	mov	DWORD PTR [eax+572], ecx

; 15   :   mpe = pMPE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pMPE$[ebp]
	mov	DWORD PTR [edx], eax

; 16   :   ClearConstants();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearConstants@SuperBlockConstants@@QAEXXZ ; SuperBlockConstants::ClearConstants

; 17   :   FirstInstruction();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstInstruction@SuperBlockConstants@@QAEXXZ ; SuperBlockConstants::FirstInstruction

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0SuperBlockConstants@@QAE@PAVMPE@@PAVSuperBlock@@@Z ENDP ; SuperBlockConstants::SuperBlockConstants
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?FirstInstruction@SuperBlockConstants@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FirstInstruction@SuperBlockConstants@@QAEXXZ PROC	; SuperBlockConstants::FirstInstruction, COMDAT
; _this$ = ecx

; 63   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 64   :     bConstantPropagated = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+36], 0

; 65   :     currentInstructionIndex = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 66   :     pCurrentInstructionEntry = &pSuperBlock->instructions[0];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+572]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+8], edx

; 67   :     nuance = &(pSuperBlock->instructions[0].instruction);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+572]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 68   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?FirstInstruction@SuperBlockConstants@@QAEXXZ ENDP	; SuperBlockConstants::FirstInstruction
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearConstants@SuperBlockConstants@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearConstants@SuperBlockConstants@@QAEXXZ PROC	; SuperBlockConstants::ClearConstants, COMDAT
; _this$ = ecx

; 178  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 179  :     scalarRegisterConstantsStatus = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+556], 0

; 180  :     miscRegisterConstantsStatus = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+560], 0

; 181  :     tempScalarRegisterConstantsStatus = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+564], 0

; 182  :     tempMiscRegisterConstantsStatus = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+568], 0

; 183  :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearConstants@SuperBlockConstants@@QAEXXZ ENDP	; SuperBlockConstants::ClearConstants
_TEXT	ENDS
PUBLIC	??1SuperBlockConstants@@QAE@XZ			; SuperBlockConstants::~SuperBlockConstants
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SuperBlockConstants@@QAE@XZ PROC			; SuperBlockConstants::~SuperBlockConstants
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 22   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1SuperBlockConstants@@QAE@XZ ENDP			; SuperBlockConstants::~SuperBlockConstants
_TEXT	ENDS
PUBLIC	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
PUBLIC	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
PUBLIC	?EvaluateBranchCondition@SuperBlockConstants@@QAE_NIPA_N@Z ; SuperBlockConstants::EvaluateBranchCondition
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv65 = -20						; size = 4
_flag2$ = -16						; size = 4
_flag1$ = -12						; size = 4
_bIsConstant$ = -5					; size = 1
_this$ = -4						; size = 4
_whichCondition$ = 8					; size = 4
_branchResult$ = 12					; size = 4
?EvaluateBranchCondition@SuperBlockConstants@@QAE_NIPA_N@Z PROC ; SuperBlockConstants::EvaluateBranchCondition
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 26   :   bool bIsConstant = false;

	mov	BYTE PTR _bIsConstant$[ebp], 0

; 27   :   uint32 flag1, flag2;
; 28   : 
; 29   :   switch(whichCondition & 0x1FUL)

	mov	eax, DWORD PTR _whichCondition$[ebp]
	and	eax, 31					; 0000001fH
	mov	DWORD PTR tv65[ebp], eax
	cmp	DWORD PTR tv65[ebp], 31			; 0000001fH
	ja	$LN80@EvaluateBr
	mov	ecx, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN84@EvaluateBr[ecx*4]
$LN79@EvaluateBr:

; 30   :   {
; 31   :     case 0:
; 32   :       if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN78@EvaluateBr

; 33   :       {
; 34   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 35   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_Z) == 0);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN78@EvaluateBr:

; 36   :       }
; 37   :       break;

	jmp	$LN80@EvaluateBr
$LN77@EvaluateBr:

; 38   :     case 1:
; 39   :       if(IsMiscRegisterConstant(CONSTANT_REG_C0Z))

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN76@EvaluateBr

; 40   :       {
; 41   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 42   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C0Z) != 0);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN76@EvaluateBr:

; 43   :       }
; 44   :       break;

	jmp	$LN80@EvaluateBr
$LN75@EvaluateBr:

; 45   :     case 2:
; 46   :       if(IsMiscRegisterConstant(CONSTANT_REG_C1Z))

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN74@EvaluateBr

; 47   :       {
; 48   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 49   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C1Z) != 0);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN74@EvaluateBr:

; 50   :       }
; 51   :       break;

	jmp	$LN80@EvaluateBr
$LN73@EvaluateBr:

; 52   :     case 3:
; 53   :       if(IsMiscRegisterConstant(CONSTANT_REG_C))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN72@EvaluateBr

; 54   :       {
; 55   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 56   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C) == 0);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN72@EvaluateBr:

; 57   :       }
; 58   :       break;

	jmp	$LN80@EvaluateBr
$LN71@EvaluateBr:

; 59   :     case 4:
; 60   :       if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN70@EvaluateBr

; 61   :       {
; 62   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 63   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_Z) != 0);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN70@EvaluateBr:

; 64   :       }
; 65   :       break;

	jmp	$LN80@EvaluateBr
$LN69@EvaluateBr:

; 66   :     case 5:
; 67   :       if(IsMiscRegisterConstant(CONSTANT_REG_C))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN68@EvaluateBr

; 68   :       {
; 69   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 70   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C) != 0);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN68@EvaluateBr:

; 71   :       }
; 72   :       break;

	jmp	$LN80@EvaluateBr
$LN67@EvaluateBr:

; 73   :     case 6:
; 74   :       if(IsMiscRegisterConstant(CONSTANT_REG_V))

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN66@EvaluateBr

; 75   :       {
; 76   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 77   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_V) == 0);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN66@EvaluateBr:

; 78   :       }
; 79   :       break;

	jmp	$LN80@EvaluateBr
$LN65@EvaluateBr:

; 80   :     case 7:
; 81   :       if(IsMiscRegisterConstant(CONSTANT_REG_V))

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN64@EvaluateBr

; 82   :       {
; 83   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 84   :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_V) != 0);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN64@EvaluateBr:

; 85   :       }
; 86   :       break;

	jmp	$LN80@EvaluateBr
$LN63@EvaluateBr:

; 87   :     case 8:
; 88   :       //N.~V + ~N.V: both N and V must be constant
; 89   :       if(IsMiscRegisterConstant(CONSTANT_REG_N) && IsMiscRegisterConstant(CONSTANT_REG_V))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN62@EvaluateBr
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN62@EvaluateBr

; 90   :       {
; 91   :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 92   :         flag1 = GetMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 93   :         flag2 = GetMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag2$[ebp], eax

; 94   :         *branchResult = ((flag1 ^ flag2) != 0);

	mov	ecx, DWORD PTR _flag1$[ebp]
	xor	ecx, DWORD PTR _flag2$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], cl
$LN62@EvaluateBr:

; 95   :       }
; 96   :       break;

	jmp	$LN80@EvaluateBr
$LN61@EvaluateBr:

; 97   :     case 9:
; 98   :       if(IsMiscRegisterConstant(CONSTANT_REG_MV))

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN60@EvaluateBr

; 99   :       {
; 100  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 101  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MV) == 0);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN60@EvaluateBr:

; 102  :       }
; 103  :       break;

	jmp	$LN80@EvaluateBr
$LN59@EvaluateBr:

; 104  :     case 10:
; 105  :       if(IsMiscRegisterConstant(CONSTANT_REG_MV))

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN58@EvaluateBr

; 106  :       {
; 107  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 108  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MV) != 0);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN58@EvaluateBr:

; 109  :       }
; 110  :       break;

	jmp	$LN80@EvaluateBr
$LN57@EvaluateBr:

; 111  :     case 11:
; 112  :       //!(C + Z): if either C and Z is constant and true, the condition is constant and the branch is not taken,
; 113  :       //otherwise both C and Z must be constant
; 114  :       if(IsMiscRegisterConstant(CONSTANT_REG_C))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN56@EvaluateBr

; 115  :       {
; 116  :         flag1 = GetMiscRegisterConstant(CONSTANT_REG_C);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 117  :         if(flag1 != 0)

	cmp	DWORD PTR _flag1$[ebp], 0
	je	SHORT $LN55@EvaluateBr

; 118  :         {
; 119  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 120  :           *branchResult = false;

	mov	eax, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [eax], 0

; 121  :         }
; 122  :         else

	jmp	SHORT $LN54@EvaluateBr
$LN55@EvaluateBr:

; 123  :         {
; 124  :           if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN54@EvaluateBr

; 125  :           {
; 126  :             if(GetMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	test	eax, eax
	je	SHORT $LN54@EvaluateBr

; 127  :             {
; 128  :               bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 129  :               *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_Z) == 0);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], al
$LN54@EvaluateBr:

; 130  :             }
; 131  :           }
; 132  :         }

	jmp	SHORT $LN51@EvaluateBr
$LN56@EvaluateBr:

; 133  :       }
; 134  :       else if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@EvaluateBr

; 135  :       {
; 136  :         flag1 = GetMiscRegisterConstant(CONSTANT_REG_Z);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 137  :         if(flag1 != 0)

	cmp	DWORD PTR _flag1$[ebp], 0
	je	SHORT $LN51@EvaluateBr

; 138  :         {
; 139  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 140  :           *branchResult = false;

	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], 0
$LN51@EvaluateBr:

; 141  :         }
; 142  :       }
; 143  :       break;

	jmp	$LN80@EvaluateBr
$LN48@EvaluateBr:

; 144  :     case 12:
; 145  :       //Z + N.~V + ~N.V: if Z is constant and true, the condition is constant and the branch is taken,
; 146  :       //otherwise both N and V must be constant
; 147  :       if(IsMiscRegisterConstant(CONSTANT_REG_N) && IsMiscRegisterConstant(CONSTANT_REG_V))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN47@EvaluateBr
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@EvaluateBr

; 148  :       {
; 149  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 150  :         flag1 = GetMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 151  :         flag2 = GetMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag2$[ebp], eax

; 152  :         //N(~V) || (~N)V
; 153  :         *branchResult = ((flag1 ^ flag2) != 0);

	mov	ecx, DWORD PTR _flag1$[ebp]
	xor	ecx, DWORD PTR _flag2$[ebp]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN46@EvaluateBr
$LN47@EvaluateBr:

; 154  :       }
; 155  :       else if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN46@EvaluateBr

; 156  :       {
; 157  :         if(GetMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	test	eax, eax
	je	SHORT $LN46@EvaluateBr

; 158  :         {
; 159  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 160  :           *branchResult = true;

	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], 1
$LN46@EvaluateBr:

; 161  :         }
; 162  :       }
; 163  :       break;

	jmp	$LN80@EvaluateBr
$LN43@EvaluateBr:

; 164  :     case 13:
; 165  :       //C + Z: if either of C or Z is constant and true, the condition is constant and the branch is taken,
; 166  :       //otherwise both flags must be constant
; 167  :       if(IsMiscRegisterConstant(CONSTANT_REG_C))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN42@EvaluateBr

; 168  :       {
; 169  :         if(GetMiscRegisterConstant(CONSTANT_REG_C))

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	test	eax, eax
	je	SHORT $LN41@EvaluateBr

; 170  :         {
; 171  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 172  :           *branchResult = true;

	mov	eax, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN40@EvaluateBr
$LN41@EvaluateBr:

; 173  :         }
; 174  :         else if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN40@EvaluateBr

; 175  :         {
; 176  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 177  :           *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_Z) != 0);

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], al
$LN40@EvaluateBr:

; 178  :         }
; 179  :       }

	jmp	SHORT $LN38@EvaluateBr
$LN42@EvaluateBr:

; 180  :       else if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@EvaluateBr

; 181  :       {
; 182  :         if(GetMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	test	eax, eax
	je	SHORT $LN38@EvaluateBr

; 183  :         {
; 184  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 185  :           *branchResult = true;

	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], 1
$LN38@EvaluateBr:

; 186  :         }
; 187  :       }
; 188  :       break;

	jmp	$LN80@EvaluateBr
$LN35@EvaluateBr:

; 189  :     case 14:
; 190  :       if(IsMiscRegisterConstant(CONSTANT_REG_N))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN34@EvaluateBr

; 191  :       {
; 192  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 193  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_N) == 0);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN34@EvaluateBr:

; 194  :       }
; 195  :       break;

	jmp	$LN80@EvaluateBr
$LN33@EvaluateBr:

; 196  :     case 15:
; 197  :       if(IsMiscRegisterConstant(CONSTANT_REG_N))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN32@EvaluateBr

; 198  :       {
; 199  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 200  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_N) != 0);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN32@EvaluateBr:

; 201  :       }
; 202  :       break;

	jmp	$LN80@EvaluateBr
$LN31@EvaluateBr:

; 203  :     case 16:
; 204  :       //~Z.(NV + ~N.~V)
; 205  :       //If Z is constant and true, the condition is constant and the branch is not taken,
; 206  :       //otherwise N, Z and V must all be constant
; 207  :       if(IsMiscRegisterConstant(CONSTANT_REG_Z))

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@EvaluateBr

; 208  :       {
; 209  :         if(GetMiscRegisterConstant(CONSTANT_REG_Z) != 0)

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	test	eax, eax
	je	SHORT $LN29@EvaluateBr

; 210  :         {
; 211  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 212  :           *branchResult = false;

	mov	eax, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [eax], 0
	jmp	$LN80@EvaluateBr

; 213  :           break;

	jmp	SHORT $LN30@EvaluateBr
$LN29@EvaluateBr:

; 214  :         }
; 215  :         else if(IsMiscRegisterConstant(CONSTANT_REG_N) && IsMiscRegisterConstant(CONSTANT_REG_V))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN30@EvaluateBr
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@EvaluateBr

; 216  :         {
; 217  :           bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 218  :           flag1 = GetMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 219  :           flag2 = GetMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag2$[ebp], eax

; 220  :           //(~N)(~V) || NV
; 221  :           *branchResult = ((flag1 ^ flag2) == 0);

	mov	eax, DWORD PTR _flag1$[ebp]
	xor	eax, DWORD PTR _flag2$[ebp]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN30@EvaluateBr:

; 222  :         }
; 223  :       }
; 224  :       break;

	jmp	$LN80@EvaluateBr
$LN26@EvaluateBr:

; 225  :     case 17:
; 226  :       //T
; 227  :       bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 228  :       *branchResult = true;

	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], 1

; 229  :       break;

	jmp	$LN80@EvaluateBr
$LN25@EvaluateBr:

; 230  :     case 18:
; 231  :       if(IsMiscRegisterConstant(CONSTANT_REG_MODMI))

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN24@EvaluateBr

; 232  :       {
; 233  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 234  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MODMI) != 0);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN24@EvaluateBr:

; 235  :       }
; 236  :       break;

	jmp	$LN80@EvaluateBr
$LN23@EvaluateBr:

; 237  :     case 19:
; 238  :       if(IsMiscRegisterConstant(CONSTANT_REG_MODMI))

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN22@EvaluateBr

; 239  :       {
; 240  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 241  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MODMI) == 0);

	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN22@EvaluateBr:

; 242  :       }
; 243  :       break;

	jmp	$LN80@EvaluateBr
$LN21@EvaluateBr:

; 244  :     case 20:
; 245  :       //Both N and V must be constant
; 246  :       if(IsMiscRegisterConstant(CONSTANT_REG_N) && IsMiscRegisterConstant(CONSTANT_REG_V))

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN19@EvaluateBr
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@EvaluateBr

; 247  :       {
; 248  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 249  :         flag1 = GetMiscRegisterConstant(CONSTANT_REG_N);

	push	18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag1$[ebp], eax

; 250  :         flag2 = GetMiscRegisterConstant(CONSTANT_REG_V);

	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	mov	DWORD PTR _flag2$[ebp], eax

; 251  :         //(~N)(~V) || NV
; 252  :         *branchResult = ((flag1 ^ flag2) == 0);

	mov	ecx, DWORD PTR _flag1$[ebp]
	xor	ecx, DWORD PTR _flag2$[ebp]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], cl
$LN19@EvaluateBr:

; 253  :       }
; 254  :     case 21:
; 255  :       if(IsMiscRegisterConstant(CONSTANT_REG_MODGE))

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@EvaluateBr

; 256  :       {
; 257  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 258  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MODGE) != 0);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN18@EvaluateBr:

; 259  :       }
; 260  :       break;

	jmp	$LN80@EvaluateBr
$LN17@EvaluateBr:

; 261  :     case 22:
; 262  :       if(IsMiscRegisterConstant(CONSTANT_REG_MODGE))

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN16@EvaluateBr

; 263  :       {
; 264  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 265  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_MODGE) == 0);

	push	22					; 00000016H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN16@EvaluateBr:

; 266  :       }
; 267  :       break;

	jmp	$LN80@EvaluateBr
$LN15@EvaluateBr:

; 268  :     case 23:
; 269  :        //The condition is always constant and the branch is never taken
; 270  :        bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 271  :        *branchResult = false;

	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], 0

; 272  :        break;

	jmp	$LN80@EvaluateBr
$LN14@EvaluateBr:

; 273  :     case 24:
; 274  :       if(IsMiscRegisterConstant(CONSTANT_REG_C0Z))

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@EvaluateBr

; 275  :       {
; 276  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 277  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C0Z) == 0);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN13@EvaluateBr:

; 278  :       }
; 279  :       break;

	jmp	$LN80@EvaluateBr
$LN12@EvaluateBr:

; 280  :     case 25:
; 281  :        bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 282  :        *branchResult = false;

	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], 0

; 283  :        break;

	jmp	$LN80@EvaluateBr
$LN11@EvaluateBr:

; 284  :     case 26:
; 285  :        bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 286  :        *branchResult = false;

	mov	eax, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [eax], 0

; 287  :        break;

	jmp	$LN80@EvaluateBr
$LN10@EvaluateBr:

; 288  :     case 27:
; 289  :       if(IsMiscRegisterConstant(CONSTANT_REG_CP0))

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@EvaluateBr

; 290  :       {
; 291  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 292  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_CP0) == 0);

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	edx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [edx], al
$LN9@EvaluateBr:

; 293  :       }
; 294  :       break;

	jmp	$LN80@EvaluateBr
$LN8@EvaluateBr:

; 295  :     case 28:
; 296  :       if(IsMiscRegisterConstant(CONSTANT_REG_C1Z))

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@EvaluateBr

; 297  :       {
; 298  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 299  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_C1Z) == 0);

	push	21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN7@EvaluateBr:

; 300  :       }
; 301  :       break;

	jmp	$LN80@EvaluateBr
$LN6@EvaluateBr:

; 302  :     case 29:
; 303  :       if(IsMiscRegisterConstant(CONSTANT_REG_CP0))

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@EvaluateBr

; 304  :       {
; 305  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 306  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_CP0) != 0);

	push	24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN5@EvaluateBr:

; 307  :       }
; 308  :       break;

	jmp	SHORT $LN80@EvaluateBr
$LN4@EvaluateBr:

; 309  :     case 30:
; 310  :       if(IsMiscRegisterConstant(CONSTANT_REG_CP1))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@EvaluateBr

; 311  :       {
; 312  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 313  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_CP1) == 0);

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN3@EvaluateBr:

; 314  :       }
; 315  :       break;

	jmp	SHORT $LN80@EvaluateBr
$LN2@EvaluateBr:

; 316  :     case 31:
; 317  :       if(IsMiscRegisterConstant(CONSTANT_REG_CP1))

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ; SuperBlockConstants::IsMiscRegisterConstant
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN80@EvaluateBr

; 318  :       {
; 319  :         bIsConstant = true;

	mov	BYTE PTR _bIsConstant$[ebp], 1

; 320  :         *branchResult = (GetMiscRegisterConstant(CONSTANT_REG_CP1) != 0);

	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ; SuperBlockConstants::GetMiscRegisterConstant
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	ecx, DWORD PTR _branchResult$[ebp]
	mov	BYTE PTR [ecx], al
$LN80@EvaluateBr:

; 321  :       }
; 322  :       break;
; 323  :   }
; 324  : 
; 325  :   return bIsConstant;

	mov	al, BYTE PTR _bIsConstant$[ebp]

; 326  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN84@EvaluateBr:
	DD	$LN79@EvaluateBr
	DD	$LN77@EvaluateBr
	DD	$LN75@EvaluateBr
	DD	$LN73@EvaluateBr
	DD	$LN71@EvaluateBr
	DD	$LN69@EvaluateBr
	DD	$LN67@EvaluateBr
	DD	$LN65@EvaluateBr
	DD	$LN63@EvaluateBr
	DD	$LN61@EvaluateBr
	DD	$LN59@EvaluateBr
	DD	$LN57@EvaluateBr
	DD	$LN48@EvaluateBr
	DD	$LN43@EvaluateBr
	DD	$LN35@EvaluateBr
	DD	$LN33@EvaluateBr
	DD	$LN31@EvaluateBr
	DD	$LN26@EvaluateBr
	DD	$LN25@EvaluateBr
	DD	$LN23@EvaluateBr
	DD	$LN21@EvaluateBr
	DD	$LN19@EvaluateBr
	DD	$LN17@EvaluateBr
	DD	$LN15@EvaluateBr
	DD	$LN14@EvaluateBr
	DD	$LN12@EvaluateBr
	DD	$LN11@EvaluateBr
	DD	$LN10@EvaluateBr
	DD	$LN8@EvaluateBr
	DD	$LN6@EvaluateBr
	DD	$LN4@EvaluateBr
	DD	$LN2@EvaluateBr
?EvaluateBranchCondition@SuperBlockConstants@@QAE_NIPA_N@Z ENDP ; SuperBlockConstants::EvaluateBranchCondition
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\superblockconstants.h
_TEXT	ENDS
;	COMDAT ?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z PROC ; SuperBlockConstants::IsMiscRegisterConstant, COMDAT
; _this$ = ecx

; 209  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 210  :     return (miscRegisterConstantsStatus & (1UL << index)) != 0;

	mov	eax, 1
	mov	ecx, DWORD PTR _index$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+560]
	neg	eax
	sbb	eax, eax
	neg	eax

; 211  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?IsMiscRegisterConstant@SuperBlockConstants@@QAE_NI@Z ENDP ; SuperBlockConstants::IsMiscRegisterConstant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z PROC ; SuperBlockConstants::GetMiscRegisterConstant, COMDAT
; _this$ = ecx

; 217  :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  :     return miscRegisterConstants[index];

	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+428]

; 219  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetMiscRegisterConstant@SuperBlockConstants@@QAEII@Z ENDP ; SuperBlockConstants::GetMiscRegisterConstant
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\nativecodecache.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0PatchManager@@QAE@XZ				; PatchManager::PatchManager
PUBLIC	__real@3fef0a3d70a3d70a
PUBLIC	??0NativeCodeCache@@QAE@III@Z			; NativeCodeCache::NativeCodeCache
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	??0PageMap@@QAE@XZ:PROC				; PageMap::PageMap
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@3fef0a3d70a3d70a
; File c:\nuanceexperimental\nativecodecache.cpp
CONST	SEGMENT
__real@3fef0a3d70a3d70a DQ 03fef0a3d70a3d70ar	; 0.97
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$??0NativeCodeCache@@QAE@III@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0NativeCodeCache@@QAE@III@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0NativeCodeCache@@QAE@III@Z$1
__ehfuncinfo$??0NativeCodeCache@@QAE@III@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0NativeCodeCache@@QAE@III@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv154 = -156						; size = 4
tv233 = -152						; size = 8
tv231 = -144						; size = 4
tv228 = -138						; size = 2
tv225 = -136						; size = 8
tv221 = -128						; size = 8
tv217 = -120						; size = 8
tv215 = -112						; size = 4
tv212 = -106						; size = 2
tv208 = -104						; size = 8
tv193 = -96						; size = 8
tv191 = -88						; size = 4
tv188 = -82						; size = 2
tv185 = -80						; size = 8
tv181 = -72						; size = 8
tv177 = -64						; size = 8
tv175 = -56						; size = 4
tv172 = -50						; size = 2
tv168 = -48						; size = 8
tv73 = -40						; size = 4
$T63588 = -36						; size = 4
$T63587 = -32						; size = 4
$T63584 = -28						; size = 4
$T63583 = -24						; size = 4
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_numBytes$ = 8						; size = 4
_warningThreshold$ = 12					; size = 4
_desiredTLBEntries$ = 16				; size = 4
??0NativeCodeCache@@QAE@III@Z PROC			; NativeCodeCache::NativeCodeCache
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0NativeCodeCache@@QAE@III@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 12   :   uint32 i = desiredTLBEntries - 1;

	mov	eax, DWORD PTR _desiredTLBEntries$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 13   : 
; 14   :   pageMap = new PageMap;

	push	2048					; 00000800H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T63584[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T63584[ebp], 0
	je	SHORT $LN11@NativeCode
	mov	ecx, DWORD PTR $T63584[ebp]
	call	??0PageMap@@QAE@XZ			; PageMap::PageMap
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN12@NativeCode
$LN11@NativeCode:
	mov	DWORD PTR tv73[ebp], 0
$LN12@NativeCode:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T63583[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T63583[ebp]
	mov	DWORD PTR [edx+12], eax

; 15   : 
; 16   :   if(numBytes == 0)

	cmp	DWORD PTR _numBytes$[ebp], 0
	jne	SHORT $LN8@NativeCode

; 17   :   {
; 18   :     numBytes = DEFAULT_CODE_BUFFER_BYTES;

	mov	DWORD PTR _numBytes$[ebp], 8388608	; 00800000H
$LN8@NativeCode:

; 19   :   }
; 20   : 
; 21   :   numTLBEntries = desiredTLBEntries;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _desiredTLBEntries$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 22   : 
; 23   :   if(desiredTLBEntries == 0)

	cmp	DWORD PTR _desiredTLBEntries$[ebp], 0
	jne	SHORT $LN7@NativeCode

; 24   :   {
; 25   :     numTLBEntries = DEFAULT_NUM_TLB_ENTRIES;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 16384		; 00004000H
$LN7@NativeCode:

; 26   :   }
; 27   : 
; 28   :   if(warningThreshold == 0)

	cmp	DWORD PTR _warningThreshold$[ebp], 0
	jne	SHORT $LN6@NativeCode

; 29   :   {
; 30   :     this->warningThreshold = (uint32)(0.97 * numBytes); 

	mov	ecx, DWORD PTR _numBytes$[ebp]
	mov	DWORD PTR tv168[ebp], ecx
	mov	DWORD PTR tv168[ebp+4], 0
	fild	QWORD PTR tv168[ebp]
	fmul	QWORD PTR __real@3fef0a3d70a3d70a
	fnstcw	WORD PTR tv172[ebp]
	movzx	eax, WORD PTR tv172[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv175[ebp], eax
	fldcw	WORD PTR tv175[ebp]
	fistp	QWORD PTR tv177[ebp]
	fldcw	WORD PTR tv172[ebp]
	mov	edx, DWORD PTR tv177[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx

; 31   :   }
; 32   :   else

	jmp	SHORT $LN5@NativeCode
$LN6@NativeCode:

; 33   :   {
; 34   :     this->warningThreshold = (uint32)((double)warningThreshold/(double)numBytes) * numBytes;

	mov	ecx, DWORD PTR _warningThreshold$[ebp]
	mov	DWORD PTR tv181[ebp], ecx
	mov	DWORD PTR tv181[ebp+4], 0
	fild	QWORD PTR tv181[ebp]
	mov	edx, DWORD PTR _numBytes$[ebp]
	mov	DWORD PTR tv185[ebp], edx
	mov	DWORD PTR tv185[ebp+4], 0
	fild	QWORD PTR tv185[ebp]
	fdivp	ST(1), ST(0)
	fnstcw	WORD PTR tv188[ebp]
	movzx	eax, WORD PTR tv188[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv191[ebp], eax
	fldcw	WORD PTR tv191[ebp]
	fistp	QWORD PTR tv193[ebp]
	fldcw	WORD PTR tv188[ebp]
	mov	eax, DWORD PTR tv193[ebp]
	imul	eax, DWORD PTR _numBytes$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN5@NativeCode:

; 35   :   }
; 36   : 
; 37   :   ptrNativeCodeBuffer = (uint8 *)VirtualAlloc(NULL,numBytes,MEM_COMMIT,PAGE_EXECUTE_READWRITE);

	mov	esi, esp
	push	64					; 00000040H
	push	4096					; 00001000H
	mov	edx, DWORD PTR _numBytes$[ebp]
	push	edx
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 38   :   pEmitLoc = ptrNativeCodeBuffer;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx

; 39   : 
; 40   :   if(ptrNativeCodeBuffer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	$LN4@NativeCode

; 41   :   {
; 42   :     this->numBytes = numBytes;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numBytes$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 43   :     if(warningThreshold == 0)

	cmp	DWORD PTR _warningThreshold$[ebp], 0
	jne	SHORT $LN3@NativeCode

; 44   :     {
; 45   :       this->warningThreshold = (uint32)(0.97 * numBytes); 

	mov	edx, DWORD PTR _numBytes$[ebp]
	mov	DWORD PTR tv208[ebp], edx
	mov	DWORD PTR tv208[ebp+4], 0
	fild	QWORD PTR tv208[ebp]
	fmul	QWORD PTR __real@3fef0a3d70a3d70a
	fnstcw	WORD PTR tv212[ebp]
	movzx	eax, WORD PTR tv212[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv215[ebp], eax
	fldcw	WORD PTR tv215[ebp]
	fistp	QWORD PTR tv217[ebp]
	fldcw	WORD PTR tv212[ebp]
	mov	eax, DWORD PTR tv217[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 46   :     }
; 47   :     else

	jmp	SHORT $LN2@NativeCode
$LN3@NativeCode:

; 48   :     {
; 49   :       this->warningThreshold = (uint32)((double)warningThreshold/(double)numBytes) * numBytes;

	mov	edx, DWORD PTR _warningThreshold$[ebp]
	mov	DWORD PTR tv221[ebp], edx
	mov	DWORD PTR tv221[ebp+4], 0
	fild	QWORD PTR tv221[ebp]
	mov	eax, DWORD PTR _numBytes$[ebp]
	mov	DWORD PTR tv225[ebp], eax
	mov	DWORD PTR tv225[ebp+4], 0
	fild	QWORD PTR tv225[ebp]
	fdivp	ST(1), ST(0)
	fnstcw	WORD PTR tv228[ebp]
	movzx	eax, WORD PTR tv228[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv231[ebp], eax
	fldcw	WORD PTR tv231[ebp]
	fistp	QWORD PTR tv233[ebp]
	fldcw	WORD PTR tv228[ebp]
	mov	ecx, DWORD PTR tv233[ebp]
	imul	ecx, DWORD PTR _numBytes$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx
$LN2@NativeCode:

; 50   :     }
; 51   :   }
; 52   :   else

	jmp	SHORT $LN1@NativeCode
$LN4@NativeCode:

; 53   :   {
; 54   :     numBytes = 0;

	mov	DWORD PTR _numBytes$[ebp], 0

; 55   :     this->warningThreshold = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN1@NativeCode:

; 56   :   }
; 57   : 
; 58   :   patchMgr = new PatchManager();

	push	1288					; 00000508H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T63588[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T63588[ebp], 0
	je	SHORT $LN13@NativeCode
	mov	ecx, DWORD PTR $T63588[ebp]
	call	??0PatchManager@@QAE@XZ			; PatchManager::PatchManager
	mov	DWORD PTR tv154[ebp], eax
	jmp	SHORT $LN14@NativeCode
$LN13@NativeCode:
	mov	DWORD PTR tv154[ebp], 0
$LN14@NativeCode:
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR $T63587[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T63587[ebp]
	mov	DWORD PTR [edx], eax

; 59   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0NativeCodeCache@@QAE@III@Z$0:
	mov	eax, DWORD PTR $T63584[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0NativeCodeCache@@QAE@III@Z$1:
	mov	eax, DWORD PTR $T63588[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0NativeCodeCache@@QAE@III@Z:
	mov	eax, OFFSET __ehfuncinfo$??0NativeCodeCache@@QAE@III@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0NativeCodeCache@@QAE@III@Z ENDP			; NativeCodeCache::NativeCodeCache
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
;	COMDAT ??0PatchManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PatchManager@@QAE@XZ PROC				; PatchManager::PatchManager, COMDAT
; _this$ = ecx

; 35   :   PatchManager()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 36   :   {
; 37   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 38   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 39   :   }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0PatchManager@@QAE@XZ ENDP				; PatchManager::PatchManager
_TEXT	ENDS
PUBLIC	??_GPageMap@@QAEPAXI@Z				; PageMap::`scalar deleting destructor'
PUBLIC	??1NativeCodeCache@@QAE@XZ			; NativeCodeCache::~NativeCodeCache
EXTRN	__imp__VirtualFree@12:PROC
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.cpp
_TEXT	SEGMENT
tv71 = -20						; size = 4
$T63617 = -16						; size = 4
$T63614 = -12						; size = 4
$T63613 = -8						; size = 4
_this$ = -4						; size = 4
??1NativeCodeCache@@QAE@XZ PROC				; NativeCodeCache::~NativeCodeCache
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 63   :   if(pageMap)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@NativeCode@2

; 64   :   {
; 65   :     delete pageMap;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T63614[ebp], edx
	mov	eax, DWORD PTR $T63614[ebp]
	mov	DWORD PTR $T63613[ebp], eax
	cmp	DWORD PTR $T63613[ebp], 0
	je	SHORT $LN6@NativeCode@2
	push	1
	mov	ecx, DWORD PTR $T63613[ebp]
	call	??_GPageMap@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN3@NativeCode@2
$LN6@NativeCode@2:
	mov	DWORD PTR tv71[ebp], 0
$LN3@NativeCode@2:

; 66   :   }
; 67   : 
; 68   :   if(ptrNativeCodeBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@NativeCode@2

; 69   :   {
; 70   :     VirtualFree(ptrNativeCodeBuffer,0,MEM_RELEASE);

	mov	esi, esp
	push	32768					; 00008000H
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR __imp__VirtualFree@12
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@NativeCode@2:

; 71   :   }
; 72   : 
; 73   :   if(patchMgr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@NativeCode@2

; 74   :   {
; 75   :     delete patchMgr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T63617[ebp], eax
	mov	ecx, DWORD PTR $T63617[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@NativeCode@2:

; 76   :   }
; 77   : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1NativeCodeCache@@QAE@XZ ENDP				; NativeCodeCache::~NativeCodeCache
_TEXT	ENDS
EXTRN	??1PageMap@@QAE@XZ:PROC				; PageMap::~PageMap
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GPageMap@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPageMap@@QAEPAXI@Z PROC				; PageMap::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PageMap@@QAE@XZ			; PageMap::~PageMap
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPageMap@@QAEPAXI@Z ENDP				; PageMap::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ; NativeCodeCache::FindNativeCodeCacheEntry
EXTRN	?FindEntry@PageMap@@QAEPAVNativeCodeCacheEntry@@I@Z:PROC ; PageMap::FindEntry
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pEntry$ = -8						; size = 4
_this$ = -4						; size = 4
_virtualAddress$ = 8					; size = 4
?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z PROC ; NativeCodeCache::FindNativeCodeCacheEntry
; _this$ = ecx

; 80   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 81   :   NativeCodeCacheEntry *pEntry = pageMap->FindEntry(virtualAddress);

	mov	eax, DWORD PTR _virtualAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?FindEntry@PageMap@@QAEPAVNativeCodeCacheEntry@@I@Z ; PageMap::FindEntry
	mov	DWORD PTR _pEntry$[ebp], eax

; 82   : 
; 83   :   if(pEntry)

	cmp	DWORD PTR _pEntry$[ebp], 0
	je	SHORT $LN2@FindNative

; 84   :   {
; 85   :     if(pEntry->virtualAddress == virtualAddress)

	mov	edx, DWORD PTR _pEntry$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _virtualAddress$[ebp]
	jne	SHORT $LN2@FindNative

; 86   :     {
; 87   :       return pEntry;

	mov	eax, DWORD PTR _pEntry$[ebp]
	jmp	SHORT $LN3@FindNative
$LN2@FindNative:

; 88   :     }
; 89   :   }
; 90   :   return 0;

	xor	eax, eax
$LN3@FindNative:

; 91   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ENDP ; NativeCodeCache::FindNativeCodeCacheEntry
_TEXT	ENDS
PUBLIC	?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ	; NativeCodeCache::GetUsedCodeBufferSize
PUBLIC	?ReleaseBuffer@NativeCodeCache@@QAE_NP6AXXZIIIIIW4SuperBlockCompileType@@II@Z ; NativeCodeCache::ReleaseBuffer
EXTRN	?UpdateEntry@PageMap@@QAEXIAAVNativeCodeCacheEntry@@@Z:PROC ; PageMap::UpdateEntry
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_address$ = -52						; size = 4
_newEntry$ = -44					; size = 36
_this$ = -4						; size = 4
_entryPoint$ = 8					; size = 4
_virtualAddress$ = 12					; size = 4
_nextVirtualAddress$ = 16				; size = 4
_newUsedBytes$ = 20					; size = 4
_packetCount$ = 24					; size = 4
_instructionCount$ = 28					; size = 4
_compileType$ = 32					; size = 4
_nextDelayCount$ = 36					; size = 4
_alignment$ = 40					; size = 4
?ReleaseBuffer@NativeCodeCache@@QAE_NP6AXXZIIIIIW4SuperBlockCompileType@@II@Z PROC ; NativeCodeCache::ReleaseBuffer
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   :   NativeCodeCacheEntry newEntry;
; 96   :   uint32 address;
; 97   : 
; 98   :   newEntry.entryPoint = entryPoint;

	mov	eax, DWORD PTR _entryPoint$[ebp]
	mov	DWORD PTR _newEntry$[ebp], eax

; 99   :   newEntry.virtualAddress = virtualAddress;

	mov	ecx, DWORD PTR _virtualAddress$[ebp]
	mov	DWORD PTR _newEntry$[ebp+4], ecx

; 100  :   newEntry.nextVirtualAddress = nextVirtualAddress;

	mov	edx, DWORD PTR _nextVirtualAddress$[ebp]
	mov	DWORD PTR _newEntry$[ebp+20], edx

; 101  :   newEntry.codeSize = newUsedBytes;

	mov	eax, DWORD PTR _newUsedBytes$[ebp]
	mov	DWORD PTR _newEntry$[ebp+28], eax

; 102  :   newEntry.numPackets = packetCount;

	mov	ecx, DWORD PTR _packetCount$[ebp]
	mov	DWORD PTR _newEntry$[ebp+12], ecx

; 103  :   newEntry.numInstructions = instructionCount;

	mov	edx, DWORD PTR _instructionCount$[ebp]
	mov	DWORD PTR _newEntry$[ebp+16], edx

; 104  :   newEntry.compileType = compileType;

	mov	eax, DWORD PTR _compileType$[ebp]
	mov	DWORD PTR _newEntry$[ebp+8], eax

; 105  :   newEntry.nextBranchDelayCount = nextDelayCount;

	mov	ecx, DWORD PTR _nextDelayCount$[ebp]
	mov	DWORD PTR _newEntry$[ebp+24], ecx

; 106  :   newEntry.accessCount = 0;

	mov	DWORD PTR _newEntry$[ebp+32], 0

; 107  : 
; 108  :   pageMap->UpdateEntry(virtualAddress,newEntry);

	lea	edx, DWORD PTR _newEntry$[ebp]
	push	edx
	mov	eax, DWORD PTR _virtualAddress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?UpdateEntry@PageMap@@QAEXIAAVNativeCodeCacheEntry@@@Z ; PageMap::UpdateEntry

; 109  :   pEmitLoc = ((uint8 *)entryPoint) + newUsedBytes;

	mov	edx, DWORD PTR _entryPoint$[ebp]
	add	edx, DWORD PTR _newUsedBytes$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 110  : 
; 111  :   if(alignment)

	cmp	DWORD PTR _alignment$[ebp], 0
	je	SHORT $LN1@ReleaseBuf

; 112  :   {
; 113  :     address = (uint32)pEmitLoc;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _address$[ebp], edx

; 114  :     address = ((address + ((1 << alignment) - 1)) & ~((1 << alignment) - 1));

	mov	eax, 1
	mov	ecx, DWORD PTR _alignment$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _address$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, 1
	mov	ecx, DWORD PTR _alignment$[ebp]
	shl	eax, cl
	sub	eax, 1
	not	eax
	and	edx, eax
	mov	DWORD PTR _address$[ebp], edx

; 115  :     pEmitLoc = (uint8 *)address;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _address$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@ReleaseBuf:

; 116  :   }
; 117  : 
; 118  :   return GetUsedCodeBufferSize() > warningThreshold;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ ; NativeCodeCache::GetUsedCodeBufferSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	sbb	eax, eax
	neg	eax

; 119  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ReleaseBuf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
	npad	2
$LN6@ReleaseBuf:
	DD	1
	DD	$LN5@ReleaseBuf
$LN5@ReleaseBuf:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN4@ReleaseBuf
$LN4@ReleaseBuf:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	0
?ReleaseBuffer@NativeCodeCache@@QAE_NP6AXXZIIIIIW4SuperBlockCompileType@@II@Z ENDP ; NativeCodeCache::ReleaseBuffer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.h
_TEXT	ENDS
;	COMDAT ?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ PROC	; NativeCodeCache::GetUsedCodeBufferSize, COMDAT
; _this$ = ecx

; 77   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 78   :     return (uint32)(pEmitLoc - ptrNativeCodeBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx+8]

; 79   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ ENDP	; NativeCodeCache::GetUsedCodeBufferSize
_TEXT	ENDS
PUBLIC	?Flush@NativeCodeCache@@QAEXXZ			; NativeCodeCache::Flush
EXTRN	?Invalidate@PageMap@@QAEIXZ:PROC		; PageMap::Invalidate
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Flush@NativeCodeCache@@QAEXXZ PROC			; NativeCodeCache::Flush
; _this$ = ecx

; 123  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 124  :   pageMap->Invalidate();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?Invalidate@PageMap@@QAEIXZ		; PageMap::Invalidate

; 125  :   pEmitLoc = ptrNativeCodeBuffer;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+4], eax

; 126  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Flush@NativeCodeCache@@QAEXXZ ENDP			; NativeCodeCache::Flush
_TEXT	ENDS
PUBLIC	?FlushRegion@NativeCodeCache@@QAEXII@Z		; NativeCodeCache::FlushRegion
EXTRN	?InvalidateRegion@PageMap@@QAEXII@Z:PROC	; PageMap::InvalidateRegion
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
?FlushRegion@NativeCodeCache@@QAEXII@Z PROC		; NativeCodeCache::FlushRegion
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 130  :   pageMap->InvalidateRegion(start, end);

	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?InvalidateRegion@PageMap@@QAEXII@Z	; PageMap::InvalidateRegion

; 131  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FlushRegion@NativeCodeCache@@QAEXII@Z ENDP		; NativeCodeCache::FlushRegion
_TEXT	ENDS
PUBLIC	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_modType$ = 8						; size = 4
_regSpare$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ModRegRM
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 135  :   if(base > 7)

	cmp	DWORD PTR _base$[ebp], 7
	jbe	SHORT $LN16@X86Emit_Mo

; 136  :   {
; 137  :     //[dword]: mod = 0, reg = regSpare, rm = 5
; 138  :     x86Emit_MRM(x86ModType_mem,regSpare,x86BaseReg_sdword);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 139  :     *((uint32 *)pEmitLoc) = base;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx

; 140  :     pEmitLoc += sizeof(uint32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 141  :   }
; 142  :   else

	jmp	$LN17@X86Emit_Mo
$LN16@X86Emit_Mo:

; 143  :   {
; 144  :     if(modType == x86ModType_reg)

	cmp	DWORD PTR _modType$[ebp], 3
	jne	SHORT $LN14@X86Emit_Mo

; 145  :     {
; 146  :       //reg
; 147  :       x86Emit_MRM(x86ModType_reg, regSpare, base);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, 192				; 000000c0H
	or	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 148  :     }
; 149  :     else

	jmp	$LN17@X86Emit_Mo
$LN14@X86Emit_Mo:

; 150  :     {
; 151  :       if(index != x86IndexReg_none)

	cmp	DWORD PTR _index$[ebp], 4
	je	$LN12@X86Emit_Mo

; 152  :       {
; 153  :         if(!disp)

	cmp	DWORD PTR _disp$[ebp], 0
	jne	SHORT $LN11@X86Emit_Mo

; 154  :         {
; 155  :           //[sib]
; 156  :           x86Emit_MRM(x86ModType_mem, regSpare, x86BaseReg_sib);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 157  :           x86Emit_SIB(base, scale, index);

	mov	eax, DWORD PTR _scale$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _index$[ebp]
	shl	ecx, 3
	or	eax, ecx
	or	eax, DWORD PTR _base$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 158  :         }
; 159  :         else

	jmp	$LN10@X86Emit_Mo
$LN11@X86Emit_Mo:

; 160  :         {
; 161  :           //[sib + disp]
; 162  :           if((disp < -128) || (disp > 127))

	cmp	DWORD PTR _disp$[ebp], -128		; ffffff80H
	jl	SHORT $LN8@X86Emit_Mo
	cmp	DWORD PTR _disp$[ebp], 127		; 0000007fH
	jle	SHORT $LN9@X86Emit_Mo
$LN8@X86Emit_Mo:

; 163  :           {
; 164  :             //[base + scale*index + disp32]
; 165  :             x86Emit_MRM(x86ModType_mem_disp32, regSpare, x86BaseReg_sib);

	mov	edx, DWORD PTR _regSpare$[ebp]
	shl	edx, 3
	or	edx, 128				; 00000080H
	or	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  :             x86Emit_SIB(base, scale, index);

	mov	edx, DWORD PTR _scale$[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 3
	or	edx, eax
	or	edx, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	BYTE PTR [eax], dl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 167  :             *((int32 *)pEmitLoc) = disp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [edx], eax

; 168  :             pEmitLoc += sizeof(int32);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 169  :           }
; 170  :           else

	jmp	SHORT $LN10@X86Emit_Mo
$LN9@X86Emit_Mo:

; 171  :           {
; 172  :             //[sib + disp8]
; 173  :             x86Emit_MRM(x86ModType_mem_disp8, regSpare, x86BaseReg_sib);

	mov	ecx, DWORD PTR _regSpare$[ebp]
	shl	ecx, 3
	or	ecx, 64					; 00000040H
	or	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 174  :             x86Emit_SIB(base, scale, index);

	mov	ecx, DWORD PTR _scale$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _index$[ebp]
	shl	edx, 3
	or	ecx, edx
	or	ecx, DWORD PTR _base$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	BYTE PTR [edx], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 175  :             *pEmitLoc++ = (uint8)disp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _disp$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN10@X86Emit_Mo:

; 176  :           }
; 177  :         }
; 178  :       }
; 179  :       else

	jmp	$LN17@X86Emit_Mo
$LN12@X86Emit_Mo:

; 180  :       {
; 181  :         //[base + disp] or [base]
; 182  :         if(!disp && (base != x86BaseReg_ebp))

	cmp	DWORD PTR _disp$[ebp], 0
	jne	SHORT $LN5@X86Emit_Mo
	cmp	DWORD PTR _base$[ebp], 5
	je	SHORT $LN5@X86Emit_Mo

; 183  :         {
; 184  :           //[base]
; 185  :           x86Emit_MRM(x86ModType_mem, regSpare, base);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 186  :         }
; 187  :         else

	jmp	$LN17@X86Emit_Mo
$LN5@X86Emit_Mo:

; 188  :         {
; 189  :           //[base + disp]
; 190  :           if((disp < -128) || (disp > 127))

	cmp	DWORD PTR _disp$[ebp], -128		; ffffff80H
	jl	SHORT $LN2@X86Emit_Mo
	cmp	DWORD PTR _disp$[ebp], 127		; 0000007fH
	jle	SHORT $LN3@X86Emit_Mo
$LN2@X86Emit_Mo:

; 191  :           {
; 192  :             //[base + disp32]
; 193  :             x86Emit_MRM(x86ModType_mem_disp32, regSpare, base);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, 128				; 00000080H
	or	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 194  :             *((int32 *)pEmitLoc) = disp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _disp$[ebp]
	mov	DWORD PTR [ecx], edx

; 195  :             pEmitLoc += sizeof(int32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 196  :           }
; 197  :           else

	jmp	SHORT $LN17@X86Emit_Mo
$LN3@X86Emit_Mo:

; 198  :           {
; 199  :             //[base + disp8]
; 200  :             x86Emit_MRM(x86ModType_mem_disp8, regSpare, base);

	mov	eax, DWORD PTR _regSpare$[ebp]
	shl	eax, 3
	or	eax, 64					; 00000040H
	or	eax, DWORD PTR _base$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 201  :             *pEmitLoc++ = (uint8)disp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _disp$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN17@X86Emit_Mo:

; 202  :           }
; 203  :         }
; 204  :       }
; 205  :     }
; 206  :   }
; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ModRegRM
_TEXT	ENDS
PUBLIC	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
_groupIndex$ = 16					; size = 1
?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z PROC ; NativeCodeCache::X86Emit_Group1RR
; _this$ = ecx

; 210  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 211  :   //OP r8, reg8, OP r16, reg16 or OP r32, reg32
; 212  :   
; 213  :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN4@X86Emit_Gr

; 214  :   {
; 215  :     //m8, r8
; 216  :     *pEmitLoc++ = groupIndex << 3;

	movzx	eax, BYTE PTR _groupIndex$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 217  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_Gr
$LN4@X86Emit_Gr:

; 218  :   }
; 219  :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_Gr

; 220  :   {
; 221  :     //m16, r16
; 222  :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 223  :     *pEmitLoc++ = (groupIndex << 3) + 1;

	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	lea	edx, DWORD PTR [ecx*8+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 224  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 225  :   }
; 226  :   else

	jmp	SHORT $LN5@X86Emit_Gr
$LN2@X86Emit_Gr:

; 227  :   {
; 228  :     //m32, r32
; 229  :     *pEmitLoc++ = (groupIndex << 3) + 1;

	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	lea	edx, DWORD PTR [ecx*8+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 230  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_Gr:

; 231  :   }
; 232  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ENDP ; NativeCodeCache::X86Emit_Group1RR
_TEXT	ENDS
PUBLIC	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
_groupIndex$ = 28					; size = 1
?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z PROC ; NativeCodeCache::X86Emit_Group1RM
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 236  :   //OP m8, reg8, OP m16, reg16 or OP m32, reg32
; 237  : 
; 238  :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN4@X86Emit_Gr@2

; 239  :   {
; 240  :     //m8, r8
; 241  :     *pEmitLoc++ = (groupIndex << 3);

	movzx	eax, BYTE PTR _groupIndex$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 242  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_Gr@2
$LN4@X86Emit_Gr@2:

; 243  :   }
; 244  :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_Gr@2

; 245  :   {
; 246  :     //m16, r16
; 247  :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 248  :     *pEmitLoc++ = (groupIndex << 3) + 1;

	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	lea	edx, DWORD PTR [ecx*8+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 249  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 250  :   }
; 251  :   else

	jmp	SHORT $LN5@X86Emit_Gr@2
$LN2@X86Emit_Gr@2:

; 252  :   {
; 253  :     //m32, r32
; 254  :     *pEmitLoc++ = (groupIndex << 3) + 1;

	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	lea	edx, DWORD PTR [ecx*8+1]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 255  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_Gr@2:

; 256  :   }
; 257  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ENDP ; NativeCodeCache::X86Emit_Group1RM
_TEXT	ENDS
PUBLIC	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
_groupIndex$ = 28					; size = 1
?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z PROC ; NativeCodeCache::X86Emit_Group1MR
; _this$ = ecx

; 260  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 261  :   //OP reg8, m8, OP reg16, m16 or OP reg32, m32
; 262  :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_Gr@3

; 263  :   {
; 264  :     //r8, m8
; 265  :     *pEmitLoc++ = (groupIndex << 3) + 0x02;

	movzx	eax, BYTE PTR _groupIndex$[ebp]
	lea	ecx, DWORD PTR [eax*8+2]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 266  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_Gr@3
$LN4@X86Emit_Gr@3:

; 267  :   }
; 268  :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_Gr@3

; 269  :   {
; 270  :     //r16, m16
; 271  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 272  :     *pEmitLoc++ = (groupIndex << 3) + 0x03;

	movzx	edx, BYTE PTR _groupIndex$[ebp]
	lea	eax, DWORD PTR [edx*8+3]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 273  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 274  :   }
; 275  :   else

	jmp	SHORT $LN5@X86Emit_Gr@3
$LN2@X86Emit_Gr@3:

; 276  :   {
; 277  :     //r32, m32
; 278  :     *pEmitLoc++ = (groupIndex << 3) + 0x03;

	movzx	edx, BYTE PTR _groupIndex$[ebp]
	lea	eax, DWORD PTR [edx*8+3]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 279  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_Gr@3:

; 280  :   }
; 281  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ENDP ; NativeCodeCache::X86Emit_Group1MR
_TEXT	ENDS
PUBLIC	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
_groupIndex$ = 16					; size = 1
?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z PROC ; NativeCodeCache::X86Emit_Group1IR
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 285  :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	$LN14@X86Emit_Gr@4

; 286  :   {
; 287  :     //r8,imm8
; 288  :     if(regDest == x86Reg_al)

	cmp	DWORD PTR _regDest$[ebp], 0
	jne	SHORT $LN13@X86Emit_Gr@4

; 289  :     {
; 290  :       //al, imm8
; 291  :       *pEmitLoc++ = (groupIndex << 3) + 0x04;

	movzx	eax, BYTE PTR _groupIndex$[ebp]
	lea	ecx, DWORD PTR [eax*8+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 292  :       *pEmitLoc++ = (int8)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 293  :     }
; 294  :     else

	jmp	SHORT $LN12@X86Emit_Gr@4
$LN13@X86Emit_Gr@4:

; 295  :     {
; 296  :       //r8, imm8
; 297  :       *pEmitLoc++ = 0x80;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 128			; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 298  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 299  :       *pEmitLoc++ = (int8)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN12@X86Emit_Gr@4:

; 300  :     }

	jmp	$LN15@X86Emit_Gr@4
$LN14@X86Emit_Gr@4:

; 301  :   }
; 302  :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	$LN10@X86Emit_Gr@4

; 303  :   {
; 304  :     //r16, imm
; 305  :     if((imm <= 127) && (imm >= -128))

	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN9@X86Emit_Gr@4
	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN9@X86Emit_Gr@4

; 306  :     {
; 307  :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 308  :       *pEmitLoc++ = 0x83;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 131			; 00000083H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 309  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 310  :       *pEmitLoc++ = (int8)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN8@X86Emit_Gr@4
$LN9@X86Emit_Gr@4:

; 311  :     }
; 312  :     else if(regDest == x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jne	SHORT $LN7@X86Emit_Gr@4

; 313  :     {
; 314  :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 315  :       *pEmitLoc++ = (groupIndex << 3) + 0x05;

	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	lea	edx, DWORD PTR [ecx*8+5]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 316  :       *((int16 *)pEmitLoc) = (int16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 317  :       pEmitLoc += sizeof(int16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 318  :     }
; 319  :     else

	jmp	SHORT $LN8@X86Emit_Gr@4
$LN7@X86Emit_Gr@4:

; 320  :     {
; 321  :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 322  :       *pEmitLoc++ = 0x81;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 129			; 00000081H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 323  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 324  :       *((int16 *)pEmitLoc) = (int16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 325  :       pEmitLoc += sizeof(int16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN8@X86Emit_Gr@4:

; 326  :     }
; 327  :   }
; 328  :   else

	jmp	$LN15@X86Emit_Gr@4
$LN10@X86Emit_Gr@4:

; 329  :   {
; 330  :     //r32, imm
; 331  :     if((imm <= 127) && (imm >= -128))

	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN4@X86Emit_Gr@4
	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN4@X86Emit_Gr@4

; 332  :     {
; 333  :       *pEmitLoc++ = 0x83;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 131			; 00000083H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 334  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 335  :       *pEmitLoc++ = (int8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	jmp	$LN15@X86Emit_Gr@4
$LN4@X86Emit_Gr@4:

; 336  :     }
; 337  :     else if(regDest == x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jne	SHORT $LN2@X86Emit_Gr@4

; 338  :     {
; 339  :       *pEmitLoc++ = (groupIndex << 3) + 0x05;

	movzx	eax, BYTE PTR _groupIndex$[ebp]
	lea	ecx, DWORD PTR [eax*8+5]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 340  :       *((int32 *)pEmitLoc) = (int32)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [edx], eax

; 341  :       pEmitLoc += sizeof(int32);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 342  : 
; 343  :     }
; 344  :     else

	jmp	SHORT $LN15@X86Emit_Gr@4
$LN2@X86Emit_Gr@4:

; 345  :     {
; 346  :       *pEmitLoc++ = 0x81;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 129			; 00000081H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 347  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 348  :       *((int32 *)pEmitLoc) = (int32)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 349  :       pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN15@X86Emit_Gr@4:

; 350  :     }
; 351  :   }
; 352  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ENDP ; NativeCodeCache::X86Emit_Group1IR
_TEXT	ENDS
PUBLIC	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
_groupIndex$ = 32					; size = 1
?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z PROC ; NativeCodeCache::X86Emit_Group1IM
; _this$ = ecx

; 355  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 356  :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN8@X86Emit_Gr@5

; 357  :   {
; 358  :     //mem8,imm8
; 359  :     *pEmitLoc++ = 0x80;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 128			; 00000080H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 360  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 361  :     *pEmitLoc++ = (int8)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	jmp	$LN9@X86Emit_Gr@5
$LN8@X86Emit_Gr@5:

; 362  :   }
; 363  :   else if(ptrType == x86MemPtr_dword)

	cmp	DWORD PTR _ptrType$[ebp], 2
	jne	$LN6@X86Emit_Gr@5

; 364  :   {
; 365  :     //mem32, imm
; 366  :     if((imm <= 127) && (imm >= -128))

	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN5@X86Emit_Gr@5
	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN5@X86Emit_Gr@5

; 367  :     {
; 368  :       //mem32, imm8
; 369  :       *pEmitLoc++ = 0x83;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 131			; 00000083H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 370  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 371  :       *pEmitLoc++ = (int8)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 372  :     }
; 373  :     else

	jmp	SHORT $LN4@X86Emit_Gr@5
$LN5@X86Emit_Gr@5:

; 374  :     {
; 375  :       //mem32, imm32
; 376  :       *pEmitLoc++ = 0x81;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 129			; 00000081H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 377  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 378  :       *((int32 *)pEmitLoc) = (int32)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [ecx], edx

; 379  :       pEmitLoc += sizeof(int32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN4@X86Emit_Gr@5:

; 380  :     }
; 381  :   }
; 382  :   else

	jmp	$LN9@X86Emit_Gr@5
$LN6@X86Emit_Gr@5:

; 383  :   {
; 384  :     //mem16, imm
; 385  :     if((imm <= 127) && (imm >= -128))

	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@X86Emit_Gr@5
	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN2@X86Emit_Gr@5

; 386  :     {
; 387  :       //mem16, imm8
; 388  :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 389  :       *pEmitLoc++ = 0x83;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 131			; 00000083H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 390  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 391  :       *pEmitLoc++ = imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 392  :     }
; 393  :     else

	jmp	SHORT $LN9@X86Emit_Gr@5
$LN2@X86Emit_Gr@5:

; 394  :     {
; 395  :       //mem16, imm16
; 396  :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 397  :       *pEmitLoc++ = 0x81;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 129			; 00000081H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 398  :       //ModRegRM(modtype, regspare, base, index, scale, disp)
; 399  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 400  :       *((int16 *)pEmitLoc) = (int16)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _imm$[ebp]
	mov	WORD PTR [ecx], dx

; 401  :       pEmitLoc += sizeof(int16);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN9@X86Emit_Gr@5:

; 402  : 
; 403  :     }
; 404  :   }
; 405  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ENDP ; NativeCodeCache::X86Emit_Group1IM
_TEXT	ENDS
PUBLIC	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_groupIndex$ = 16					; size = 1
?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z PROC ; NativeCodeCache::X86Emit_Group2IR
; _this$ = ecx

; 408  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 409  :   //SHIFTOP r8, CL, SHIFTOP r16, CL, or SHIFTOP r32, CL
; 410  :   
; 411  :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	$LN10@X86Emit_Gr@6

; 412  :   {
; 413  :     if(shiftCount == 1)

	movzx	eax, BYTE PTR _shiftCount$[ebp]
	cmp	eax, 1
	jne	SHORT $LN9@X86Emit_Gr@6

; 414  :     {
; 415  :       *pEmitLoc++ = 0xD0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 208			; 000000d0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 416  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 417  :     }
; 418  :     else

	jmp	SHORT $LN8@X86Emit_Gr@6
$LN9@X86Emit_Gr@6:

; 419  :     {
; 420  :       *pEmitLoc++ = 0xC0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 192			; 000000c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 421  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 422  :       *pEmitLoc++ = shiftCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN8@X86Emit_Gr@6:

; 423  :     }

	jmp	$LN11@X86Emit_Gr@6
$LN10@X86Emit_Gr@6:

; 424  :   }
; 425  :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	$LN6@X86Emit_Gr@6

; 426  :   {
; 427  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 428  : 
; 429  :     if(shiftCount == 1)

	movzx	edx, BYTE PTR _shiftCount$[ebp]
	cmp	edx, 1
	jne	SHORT $LN5@X86Emit_Gr@6

; 430  :     {
; 431  :       *pEmitLoc++ = 0xD1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 209			; 000000d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 432  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 433  :     }
; 434  :     else

	jmp	SHORT $LN4@X86Emit_Gr@6
$LN5@X86Emit_Gr@6:

; 435  :     {
; 436  :       *pEmitLoc++ = 0xC1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 193			; 000000c1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 437  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 438  :       *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@X86Emit_Gr@6:

; 439  :     }
; 440  :   }
; 441  :   else

	jmp	$LN11@X86Emit_Gr@6
$LN6@X86Emit_Gr@6:

; 442  :   {
; 443  :     if(shiftCount == 1)

	movzx	edx, BYTE PTR _shiftCount$[ebp]
	cmp	edx, 1
	jne	SHORT $LN2@X86Emit_Gr@6

; 444  :     {
; 445  :       *pEmitLoc++ = 0xD1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 209			; 000000d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 446  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 447  :     }
; 448  :     else

	jmp	SHORT $LN11@X86Emit_Gr@6
$LN2@X86Emit_Gr@6:

; 449  :     {
; 450  :       *pEmitLoc++ = 0xC1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 193			; 000000c1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 451  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 452  :       *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN11@X86Emit_Gr@6:

; 453  :     }
; 454  :   }
; 455  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ENDP ; NativeCodeCache::X86Emit_Group2IR
_TEXT	ENDS
PUBLIC	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
_groupIndex$ = 32					; size = 1
?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z PROC ; NativeCodeCache::X86Emit_Group2IM
; _this$ = ecx

; 458  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 459  :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	$LN10@X86Emit_Gr@7

; 460  :   {
; 461  :     if(shiftCount == 1)

	movzx	eax, BYTE PTR _shiftCount$[ebp]
	cmp	eax, 1
	jne	SHORT $LN9@X86Emit_Gr@7

; 462  :     {
; 463  :       *pEmitLoc++ = 0xD0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 208			; 000000d0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 464  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 465  :     }
; 466  :     else

	jmp	SHORT $LN8@X86Emit_Gr@7
$LN9@X86Emit_Gr@7:

; 467  :     {
; 468  :       *pEmitLoc++ = 0xC0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 192			; 000000c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 469  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _groupIndex$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 470  :       *pEmitLoc++ = shiftCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN8@X86Emit_Gr@7:

; 471  :     }

	jmp	$LN11@X86Emit_Gr@7
$LN10@X86Emit_Gr@7:

; 472  :   }
; 473  :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	$LN6@X86Emit_Gr@7

; 474  :   {
; 475  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 476  : 
; 477  :     if(shiftCount == 1)

	movzx	edx, BYTE PTR _shiftCount$[ebp]
	cmp	edx, 1
	jne	SHORT $LN5@X86Emit_Gr@7

; 478  :     {
; 479  :       *pEmitLoc++ = 0xD1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 209			; 000000d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 480  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 481  :     }
; 482  :     else

	jmp	SHORT $LN4@X86Emit_Gr@7
$LN5@X86Emit_Gr@7:

; 483  :     {
; 484  :       *pEmitLoc++ = 0xC1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 193			; 000000c1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 485  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 486  :       *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@X86Emit_Gr@7:

; 487  :     }
; 488  :   }
; 489  :   else

	jmp	$LN11@X86Emit_Gr@7
$LN6@X86Emit_Gr@7:

; 490  :   {
; 491  :     if(shiftCount == 1)

	movzx	edx, BYTE PTR _shiftCount$[ebp]
	cmp	edx, 1
	jne	SHORT $LN2@X86Emit_Gr@7

; 492  :     {
; 493  :       *pEmitLoc++ = 0xD1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 209			; 000000d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 494  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 495  :     }
; 496  :     else

	jmp	SHORT $LN11@X86Emit_Gr@7
$LN2@X86Emit_Gr@7:

; 497  :     {
; 498  :       *pEmitLoc++ = 0xC1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 193			; 000000c1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 499  :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 500  :       *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN11@X86Emit_Gr@7:

; 501  :     }
; 502  :   }
; 503  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ENDP ; NativeCodeCache::X86Emit_Group2IM
_TEXT	ENDS
PUBLIC	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_groupIndex$ = 12					; size = 1
?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC ; NativeCodeCache::X86Emit_Group2RR
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 507  :   //SHIFTOP r8, CL, SHIFTOP r16, CL, or SHIFTOP r32, CL
; 508  :   
; 509  :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_Gr@8

; 510  :   {
; 511  :     //m8, r8
; 512  :     *pEmitLoc++ = 0xD2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 210			; 000000d2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 513  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_Gr@8
$LN4@X86Emit_Gr@8:

; 514  :   }
; 515  :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_Gr@8

; 516  :   {
; 517  :     //m16, r16
; 518  :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 519  :     *pEmitLoc++ = 0xD3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 211			; 000000d3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 520  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 521  :   }
; 522  :   else

	jmp	SHORT $LN5@X86Emit_Gr@8
$LN2@X86Emit_Gr@8:

; 523  :   {
; 524  :     //m32, r32
; 525  :     *pEmitLoc++ = 0xD3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 211			; 000000d3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 526  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)groupIndex,(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_Gr@8:

; 527  :   }
; 528  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP ; NativeCodeCache::X86Emit_Group2RR
_TEXT	ENDS
PUBLIC	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
_groupIndex$ = 28					; size = 1
?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z PROC ; NativeCodeCache::X86Emit_Group2RM
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 532  :   //OP m8, reg8, OP m16, reg16 or OP m32, reg32
; 533  : 
; 534  :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_Gr@9

; 535  :   {
; 536  :     *pEmitLoc++ = 0xD2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 210			; 000000d2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 537  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_Gr@9
$LN4@X86Emit_Gr@9:

; 538  :   }
; 539  :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_Gr@9

; 540  :   {
; 541  :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 542  :     *pEmitLoc++ = 0xD3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 211			; 000000d3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 543  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	movzx	eax, BYTE PTR _groupIndex$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 544  :   }
; 545  :   else

	jmp	SHORT $LN5@X86Emit_Gr@9
$LN2@X86Emit_Gr@9:

; 546  :   {
; 547  :     *pEmitLoc++ = 0xD3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 211			; 000000d3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 548  :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)groupIndex,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _groupIndex$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_Gr@9:

; 549  :   }
; 550  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ENDP ; NativeCodeCache::X86Emit_Group2RM
_TEXT	ENDS
PUBLIC	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_ADDRR
; _this$ = ecx

; 553  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 554  :   X86Emit_Group1RR(regDest, regSrc, 0);

	push	0
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 555  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_ADDRR
_TEXT	ENDS
PUBLIC	?X86Emit_ADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADDRM
; _this$ = ecx

; 558  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 559  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 0);

	push	0
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 560  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADDRM
_TEXT	ENDS
PUBLIC	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADDMR
; _this$ = ecx

; 563  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 564  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 0);

	push	0
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 565  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADDMR
_TEXT	ENDS
PUBLIC	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_ADDIR
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 569  :   X86Emit_Group1IR(imm, regDest, 0);

	push	0
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 570  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_ADDIR
_TEXT	ENDS
PUBLIC	?X86Emit_ADDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ADDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADDIM
; _this$ = ecx

; 573  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 574  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 0);

	push	0
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 575  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ADDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADDIM
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHES@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHES
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHES@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHES
; _this$ = ecx

; 578  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 579  :   *pEmitLoc++ = 0x06;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 580  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHES@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHES
_TEXT	ENDS
PUBLIC	?X86Emit_POPES@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPES
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPES@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPES
; _this$ = ecx

; 583  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 584  :   *pEmitLoc++ = 0x07;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 585  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPES@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPES
_TEXT	ENDS
PUBLIC	?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ORRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_ORRR
; _this$ = ecx

; 588  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 589  :   X86Emit_Group1RR(regDest, regSrc, 1);

	push	1
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 590  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_ORRR
_TEXT	ENDS
PUBLIC	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ORRM
; _this$ = ecx

; 593  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 594  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 1);

	push	1
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 595  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ORRM
_TEXT	ENDS
PUBLIC	?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ORMR
; _this$ = ecx

; 598  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 599  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 1);

	push	1
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 600  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ORMR
_TEXT	ENDS
PUBLIC	?X86Emit_ORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_ORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_ORIR
; _this$ = ecx

; 603  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 604  :   X86Emit_Group1IR(imm, regDest, 1);

	push	1
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 605  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_ORIR
_TEXT	ENDS
PUBLIC	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ORIM
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 609  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 1);

	push	1
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 610  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ORIM
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHCS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHCS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHCS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHCS
; _this$ = ecx

; 613  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 614  :   *pEmitLoc++ = 0x0E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 14			; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 615  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHCS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHCS
_TEXT	ENDS
PUBLIC	?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADCRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_ADCRR
; _this$ = ecx

; 618  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 619  :   X86Emit_Group1RR(regDest, regSrc, 2);

	push	2
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 620  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ADCRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_ADCRR
_TEXT	ENDS
PUBLIC	?X86Emit_ADCRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADCRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ADCRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADCRM
; _this$ = ecx

; 623  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 624  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 2);

	push	2
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ADCRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADCRM
_TEXT	ENDS
PUBLIC	?X86Emit_ADCMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADCMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ADCMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADCMR
; _this$ = ecx

; 628  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 2);

	push	2
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 630  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ADCMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADCMR
_TEXT	ENDS
PUBLIC	?X86Emit_ADCIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADCIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_ADCIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_ADCIR
; _this$ = ecx

; 633  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 634  :   X86Emit_Group1IR(imm, regDest, 2);

	push	2
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 635  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ADCIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_ADCIR
_TEXT	ENDS
PUBLIC	?X86Emit_ADCIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADCIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ADCIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ADCIM
; _this$ = ecx

; 638  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 639  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 2);

	push	2
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 640  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ADCIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ADCIM
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHSS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHSS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHSS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHSS
; _this$ = ecx

; 643  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 644  :   *pEmitLoc++ = 0x16;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 22			; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 645  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHSS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHSS
_TEXT	ENDS
PUBLIC	?X86Emit_POPSS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPSS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPSS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPSS
; _this$ = ecx

; 648  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 649  :   *pEmitLoc++ = 0x17;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 23			; 00000017H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 650  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPSS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPSS
_TEXT	ENDS
PUBLIC	?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SBBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_SBBRR
; _this$ = ecx

; 653  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 654  :   X86Emit_Group1RR(regDest, regSrc, 3);

	push	3
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 655  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SBBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_SBBRR
_TEXT	ENDS
PUBLIC	?X86Emit_SBBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SBBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SBBRM
; _this$ = ecx

; 658  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 659  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 3);

	push	3
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 660  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SBBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SBBRM
_TEXT	ENDS
PUBLIC	?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SBBMR
; _this$ = ecx

; 663  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 664  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 3);

	push	3
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 665  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SBBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SBBMR
_TEXT	ENDS
PUBLIC	?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SBBIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SBBIR
; _this$ = ecx

; 668  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 669  :   X86Emit_Group1IR(imm, regDest, 3);

	push	3
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 670  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SBBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SBBIR
_TEXT	ENDS
PUBLIC	?X86Emit_SBBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SBBIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SBBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SBBIM
; _this$ = ecx

; 673  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 674  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 3);

	push	3
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 675  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SBBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SBBIM
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHDS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHDS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHDS
; _this$ = ecx

; 678  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 679  :   *pEmitLoc++ = 0x1E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 30			; 0000001eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 680  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHDS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHDS
_TEXT	ENDS
PUBLIC	?X86Emit_POPDS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPDS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPDS
; _this$ = ecx

; 683  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 684  :   *pEmitLoc++ = 0x1F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 31			; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 685  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPDS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPDS
_TEXT	ENDS
PUBLIC	?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ANDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_ANDRR
; _this$ = ecx

; 688  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 689  :   X86Emit_Group1RR(regDest, regSrc, 4);

	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 690  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_ANDRR
_TEXT	ENDS
PUBLIC	?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ANDRM
; _this$ = ecx

; 693  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 694  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 4);

	push	4
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 695  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ANDRM
_TEXT	ENDS
PUBLIC	?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ANDMR
; _this$ = ecx

; 698  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 699  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 4);

	push	4
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 700  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ANDMR
_TEXT	ENDS
PUBLIC	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_ANDIR
; _this$ = ecx

; 703  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 704  :   X86Emit_Group1IR(imm, regDest, 4);

	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 705  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_ANDIR
_TEXT	ENDS
PUBLIC	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ANDIM
; _this$ = ecx

; 708  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 709  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 4);

	push	4
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 710  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ANDIM
_TEXT	ENDS
PUBLIC	?X86Emit_ES@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ES
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ES@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ES
; _this$ = ecx

; 713  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 714  :   *pEmitLoc++ = 0x26;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 38			; 00000026H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 715  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ES@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ES
_TEXT	ENDS
PUBLIC	?X86Emit_DAA@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_DAA
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_DAA@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_DAA
; _this$ = ecx

; 718  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 719  :   *pEmitLoc++ = 0x27;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 39			; 00000027H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 720  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_DAA@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_DAA
_TEXT	ENDS
PUBLIC	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_SUBRR
; _this$ = ecx

; 723  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 724  :   X86Emit_Group1RR(regDest, regSrc, 5);

	push	5
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 725  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_SUBRR
_TEXT	ENDS
PUBLIC	?X86Emit_SUBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SUBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SUBRM
; _this$ = ecx

; 728  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 729  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 5);

	push	5
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 730  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SUBRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SUBRM
_TEXT	ENDS
PUBLIC	?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SUBMR
; _this$ = ecx

; 733  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 734  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 5);

	push	5
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 735  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SUBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SUBMR
_TEXT	ENDS
PUBLIC	?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SUBIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SUBIR
; _this$ = ecx

; 738  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 739  :   X86Emit_Group1IR(imm, regDest, 5);

	push	5
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 740  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SUBIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SUBIR
_TEXT	ENDS
PUBLIC	?X86Emit_SUBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SUBIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SUBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SUBIM
; _this$ = ecx

; 743  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 744  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 5);

	push	5
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 745  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SUBIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SUBIM
_TEXT	ENDS
PUBLIC	?X86Emit_CS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CS
; _this$ = ecx

; 748  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 749  :   *pEmitLoc++ = 0x2E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 46			; 0000002eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 750  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CS
_TEXT	ENDS
PUBLIC	?X86Emit_DAS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_DAS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_DAS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_DAS
; _this$ = ecx

; 753  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 754  :   *pEmitLoc++ = 0x2F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 47			; 0000002fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 755  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_DAS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_DAS
_TEXT	ENDS
PUBLIC	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_XORRR
; _this$ = ecx

; 758  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 759  :   X86Emit_Group1RR(regDest, regSrc, 6);

	push	6
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 760  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_XORRR
_TEXT	ENDS
PUBLIC	?X86Emit_XORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_XORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_XORRM
; _this$ = ecx

; 763  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 764  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 6);

	push	6
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 765  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_XORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_XORRM
_TEXT	ENDS
PUBLIC	?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_XORMR
; _this$ = ecx

; 768  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 769  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 6);

	push	6
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 770  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_XORMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_XORMR
_TEXT	ENDS
PUBLIC	?X86Emit_XORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_XORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_XORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_XORIR
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 774  :   X86Emit_Group1IR(imm, regDest, 6);

	push	6
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 775  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_XORIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_XORIR
_TEXT	ENDS
PUBLIC	?X86Emit_XORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XORIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_XORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_XORIM
; _this$ = ecx

; 778  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 6);

	push	6
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_XORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_XORIM
_TEXT	ENDS
PUBLIC	?X86Emit_SS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_SS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_SS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_SS
; _this$ = ecx

; 783  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 784  :   *pEmitLoc++ = 0x36;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 54			; 00000036H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 785  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_SS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_SS
_TEXT	ENDS
PUBLIC	?X86Emit_AAA@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_AAA
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_AAA@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_AAA
; _this$ = ecx

; 788  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 789  :   *pEmitLoc++ = 0x37;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 55			; 00000037H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 790  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_AAA@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_AAA
_TEXT	ENDS
PUBLIC	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_CMPRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_CMPRR
; _this$ = ecx

; 793  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 794  :   X86Emit_Group1RR(regDest, regSrc, 7);

	push	7
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 795  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_CMPRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMPRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMPRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMPRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMPRM
; _this$ = ecx

; 798  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 799  :   X86Emit_Group1RM(regSrc, base, index, scale, disp, 7);

	push	7
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM

; 800  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMPRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMPRM
_TEXT	ENDS
PUBLIC	?X86Emit_CMPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMPMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMPMR
; _this$ = ecx

; 803  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 804  :   X86Emit_Group1MR(regDest, base, index, scale, disp, 7);

	push	7
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR

; 805  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMPMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_CMPIR
; _this$ = ecx

; 808  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 809  :   X86Emit_Group1IR(imm, regDest, 7);

	push	7
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _imm$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IR@NativeCodeCache@@QAEXHW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group1IR

; 810  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_CMPIR
_TEXT	ENDS
PUBLIC	?X86Emit_CMPIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMPIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_CMPIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMPIM
; _this$ = ecx

; 813  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 814  :   X86Emit_Group1IM(imm, ptrType, base, index, scale, disp, 7);

	push	7
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _imm$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1IM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1IM

; 815  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_CMPIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMPIM
_TEXT	ENDS
PUBLIC	?X86Emit_DS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_DS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_DS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_DS
; _this$ = ecx

; 818  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 819  :   *pEmitLoc++ = 0x3E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 62			; 0000003eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 820  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_DS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_DS
_TEXT	ENDS
PUBLIC	?X86Emit_AAS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_AAS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_AAS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_AAS
; _this$ = ecx

; 823  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 824  :   *pEmitLoc++ = 0x3F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 63			; 0000003fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 825  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_AAS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_AAS
_TEXT	ENDS
PUBLIC	?X86Emit_INCR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_INCR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_INCR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_INCR
; _this$ = ecx

; 828  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 829  :   if(reg < x86Reg_ax)

	cmp	DWORD PTR _reg$[ebp], 8
	jge	SHORT $LN4@X86Emit_IN

; 830  :   {
; 831  :     *pEmitLoc++ = 0xFE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 254			; 000000feH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 832  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	push	edx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	SHORT $LN5@X86Emit_IN
$LN4@X86Emit_IN:

; 833  :   }
; 834  :   else if(reg < x86Reg_eax)

	cmp	DWORD PTR _reg$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_IN

; 835  :   {
; 836  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 837  :     *pEmitLoc++ = 0x40 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 838  :   }
; 839  :   else

	jmp	SHORT $LN5@X86Emit_IN
$LN2@X86Emit_IN:

; 840  :   {
; 841  :     *pEmitLoc++ = 0x40 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_IN:

; 842  :   }
; 843  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_INCR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_INCR
_TEXT	ENDS
PUBLIC	?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_DECR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_DECR
; _this$ = ecx

; 846  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 847  :   if(reg < x86Reg_ax)

	cmp	DWORD PTR _reg$[ebp], 8
	jge	SHORT $LN4@X86Emit_DE

; 848  :   {
; 849  :     *pEmitLoc++ = 0xFE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 254			; 000000feH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 850  :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)1,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	push	edx
	push	1
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	SHORT $LN5@X86Emit_DE
$LN4@X86Emit_DE:

; 851  :   }
; 852  :   else if(reg < x86Reg_eax)

	cmp	DWORD PTR _reg$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_DE

; 853  :   {
; 854  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 855  :     *pEmitLoc++ = 0x48 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 856  :   }
; 857  :   else

	jmp	SHORT $LN5@X86Emit_DE
$LN2@X86Emit_DE:

; 858  :   {
; 859  :     *pEmitLoc++ = 0x48 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 72					; 00000048H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_DE:

; 860  :   }
; 861  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_DECR
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_PUSHR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_PUSHR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_PUSHR
; _this$ = ecx

; 864  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 865  :   if(reg < x86Reg_eax)

	cmp	DWORD PTR _reg$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_PU

; 866  :   {
; 867  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_PU:

; 868  :   }
; 869  : 
; 870  :   *pEmitLoc++ = 0x50 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 80					; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 871  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_PUSHR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_PUSHR
_TEXT	ENDS
PUBLIC	?X86Emit_POPR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_POPR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_POPR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_POPR
; _this$ = ecx

; 874  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 875  :   if(reg < x86Reg_eax)

	cmp	DWORD PTR _reg$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_PO

; 876  :   {
; 877  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_PO:

; 878  :   }
; 879  : 
; 880  :   *pEmitLoc++ = 0x58 + (reg & 0x07);  

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 881  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_POPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_POPR
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHAW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHAW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHAW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHAW
; _this$ = ecx

; 884  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 885  :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 886  :   *pEmitLoc++ = 0x60;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 96			; 00000060H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 887  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHAW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHAW
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHAD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHAD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHAD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHAD
; _this$ = ecx

; 890  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 891  :   *pEmitLoc++ = 0x60;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 96			; 00000060H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 892  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHAD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHAD
_TEXT	ENDS
PUBLIC	?X86Emit_POPAW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPAW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPAW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPAW
; _this$ = ecx

; 895  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 896  :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 897  :   *pEmitLoc++ = 0x61;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 97			; 00000061H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 898  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPAW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPAW
_TEXT	ENDS
PUBLIC	?X86Emit_POPAD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPAD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPAD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPAD
; _this$ = ecx

; 901  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 902  :   *pEmitLoc++ = 0x61;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 97			; 00000061H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 903  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPAD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPAD
_TEXT	ENDS
PUBLIC	?X86Emit_FS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_FS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_FS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_FS
; _this$ = ecx

; 906  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 907  :   *pEmitLoc++ = 0x64;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 100			; 00000064H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 908  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_FS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_FS
_TEXT	ENDS
PUBLIC	?X86Emit_GS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_GS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_GS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_GS
; _this$ = ecx

; 911  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 912  :   *pEmitLoc++ = 0x65;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 101			; 00000065H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 913  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_GS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_GS
_TEXT	ENDS
PUBLIC	?X86Emit_OPSIZE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_OPSIZE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_OPSIZE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_OPSIZE
; _this$ = ecx

; 916  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 917  :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 918  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_OPSIZE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_OPSIZE
_TEXT	ENDS
PUBLIC	?X86Emit_ADSIZE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ADSIZE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ADSIZE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ADSIZE
; _this$ = ecx

; 921  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 922  :   *pEmitLoc++ = 0x67;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 103			; 00000067H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 923  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ADSIZE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ADSIZE
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHID@NativeCodeCache@@QAEXH@Z	; NativeCodeCache::X86Emit_PUSHID
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
?X86Emit_PUSHID@NativeCodeCache@@QAEXH@Z PROC		; NativeCodeCache::X86Emit_PUSHID
; _this$ = ecx

; 926  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 927  :   *pEmitLoc++ = 0x68;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 104			; 00000068H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 928  :   *((int32 *)pEmitLoc++) = imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 929  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_PUSHID@NativeCodeCache@@QAEXH@Z ENDP		; NativeCodeCache::X86Emit_PUSHID
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHIW@NativeCodeCache@@QAEXF@Z	; NativeCodeCache::X86Emit_PUSHIW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 2
?X86Emit_PUSHIW@NativeCodeCache@@QAEXF@Z PROC		; NativeCodeCache::X86Emit_PUSHIW
; _this$ = ecx

; 932  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 933  :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 934  :   *pEmitLoc++ = 0x68;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 104			; 00000068H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 935  :   *((int16 *)pEmitLoc++) = imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ax, WORD PTR _imm$[ebp]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 936  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_PUSHIW@NativeCodeCache@@QAEXF@Z ENDP		; NativeCodeCache::X86Emit_PUSHIW
_TEXT	ENDS
PUBLIC	?X86Emit_IMULMRR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_IMULMRR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_IMULMRR
; _this$ = ecx

; 939  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 940  :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_IM

; 941  :   {
; 942  :     //imul reg16, r16
; 943  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_IM:

; 944  :   }
; 945  :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 946  :   *pEmitLoc++ = 0xAF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 175			; 000000afH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 947  :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 948  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_IMULMRR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_IMULMRR
_TEXT	ENDS
PUBLIC	?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_IMULRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC ; NativeCodeCache::X86Emit_IMULRRR
; _this$ = ecx

; 951  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 952  :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_IM@2

; 953  :   {
; 954  :     //imul reg16, r16
; 955  :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_IM@2:

; 956  :   }
; 957  :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 958  :   *pEmitLoc++ = 0xAF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 175			; 000000afH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 959  :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 960  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_IMULRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP ; NativeCodeCache::X86Emit_IMULRRR
_TEXT	ENDS
PUBLIC	?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ; NativeCodeCache::X86Emit_IMULIRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_imm$ = 12						; size = 4
_regSrc$ = 16						; size = 4
?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z PROC ; NativeCodeCache::X86Emit_IMULIRR
; _this$ = ecx

; 963  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 964  :   if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	$LN6@X86Emit_IM@3

; 965  :   {
; 966  :     //reg16, r8, imm8 or reg16, r16, imm16
; 967  :     if((imm >= -128) && (imm <= 127))

	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN5@X86Emit_IM@3
	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN5@X86Emit_IM@3

; 968  :     {
; 969  :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 970  :       *pEmitLoc++ = 0x6B;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 107			; 0000006bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 971  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 972  :       *pEmitLoc++ = (int8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 973  :     }
; 974  :     else

	jmp	SHORT $LN4@X86Emit_IM@3
$LN5@X86Emit_IM@3:

; 975  :     {
; 976  :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 977  :       *pEmitLoc++ = 0x69;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 105			; 00000069H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 978  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 979  :       *((int16 *)pEmitLoc) = (int16)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _imm$[ebp]
	mov	WORD PTR [ecx], dx

; 980  :       pEmitLoc += sizeof(int16);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN4@X86Emit_IM@3:

; 981  :     }
; 982  :   }
; 983  :   else

	jmp	$LN7@X86Emit_IM@3
$LN6@X86Emit_IM@3:

; 984  :   {
; 985  :     //reg32, r32, imm8 or reg32, r32, imm32
; 986  :     if((imm >= -128) && (imm <= 127))

	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN2@X86Emit_IM@3
	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@X86Emit_IM@3

; 987  :     {
; 988  :       *pEmitLoc++ = 0x6B;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 107			; 0000006bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 989  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 990  :       *pEmitLoc++ = (int8)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 991  :     }
; 992  :     else

	jmp	SHORT $LN7@X86Emit_IM@3
$LN2@X86Emit_IM@3:

; 993  :     {
; 994  :       *pEmitLoc++ = 0x69;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 105			; 00000069H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 995  :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 996  :       *((int32 *)pEmitLoc) = (int32)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 997  :       pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN7@X86Emit_IM@3:

; 998  :     }
; 999  :   }
; 1000 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_IMULIRR@NativeCodeCache@@QAEXW4x86Reg@@H0@Z ENDP ; NativeCodeCache::X86Emit_IMULIRR
_TEXT	ENDS
PUBLIC	?X86Emit_IMULIMR@NativeCodeCache@@QAEXW4x86Reg@@HIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULIMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_imm$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_IMULIMR@NativeCodeCache@@QAEXW4x86Reg@@HIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_IMULIMR
; _this$ = ecx

; 1003 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1004 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	$LN6@X86Emit_IM@4

; 1005 :   {
; 1006 :     //reg16, m8, imm8 or reg16, m16, imm16
; 1007 :     if((imm >= -128) && (imm <= 127))

	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN5@X86Emit_IM@4
	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN5@X86Emit_IM@4

; 1008 :     {
; 1009 :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1010 :       *pEmitLoc++ = 0x6B;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 107			; 0000006bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1011 :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1012 :       *pEmitLoc++ = (int8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1013 :     }
; 1014 :     else

	jmp	SHORT $LN4@X86Emit_IM@4
$LN5@X86Emit_IM@4:

; 1015 :     {
; 1016 :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1017 :       *pEmitLoc++ = 0x69;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 105			; 00000069H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1018 :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1019 :       *((int16 *)pEmitLoc) = (int16)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _imm$[ebp]
	mov	WORD PTR [ecx], dx

; 1020 :       pEmitLoc += sizeof(int16);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN4@X86Emit_IM@4:

; 1021 :     }
; 1022 :   }
; 1023 :   else

	jmp	$LN7@X86Emit_IM@4
$LN6@X86Emit_IM@4:

; 1024 :   {
; 1025 :     //reg32, m32, imm8 or reg32, m32, imm32
; 1026 :     if((imm >= -128) && (imm <= 127))

	cmp	DWORD PTR _imm$[ebp], -128		; ffffff80H
	jl	SHORT $LN2@X86Emit_IM@4
	cmp	DWORD PTR _imm$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@X86Emit_IM@4

; 1027 :     {
; 1028 :       *pEmitLoc++ = 0x6B;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 107			; 0000006bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1029 :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1030 :       *pEmitLoc++ = (int8)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1031 :     }
; 1032 :     else

	jmp	SHORT $LN7@X86Emit_IM@4
$LN2@X86Emit_IM@4:

; 1033 :     {
; 1034 :       *pEmitLoc++ = 0x69;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 105			; 00000069H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1035 :       X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1036 :       *((int32 *)pEmitLoc) = (int32)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 1037 :       pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN7@X86Emit_IM@4:

; 1038 :     }
; 1039 :   }
; 1040 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_IMULIMR@NativeCodeCache@@QAEXW4x86Reg@@HIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_IMULIMR
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHIB@NativeCodeCache@@QAEXC@Z	; NativeCodeCache::X86Emit_PUSHIB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 1
?X86Emit_PUSHIB@NativeCodeCache@@QAEXC@Z PROC		; NativeCodeCache::X86Emit_PUSHIB
; _this$ = ecx

; 1043 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1044 :   *pEmitLoc++ = 0x6A;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 106			; 0000006aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1045 :   *pEmitLoc++ = imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1046 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_PUSHIB@NativeCodeCache@@QAEXC@Z ENDP		; NativeCodeCache::X86Emit_PUSHIB
_TEXT	ENDS
PUBLIC	?X86Emit_INSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INSB
; _this$ = ecx

; 1049 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1050 :   *pEmitLoc++ = 0x6C;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 108			; 0000006cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1051 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INSB
_TEXT	ENDS
PUBLIC	?X86Emit_INSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INSW
; _this$ = ecx

; 1054 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1055 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1056 :   *pEmitLoc++ = 0x6C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 108			; 0000006cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1057 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INSW
_TEXT	ENDS
PUBLIC	?X86Emit_INSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INSD
; _this$ = ecx

; 1060 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1061 :   *pEmitLoc++ = 0x6C;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 108			; 0000006cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1062 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INSD
_TEXT	ENDS
PUBLIC	?X86Emit_OUTSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_OUTSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_OUTSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_OUTSB
; _this$ = ecx

; 1065 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1066 :   *pEmitLoc++ = 0x6E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 110			; 0000006eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1067 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_OUTSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_OUTSB
_TEXT	ENDS
PUBLIC	?X86Emit_OUTSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_OUTSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_OUTSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_OUTSW
; _this$ = ecx

; 1070 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1071 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1072 :   *pEmitLoc++ = 0x6E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 110			; 0000006eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1073 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_OUTSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_OUTSW
_TEXT	ENDS
PUBLIC	?X86Emit_OUTSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_OUTSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_OUTSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_OUTSD
; _this$ = ecx

; 1076 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1077 :   *pEmitLoc++ = 0x6E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 110			; 0000006eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1078 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_OUTSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_OUTSD
_TEXT	ENDS
PUBLIC	?X86Emit_FEMMS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_FEMMS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_FEMMS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_FEMMS
; _this$ = ecx

; 1081 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1082 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1083 :   *pEmitLoc++ = 0x0E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 14			; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1084 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_FEMMS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_FEMMS
_TEXT	ENDS
PUBLIC	?X86Emit_EMMS@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_EMMS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_EMMS@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_EMMS
; _this$ = ecx

; 1087 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1088 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1089 :   *pEmitLoc++ = 0x77;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 119			; 00000077H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1090 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_EMMS@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_EMMS
_TEXT	ENDS
PUBLIC	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z	; NativeCodeCache::X86Emit_JCC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pOffsetNear$ = -12					; size = 4
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
_conditionCode$ = 12					; size = 1
?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z PROC		; NativeCodeCache::X86Emit_JCC
; _this$ = ecx

; 1093 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1094 :   int32 pOffset = pTarget - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 1095 :   int32 pOffsetNear = pTarget - (pEmitLoc + 6);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 6
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffsetNear$[ebp], edx

; 1096 :   
; 1097 :   if((pOffset >= -128) && (pOffset <= 127))

	cmp	DWORD PTR _pOffset$[ebp], -128		; ffffff80H
	jl	SHORT $LN2@X86Emit_JC
	cmp	DWORD PTR _pOffset$[ebp], 127		; 0000007fH
	jg	SHORT $LN2@X86Emit_JC

; 1098 :   {
; 1099 :     *pEmitLoc++ = 0x70 + conditionCode;

	movsx	eax, BYTE PTR _conditionCode$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1100 :     *pEmitLoc++ = (int8)pOffset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1101 :   }
; 1102 :   else

	jmp	SHORT $LN3@X86Emit_JC
$LN2@X86Emit_JC:

; 1103 :   {
; 1104 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1105 :     *pEmitLoc++ = 0x80 + conditionCode;

	movsx	edx, BYTE PTR _conditionCode$[ebp]
	add	edx, 128				; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1106 :     *((int32 *)pEmitLoc) = pOffsetNear;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pOffsetNear$[ebp]
	mov	DWORD PTR [eax], ecx

; 1107 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_JC:

; 1108 :   }
; 1109 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ENDP		; NativeCodeCache::X86Emit_JCC
_TEXT	ENDS
PUBLIC	?GetLabelPointer@PatchManager@@QAEPAEI@Z	; PatchManager::GetLabelPointer
PUBLIC	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch
PUBLIC	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_conditionCode$ = 12					; size = 1
_labelIndex$ = 16					; size = 4
?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z PROC ; NativeCodeCache::X86Emit_JCC_Label
; _this$ = ecx

; 1112 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1113 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_JC@2

; 1114 :   {
; 1115 :     patchMgr->AddPatch(pEmitLoc + 2, PatchType_Rel32, pEmitLoc + 6, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 6
	push	ecx
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 1116 :     *pEmitLoc++ = 0x0F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 15			; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1117 :     *pEmitLoc++ = 0x80 + conditionCode;

	movsx	eax, BYTE PTR _conditionCode$[ebp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1118 :     *((int32 *)pEmitLoc) = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 0

; 1119 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1120 :   }
; 1121 :   else

	jmp	SHORT $LN3@X86Emit_JC@2
$LN2@X86Emit_JC@2:

; 1122 :   {
; 1123 :     X86Emit_JCC(patchMgr->GetLabelPointer(labelIndex),conditionCode);

	mov	dl, BYTE PTR _conditionCode$[ebp]
	push	edx
	mov	eax, DWORD PTR _labelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC
$LN3@X86Emit_JC@2:

; 1124 :   }
; 1125 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ENDP ; NativeCodeCache::X86Emit_JCC_Label
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchPtr$ = 8						; size = 4
_patchType$ = 12					; size = 4
_basePtr$ = 16						; size = 4
_destLabel$ = 20					; size = 4
?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z PROC	; PatchManager::AddPatch, COMDAT
; _this$ = ecx

; 60   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 61   :     patchData[numPatches].patchPtr = patchPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1280]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _patchPtr$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 62   :     patchData[numPatches].patchType = patchType;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1280]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _patchType$[ebp]
	mov	DWORD PTR [eax+edx+12], ecx

; 63   :     patchData[numPatches].basePtr = basePtr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1280]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _basePtr$[ebp]
	mov	DWORD PTR [ecx+eax+4], edx

; 64   :     patchData[numPatches].destLabel = destLabel;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1280]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _destLabel$[ebp]
	mov	DWORD PTR [edx+ecx+8], eax

; 65   :     numPatches++;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+1280]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], edx

; 66   :   }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ENDP	; PatchManager::AddPatch
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetLabelPointer@PatchManager@@QAEPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
?GetLabelPointer@PatchManager@@QAEPAEI@Z PROC		; PatchManager::GetLabelPointer, COMDAT
; _this$ = ecx

; 75   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 76   :     return labelPointers[labelIndex];

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+1024]

; 77   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetLabelPointer@PatchManager@@QAEPAEI@Z ENDP		; PatchManager::GetLabelPointer
_TEXT	ENDS
PUBLIC	?X86Emit_JO@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JO
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\nativecodecache.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JO@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JO
; _this$ = ecx

; 1128 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1129 :   X86Emit_JCC(pTarget,0);

	push	0
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1130 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JO@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JO
_TEXT	ENDS
PUBLIC	?X86Emit_JNO@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNO
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNO@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNO
; _this$ = ecx

; 1133 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1134 :   X86Emit_JCC(pTarget,1);

	push	1
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1135 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNO@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNO
_TEXT	ENDS
PUBLIC	?X86Emit_JB@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JB@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JB
; _this$ = ecx

; 1138 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1139 :   X86Emit_JCC(pTarget,2);

	push	2
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1140 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JB@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JB
_TEXT	ENDS
PUBLIC	?X86Emit_JNB@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNB@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNB
; _this$ = ecx

; 1143 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1144 :   X86Emit_JCC(pTarget,3);

	push	3
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1145 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNB@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNB
_TEXT	ENDS
PUBLIC	?X86Emit_JZ@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JZ@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JZ
; _this$ = ecx

; 1148 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1149 :   X86Emit_JCC(pTarget,4);

	push	4
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1150 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JZ@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JZ
_TEXT	ENDS
PUBLIC	?X86Emit_JNZ@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNZ@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNZ
; _this$ = ecx

; 1153 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1154 :   X86Emit_JCC(pTarget,5);

	push	5
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1155 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNZ@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNZ
_TEXT	ENDS
PUBLIC	?X86Emit_JBE@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JBE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JBE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JBE
; _this$ = ecx

; 1158 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1159 :   X86Emit_JCC(pTarget,6);

	push	6
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1160 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JBE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JBE
_TEXT	ENDS
PUBLIC	?X86Emit_JNBE@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_JNBE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNBE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNBE
; _this$ = ecx

; 1163 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1164 :   X86Emit_JCC(pTarget,7);

	push	7
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1165 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNBE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNBE
_TEXT	ENDS
PUBLIC	?X86Emit_JS@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JS@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JS
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1169 :   X86Emit_JCC(pTarget,8);

	push	8
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1170 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JS@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JS
_TEXT	ENDS
PUBLIC	?X86Emit_JNS@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNS@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNS
; _this$ = ecx

; 1173 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1174 :   X86Emit_JCC(pTarget,9);

	push	9
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1175 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNS@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNS
_TEXT	ENDS
PUBLIC	?X86Emit_JP@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JP@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JP
; _this$ = ecx

; 1178 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1179 :   X86Emit_JCC(pTarget,10);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1180 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JP@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JP
_TEXT	ENDS
PUBLIC	?X86Emit_JNP@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNP@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNP
; _this$ = ecx

; 1183 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1184 :   X86Emit_JCC(pTarget,11);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1185 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNP@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNP
_TEXT	ENDS
PUBLIC	?X86Emit_JL@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JL
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JL@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JL
; _this$ = ecx

; 1188 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1189 :   X86Emit_JCC(pTarget,12);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1190 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JL@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JL
_TEXT	ENDS
PUBLIC	?X86Emit_JNL@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JNL
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNL@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNL
; _this$ = ecx

; 1193 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1194 :   X86Emit_JCC(pTarget,13);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1195 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNL@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNL
_TEXT	ENDS
PUBLIC	?X86Emit_JLE@NativeCodeCache@@QAEXPAE@Z		; NativeCodeCache::X86Emit_JLE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JLE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JLE
; _this$ = ecx

; 1198 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1199 :   X86Emit_JCC(pTarget,14);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1200 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JLE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JLE
_TEXT	ENDS
PUBLIC	?X86Emit_JNLE@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_JNLE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JNLE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JNLE
; _this$ = ecx

; 1203 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1204 :   X86Emit_JCC(pTarget,15);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _pTarget$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JCC@NativeCodeCache@@QAEXPAEC@Z ; NativeCodeCache::X86Emit_JCC

; 1205 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JNLE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JNLE
_TEXT	ENDS
PUBLIC	?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_TESTRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_TESTRR
; _this$ = ecx

; 1208 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1209 :   //OP r8, reg8, OP r16, reg16 or OP r32, reg32
; 1210 :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN4@X86Emit_TE

; 1211 :   {
; 1212 :     //r8, r8
; 1213 :     *pEmitLoc++ = 0x84;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 132			; 00000084H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1214 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_TE
$LN4@X86Emit_TE:

; 1215 :   }
; 1216 :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_TE

; 1217 :   {
; 1218 :     //r16, r16
; 1219 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1220 :     *pEmitLoc++ = 0x85;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 133			; 00000085H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1221 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1222 :   }
; 1223 :   else

	jmp	SHORT $LN5@X86Emit_TE
$LN2@X86Emit_TE:

; 1224 :   {
; 1225 :     //r32, r32
; 1226 :     *pEmitLoc++ = 0x85;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 133			; 00000085H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1227 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_TE:

; 1228 :   }
; 1229 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_TESTRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_TESTRR
_TEXT	ENDS
PUBLIC	?X86Emit_TESTRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_TESTRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_TESTRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_TESTRM
; _this$ = ecx

; 1232 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1233 :   //OP m8, reg8, OP m16, reg16 or OP m32, reg32
; 1234 : 
; 1235 :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN4@X86Emit_TE@2

; 1236 :   {
; 1237 :     //m8, r8
; 1238 :     *pEmitLoc++ = 0x84;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 132			; 00000084H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1239 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_TE@2
$LN4@X86Emit_TE@2:

; 1240 :   }
; 1241 :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_TE@2

; 1242 :   {
; 1243 :     //m16, r16
; 1244 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1245 :     *pEmitLoc++ = 0x85;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 133			; 00000085H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1246 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1247 :   }
; 1248 :   else

	jmp	SHORT $LN5@X86Emit_TE@2
$LN2@X86Emit_TE@2:

; 1249 :   {
; 1250 :     //m32, r32
; 1251 :     *pEmitLoc++ = 0x85;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 133			; 00000085H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1252 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_TE@2:

; 1253 :   }
; 1254 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_TESTRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_TESTRM
_TEXT	ENDS
PUBLIC	?X86Emit_XCHGRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_XCHGRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_XCHGRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_XCHGRM
; _this$ = ecx

; 1257 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1258 :   //OP m8, reg8, OP m16, reg16 or OP m32, reg32
; 1259 : 
; 1260 :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN4@X86Emit_XC

; 1261 :   {
; 1262 :     //m8, r8
; 1263 :     *pEmitLoc++ = 0x86;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 134			; 00000086H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1264 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN5@X86Emit_XC
$LN4@X86Emit_XC:

; 1265 :   }
; 1266 :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_XC

; 1267 :   {
; 1268 :     //m16, r16
; 1269 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1270 :     *pEmitLoc++ = 0x87;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 135			; 00000087H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1271 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1272 :   }
; 1273 :   else

	jmp	SHORT $LN5@X86Emit_XC
$LN2@X86Emit_XC:

; 1274 :   {
; 1275 :     //m32, r32
; 1276 :     *pEmitLoc++ = 0x87;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 135			; 00000087H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1277 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN5@X86Emit_XC:

; 1278 :   }
; 1279 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_XCHGRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_XCHGRM
_TEXT	ENDS
PUBLIC	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_MOVRR
; _this$ = ecx

; 1282 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1283 :   X86Emit_Group1RR(regDest,regSrc,17);

	push	17					; 00000011H
	mov	eax, DWORD PTR _regSrc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_Group1RR

; 1284 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_MOVRR
_TEXT	ENDS
PUBLIC	?X86Emit_LEA@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_LEA
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_LEA@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_LEA
; _this$ = ecx

; 1287 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1288 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_LE

; 1289 :   {
; 1290 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_LE:

; 1291 :   }
; 1292 : 
; 1293 :   *pEmitLoc++ = 0x8D;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 141			; 0000008dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1294 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1295 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_LEA@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_LEA
_TEXT	ENDS
PUBLIC	?X86Emit_POPM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_POPM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_POPM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_POPM
; _this$ = ecx

; 1298 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1299 :   if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN1@X86Emit_PO@2

; 1300 :   {
; 1301 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_PO@2:

; 1302 :   }
; 1303 : 
; 1304 :   *pEmitLoc++ = 0x8F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 143			; 0000008fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1305 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)0,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1306 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_POPM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_POPM
_TEXT	ENDS
PUBLIC	?X86Emit_NOP@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_NOP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_NOP@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_NOP
; _this$ = ecx

; 1309 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1310 :   //Alias for XCHG rAX, rAX
; 1311 :   *pEmitLoc++ = 0x90;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 144			; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1312 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_NOP@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_NOP
_TEXT	ENDS
PUBLIC	?X86Emit_XCHGRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XCHGRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg1$ = 8						; size = 4
_reg2$ = 12						; size = 4
?X86Emit_XCHGRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_XCHGRR
; _this$ = ecx

; 1315 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1316 :   if((reg2 == x86Reg_eax) || (reg2 == x86Reg_ax))

	cmp	DWORD PTR _reg2$[ebp], 16		; 00000010H
	je	SHORT $LN11@X86Emit_XC@2
	cmp	DWORD PTR _reg2$[ebp], 8
	jne	SHORT $LN12@X86Emit_XC@2
$LN11@X86Emit_XC@2:

; 1317 :   {
; 1318 :     //r32, eax or r16, ax
; 1319 :     if(reg2 == x86Reg_ax)

	cmp	DWORD PTR _reg2$[ebp], 8
	jne	SHORT $LN10@X86Emit_XC@2

; 1320 :     {
; 1321 :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN10@X86Emit_XC@2:

; 1322 :     }
; 1323 :     *pEmitLoc++ = 0x90 + (reg1 & 0x07);

	mov	edx, DWORD PTR _reg1$[ebp]
	and	edx, 7
	add	edx, 144				; 00000090H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN13@X86Emit_XC@2
$LN12@X86Emit_XC@2:

; 1324 :   }
; 1325 :   else if((reg1 == x86Reg_eax) || (reg1 == x86Reg_ax))

	cmp	DWORD PTR _reg1$[ebp], 16		; 00000010H
	je	SHORT $LN7@X86Emit_XC@2
	cmp	DWORD PTR _reg1$[ebp], 8
	jne	SHORT $LN8@X86Emit_XC@2
$LN7@X86Emit_XC@2:

; 1326 :   {
; 1327 :     //eax, r32 or ax, r16
; 1328 :     if(reg1 == x86Reg_ax)

	cmp	DWORD PTR _reg1$[ebp], 8
	jne	SHORT $LN6@X86Emit_XC@2

; 1329 :     {
; 1330 :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN6@X86Emit_XC@2:

; 1331 :     }
; 1332 :     *pEmitLoc++ = 0x90 + (reg2 & 0x07);

	mov	ecx, DWORD PTR _reg2$[ebp]
	and	ecx, 7
	add	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1333 :   }
; 1334 :   else

	jmp	$LN13@X86Emit_XC@2
$LN8@X86Emit_XC@2:

; 1335 :   {
; 1336 :     if(reg1 < x86Reg_ax)

	cmp	DWORD PTR _reg1$[ebp], 8
	jge	SHORT $LN4@X86Emit_XC@2

; 1337 :     {
; 1338 :       //r8, r8
; 1339 :       *pEmitLoc++ = 86;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 86			; 00000056H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1340 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(reg2 & 0x07),(reg1 & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _reg1$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _reg2$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
	jmp	$LN13@X86Emit_XC@2
$LN4@X86Emit_XC@2:

; 1341 :     }
; 1342 :     else if(reg1 < x86Reg_eax)

	cmp	DWORD PTR _reg1$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_XC@2

; 1343 :     {
; 1344 :       //r16, r16
; 1345 :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1346 :       *pEmitLoc++ = 87;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 87			; 00000057H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1347 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(reg2 & 0x07),(reg1 & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _reg1$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _reg2$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1348 :     }
; 1349 :     else

	jmp	SHORT $LN13@X86Emit_XC@2
$LN2@X86Emit_XC@2:

; 1350 :     {
; 1351 :       //r32, r32
; 1352 :       *pEmitLoc++ = 87;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 87			; 00000057H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1353 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(reg2 & 0x07),(reg1 & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg1$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _reg2$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN13@X86Emit_XC@2:

; 1354 :     }
; 1355 :   
; 1356 :   }
; 1357 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_XCHGRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_XCHGRR
_TEXT	ENDS
PUBLIC	?X86Emit_CBW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CBW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CBW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CBW
; _this$ = ecx

; 1360 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1361 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1362 :   *pEmitLoc++ = 0x98;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 152			; 00000098H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1363 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CBW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CBW
_TEXT	ENDS
PUBLIC	?X86Emit_CWDE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CWDE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CWDE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CWDE
; _this$ = ecx

; 1366 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1367 :   *pEmitLoc++ = 0x98;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 152			; 00000098H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1368 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CWDE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CWDE
_TEXT	ENDS
PUBLIC	?X86Emit_CWD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CWD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CWD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CWD
; _this$ = ecx

; 1371 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1372 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1373 :   *pEmitLoc++ = 0x99;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 153			; 00000099H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1374 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CWD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CWD
_TEXT	ENDS
PUBLIC	?X86Emit_CDQ@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CDQ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CDQ@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CDQ
; _this$ = ecx

; 1377 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1378 :   *pEmitLoc++ = 0x99;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 153			; 00000099H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1379 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CDQ@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CDQ
_TEXT	ENDS
PUBLIC	?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z	; NativeCodeCache::X86Emit_CALLI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_offset$ = 8						; size = 4
_seg$ = 12						; size = 2
?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z PROC		; NativeCodeCache::X86Emit_CALLI
; _this$ = ecx

; 1382 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1383 :   offset -= (uint32)(pEmitLoc + 5);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 5
	mov	edx, DWORD PTR _offset$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _offset$[ebp], edx

; 1384 : 
; 1385 :   if(seg == 0)

	movzx	eax, WORD PTR _seg$[ebp]
	test	eax, eax
	jne	SHORT $LN2@X86Emit_CA

; 1386 :   {
; 1387 :     //CALL imm32
; 1388 :     *pEmitLoc++ = 0xE8;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 232			; 000000e8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1389 :     *((uint32 *)pEmitLoc) = offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [ecx], edx

; 1390 :     pEmitLoc += sizeof(int32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1391 : 
; 1392 :   }
; 1393 :   else

	jmp	SHORT $LN3@X86Emit_CA
$LN2@X86Emit_CA:

; 1394 :   {
; 1395 :     //CALL imm:imm32
; 1396 :     *pEmitLoc++ = 0x9A;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 154			; 0000009aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1397 :     *((uint32 *)pEmitLoc) = offset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax], ecx

; 1398 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1399 :     *((uint16 *)pEmitLoc) = seg;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _seg$[ebp]
	mov	WORD PTR [eax], cx

; 1400 :     pEmitLoc += sizeof(int16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_CA:

; 1401 :   }
; 1402 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CALLI@NativeCodeCache@@QAEXIG@Z ENDP		; NativeCodeCache::X86Emit_CALLI
_TEXT	ENDS
PUBLIC	?X86Emit_JMPI@NativeCodeCache@@QAEXPAEG@Z	; NativeCodeCache::X86Emit_JMPI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_offsetNear$ = -12					; size = 4
_offset$ = -8						; size = 4
_this$ = -4						; size = 4
_target$ = 8						; size = 4
_seg$ = 12						; size = 2
?X86Emit_JMPI@NativeCodeCache@@QAEXPAEG@Z PROC		; NativeCodeCache::X86Emit_JMPI
; _this$ = ecx

; 1405 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1406 :   int32 offset = target - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _target$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _offset$[ebp], edx

; 1407 :   int32 offsetNear = target - (pEmitLoc + 5);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 5
	mov	edx, DWORD PTR _target$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _offsetNear$[ebp], edx

; 1408 : 
; 1409 :   if(seg == 0)

	movzx	eax, WORD PTR _seg$[ebp]
	test	eax, eax
	jne	SHORT $LN4@X86Emit_JM

; 1410 :   {
; 1411 :     if((offset >= -128) && (offset < 128))

	cmp	DWORD PTR _offset$[ebp], -128		; ffffff80H
	jl	SHORT $LN3@X86Emit_JM
	cmp	DWORD PTR _offset$[ebp], 128		; 00000080H
	jge	SHORT $LN3@X86Emit_JM

; 1412 :     {
; 1413 :       *pEmitLoc++ = 0xEB;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 235			; 000000ebH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1414 :       *pEmitLoc++ = (int8)offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _offset$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1415 :     }
; 1416 :     else

	jmp	SHORT $LN2@X86Emit_JM
$LN3@X86Emit_JM:

; 1417 :     {
; 1418 :       *pEmitLoc++ = 0xE9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 233			; 000000e9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1419 :       *((int32 *)pEmitLoc) = offsetNear;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _offsetNear$[ebp]
	mov	DWORD PTR [eax], ecx

; 1420 :       pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@X86Emit_JM:

; 1421 :     }
; 1422 :   }
; 1423 :   else

	jmp	SHORT $LN5@X86Emit_JM
$LN4@X86Emit_JM:

; 1424 :   {
; 1425 :     //JMP imm:imm32
; 1426 :     *pEmitLoc++ = 0xEA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 234			; 000000eaH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1427 :     *((uint32 *)pEmitLoc) = offset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [edx], eax

; 1428 :     pEmitLoc += sizeof(uint32);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1429 :     *((uint16 *)pEmitLoc) = seg;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ax, WORD PTR _seg$[ebp]
	mov	WORD PTR [edx], ax

; 1430 :     pEmitLoc += sizeof(uint16);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN5@X86Emit_JM:

; 1431 :   }
; 1432 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_JMPI@NativeCodeCache@@QAEXPAEG@Z ENDP		; NativeCodeCache::X86Emit_JMPI
_TEXT	ENDS
PUBLIC	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_JMPI_Label
; _this$ = ecx

; 1435 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1436 :   if(labelIndex >= patchMgr->numPatches)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1280]
	jb	SHORT $LN2@X86Emit_JM@2

; 1437 :   {
; 1438 :     patchMgr->AddPatch(pEmitLoc + 1, PatchType_Rel32, pEmitLoc + 5, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 5
	push	ecx
	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 1439 :     *pEmitLoc++ = 0xE9;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 233			; 000000e9H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1440 :     *((int32 *)pEmitLoc) = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], 0

; 1441 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1442 :   }
; 1443 :   else

	jmp	SHORT $LN3@X86Emit_JM@2
$LN2@X86Emit_JM@2:

; 1444 :   {
; 1445 :     X86Emit_JMPI(patchMgr->GetLabelPointer(labelIndex),0);

	push	0
	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JMPI@NativeCodeCache@@QAEXPAEG@Z ; NativeCodeCache::X86Emit_JMPI
$LN3@X86Emit_JM@2:

; 1446 :   }
; 1447 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_JMPI_Label
_TEXT	ENDS
PUBLIC	?X86Emit_WAIT@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_WAIT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_WAIT@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_WAIT
; _this$ = ecx

; 1450 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1451 :   *pEmitLoc++ = 0x9B;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 155			; 0000009bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1452 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_WAIT@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_WAIT
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHFW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHFW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHFW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHFW
; _this$ = ecx

; 1455 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1456 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1457 :   *pEmitLoc++ = 0x9C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 156			; 0000009cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1458 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHFW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHFW
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHFD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_PUSHFD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_PUSHFD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_PUSHFD
; _this$ = ecx

; 1461 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1462 :   *pEmitLoc++ = 0x9C;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 156			; 0000009cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1463 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_PUSHFD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_PUSHFD
_TEXT	ENDS
PUBLIC	?X86Emit_POPFW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPFW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPFW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPFW
; _this$ = ecx

; 1466 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1467 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1468 :   *pEmitLoc++ = 0x9D;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 157			; 0000009dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1469 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPFW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPFW
_TEXT	ENDS
PUBLIC	?X86Emit_POPFD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_POPFD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_POPFD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_POPFD
; _this$ = ecx

; 1472 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1473 :   *pEmitLoc++ = 0x9D;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 157			; 0000009dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1474 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_POPFD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_POPFD
_TEXT	ENDS
PUBLIC	?X86Emit_SAHF@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_SAHF
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_SAHF@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_SAHF
; _this$ = ecx

; 1477 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1478 :   *pEmitLoc++ = 0x9E;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 158			; 0000009eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1479 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_SAHF@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_SAHF
_TEXT	ENDS
PUBLIC	?X86Emit_LAHF@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LAHF
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LAHF@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LAHF
; _this$ = ecx

; 1482 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1483 :   *pEmitLoc++ = 0x9F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 159			; 0000009fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1484 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LAHF@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LAHF
_TEXT	ENDS
PUBLIC	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVMR
; _this$ = ecx

; 1487 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1488 :   if((base > 7) && ((regDest == x86Reg_eax) || (regDest == x86Reg_ax) || (regDest == x86Reg_al)))

	cmp	DWORD PTR _base$[ebp], 7
	jbe	$LN6@X86Emit_MO
	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	je	SHORT $LN5@X86Emit_MO
	cmp	DWORD PTR _regDest$[ebp], 8
	je	SHORT $LN5@X86Emit_MO
	cmp	DWORD PTR _regDest$[ebp], 0
	jne	SHORT $LN6@X86Emit_MO
$LN5@X86Emit_MO:

; 1489 :   {
; 1490 :     if(regDest == x86Reg_al)

	cmp	DWORD PTR _regDest$[ebp], 0
	jne	SHORT $LN4@X86Emit_MO

; 1491 :     {
; 1492 :       *pEmitLoc++ = 0xA0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 160			; 000000a0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1493 :     }
; 1494 :     else

	jmp	SHORT $LN3@X86Emit_MO
$LN4@X86Emit_MO:

; 1495 :     {
; 1496 :       if(regDest == x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jne	SHORT $LN2@X86Emit_MO

; 1497 :       {
; 1498 :         *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@X86Emit_MO:

; 1499 :       }
; 1500 :       *pEmitLoc++ = 0xA1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 161			; 000000a1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@X86Emit_MO:

; 1501 :     }
; 1502 :     *((uint32 *)pEmitLoc) = base;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx

; 1503 :     pEmitLoc += sizeof(int32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1504 : 
; 1505 :   }
; 1506 :   else

	jmp	SHORT $LN7@X86Emit_MO
$LN6@X86Emit_MO:

; 1507 :   {
; 1508 :     X86Emit_Group1MR(regDest,base,index,scale,disp,17);

	push	17					; 00000011H
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1MR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1MR
$LN7@X86Emit_MO:

; 1509 :   }
; 1510 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVMR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVRM
; _this$ = ecx

; 1513 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1514 :   if((base > 7) && ((regSrc == x86Reg_eax) || (regSrc == x86Reg_ax) || (regSrc == x86Reg_al)))

	cmp	DWORD PTR _base$[ebp], 7
	jbe	$LN6@X86Emit_MO@2
	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	je	SHORT $LN5@X86Emit_MO@2
	cmp	DWORD PTR _regSrc$[ebp], 8
	je	SHORT $LN5@X86Emit_MO@2
	cmp	DWORD PTR _regSrc$[ebp], 0
	jne	SHORT $LN6@X86Emit_MO@2
$LN5@X86Emit_MO@2:

; 1515 :   {
; 1516 :     if(regSrc == x86Reg_al)

	cmp	DWORD PTR _regSrc$[ebp], 0
	jne	SHORT $LN4@X86Emit_MO@2

; 1517 :     {
; 1518 :       *pEmitLoc++ = 0xA2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 162			; 000000a2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1519 :     }
; 1520 :     else

	jmp	SHORT $LN3@X86Emit_MO@2
$LN4@X86Emit_MO@2:

; 1521 :     {
; 1522 :       if(regSrc == x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jne	SHORT $LN2@X86Emit_MO@2

; 1523 :       {
; 1524 :         *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@X86Emit_MO@2:

; 1525 :       }
; 1526 :       *pEmitLoc++ = 0xA3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 163			; 000000a3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@X86Emit_MO@2:

; 1527 :     }
; 1528 :     *((uint32 *)pEmitLoc) = base;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR [ecx], edx

; 1529 :     pEmitLoc += sizeof(int32);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1530 :   }
; 1531 :   else

	jmp	SHORT $LN7@X86Emit_MO@2
$LN6@X86Emit_MO@2:

; 1532 :   {
; 1533 :     X86Emit_Group1RM(regSrc,base,index,scale,disp,17);

	push	17					; 00000011H
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group1RM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group1RM
$LN7@X86Emit_MO@2:

; 1534 :   }
; 1535 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVRM
_TEXT	ENDS
PUBLIC	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regDest$ = 12						; size = 4
?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_MOVIR
; _this$ = ecx

; 1538 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1539 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_MO@3

; 1540 :   {
; 1541 :     //r8,imm8
; 1542 :     *pEmitLoc++ = 0xB0 + (regDest & 0x07);

	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	add	eax, 176				; 000000b0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1543 :     *pEmitLoc++ = (int8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	jmp	$LN5@X86Emit_MO@3
$LN4@X86Emit_MO@3:

; 1544 :   }
; 1545 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_MO@3

; 1546 :   {
; 1547 :     //r16, imm16
; 1548 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1549 :     *pEmitLoc++ = 0xB8 + (regDest & 0x07);

	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	add	edx, 184				; 000000b8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1550 :     *((int16 *)pEmitLoc) = (int16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 1551 :     pEmitLoc += sizeof(int16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1552 : 
; 1553 :   }
; 1554 :   else

	jmp	SHORT $LN5@X86Emit_MO@3
$LN2@X86Emit_MO@3:

; 1555 :   {
; 1556 :     //r32, imm32
; 1557 :     *pEmitLoc++ = 0xB8 + (regDest & 0x07);

	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	add	edx, 184				; 000000b8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1558 :     *((int32 *)pEmitLoc) = imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 1559 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_MO@3:

; 1560 :   }
; 1561 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_MOVIR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_MOVSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_MOVSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_MOVSB
; _this$ = ecx

; 1564 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1565 :   *pEmitLoc++ = 0xA4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 164			; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1566 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_MOVSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_MOVSB
_TEXT	ENDS
PUBLIC	?X86Emit_MOVSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_MOVSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_MOVSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_MOVSW
; _this$ = ecx

; 1569 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1570 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1571 :   *pEmitLoc++ = 0xA5;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 165			; 000000a5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1572 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_MOVSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_MOVSW
_TEXT	ENDS
PUBLIC	?X86Emit_MOVSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_MOVSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_MOVSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_MOVSD
; _this$ = ecx

; 1575 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1576 :   *pEmitLoc++ = 0xA5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 165			; 000000a5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1577 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_MOVSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_MOVSD
_TEXT	ENDS
PUBLIC	?X86Emit_CMPSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CMPSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CMPSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CMPSB
; _this$ = ecx

; 1580 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1581 :   *pEmitLoc++ = 0xA6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 166			; 000000a6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1582 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CMPSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CMPSB
_TEXT	ENDS
PUBLIC	?X86Emit_CMPSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CMPSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CMPSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CMPSW
; _this$ = ecx

; 1585 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1586 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1587 :   *pEmitLoc++ = 0xA7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 167			; 000000a7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1588 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CMPSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CMPSW
_TEXT	ENDS
PUBLIC	?X86Emit_CMPSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CMPSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CMPSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CMPSD
; _this$ = ecx

; 1591 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1592 :   *pEmitLoc++ = 0xA7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 167			; 000000a7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1593 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CMPSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CMPSD
_TEXT	ENDS
PUBLIC	?X86Emit_STOSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STOSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STOSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STOSB
; _this$ = ecx

; 1596 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1597 :   *pEmitLoc++ = 0xAA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 170			; 000000aaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1598 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STOSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STOSB
_TEXT	ENDS
PUBLIC	?X86Emit_STOSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STOSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STOSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STOSW
; _this$ = ecx

; 1601 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1602 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1603 :   *pEmitLoc++ = 0xAB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 171			; 000000abH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1604 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STOSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STOSW
_TEXT	ENDS
PUBLIC	?X86Emit_STOSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STOSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STOSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STOSD
; _this$ = ecx

; 1607 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1608 :   *pEmitLoc++ = 0xAB;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 171			; 000000abH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1609 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STOSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STOSD
_TEXT	ENDS
PUBLIC	?X86Emit_LODSB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LODSB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LODSB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LODSB
; _this$ = ecx

; 1612 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1613 :   *pEmitLoc++ = 0xAC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 172			; 000000acH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1614 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LODSB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LODSB
_TEXT	ENDS
PUBLIC	?X86Emit_LODSW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LODSW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LODSW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LODSW
; _this$ = ecx

; 1617 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1618 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1619 :   *pEmitLoc++ = 0xAD;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 173			; 000000adH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1620 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LODSW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LODSW
_TEXT	ENDS
PUBLIC	?X86Emit_LODSD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LODSD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LODSD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LODSD
; _this$ = ecx

; 1623 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1624 :   *pEmitLoc++ = 0xAD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 173			; 000000adH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1625 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LODSD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LODSD
_TEXT	ENDS
PUBLIC	?X86Emit_SCASB@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_SCASB
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_SCASB@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_SCASB
; _this$ = ecx

; 1628 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1629 :   *pEmitLoc++ = 0xAD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 173			; 000000adH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1630 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_SCASB@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_SCASB
_TEXT	ENDS
PUBLIC	?X86Emit_SCASW@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_SCASW
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_SCASW@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_SCASW
; _this$ = ecx

; 1633 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1634 :   *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1635 :   *pEmitLoc++ = 0xAF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 175			; 000000afH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1636 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_SCASW@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_SCASW
_TEXT	ENDS
PUBLIC	?X86Emit_SCASD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_SCASD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_SCASD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_SCASD
; _this$ = ecx

; 1639 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1640 :   *pEmitLoc++ = 0xAF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 175			; 000000afH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1641 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_SCASD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_SCASD
_TEXT	ENDS
PUBLIC	?X86Emit_ROLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_ROLIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_ROLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_ROLIR
; _this$ = ecx

; 1644 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1645 :   X86Emit_Group2IR(regDest, shiftCount, 0);

	push	0
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1646 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_ROLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_ROLIR
_TEXT	ENDS
PUBLIC	?X86Emit_RORIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RORIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_RORIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_RORIR
; _this$ = ecx

; 1649 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1650 :   X86Emit_Group2IR(regDest, shiftCount, 1);

	push	1
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1651 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_RORIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_RORIR
_TEXT	ENDS
PUBLIC	?X86Emit_RCLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCLIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_RCLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_RCLIR
; _this$ = ecx

; 1654 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1655 :   X86Emit_Group2IR(regDest, shiftCount, 2);

	push	2
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1656 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_RCLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_RCLIR
_TEXT	ENDS
PUBLIC	?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_RCRIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_RCRIR
; _this$ = ecx

; 1659 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1660 :   X86Emit_Group2IR(regDest, shiftCount, 3);

	push	3
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1661 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_RCRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_RCRIR
_TEXT	ENDS
PUBLIC	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_SHLIR
; _this$ = ecx

; 1664 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1665 :   X86Emit_Group2IR(regDest, shiftCount, 4);

	push	4
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1666 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_SHLIR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHRIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_SHRIR
; _this$ = ecx

; 1669 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1670 :   X86Emit_Group2IR(regDest, shiftCount, 5);

	push	5
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1671 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SHRIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_SHRIR
_TEXT	ENDS
PUBLIC	?X86Emit_SALIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SALIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_SALIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_SALIR
; _this$ = ecx

; 1674 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1675 :   X86Emit_Group2IR(regDest, shiftCount, 6);

	push	6
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1676 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SALIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_SALIR
_TEXT	ENDS
PUBLIC	?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SARIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_SARIR
; _this$ = ecx

; 1679 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1680 :   X86Emit_Group2IR(regDest, shiftCount, 7);

	push	7
	mov	al, BYTE PTR _shiftCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IR@NativeCodeCache@@QAEXW4x86Reg@@EE@Z ; NativeCodeCache::X86Emit_Group2IR

; 1681 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SARIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_SARIR
_TEXT	ENDS
PUBLIC	?X86Emit_ROLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ROLIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_ROLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ROLIM
; _this$ = ecx

; 1684 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1685 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 0);

	push	0
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1686 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_ROLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ROLIM
_TEXT	ENDS
PUBLIC	?X86Emit_RORIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RORIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_RORIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RORIM
; _this$ = ecx

; 1689 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1690 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 1);

	push	1
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1691 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_RORIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RORIM
_TEXT	ENDS
PUBLIC	?X86Emit_RCLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RCLIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_RCLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RCLIM
; _this$ = ecx

; 1694 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1695 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 2);

	push	2
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1696 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_RCLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RCLIM
_TEXT	ENDS
PUBLIC	?X86Emit_RCRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RCRIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_RCRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RCRIM
; _this$ = ecx

; 1699 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1700 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 3);

	push	3
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1701 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_RCRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RCRIM
_TEXT	ENDS
PUBLIC	?X86Emit_SHLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SHLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHLIM
; _this$ = ecx

; 1704 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1705 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 4);

	push	4
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1706 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SHLIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHLIM
_TEXT	ENDS
PUBLIC	?X86Emit_SHRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHRIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SHRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHRIM
; _this$ = ecx

; 1709 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1710 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 5);

	push	5
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1711 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SHRIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHRIM
_TEXT	ENDS
PUBLIC	?X86Emit_SALIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SALIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SALIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SALIM
; _this$ = ecx

; 1714 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1715 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 6);

	push	6
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1716 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SALIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SALIM
_TEXT	ENDS
PUBLIC	?X86Emit_SARIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SARIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_shiftCount$ = 12					; size = 1
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SARIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SARIM
; _this$ = ecx

; 1719 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1720 :   X86Emit_Group2IM(ptrType, shiftCount, base, index, scale, disp, 7);

	push	7
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	cl, BYTE PTR _shiftCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ptrType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2IM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2IM

; 1721 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SARIM@NativeCodeCache@@QAEXW4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SARIM
_TEXT	ENDS
PUBLIC	?X86Emit_ROLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ROLRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_ROLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_ROLRM
; _this$ = ecx

; 1724 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1725 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 0);

	push	0
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1726 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_ROLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_ROLRM
_TEXT	ENDS
PUBLIC	?X86Emit_RORRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RORRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_RORRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RORRM
; _this$ = ecx

; 1729 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1730 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 1);

	push	1
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1731 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_RORRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RORRM
_TEXT	ENDS
PUBLIC	?X86Emit_RCLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RCLRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_RCLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RCLRM
; _this$ = ecx

; 1734 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1735 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 2);

	push	2
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1736 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_RCLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RCLRM
_TEXT	ENDS
PUBLIC	?X86Emit_RCRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_RCRRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_RCRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_RCRRM
; _this$ = ecx

; 1739 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1740 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 3);

	push	3
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1741 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_RCRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_RCRRM
_TEXT	ENDS
PUBLIC	?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHLRM
; _this$ = ecx

; 1744 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1745 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 4);

	push	4
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1746 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SHLRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHLRM
_TEXT	ENDS
PUBLIC	?X86Emit_SHRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHRRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SHRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHRRM
; _this$ = ecx

; 1749 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1750 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 5);

	push	5
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1751 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SHRRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHRRM
_TEXT	ENDS
PUBLIC	?X86Emit_SALRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SALRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SALRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SALRM
; _this$ = ecx

; 1754 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1755 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 6);

	push	6
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1756 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SALRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SALRM
_TEXT	ENDS
PUBLIC	?X86Emit_SARRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SARRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_SARRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SARRM
; _this$ = ecx

; 1759 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1760 :   X86Emit_Group2RM(ptrType, base, index, scale, disp, 7);

	push	7
	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptrType$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@HE@Z ; NativeCodeCache::X86Emit_Group2RM

; 1761 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_SARRM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SARRM
_TEXT	ENDS
PUBLIC	?X86Emit_RETN@NativeCodeCache@@QAEXG@Z		; NativeCodeCache::X86Emit_RETN
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iw$ = 8						; size = 2
?X86Emit_RETN@NativeCodeCache@@QAEXG@Z PROC		; NativeCodeCache::X86Emit_RETN
; _this$ = ecx

; 1764 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1765 :   if(iw == 0)

	movzx	eax, WORD PTR _iw$[ebp]
	test	eax, eax
	jne	SHORT $LN2@X86Emit_RE

; 1766 :   {
; 1767 :     *pEmitLoc++ = 0xC3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 195			; 000000c3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1768 :   }
; 1769 :   else

	jmp	SHORT $LN3@X86Emit_RE
$LN2@X86Emit_RE:

; 1770 :   {
; 1771 :     *pEmitLoc++ = 0xC2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 194			; 000000c2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1772 :     *((uint16 *)pEmitLoc) = iw;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _iw$[ebp]
	mov	WORD PTR [eax], cx

; 1773 :     pEmitLoc += sizeof(uint16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_RE:

; 1774 :   }
; 1775 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_RETN@NativeCodeCache@@QAEXG@Z ENDP		; NativeCodeCache::X86Emit_RETN
_TEXT	ENDS
PUBLIC	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVIM
; _this$ = ecx

; 1778 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1779 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_MO@4

; 1780 :   {
; 1781 :     //m8,imm8
; 1782 :     *pEmitLoc++ = 0xC6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 198			; 000000c6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1783 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)0,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1784 :     *pEmitLoc++ = (int8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	jmp	$LN5@X86Emit_MO@4
$LN4@X86Emit_MO@4:

; 1785 :   }
; 1786 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_MO@4

; 1787 :   {
; 1788 :     //m16, imm16
; 1789 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1790 :     *pEmitLoc++ = 0xC7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 199			; 000000c7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1791 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)0,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1792 :     *((int16 *)pEmitLoc) = (int16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 1793 :     pEmitLoc += sizeof(int16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1794 : 
; 1795 :   }
; 1796 :   else

	jmp	SHORT $LN5@X86Emit_MO@4
$LN2@X86Emit_MO@4:

; 1797 :   {
; 1798 :     //m32, imm32
; 1799 :     *pEmitLoc++ = 0xC7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 199			; 000000c7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1800 :     X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)0,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 1801 :     *((int32 *)pEmitLoc) = imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 1802 :     pEmitLoc += sizeof(int32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_MO@4:

; 1803 :   }
; 1804 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVIM
_TEXT	ENDS
PUBLIC	?X86Emit_LEAVE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LEAVE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LEAVE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LEAVE
; _this$ = ecx

; 1807 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1808 :   *pEmitLoc++ = 0xC9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 201			; 000000c9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1809 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LEAVE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LEAVE
_TEXT	ENDS
PUBLIC	?X86Emit_RETF@NativeCodeCache@@QAEXG@Z		; NativeCodeCache::X86Emit_RETF
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iw$ = 8						; size = 2
?X86Emit_RETF@NativeCodeCache@@QAEXG@Z PROC		; NativeCodeCache::X86Emit_RETF
; _this$ = ecx

; 1812 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1813 :   if(iw == 0)

	movzx	eax, WORD PTR _iw$[ebp]
	test	eax, eax
	jne	SHORT $LN2@X86Emit_RE@2

; 1814 :   {
; 1815 :     *pEmitLoc++ = 0xCB;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 203			; 000000cbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1816 :   }
; 1817 :   else

	jmp	SHORT $LN3@X86Emit_RE@2
$LN2@X86Emit_RE@2:

; 1818 :   {
; 1819 :     *pEmitLoc++ = 0xCA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 202			; 000000caH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1820 :     *((uint16 *)pEmitLoc) = iw;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _iw$[ebp]
	mov	WORD PTR [eax], cx

; 1821 :     pEmitLoc += sizeof(uint16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_RE@2:

; 1822 :   }
; 1823 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_RETF@NativeCodeCache@@QAEXG@Z ENDP		; NativeCodeCache::X86Emit_RETF
_TEXT	ENDS
PUBLIC	?X86Emit_INT3@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INT3
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INT3@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INT3
; _this$ = ecx

; 1825 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1826 :   *pEmitLoc++ = 0xCC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 204			; 000000ccH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1827 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INT3@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INT3
_TEXT	ENDS
PUBLIC	?X86Emit_INT@NativeCodeCache@@QAEXC@Z		; NativeCodeCache::X86Emit_INT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vector$ = 8						; size = 1
?X86Emit_INT@NativeCodeCache@@QAEXC@Z PROC		; NativeCodeCache::X86Emit_INT
; _this$ = ecx

; 1830 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1831 :   *pEmitLoc++ = 0xCD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 205			; 000000cdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1832 :   *pEmitLoc++ = vector;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _vector$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1833 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_INT@NativeCodeCache@@QAEXC@Z ENDP		; NativeCodeCache::X86Emit_INT
_TEXT	ENDS
PUBLIC	?X86Emit_INTO@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INTO
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INTO@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INTO
; _this$ = ecx

; 1836 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1837 :   *pEmitLoc++ = 0xCE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 206			; 000000ceH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1838 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INTO@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INTO
_TEXT	ENDS
PUBLIC	?X86Emit_IRET@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_IRET
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_IRET@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_IRET
; _this$ = ecx

; 1841 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1842 :   *pEmitLoc++ = 0xCF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 207			; 000000cfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1843 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_IRET@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_IRET
_TEXT	ENDS
PUBLIC	?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ROLRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_ROLRR
; _this$ = ecx

; 1846 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1847 :   X86Emit_Group2RR(regDest, 0);

	push	0
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1848 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_ROLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_ROLRR
_TEXT	ENDS
PUBLIC	?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RORRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_RORRR
; _this$ = ecx

; 1851 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1852 :   X86Emit_Group2RR(regDest, 1);

	push	1
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1853 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_RORRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_RORRR
_TEXT	ENDS
PUBLIC	?X86Emit_RCLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RCLRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_RCLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_RCLRR
; _this$ = ecx

; 1856 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1857 :   X86Emit_Group2RR(regDest, 2);

	push	2
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1858 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_RCLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_RCLRR
_TEXT	ENDS
PUBLIC	?X86Emit_RCRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_RCRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_RCRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_RCRRR
; _this$ = ecx

; 1861 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1862 :   X86Emit_Group2RR(regDest, 3);

	push	3
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1863 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_RCRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_RCRRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHLRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SHLRR
; _this$ = ecx

; 1866 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1867 :   X86Emit_Group2RR(regDest, 4);

	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1868 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SHLRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SHLRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SHRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SHRRR
; _this$ = ecx

; 1871 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1872 :   X86Emit_Group2RR(regDest, 5);

	push	5
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1873 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SHRRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SHRRR
_TEXT	ENDS
PUBLIC	?X86Emit_SALRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SALRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_SALRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SALRR
; _this$ = ecx

; 1876 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1877 :   X86Emit_Group2RR(regDest, 6);

	push	6
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1878 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SALRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SALRR
_TEXT	ENDS
PUBLIC	?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SARRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SARRR
; _this$ = ecx

; 1881 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1882 :   X86Emit_Group2RR(regDest, 7);

	push	7
	mov	eax, DWORD PTR _regDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_Group2RR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_Group2RR

; 1883 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SARRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SARRR
_TEXT	ENDS
PUBLIC	?X86Emit_AAM@NativeCodeCache@@QAEXE@Z		; NativeCodeCache::X86Emit_AAM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_divisor$ = 8						; size = 1
?X86Emit_AAM@NativeCodeCache@@QAEXE@Z PROC		; NativeCodeCache::X86Emit_AAM
; _this$ = ecx

; 1886 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1887 :   *pEmitLoc++ = 0xD4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 212			; 000000d4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1888 :   if(divisor != 10)

	movzx	edx, BYTE PTR _divisor$[ebp]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN2@X86Emit_AA

; 1889 :   {
; 1890 :     *pEmitLoc++ = divisor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _divisor$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@X86Emit_AA:

; 1891 :   }
; 1892 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_AAM@NativeCodeCache@@QAEXE@Z ENDP		; NativeCodeCache::X86Emit_AAM
_TEXT	ENDS
PUBLIC	?X86Emit_AAD@NativeCodeCache@@QAEXE@Z		; NativeCodeCache::X86Emit_AAD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_divisor$ = 8						; size = 1
?X86Emit_AAD@NativeCodeCache@@QAEXE@Z PROC		; NativeCodeCache::X86Emit_AAD
; _this$ = ecx

; 1895 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1896 :   *pEmitLoc++ = 0xD5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 213			; 000000d5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1897 :   if(divisor != 10)

	movzx	edx, BYTE PTR _divisor$[ebp]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN2@X86Emit_AA@2

; 1898 :   {
; 1899 :     *pEmitLoc++ = divisor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _divisor$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@X86Emit_AA@2:

; 1900 :   }
; 1901 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_AAD@NativeCodeCache@@QAEXE@Z ENDP		; NativeCodeCache::X86Emit_AAD
_TEXT	ENDS
PUBLIC	?X86Emit_XLAT@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_XLAT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_XLAT@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_XLAT
; _this$ = ecx

; 1904 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1905 :   *pEmitLoc++ = 0xD7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 215			; 000000d7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1906 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_XLAT@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_XLAT
_TEXT	ENDS
PUBLIC	?X86Emit_ESC0@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC0
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC0@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC0
; _this$ = ecx

; 1909 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1910 :   *pEmitLoc++ = 0xD8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 216			; 000000d8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1911 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC0@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC0
_TEXT	ENDS
PUBLIC	?X86Emit_ESC1@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC1@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC1
; _this$ = ecx

; 1914 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1915 :   *pEmitLoc++ = 0xD9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 217			; 000000d9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1916 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC1@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC1
_TEXT	ENDS
PUBLIC	?X86Emit_ESC2@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC2@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC2
; _this$ = ecx

; 1919 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1920 :   *pEmitLoc++ = 0xDA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 218			; 000000daH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1921 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC2@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC2
_TEXT	ENDS
PUBLIC	?X86Emit_ESC3@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC3
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC3@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC3
; _this$ = ecx

; 1924 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1925 :   *pEmitLoc++ = 0xDB;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 219			; 000000dbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1926 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC3@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC3
_TEXT	ENDS
PUBLIC	?X86Emit_ESC4@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC4@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC4
; _this$ = ecx

; 1929 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1930 :   *pEmitLoc++ = 0xDC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 220			; 000000dcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1931 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC4@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC4
_TEXT	ENDS
PUBLIC	?X86Emit_ESC5@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC5
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC5@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC5
; _this$ = ecx

; 1934 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1935 :   *pEmitLoc++ = 0xDD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 221			; 000000ddH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1936 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC5@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC5
_TEXT	ENDS
PUBLIC	?X86Emit_ESC6@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC6
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC6@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC6
; _this$ = ecx

; 1939 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1940 :   *pEmitLoc++ = 0xDE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 222			; 000000deH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1941 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC6@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC6
_TEXT	ENDS
PUBLIC	?X86Emit_ESC7@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_ESC7
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_ESC7@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_ESC7
; _this$ = ecx

; 1944 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1945 :   *pEmitLoc++ = 0xDF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 223			; 000000dfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1946 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_ESC7@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_ESC7
_TEXT	ENDS
PUBLIC	?X86Emit_LOOPNE@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_LOOPNE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_LOOPNE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_LOOPNE
; _this$ = ecx

; 1949 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1950 :   int32 pOffset = pTarget - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 1951 :   
; 1952 :   *pEmitLoc++ = 0xE0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 224			; 000000e0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1953 :   *pEmitLoc++ = (int8)pOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1954 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_LOOPNE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_LOOPNE
_TEXT	ENDS
PUBLIC	?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_LOOP
PUBLIC	?X86Emit_LOOPNE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_LOOPNE_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_LOOPNE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_LOOPNE_Label
; _this$ = ecx

; 1957 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1958 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_LO

; 1959 :   {
; 1960 :     patchMgr->AddPatch(pEmitLoc + 1, PatchType_Rel8, pEmitLoc + 2, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 1961 :     *pEmitLoc++ = 0xE2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 226			; 000000e2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1962 :     *pEmitLoc++ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1963 :   }
; 1964 :   else

	jmp	SHORT $LN3@X86Emit_LO
$LN2@X86Emit_LO:

; 1965 :   {
; 1966 :     X86Emit_LOOP(patchMgr->GetLabelPointer(labelIndex));

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z ; NativeCodeCache::X86Emit_LOOP
$LN3@X86Emit_LO:

; 1967 :   }
; 1968 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_LOOPNE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_LOOPNE_Label
_TEXT	ENDS
PUBLIC	?X86Emit_LOOPE@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_LOOPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_LOOPE@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_LOOPE
; _this$ = ecx

; 1971 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1972 :   int32 pOffset = pTarget - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 1973 :   
; 1974 :   *pEmitLoc++ = 0xE0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 224			; 000000e0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1975 :   *pEmitLoc++ = (int8)pOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1976 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_LOOPE@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_LOOPE
_TEXT	ENDS
PUBLIC	?X86Emit_LOOPE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_LOOPE_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_LOOPE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_LOOPE_Label
; _this$ = ecx

; 1979 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1980 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_LO@2

; 1981 :   {
; 1982 :     patchMgr->AddPatch(pEmitLoc + 1, PatchType_Rel8, pEmitLoc + 2, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 1983 :     *pEmitLoc++ = 0xE0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 224			; 000000e0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1984 :     *pEmitLoc++ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1985 :   }
; 1986 :   else

	jmp	SHORT $LN3@X86Emit_LO@2
$LN2@X86Emit_LO@2:

; 1987 :   {
; 1988 :     X86Emit_LOOPE(patchMgr->GetLabelPointer(labelIndex));

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_LOOPE@NativeCodeCache@@QAEXPAE@Z ; NativeCodeCache::X86Emit_LOOPE
$LN3@X86Emit_LO@2:

; 1989 :   }
; 1990 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_LOOPE_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_LOOPE_Label
; Function compile flags: /Odtp /RTCsu
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_LOOP
; _this$ = ecx

; 1993 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 1994 :   int32 pOffset = pTarget - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 1995 :   
; 1996 :   *pEmitLoc++ = 0xE2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 226			; 000000e2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1997 :   *pEmitLoc++ = (int8)pOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1998 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_LOOP
_TEXT	ENDS
PUBLIC	?X86Emit_LOOP_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_LOOP_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_LOOP_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_LOOP_Label
; _this$ = ecx

; 2001 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2002 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_LO@3

; 2003 :   {
; 2004 :     patchMgr->AddPatch(pEmitLoc + 1, PatchType_Rel8, pEmitLoc + 2, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 2005 :     *pEmitLoc++ = 0xE2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 226			; 000000e2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2006 :     *pEmitLoc++ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2007 :   }
; 2008 :   else

	jmp	SHORT $LN3@X86Emit_LO@3
$LN2@X86Emit_LO@3:

; 2009 :   {
; 2010 :     X86Emit_LOOP(patchMgr->GetLabelPointer(labelIndex));

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z ; NativeCodeCache::X86Emit_LOOP
$LN3@X86Emit_LO@3:

; 2011 :   }
; 2012 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_LOOP_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_LOOP_Label
_TEXT	ENDS
PUBLIC	?X86Emit_JCXZ@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_JCXZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JCXZ@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JCXZ
; _this$ = ecx

; 2015 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2016 :   int32 pOffset = pTarget - (pEmitLoc + 3);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 3
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 2017 :   
; 2018 :   //ADDRESS Prefix
; 2019 :   *pEmitLoc++ = 0x67;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 103			; 00000067H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2020 :   *pEmitLoc++ = 0xE3;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 227			; 000000e3H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2021 :   *pEmitLoc++ = (int8)pOffset;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2022 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JCXZ@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JCXZ
_TEXT	ENDS
PUBLIC	?X86Emit_JCXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JCXZ_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_JCXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_JCXZ_Label
; _this$ = ecx

; 2025 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2026 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_JC@3

; 2027 :   {
; 2028 :     patchMgr->AddPatch(pEmitLoc + 2, PatchType_Rel8, pEmitLoc + 3, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 3
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 2029 :     *pEmitLoc++ = 0x67;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 103			; 00000067H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2030 :     *pEmitLoc++ = 0xE3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 227			; 000000e3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2031 :     *pEmitLoc++ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2032 :   }
; 2033 :   else

	jmp	SHORT $LN3@X86Emit_JC@3
$LN2@X86Emit_JC@3:

; 2034 :   {
; 2035 :     X86Emit_LOOP(patchMgr->GetLabelPointer(labelIndex));

	mov	ecx, DWORD PTR _labelIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_LOOP@NativeCodeCache@@QAEXPAE@Z ; NativeCodeCache::X86Emit_LOOP
$LN3@X86Emit_JC@3:

; 2036 :   }
; 2037 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_JCXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_JCXZ_Label
_TEXT	ENDS
PUBLIC	?X86Emit_JECXZ@NativeCodeCache@@QAEXPAE@Z	; NativeCodeCache::X86Emit_JECXZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pOffset$ = -8						; size = 4
_this$ = -4						; size = 4
_pTarget$ = 8						; size = 4
?X86Emit_JECXZ@NativeCodeCache@@QAEXPAE@Z PROC		; NativeCodeCache::X86Emit_JECXZ
; _this$ = ecx

; 2040 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2041 :   int32 pOffset = pTarget - (pEmitLoc + 2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _pTarget$[ebp]
	sub	edx, ecx
	mov	DWORD PTR _pOffset$[ebp], edx

; 2042 :   
; 2043 :   *pEmitLoc++ = 0xE3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 227			; 000000e3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2044 :   *pEmitLoc++ = (int8)pOffset;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _pOffset$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2045 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JECXZ@NativeCodeCache@@QAEXPAE@Z ENDP		; NativeCodeCache::X86Emit_JECXZ
_TEXT	ENDS
PUBLIC	?X86Emit_JECXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JECXZ_Label
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_patchMgr$ = 8						; size = 4
_labelIndex$ = 12					; size = 4
?X86Emit_JECXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z PROC ; NativeCodeCache::X86Emit_JECXZ_Label
; _this$ = ecx

; 2048 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2049 :   if(labelIndex >= patchMgr->numLabels)

	mov	eax, DWORD PTR _patchMgr$[ebp]
	mov	ecx, DWORD PTR _labelIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+1284]
	jb	SHORT $LN2@X86Emit_JE

; 2050 :   {
; 2051 :     patchMgr->AddPatch(pEmitLoc + 1, PatchType_Rel8, pEmitLoc + 2, labelIndex);

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?AddPatch@PatchManager@@QAEXPAEW4PatchType@@0I@Z ; PatchManager::AddPatch

; 2052 :     *pEmitLoc++ = 0xE3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 227			; 000000e3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2053 :     *pEmitLoc++ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2054 :   }
; 2055 :   else

	jmp	SHORT $LN3@X86Emit_JE
$LN2@X86Emit_JE:

; 2056 :   {
; 2057 :     X86Emit_JECXZ(patchMgr->GetLabelPointer(labelIndex));

	mov	edx, DWORD PTR _labelIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _patchMgr$[ebp]
	call	?GetLabelPointer@PatchManager@@QAEPAEI@Z ; PatchManager::GetLabelPointer
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_JECXZ@NativeCodeCache@@QAEXPAE@Z ; NativeCodeCache::X86Emit_JECXZ
$LN3@X86Emit_JE:

; 2058 :   }
; 2059 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_JECXZ_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ENDP ; NativeCodeCache::X86Emit_JECXZ_Label
_TEXT	ENDS
PUBLIC	?X86Emit_INI@NativeCodeCache@@QAEXW4x86Reg@@E@Z	; NativeCodeCache::X86Emit_INI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_port$ = 12						; size = 1
?X86Emit_INI@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_INI
; _this$ = ecx

; 2062 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2063 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_IN@2

; 2064 :   {
; 2065 :     *pEmitLoc++ = 0xE4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 228			; 000000e4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2066 :     *pEmitLoc++ = port;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _port$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN5@X86Emit_IN@2
$LN4@X86Emit_IN@2:

; 2067 :   }
; 2068 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_IN@2

; 2069 :   {
; 2070 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2071 :     *pEmitLoc++ = 0xE5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 229			; 000000e5H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2072 :     *pEmitLoc++ = port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _port$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2073 :   }
; 2074 :   else

	jmp	SHORT $LN5@X86Emit_IN@2
$LN2@X86Emit_IN@2:

; 2075 :   {
; 2076 :     *pEmitLoc++ = 0xE5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 229			; 000000e5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2077 :     *pEmitLoc++ = port;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _port$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_IN@2:

; 2078 :   }
; 2079 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_INI@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_INI
_TEXT	ENDS
PUBLIC	?X86Emit_OUTI@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_OUTI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_data$ = 12						; size = 1
?X86Emit_OUTI@NativeCodeCache@@QAEXW4x86Reg@@E@Z PROC	; NativeCodeCache::X86Emit_OUTI
; _this$ = ecx

; 2082 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2083 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_OU

; 2084 :   {
; 2085 :     *pEmitLoc++ = 0xE6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 230			; 000000e6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2086 :     *pEmitLoc++ = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	$LN5@X86Emit_OU
$LN4@X86Emit_OU:

; 2087 :   }
; 2088 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_OU

; 2089 :   {
; 2090 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2091 :     *pEmitLoc++ = 0xE7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 231			; 000000e7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2092 :     *pEmitLoc++ = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2093 :   }
; 2094 :   else

	jmp	SHORT $LN5@X86Emit_OU
$LN2@X86Emit_OU:

; 2095 :   {
; 2096 :     *pEmitLoc++ = 0xE7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 231			; 000000e7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2097 :     *pEmitLoc++ = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_OU:

; 2098 :   }
; 2099 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_OUTI@NativeCodeCache@@QAEXW4x86Reg@@E@Z ENDP	; NativeCodeCache::X86Emit_OUTI
_TEXT	ENDS
PUBLIC	?X86Emit_INR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_INR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_INR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_INR
; _this$ = ecx

; 2102 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2103 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_IN@3

; 2104 :   {
; 2105 :     *pEmitLoc++ = 0xEC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 236			; 000000ecH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN5@X86Emit_IN@3
$LN4@X86Emit_IN@3:

; 2106 :   }
; 2107 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_IN@3

; 2108 :   {
; 2109 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2110 :     *pEmitLoc++ = 0xED;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 237			; 000000edH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2111 :   }
; 2112 :   else

	jmp	SHORT $LN5@X86Emit_IN@3
$LN2@X86Emit_IN@3:

; 2113 :   {
; 2114 :     *pEmitLoc++ = 0xED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 237			; 000000edH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_IN@3:

; 2115 :   }
; 2116 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_INR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_INR
_TEXT	ENDS
PUBLIC	?X86Emit_OUTR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_OUTR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_OUTR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_OUTR
; _this$ = ecx

; 2119 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2120 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_OU@2

; 2121 :   {
; 2122 :     *pEmitLoc++ = 0xEE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 238			; 000000eeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN5@X86Emit_OU@2
$LN4@X86Emit_OU@2:

; 2123 :   }
; 2124 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_OU@2

; 2125 :   {
; 2126 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2127 :     *pEmitLoc++ = 0xEF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 239			; 000000efH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2128 :   }
; 2129 :   else

	jmp	SHORT $LN5@X86Emit_OU@2
$LN2@X86Emit_OU@2:

; 2130 :   {
; 2131 :     *pEmitLoc++ = 0xEF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 239			; 000000efH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_OU@2:

; 2132 :   }
; 2133 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_OUTR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_OUTR
_TEXT	ENDS
PUBLIC	?X86Emit_LOCK@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_LOCK
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_LOCK@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_LOCK
; _this$ = ecx

; 2136 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2137 :   *pEmitLoc++ = 0xF0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 240			; 000000f0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2138 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_LOCK@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_LOCK
_TEXT	ENDS
PUBLIC	?X86Emit_INT1@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_INT1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_INT1@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_INT1
; _this$ = ecx

; 2141 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2142 :   *pEmitLoc++ = 0xF1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 241			; 000000f1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2143 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_INT1@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_INT1
_TEXT	ENDS
PUBLIC	?X86Emit_REPNE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_REPNE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_REPNE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_REPNE
; _this$ = ecx

; 2146 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2147 :   *pEmitLoc++ = 0xF2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 242			; 000000f2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2148 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_REPNE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_REPNE
_TEXT	ENDS
PUBLIC	?X86Emit_REPE@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_REPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_REPE@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_REPE
; _this$ = ecx

; 2151 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2152 :   *pEmitLoc++ = 0xF3;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 243			; 000000f3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2153 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_REPE@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_REPE
_TEXT	ENDS
PUBLIC	?X86Emit_HLT@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_HLT
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_HLT@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_HLT
; _this$ = ecx

; 2156 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2157 :   *pEmitLoc++ = 0xF4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 244			; 000000f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2158 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_HLT@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_HLT
_TEXT	ENDS
PUBLIC	?X86Emit_CMC@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CMC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CMC@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CMC
; _this$ = ecx

; 2161 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2162 :   *pEmitLoc++ = 0xF5;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 245			; 000000f5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2163 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CMC@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CMC
_TEXT	ENDS
PUBLIC	?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_NOTR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_NOTR
; _this$ = ecx

; 2166 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2167 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_NO

; 2168 :   {
; 2169 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_NO
$LN4@X86Emit_NO:

; 2170 :   }
; 2171 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_NO

; 2172 :   {
; 2173 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2174 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2175 :   }
; 2176 :   else

	jmp	SHORT $LN3@X86Emit_NO
$LN2@X86Emit_NO:

; 2177 :   {
; 2178 :     *pEmitLoc++ = 0xF7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 247			; 000000f7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_NO:

; 2179 :   }
; 2180 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,regDest & 0x07);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2181 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_NOTR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_NOTR
_TEXT	ENDS
PUBLIC	?X86Emit_NOTM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_NOTM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_NOTM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_NOTM
; _this$ = ecx

; 2184 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2185 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_NO@2

; 2186 :   {
; 2187 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_NO@2
$LN4@X86Emit_NO@2:

; 2188 :   }
; 2189 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_NO@2

; 2190 :   {
; 2191 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2192 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2193 :   }
; 2194 :   else

	jmp	SHORT $LN3@X86Emit_NO@2
$LN2@X86Emit_NO@2:

; 2195 :   {
; 2196 :     *pEmitLoc++ = 0xF7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 247			; 000000f7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_NO@2:

; 2197 :   }
; 2198 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2199 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_NOTM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_NOTM
_TEXT	ENDS
PUBLIC	?X86Emit_IMULRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_IMULRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
?X86Emit_IMULRR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_IMULRR
; _this$ = ecx

; 2202 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2203 :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	SHORT $LN3@X86Emit_IM@5

; 2204 :   {
; 2205 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2206 :   }
; 2207 :   else

	jmp	SHORT $LN2@X86Emit_IM@5
$LN3@X86Emit_IM@5:

; 2208 :   {
; 2209 :     if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_IM@5

; 2210 :     {
; 2211 :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_IM@5:

; 2212 :     }
; 2213 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@X86Emit_IM@5:

; 2214 :   }
; 2215 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)5,regSrc & 0x07);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	5
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2216 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_IMULRR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_IMULRR
_TEXT	ENDS
PUBLIC	?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_IMULMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_IMULMR
; _this$ = ecx

; 2219 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2220 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN3@X86Emit_IM@6

; 2221 :   {
; 2222 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2223 :   }
; 2224 :   else

	jmp	SHORT $LN2@X86Emit_IM@6
$LN3@X86Emit_IM@6:

; 2225 :   {
; 2226 :     if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN1@X86Emit_IM@6

; 2227 :     {
; 2228 :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_IM@6:

; 2229 :     }
; 2230 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@X86Emit_IM@6:

; 2231 :   }
; 2232 :   
; 2233 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)5,base,index,scale,disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	push	5
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2234 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_IMULMR@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_IMULMR
_TEXT	ENDS
PUBLIC	?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_NEGR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_NEGR
; _this$ = ecx

; 2237 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2238 :   if(regDest < x86Reg_ax)

	cmp	DWORD PTR _regDest$[ebp], 8
	jge	SHORT $LN4@X86Emit_NE

; 2239 :   {
; 2240 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_NE
$LN4@X86Emit_NE:

; 2241 :   }
; 2242 :   else if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_NE

; 2243 :   {
; 2244 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2245 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2246 :   }
; 2247 :   else

	jmp	SHORT $LN3@X86Emit_NE
$LN2@X86Emit_NE:

; 2248 :   {
; 2249 :     *pEmitLoc++ = 0xF7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 247			; 000000f7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_NE:

; 2250 :   }
; 2251 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)3,regDest & 0x07);

	push	0
	push	0
	push	4
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2252 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_NEGR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_NEGR
_TEXT	ENDS
PUBLIC	?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ; NativeCodeCache::X86Emit_TESTIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_TESTIR
; _this$ = ecx

; 2255 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2256 :   if(regSrc < x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jge	$LN10@X86Emit_TE@3

; 2257 :   {
; 2258 :     if(regSrc == x86Reg_al)

	cmp	DWORD PTR _regSrc$[ebp], 0
	jne	SHORT $LN9@X86Emit_TE@3

; 2259 :     {
; 2260 :       *pEmitLoc++ = 0xA8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 168			; 000000a8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2261 :       *pEmitLoc++ = (uint8)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2262 :     }
; 2263 :     else

	jmp	SHORT $LN8@X86Emit_TE@3
$LN9@X86Emit_TE@3:

; 2264 :     {
; 2265 :       *pEmitLoc++ = 0xF6;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 246			; 000000f6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2266 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,regSrc & 0x07);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2267 :       *pEmitLoc++ = (uint8)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN8@X86Emit_TE@3:

; 2268 :     }

	jmp	$LN11@X86Emit_TE@3
$LN10@X86Emit_TE@3:

; 2269 :   }
; 2270 :   else if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	$LN6@X86Emit_TE@3

; 2271 :   {
; 2272 :     if(regSrc == x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jne	SHORT $LN5@X86Emit_TE@3

; 2273 :     {
; 2274 :       *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2275 :       *pEmitLoc++ = 0xA9;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 169			; 000000a9H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2276 :       *((uint16 *)pEmitLoc) = (uint16)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dx, WORD PTR _imm$[ebp]
	mov	WORD PTR [ecx], dx

; 2277 :       pEmitLoc += sizeof(uint16);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2278 :     }
; 2279 :     else

	jmp	SHORT $LN4@X86Emit_TE@3
$LN5@X86Emit_TE@3:

; 2280 :     {
; 2281 :       *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2282 :       *pEmitLoc++ = 0xF7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 247			; 000000f7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2283 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,regSrc & 0x07);

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2284 :       *((uint16 *)pEmitLoc) = (uint16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 2285 :       pEmitLoc += sizeof(uint16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN4@X86Emit_TE@3:

; 2286 :     }
; 2287 :   }
; 2288 :   else

	jmp	$LN11@X86Emit_TE@3
$LN6@X86Emit_TE@3:

; 2289 :   {
; 2290 :     if(regSrc == x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jne	SHORT $LN2@X86Emit_TE@3

; 2291 :     {
; 2292 :       *pEmitLoc++ = 0xA9;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 169			; 000000a9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2293 :       *((uint32 *)pEmitLoc) = (uint32)imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [edx], eax

; 2294 :       pEmitLoc += sizeof(uint32);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2295 :     }
; 2296 :     else

	jmp	SHORT $LN11@X86Emit_TE@3
$LN2@X86Emit_TE@3:

; 2297 :     {
; 2298 :       *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2299 :       X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,regSrc & 0x07);

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2300 :       *((uint32 *)pEmitLoc) = imm;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [edx], eax

; 2301 :       pEmitLoc += sizeof(uint32);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN11@X86Emit_TE@3:

; 2302 :     }
; 2303 :   }
; 2304 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_TESTIR@NativeCodeCache@@QAEXIW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_TESTIR
_TEXT	ENDS
PUBLIC	?X86Emit_TESTIM@NativeCodeCache@@QAEXIW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_TESTIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_imm$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_TESTIM@NativeCodeCache@@QAEXIW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_TESTIM
; _this$ = ecx

; 2307 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2308 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_TE@4

; 2309 :   {
; 2310 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2311 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2312 :     *pEmitLoc++ = (uint8)imm;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	dl, BYTE PTR _imm$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
	jmp	$LN5@X86Emit_TE@4
$LN4@X86Emit_TE@4:

; 2313 :   }
; 2314 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_TE@4

; 2315 :   {
; 2316 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2317 :     *pEmitLoc++ = 0xF7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 247			; 000000f7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2318 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2319 :     *((uint16 *)pEmitLoc) = (uint16)imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cx, WORD PTR _imm$[ebp]
	mov	WORD PTR [eax], cx

; 2320 :     pEmitLoc += sizeof(uint16);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2321 :   }
; 2322 :   else

	jmp	SHORT $LN5@X86Emit_TE@4
$LN2@X86Emit_TE@4:

; 2323 :   {
; 2324 :     *pEmitLoc++ = 0xF7;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 247			; 000000f7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2325 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)0,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2326 :     *((uint32 *)pEmitLoc) = imm;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _imm$[ebp]
	mov	DWORD PTR [eax], ecx

; 2327 :     pEmitLoc += sizeof(uint32);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@X86Emit_TE@4:

; 2328 :   }
; 2329 : 
; 2330 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_TESTIM@NativeCodeCache@@QAEXIW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_TESTIM
_TEXT	ENDS
PUBLIC	?X86Emit_NEGM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_NEGM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_NEGM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_NEGM
; _this$ = ecx

; 2334 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2335 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_NE@2

; 2336 :   {
; 2337 :     *pEmitLoc++ = 0xF6;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 246			; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_NE@2
$LN4@X86Emit_NE@2:

; 2338 :   }
; 2339 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_NE@2

; 2340 :   {
; 2341 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2342 :     *pEmitLoc++ = 0xF7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 247			; 000000f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2343 :   }
; 2344 :   else

	jmp	SHORT $LN3@X86Emit_NE@2
$LN2@X86Emit_NE@2:

; 2345 :   {
; 2346 :     *pEmitLoc++ = 0xF7;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 247			; 000000f7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_NE@2:

; 2347 :   }
; 2348 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)3,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2349 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_NEGM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_NEGM
_TEXT	ENDS
PUBLIC	?X86Emit_CLC@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CLC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CLC@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CLC
; _this$ = ecx

; 2352 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2353 :   *pEmitLoc++ = 0xF8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 248			; 000000f8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2354 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CLC@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CLC
_TEXT	ENDS
PUBLIC	?X86Emit_STC@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STC@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STC
; _this$ = ecx

; 2357 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2358 :   *pEmitLoc++ = 0xF9;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 249			; 000000f9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2359 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STC@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STC
_TEXT	ENDS
PUBLIC	?X86Emit_CLI@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CLI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CLI@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CLI
; _this$ = ecx

; 2362 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2363 :   *pEmitLoc++ = 0xFA;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 250			; 000000faH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2364 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CLI@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CLI
_TEXT	ENDS
PUBLIC	?X86Emit_STI@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STI
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STI@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STI
; _this$ = ecx

; 2367 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2368 :   *pEmitLoc++ = 0xFB;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 251			; 000000fbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2369 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STI@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STI
_TEXT	ENDS
PUBLIC	?X86Emit_CLD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_CLD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_CLD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_CLD
; _this$ = ecx

; 2372 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2373 :   *pEmitLoc++ = 0xFC;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 252			; 000000fcH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2374 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_CLD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_CLD
_TEXT	ENDS
PUBLIC	?X86Emit_STD@NativeCodeCache@@QAEXXZ		; NativeCodeCache::X86Emit_STD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?X86Emit_STD@NativeCodeCache@@QAEXXZ PROC		; NativeCodeCache::X86Emit_STD
; _this$ = ecx

; 2377 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2378 :   *pEmitLoc++ = 0xFD;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 253			; 000000fdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2379 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?X86Emit_STD@NativeCodeCache@@QAEXXZ ENDP		; NativeCodeCache::X86Emit_STD
_TEXT	ENDS
PUBLIC	?X86Emit_INCM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_INCM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_INCM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_INCM
; _this$ = ecx

; 2382 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2383 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_IN@4

; 2384 :   {
; 2385 :     *pEmitLoc++ = 0xFE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 254			; 000000feH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_IN@4
$LN4@X86Emit_IN@4:

; 2386 :   }
; 2387 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_IN@4

; 2388 :   {
; 2389 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2390 :     *pEmitLoc++ = 0xFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 255			; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2391 :   }
; 2392 :   else

	jmp	SHORT $LN3@X86Emit_IN@4
$LN2@X86Emit_IN@4:

; 2393 :   {
; 2394 :     *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_IN@4:

; 2395 :   }
; 2396 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)0,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2397 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_INCM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_INCM
_TEXT	ENDS
PUBLIC	?X86Emit_DECM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_DECM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_DECM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_DECM
; _this$ = ecx

; 2400 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2401 :   if(ptrType == x86MemPtr_byte)

	cmp	DWORD PTR _ptrType$[ebp], 0
	jne	SHORT $LN4@X86Emit_DE@2

; 2402 :   {
; 2403 :     *pEmitLoc++ = 0xFE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 254			; 000000feH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN3@X86Emit_DE@2
$LN4@X86Emit_DE@2:

; 2404 :   }
; 2405 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_DE@2

; 2406 :   {
; 2407 :     *pEmitLoc++ = 0x66;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 102			; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2408 :     *pEmitLoc++ = 0xFF;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 255			; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2409 :   }
; 2410 :   else

	jmp	SHORT $LN3@X86Emit_DE@2
$LN2@X86Emit_DE@2:

; 2411 :   {
; 2412 :     *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@X86Emit_DE@2:

; 2413 :   }
; 2414 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)1,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2415 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_DECM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_DECM
_TEXT	ENDS
PUBLIC	?X86Emit_CALLNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CALLNM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_CALLNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CALLNM
; _this$ = ecx

; 2418 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2419 :   *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2420 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2421 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_CALLNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CALLNM
_TEXT	ENDS
PUBLIC	?X86Emit_CALLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CALLR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
?X86Emit_CALLR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_CALLR
; _this$ = ecx

; 2424 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2425 :   if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_CA@2

; 2426 :   {
; 2427 :     //CALL r16
; 2428 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2429 :     *pEmitLoc++ = 0xFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2430 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2431 :   }
; 2432 :   else

	jmp	SHORT $LN1@X86Emit_CA@2
$LN2@X86Emit_CA@2:

; 2433 :   {
; 2434 :     //CALL r32
; 2435 :     *pEmitLoc++ = 0xFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_CA@2:

; 2436 :   }
; 2437 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2438 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_CALLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_CALLR
_TEXT	ENDS
PUBLIC	?X86Emit_CALLFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CALLFM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_CALLFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CALLFM
; _this$ = ecx

; 2441 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2442 :   *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2443 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)3,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	3
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2444 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_CALLFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CALLFM
_TEXT	ENDS
PUBLIC	?X86Emit_JMPR@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_JMPR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
?X86Emit_JMPR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_JMPR
; _this$ = ecx

; 2447 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2448 :   if(regSrc < x86Reg_eax)

	cmp	DWORD PTR _regSrc$[ebp], 16		; 00000010H
	jge	SHORT $LN2@X86Emit_JM@3

; 2449 :   {
; 2450 :     //JMP r16
; 2451 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2452 :     *pEmitLoc++ = 0xFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2453 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)4,(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	4
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2454 :   }
; 2455 :   else

	jmp	SHORT $LN3@X86Emit_JM@3
$LN2@X86Emit_JM@3:

; 2456 :   {
; 2457 :     //JMP r32
; 2458 :     *pEmitLoc++ = 0xFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2459 :     X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)4,(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	4
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM
$LN3@X86Emit_JM@3:

; 2460 :   }
; 2461 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_JMPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_JMPR
_TEXT	ENDS
PUBLIC	?X86Emit_JMPNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_JMPNM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_JMPNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_JMPNM
; _this$ = ecx

; 2464 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2465 :   *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2466 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)4,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2467 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_JMPNM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_JMPNM
_TEXT	ENDS
PUBLIC	?X86Emit_JMPFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_JMPFM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_JMPFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_JMPFM
; _this$ = ecx

; 2470 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2471 :   *pEmitLoc++ = 0xFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 255			; 000000ffH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2472 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)5,base,index,scale,disp);

	mov	edx, DWORD PTR _disp$[ebp]
	push	edx
	mov	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	push	5
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2473 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_JMPFM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_JMPFM
_TEXT	ENDS
PUBLIC	?X86Emit_PUSHM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PUSHM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptrType$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PUSHM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PUSHM
; _this$ = ecx

; 2476 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2477 :   if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN1@X86Emit_PU@2

; 2478 :   {
; 2479 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_PU@2:

; 2480 :   }
; 2481 : 
; 2482 :   *pEmitLoc++ = 0xFF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 255			; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2483 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)6,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2484 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PUSHM@NativeCodeCache@@QAEXW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PUSHM
_TEXT	ENDS
PUBLIC	?X86Emit_INVD@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_INVD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_INVD@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_INVD
; _this$ = ecx

; 2487 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2488 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2489 :   *pEmitLoc++ = 0x08;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2490 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_INVD@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_INVD
_TEXT	ENDS
PUBLIC	?X86Emit_WBINVD@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_WBINVD
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_WBINVD@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_WBINVD
; _this$ = ecx

; 2493 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2494 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2495 :   *pEmitLoc++ = 0x09;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2496 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_WBINVD@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_WBINVD
_TEXT	ENDS
PUBLIC	?X86Emit_UD1@NativeCodeCache@@QAEXW4x86Reg@@@Z	; NativeCodeCache::X86Emit_UD1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_UD1@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_UD1
; _this$ = ecx

; 2499 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2500 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2501 :   *pEmitLoc++ = 0x0B;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 11			; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2502 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_UD1@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_UD1
_TEXT	ENDS
PUBLIC	?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_BSWAP
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_BSWAP
; _this$ = ecx

; 2505 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2506 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2507 :   *pEmitLoc++ = 0xC8 + (reg & 0x07);

	mov	edx, DWORD PTR _reg$[ebp]
	and	edx, 7
	add	edx, 200				; 000000c8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2508 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_BSWAP@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_BSWAP
_TEXT	ENDS
PUBLIC	?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETOR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETOR
; _this$ = ecx

; 2511 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2512 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2513 :   *pEmitLoc++ = 0x90;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 144			; 00000090H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2514 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2515 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETOR
_TEXT	ENDS
PUBLIC	?X86Emit_SETOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETOM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETOM
; _this$ = ecx

; 2518 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2519 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2520 :   *pEmitLoc++ = 0x90;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 144			; 00000090H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2521 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2522 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETOM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNOR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNOR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNOR
; _this$ = ecx

; 2525 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2526 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2527 :   *pEmitLoc++ = 0x91;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 145			; 00000091H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2528 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2529 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNOR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNOR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNOM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNOM
; _this$ = ecx

; 2532 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2533 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2534 :   *pEmitLoc++ = 0x91;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 145			; 00000091H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2535 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2536 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNOM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNOM
_TEXT	ENDS
PUBLIC	?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETBR
; _this$ = ecx

; 2539 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2540 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2541 :   *pEmitLoc++ = 0x92;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 146			; 00000092H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2542 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2543 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETBR
_TEXT	ENDS
PUBLIC	?X86Emit_SETBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETBM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETBM
; _this$ = ecx

; 2546 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2547 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2548 :   *pEmitLoc++ = 0x92;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 146			; 00000092H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2549 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2550 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETBM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNBR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNBR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNBR
; _this$ = ecx

; 2553 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2554 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2555 :   *pEmitLoc++ = 0x93;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 147			; 00000093H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2556 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2557 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNBR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNBR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNBM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNBM
; _this$ = ecx

; 2560 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2561 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2562 :   *pEmitLoc++ = 0x93;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 147			; 00000093H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2563 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2564 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNBM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNBM
_TEXT	ENDS
PUBLIC	?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETZR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETZR
; _this$ = ecx

; 2567 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2568 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2569 :   *pEmitLoc++ = 0x94;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 148			; 00000094H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2570 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2571 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETZR
_TEXT	ENDS
PUBLIC	?X86Emit_SETZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETZM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETZM
; _this$ = ecx

; 2574 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2575 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2576 :   *pEmitLoc++ = 0x94;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 148			; 00000094H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2577 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2578 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETZM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNZR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNZR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNZR
; _this$ = ecx

; 2581 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2582 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2583 :   *pEmitLoc++ = 0x95;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 149			; 00000095H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2584 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2585 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNZR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNZR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNZM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNZM
; _this$ = ecx

; 2588 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2589 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2590 :   *pEmitLoc++ = 0x95;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 149			; 00000095H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2591 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2592 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNZM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNZM
_TEXT	ENDS
PUBLIC	?X86Emit_SETBER@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETBER
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETBER@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETBER
; _this$ = ecx

; 2595 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2596 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2597 :   *pEmitLoc++ = 0x96;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 150			; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2598 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2599 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETBER@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETBER
_TEXT	ENDS
PUBLIC	?X86Emit_SETBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETBEM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETBEM
; _this$ = ecx

; 2602 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2603 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2604 :   *pEmitLoc++ = 0x96;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 150			; 00000096H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2605 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2606 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETBEM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNBER@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNBER
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNBER@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNBER
; _this$ = ecx

; 2609 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2610 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2611 :   *pEmitLoc++ = 0x97;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 151			; 00000097H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2612 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2613 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNBER@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNBER
_TEXT	ENDS
PUBLIC	?X86Emit_SETNBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNBEM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNBEM
; _this$ = ecx

; 2616 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2617 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2618 :   *pEmitLoc++ = 0x97;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 151			; 00000097H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2619 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2620 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNBEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNBEM
_TEXT	ENDS
PUBLIC	?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETSR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETSR
; _this$ = ecx

; 2623 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2624 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2625 :   *pEmitLoc++ = 0x98;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 152			; 00000098H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2626 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2627 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETSR
_TEXT	ENDS
PUBLIC	?X86Emit_SETSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETSM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETSM
; _this$ = ecx

; 2630 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2631 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2632 :   *pEmitLoc++ = 0x98;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 152			; 00000098H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2633 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2634 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETSM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNSR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNSR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNSR
; _this$ = ecx

; 2637 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2638 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2639 :   *pEmitLoc++ = 0x99;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 153			; 00000099H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2640 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2641 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNSR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNSR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNSM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNSM
; _this$ = ecx

; 2644 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2645 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2646 :   *pEmitLoc++ = 0x99;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 153			; 00000099H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2647 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2648 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNSM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNSM
_TEXT	ENDS
PUBLIC	?X86Emit_SETPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETPR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETPR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETPR
; _this$ = ecx

; 2651 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2652 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2653 :   *pEmitLoc++ = 0x9A;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 154			; 0000009aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2654 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2655 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETPR
_TEXT	ENDS
PUBLIC	?X86Emit_SETPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETPM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETPM
; _this$ = ecx

; 2658 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2659 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2660 :   *pEmitLoc++ = 0x9A;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 154			; 0000009aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2661 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2662 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETPM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNPR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNPR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNPR
; _this$ = ecx

; 2665 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2666 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2667 :   *pEmitLoc++ = 0x9B;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 155			; 0000009bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2668 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2669 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNPR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNPR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNPM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNPM
; _this$ = ecx

; 2672 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2673 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2674 :   *pEmitLoc++ = 0x9B;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 155			; 0000009bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2675 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2676 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNPM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNPM
_TEXT	ENDS
PUBLIC	?X86Emit_SETLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETLR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETLR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETLR
; _this$ = ecx

; 2679 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2680 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2681 :   *pEmitLoc++ = 0x9C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 156			; 0000009cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2682 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2683 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETLR
_TEXT	ENDS
PUBLIC	?X86Emit_SETLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETLM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETLM
; _this$ = ecx

; 2686 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2687 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2688 :   *pEmitLoc++ = 0x9C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 156			; 0000009cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2689 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2690 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETLM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNLR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNLR@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNLR
; _this$ = ecx

; 2693 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2694 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2695 :   *pEmitLoc++ = 0x9D;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 157			; 0000009dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2696 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2697 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNLR@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNLR
_TEXT	ENDS
PUBLIC	?X86Emit_SETNLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNLM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNLM
; _this$ = ecx

; 2700 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2701 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2702 :   *pEmitLoc++ = 0x9D;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 157			; 0000009dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2703 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2704 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNLM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNLM
_TEXT	ENDS
PUBLIC	?X86Emit_SETLER@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETLER
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETLER@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETLER
; _this$ = ecx

; 2707 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2708 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2709 :   *pEmitLoc++ = 0x9E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 158			; 0000009eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2710 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2711 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETLER@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETLER
_TEXT	ENDS
PUBLIC	?X86Emit_SETLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETLEM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETLEM
; _this$ = ecx

; 2714 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2715 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2716 :   *pEmitLoc++ = 0x9E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 158			; 0000009eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2717 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2718 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETLEM
_TEXT	ENDS
PUBLIC	?X86Emit_SETNLER@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_SETNLER
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_reg$ = 8						; size = 4
?X86Emit_SETNLER@NativeCodeCache@@QAEXW4x86Reg@@@Z PROC	; NativeCodeCache::X86Emit_SETNLER
; _this$ = ecx

; 2721 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2722 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2723 :   *pEmitLoc++ = 0x9F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 159			; 0000009fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2724 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)2,(reg & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _reg$[ebp]
	and	ecx, 7
	push	ecx
	push	2
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2725 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?X86Emit_SETNLER@NativeCodeCache@@QAEXW4x86Reg@@@Z ENDP	; NativeCodeCache::X86Emit_SETNLER
_TEXT	ENDS
PUBLIC	?X86Emit_SETNLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SETNLEM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_base$ = 8						; size = 4
_index$ = 12						; size = 4
_scale$ = 16						; size = 4
_disp$ = 20						; size = 4
?X86Emit_SETNLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SETNLEM
; _this$ = ecx

; 2728 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2729 :   *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2730 :   *pEmitLoc++ = 0x9F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 159			; 0000009fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2731 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)2,base,index,scale,disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2732 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?X86Emit_SETNLEM@NativeCodeCache@@QAEXIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SETNLEM
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVORR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVORR
; _this$ = ecx

; 2735 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2736 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM

; 2737 :   {
; 2738 :     //r16, r16
; 2739 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM:

; 2740 :   }
; 2741 : 
; 2742 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2743 :   *pEmitLoc++ = 0x40;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 64			; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2744 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2745 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVORR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVOMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVOMR
; _this$ = ecx

; 2748 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2749 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@2

; 2750 :   {
; 2751 :     //r16, r16
; 2752 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@2:

; 2753 :   }
; 2754 : 
; 2755 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2756 :   *pEmitLoc++ = 0x40;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 64			; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2757 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2758 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVOMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNORR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNORR
; _this$ = ecx

; 2761 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2762 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@3

; 2763 :   {
; 2764 :     //r16, r16
; 2765 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@3:

; 2766 :   }
; 2767 : 
; 2768 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2769 :   *pEmitLoc++ = 0x41;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 65			; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2770 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2771 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNORR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNORR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNOMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNOMR
; _this$ = ecx

; 2774 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2775 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@4

; 2776 :   {
; 2777 :     //r16, r16
; 2778 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@4:

; 2779 :   }
; 2780 : 
; 2781 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2782 :   *pEmitLoc++ = 0x41;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 65			; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2783 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2784 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNOMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNOMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVBRR
; _this$ = ecx

; 2787 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2788 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@5

; 2789 :   {
; 2790 :     //r16, r16
; 2791 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@5:

; 2792 :   }
; 2793 : 
; 2794 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2795 :   *pEmitLoc++ = 0x42;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 66			; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2796 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2797 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVBRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVBMR
; _this$ = ecx

; 2800 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2801 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@6

; 2802 :   {
; 2803 :     //r16, r16
; 2804 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@6:

; 2805 :   }
; 2806 : 
; 2807 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2808 :   *pEmitLoc++ = 0x42;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 66			; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2809 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2810 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVBMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNBRR
; _this$ = ecx

; 2813 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2814 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@7

; 2815 :   {
; 2816 :     //r16, r16
; 2817 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@7:

; 2818 :   }
; 2819 : 
; 2820 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2821 :   *pEmitLoc++ = 0x43;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 67			; 00000043H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2822 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2823 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNBRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNBRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNBMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNBMR
; _this$ = ecx

; 2826 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2827 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@8

; 2828 :   {
; 2829 :     //r16, r16
; 2830 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@8:

; 2831 :   }
; 2832 : 
; 2833 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2834 :   *pEmitLoc++ = 0x43;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 67			; 00000043H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2835 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2836 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNBMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNBMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVZRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVZRR
; _this$ = ecx

; 2839 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2840 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@9

; 2841 :   {
; 2842 :     //r16, r16
; 2843 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@9:

; 2844 :   }
; 2845 : 
; 2846 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2847 :   *pEmitLoc++ = 0x44;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 68			; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2848 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2849 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVZRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVZMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVZMR
; _this$ = ecx

; 2852 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2853 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@10

; 2854 :   {
; 2855 :     //r16, r16
; 2856 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@10:

; 2857 :   }
; 2858 : 
; 2859 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2860 :   *pEmitLoc++ = 0x44;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 68			; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2861 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2862 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVZMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNZRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNZRR
; _this$ = ecx

; 2865 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2866 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@11

; 2867 :   {
; 2868 :     //r16, r16
; 2869 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@11:

; 2870 :   }
; 2871 : 
; 2872 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2873 :   *pEmitLoc++ = 0x45;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 69			; 00000045H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2874 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2875 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNZRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNZRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNZMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNZMR
; _this$ = ecx

; 2878 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2879 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@12

; 2880 :   {
; 2881 :     //r16, r16
; 2882 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@12:

; 2883 :   }
; 2884 : 
; 2885 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2886 :   *pEmitLoc++ = 0x45;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 69			; 00000045H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2887 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2888 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNZMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNZMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVBERR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVBERR
; _this$ = ecx

; 2891 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2892 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@13

; 2893 :   {
; 2894 :     //r16, r16
; 2895 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@13:

; 2896 :   }
; 2897 : 
; 2898 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2899 :   *pEmitLoc++ = 0x46;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 70			; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2900 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2901 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVBERR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVBEMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVBEMR
; _this$ = ecx

; 2904 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2905 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@14

; 2906 :   {
; 2907 :     //r16, r16
; 2908 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@14:

; 2909 :   }
; 2910 : 
; 2911 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2912 :   *pEmitLoc++ = 0x46;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 70			; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2913 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2914 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVBEMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNBERR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNBERR
; _this$ = ecx

; 2917 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2918 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@15

; 2919 :   {
; 2920 :     //r16, r16
; 2921 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@15:

; 2922 :   }
; 2923 : 
; 2924 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2925 :   *pEmitLoc++ = 0x47;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 71			; 00000047H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2926 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2927 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNBERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNBERR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNBEMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNBEMR
; _this$ = ecx

; 2930 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2931 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@16

; 2932 :   {
; 2933 :     //r16, r16
; 2934 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@16:

; 2935 :   }
; 2936 : 
; 2937 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2938 :   *pEmitLoc++ = 0x47;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 71			; 00000047H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2939 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2940 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNBEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNBEMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVSRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVSRR
; _this$ = ecx

; 2945 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2946 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@17

; 2947 :   {
; 2948 :     //r16, r16
; 2949 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@17:

; 2950 :   }
; 2951 : 
; 2952 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2953 :   *pEmitLoc++ = 0x48;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 72			; 00000048H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2954 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2955 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVSRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVSMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVSMR
; _this$ = ecx

; 2958 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2959 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@18

; 2960 :   {
; 2961 :     //r16, r16
; 2962 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@18:

; 2963 :   }
; 2964 : 
; 2965 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2966 :   *pEmitLoc++ = 0x48;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 72			; 00000048H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2967 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2968 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVSMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNSRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNSRR
; _this$ = ecx

; 2971 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2972 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@19

; 2973 :   {
; 2974 :     //r16, r16
; 2975 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@19:

; 2976 :   }
; 2977 : 
; 2978 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2979 :   *pEmitLoc++ = 0x49;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 73			; 00000049H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2980 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2981 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNSRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNSRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNSMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNSMR
; _this$ = ecx

; 2984 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2985 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@20

; 2986 :   {
; 2987 :     //r16, r16
; 2988 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@20:

; 2989 :   }
; 2990 : 
; 2991 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2992 :   *pEmitLoc++ = 0x49;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 73			; 00000049H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2993 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 2994 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNSMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNSMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVPRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVPRR
; _this$ = ecx

; 2997 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2998 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@21

; 2999 :   {
; 3000 :     //r16, r16
; 3001 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@21:

; 3002 :   }
; 3003 : 
; 3004 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3005 :   *pEmitLoc++ = 0x4A;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 74			; 0000004aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3006 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3007 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVPRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVPMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVPMR
; _this$ = ecx

; 3010 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3011 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@22

; 3012 :   {
; 3013 :     //r16, r16
; 3014 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@22:

; 3015 :   }
; 3016 : 
; 3017 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3018 :   *pEmitLoc++ = 0x4A;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 74			; 0000004aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3019 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3020 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVPMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNPRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNPRR
; _this$ = ecx

; 3023 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3024 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@23

; 3025 :   {
; 3026 :     //r16, r16
; 3027 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@23:

; 3028 :   }
; 3029 : 
; 3030 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3031 :   *pEmitLoc++ = 0x4B;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 75			; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3032 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3033 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNPRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNPRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNPMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNPMR
; _this$ = ecx

; 3036 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3037 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@24

; 3038 :   {
; 3039 :     //r16, r16
; 3040 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@24:

; 3041 :   }
; 3042 : 
; 3043 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3044 :   *pEmitLoc++ = 0x4B;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 75			; 0000004bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3045 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3046 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNPMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNPMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVLRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVLRR
; _this$ = ecx

; 3049 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3050 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@25

; 3051 :   {
; 3052 :     //r16, r16
; 3053 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@25:

; 3054 :   }
; 3055 : 
; 3056 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3057 :   *pEmitLoc++ = 0x4C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 76			; 0000004cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3058 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3059 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVLRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVLMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVLMR
; _this$ = ecx

; 3062 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3063 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@26

; 3064 :   {
; 3065 :     //r16, r16
; 3066 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@26:

; 3067 :   }
; 3068 : 
; 3069 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3070 :   *pEmitLoc++ = 0x4C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 76			; 0000004cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3071 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3072 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVLMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNLRR
; _this$ = ecx

; 3075 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3076 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@27

; 3077 :   {
; 3078 :     //r16, r16
; 3079 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@27:

; 3080 :   }
; 3081 : 
; 3082 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3083 :   *pEmitLoc++ = 0x4D;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 77			; 0000004dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3084 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3085 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNLRR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNLMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNLMR
; _this$ = ecx

; 3088 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3089 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@28

; 3090 :   {
; 3091 :     //r16, r16
; 3092 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@28:

; 3093 :   }
; 3094 : 
; 3095 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3096 :   *pEmitLoc++ = 0x4D;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 77			; 0000004dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3097 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3098 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNLMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNLMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVLERR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVLERR
; _this$ = ecx

; 3101 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3102 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@29

; 3103 :   {
; 3104 :     //r16, r16
; 3105 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@29:

; 3106 :   }
; 3107 : 
; 3108 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3109 :   *pEmitLoc++ = 0x4E;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 78			; 0000004eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3110 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3111 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVLERR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVLEMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVLEMR
; _this$ = ecx

; 3114 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3115 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@30

; 3116 :   {
; 3117 :     //r16, r16
; 3118 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@30:

; 3119 :   }
; 3120 : 
; 3121 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3122 :   *pEmitLoc++ = 0x4E;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 78			; 0000004eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3123 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3124 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVLEMR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLERR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_CMOVNLERR
; _this$ = ecx

; 3127 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3128 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@31

; 3129 :   {
; 3130 :     //r16, r16
; 3131 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@31:

; 3132 :   }
; 3133 : 
; 3134 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3135 :   *pEmitLoc++ = 0x4F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 79			; 0000004fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3136 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regSrc$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3137 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_CMOVNLERR
_TEXT	ENDS
PUBLIC	?X86Emit_CMOVNLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_CMOVNLEMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_CMOVNLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_CMOVNLEMR
; _this$ = ecx

; 3140 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3141 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_CM@32

; 3142 :   {
; 3143 :     //r16, r16
; 3144 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_CM@32:

; 3145 :   }
; 3146 : 
; 3147 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3148 :   *pEmitLoc++ = 0x4F;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 79			; 0000004fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3149 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3150 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_CMOVNLEMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_CMOVNLEMR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVQRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVQRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_MOVQRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_MOVQRR
; _this$ = ecx

; 3153 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3154 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_MO@5

; 3155 :   {
; 3156 :     //MMX
; 3157 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3158 :     *pEmitLoc++ = 0x6F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 111			; 0000006fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3159 :   }
; 3160 :   else

	jmp	SHORT $LN1@X86Emit_MO@5
$LN2@X86Emit_MO@5:

; 3161 :   {
; 3162 :     //SSE2
; 3163 :     *pEmitLoc++ = 0xF3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 243			; 000000f3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3164 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3165 :     *pEmitLoc++ = 0x7E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 126			; 0000007eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_MO@5:

; 3166 :   }
; 3167 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3168 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_MOVQRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_MOVQRR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVQMR
; _this$ = ecx

; 3171 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3172 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_MO@6

; 3173 :   {
; 3174 :     //MMX
; 3175 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3176 :     *pEmitLoc++ = 0x6F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 111			; 0000006fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3177 :   }
; 3178 :   else

	jmp	SHORT $LN1@X86Emit_MO@6
$LN2@X86Emit_MO@6:

; 3179 :   {
; 3180 :     //SSE2
; 3181 :     *pEmitLoc++ = 0xF3;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 243			; 000000f3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3182 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3183 :     *pEmitLoc++ = 0x7E;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 126			; 0000007eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_MO@6:

; 3184 :   }
; 3185 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3186 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_MOVQMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVQMR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVQRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVQRM
; _this$ = ecx

; 3189 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3190 :   if(regSrc < x86Reg_xmm0)

	cmp	DWORD PTR _regSrc$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_MO@7

; 3191 :   {
; 3192 :     //MMX
; 3193 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3194 :     *pEmitLoc++ = 0x7F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 127			; 0000007fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3195 :   }
; 3196 :   else

	jmp	SHORT $LN1@X86Emit_MO@7
$LN2@X86Emit_MO@7:

; 3197 :   {
; 3198 :     //SSE2
; 3199 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3200 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3201 :     *pEmitLoc++ = 0xD6;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 214			; 000000d6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_MO@7:

; 3202 :   }
; 3203 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3204 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_MOVQRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVQRM
_TEXT	ENDS
PUBLIC	?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHLDIRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
_shiftCount$ = 16					; size = 1
?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z PROC ; NativeCodeCache::X86Emit_SHLDIRR
; _this$ = ecx

; 3207 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3208 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH

; 3209 :   {
; 3210 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH:

; 3211 :   }
; 3212 : 
; 3213 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3214 :   *pEmitLoc++ = 0xA4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 164			; 000000a4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3215 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3216 :   *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3217 : 
; 3218 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_SHLDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ENDP ; NativeCodeCache::X86Emit_SHLDIRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHLDRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC ; NativeCodeCache::X86Emit_SHLDRRR
; _this$ = ecx

; 3221 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3222 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@2

; 3223 :   {
; 3224 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@2:

; 3225 :   }
; 3226 : 
; 3227 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3228 :   *pEmitLoc++ = 0xA5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 165			; 000000a5H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3229 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3230 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SHLDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP ; NativeCodeCache::X86Emit_SHLDRRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHLDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLDIMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_shiftCount$ = 16					; size = 1
_base$ = 20						; size = 4
_index$ = 24						; size = 4
_scale$ = 28						; size = 4
_disp$ = 32						; size = 4
?X86Emit_SHLDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHLDIMR
; _this$ = ecx

; 3233 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3234 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@3

; 3235 :   {
; 3236 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@3:

; 3237 :   }
; 3238 : 
; 3239 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3240 :   *pEmitLoc++ = 0xA4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 164			; 000000a4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3241 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),(base & 0x07),index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3242 :   *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3243 : 
; 3244 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?X86Emit_SHLDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHLDIMR
_TEXT	ENDS
PUBLIC	?X86Emit_SHLDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHLDRMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SHLDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHLDRMR
; _this$ = ecx

; 3247 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3248 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@4

; 3249 :   {
; 3250 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@4:

; 3251 :   }
; 3252 : 
; 3253 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3254 :   *pEmitLoc++ = 0xA5;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 165			; 000000a5H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3255 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),(base & 0x07),index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3256 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SHLDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHLDRMR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ; NativeCodeCache::X86Emit_SHRDIRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
_shiftCount$ = 16					; size = 1
?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z PROC ; NativeCodeCache::X86Emit_SHRDIRR
; _this$ = ecx

; 3259 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3260 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@5

; 3261 :   {
; 3262 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@5:

; 3263 :   }
; 3264 : 
; 3265 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3266 :   *pEmitLoc++ = 0xAC;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 172			; 000000acH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3267 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3268 :   *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3269 : 
; 3270 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?X86Emit_SHRDIRR@NativeCodeCache@@QAEXW4x86Reg@@0E@Z ENDP ; NativeCodeCache::X86Emit_SHRDIRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SHRDRRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC ; NativeCodeCache::X86Emit_SHRDRRR
; _this$ = ecx

; 3273 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3274 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@6

; 3275 :   {
; 3276 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@6:

; 3277 :   }
; 3278 : 
; 3279 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3280 :   *pEmitLoc++ = 0xAD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 173			; 000000adH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3281 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regSrc & 0x07),(regDest & 0x07));

	push	0
	push	0
	push	4
	mov	eax, DWORD PTR _regDest$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3282 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_SHRDRRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP ; NativeCodeCache::X86Emit_SHRDRRR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHRDIMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_shiftCount$ = 16					; size = 1
_base$ = 20						; size = 4
_index$ = 24						; size = 4
_scale$ = 28						; size = 4
_disp$ = 32						; size = 4
?X86Emit_SHRDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHRDIMR
; _this$ = ecx

; 3285 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3286 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@7

; 3287 :   {
; 3288 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@7:

; 3289 :   }
; 3290 : 
; 3291 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3292 :   *pEmitLoc++ = 0xAC;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 172			; 000000acH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3293 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),(base & 0x07),index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3294 :   *pEmitLoc++ = shiftCount;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	cl, BYTE PTR _shiftCount$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3295 : 
; 3296 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?X86Emit_SHRDIMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@EIW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHRDIMR
_TEXT	ENDS
PUBLIC	?X86Emit_SHRDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_SHRDRMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_SHRDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_SHRDRMR
; _this$ = ecx

; 3299 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3300 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN1@X86Emit_SH@8

; 3301 :   {
; 3302 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@X86Emit_SH@8:

; 3303 :   }
; 3304 : 
; 3305 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3306 :   *pEmitLoc++ = 0xAD;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 173			; 000000adH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3307 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),(base & 0x07),index, scale, disp);

	mov	eax, DWORD PTR _disp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _scale$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	eax, DWORD PTR _base$[ebp]
	and	eax, 7
	push	eax
	mov	ecx, DWORD PTR _regDest$[ebp]
	and	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3308 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_SHRDRMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_SHRDRMR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVZXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_MOVZXRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_MOVZXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_MOVZXRR
; _this$ = ecx

; 3311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3312 :   uint8 opcode = 0xB6;

	mov	BYTE PTR _opcode$[ebp], 182		; 000000b6H

; 3313 : 
; 3314 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN3@X86Emit_MO@8

; 3315 :   {
; 3316 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@X86Emit_MO@8
$LN3@X86Emit_MO@8:

; 3317 :   }
; 3318 :   else if(regSrc >= x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jb	SHORT $LN2@X86Emit_MO@8

; 3319 :   {
; 3320 :     opcode = 0xB7;

	mov	BYTE PTR _opcode$[ebp], 183		; 000000b7H
$LN2@X86Emit_MO@8:

; 3321 :   }
; 3322 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3323 :   *pEmitLoc++ = opcode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _opcode$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3324 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3325 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_MOVZXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_MOVZXRR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVZXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVZXMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_MOVZXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVZXMR
; _this$ = ecx

; 3328 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3329 :   uint8 opcode = 0xB6;

	mov	BYTE PTR _opcode$[ebp], 182		; 000000b6H

; 3330 : 
; 3331 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN3@X86Emit_MO@9

; 3332 :   {
; 3333 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@X86Emit_MO@9
$LN3@X86Emit_MO@9:

; 3334 :   }
; 3335 :   else if(ptrType == x86MemPtr_word)

	cmp	DWORD PTR _ptrType$[ebp], 1
	jne	SHORT $LN2@X86Emit_MO@9

; 3336 :   {
; 3337 :     opcode = 0xB7;

	mov	BYTE PTR _opcode$[ebp], 183		; 000000b7H
$LN2@X86Emit_MO@9:

; 3338 :   }
; 3339 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3340 :   *pEmitLoc++ = opcode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _opcode$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3341 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base, index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3342 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_MOVZXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVZXMR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVSXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_MOVSXRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_MOVSXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z PROC ; NativeCodeCache::X86Emit_MOVSXRR
; _this$ = ecx

; 3345 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3346 :   uint8 opcode = 0xBE;

	mov	BYTE PTR _opcode$[ebp], 190		; 000000beH

; 3347 : 
; 3348 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN3@X86Emit_MO@10

; 3349 :   {
; 3350 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@X86Emit_MO@10
$LN3@X86Emit_MO@10:

; 3351 :   }
; 3352 :   else if(regSrc >= x86Reg_ax)

	cmp	DWORD PTR _regSrc$[ebp], 8
	jb	SHORT $LN2@X86Emit_MO@10

; 3353 :   {
; 3354 :     opcode = 0xBF;

	mov	BYTE PTR _opcode$[ebp], 191		; 000000bfH
$LN2@X86Emit_MO@10:

; 3355 :   }
; 3356 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3357 :   *pEmitLoc++ = opcode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _opcode$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3358 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3359 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_MOVSXRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ENDP ; NativeCodeCache::X86Emit_MOVSXRR
_TEXT	ENDS
PUBLIC	?X86Emit_MOVSXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVSXMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_ptrType$ = 12						; size = 4
_base$ = 16						; size = 4
_index$ = 20						; size = 4
_scale$ = 24						; size = 4
_disp$ = 28						; size = 4
?X86Emit_MOVSXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_MOVSXMR
; _this$ = ecx

; 3362 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3363 :   uint8 opcode = 0xBE;

	mov	BYTE PTR _opcode$[ebp], 190		; 000000beH

; 3364 : 
; 3365 :   if(regDest < x86Reg_eax)

	cmp	DWORD PTR _regDest$[ebp], 16		; 00000010H
	jge	SHORT $LN3@X86Emit_MO@11

; 3366 :   {
; 3367 :     *pEmitLoc++ = 0x66;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 102			; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN2@X86Emit_MO@11
$LN3@X86Emit_MO@11:

; 3368 :   }
; 3369 :   else if(ptrType == x86MemPtr_dword)

	cmp	DWORD PTR _ptrType$[ebp], 2
	jne	SHORT $LN2@X86Emit_MO@11

; 3370 :   {
; 3371 :     opcode = 0xBF;

	mov	BYTE PTR _opcode$[ebp], 191		; 000000bfH
$LN2@X86Emit_MO@11:

; 3372 :   }
; 3373 :   *pEmitLoc++ = 0x0F;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 15			; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3374 :   *pEmitLoc++ = opcode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	al, BYTE PTR _opcode$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3375 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base ,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3376 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?X86Emit_MOVSXMR@NativeCodeCache@@QAEXW4x86Reg@@W4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_MOVSXMR
_TEXT	ENDS
PUBLIC	?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_PANDRR
; _this$ = ecx

; 3379 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3380 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA

; 3381 :   {
; 3382 :     //MMX
; 3383 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3384 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3385 :   }
; 3386 :   else

	jmp	SHORT $LN1@X86Emit_PA
$LN2@X86Emit_PA:

; 3387 :   {
; 3388 :     //SSE2
; 3389 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3390 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3391 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA:

; 3392 :   }
; 3393 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3394 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_PANDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_PANDRR
_TEXT	ENDS
PUBLIC	?X86Emit_PANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PANDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PANDMR
; _this$ = ecx

; 3397 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3398 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@2

; 3399 :   {
; 3400 :     //MMX
; 3401 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3402 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3403 :   }
; 3404 :   else

	jmp	SHORT $LN1@X86Emit_PA@2
$LN2@X86Emit_PA@2:

; 3405 :   {
; 3406 :     //SSE2
; 3407 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3408 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3409 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@2:

; 3410 :   }
; 3411 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3412 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PANDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PANDMR
_TEXT	ENDS
PUBLIC	?X86Emit_PANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PANDRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PANDRM
; _this$ = ecx

; 3415 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3416 :   if(regSrc < x86Reg_xmm0)

	cmp	DWORD PTR _regSrc$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@3

; 3417 :   {
; 3418 :     //MMX
; 3419 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3420 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3421 :   }
; 3422 :   else

	jmp	SHORT $LN1@X86Emit_PA@3
$LN2@X86Emit_PA@3:

; 3423 :   {
; 3424 :     //SSE2
; 3425 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3426 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3427 :     *pEmitLoc++ = 0xDB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 219			; 000000dbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@3:

; 3428 :   }
; 3429 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3430 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PANDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PANDRM
_TEXT	ENDS
PUBLIC	?X86Emit_PANDBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PANDBRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_PANDBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC ; NativeCodeCache::X86Emit_PANDBRR
; _this$ = ecx

; 3433 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3434 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@4

; 3435 :   {
; 3436 :     //MMX
; 3437 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3438 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3439 :   }
; 3440 :   else

	jmp	SHORT $LN1@X86Emit_PA@4
$LN2@X86Emit_PA@4:

; 3441 :   {
; 3442 :     //SSE2
; 3443 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3444 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3445 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@4:

; 3446 :   }
; 3447 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3448 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_PANDBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP ; NativeCodeCache::X86Emit_PANDBRR
_TEXT	ENDS
PUBLIC	?X86Emit_PANDNMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PANDNMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PANDNMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PANDNMR
; _this$ = ecx

; 3451 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3452 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@5

; 3453 :   {
; 3454 :     //MMX
; 3455 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3456 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3457 :   }
; 3458 :   else

	jmp	SHORT $LN1@X86Emit_PA@5
$LN2@X86Emit_PA@5:

; 3459 :   {
; 3460 :     //SSE2
; 3461 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3462 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3463 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@5:

; 3464 :   }
; 3465 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3466 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PANDNMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PANDNMR
_TEXT	ENDS
PUBLIC	?X86Emit_PANDNRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PANDNRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PANDNRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PANDNRM
; _this$ = ecx

; 3469 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3470 :   if(regSrc < x86Reg_xmm0)

	cmp	DWORD PTR _regSrc$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@6

; 3471 :   {
; 3472 :     //MMX
; 3473 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3474 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3475 :   }
; 3476 :   else

	jmp	SHORT $LN1@X86Emit_PA@6
$LN2@X86Emit_PA@6:

; 3477 :   {
; 3478 :     //SSE2
; 3479 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3480 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3481 :     *pEmitLoc++ = 0xDF;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 223			; 000000dfH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@6:

; 3482 :   }
; 3483 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base,index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3484 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PANDNRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PANDNRM
_TEXT	ENDS
PUBLIC	?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PSUBDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC ; NativeCodeCache::X86Emit_PSUBDRR
; _this$ = ecx

; 3487 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3488 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PS

; 3489 :   {
; 3490 :     //MMX
; 3491 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3492 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3493 :   }
; 3494 :   else

	jmp	SHORT $LN1@X86Emit_PS
$LN2@X86Emit_PS:

; 3495 :   {
; 3496 :     //SSE2
; 3497 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3498 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3499 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PS:

; 3500 :   }
; 3501 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3502 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_PSUBDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP ; NativeCodeCache::X86Emit_PSUBDRR
_TEXT	ENDS
PUBLIC	?X86Emit_PSUBDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PSUBDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PSUBDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PSUBDMR
; _this$ = ecx

; 3505 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3506 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PS@2

; 3507 :   {
; 3508 :     //MMX
; 3509 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3510 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3511 :   }
; 3512 :   else

	jmp	SHORT $LN1@X86Emit_PS@2
$LN2@X86Emit_PS@2:

; 3513 :   {
; 3514 :     //SSE2
; 3515 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3516 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3517 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PS@2:

; 3518 :   }
; 3519 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3520 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PSUBDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PSUBDMR
_TEXT	ENDS
PUBLIC	?X86Emit_PSUBDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PSUBDRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PSUBDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PSUBDRM
; _this$ = ecx

; 3523 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3524 :   if(regSrc < x86Reg_xmm0)

	cmp	DWORD PTR _regSrc$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PS@3

; 3525 :   {
; 3526 :     //MMX
; 3527 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3528 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3529 :   }
; 3530 :   else

	jmp	SHORT $LN1@X86Emit_PS@3
$LN2@X86Emit_PS@3:

; 3531 :   {
; 3532 :     //SSE2
; 3533 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3534 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3535 :     *pEmitLoc++ = 0xFA;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 250			; 000000faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PS@3:

; 3536 :   }
; 3537 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07), base, index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3538 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PSUBDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PSUBDRM
_TEXT	ENDS
PUBLIC	?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_PADDRR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_regSrc$ = 12						; size = 4
?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z PROC	; NativeCodeCache::X86Emit_PADDRR
; _this$ = ecx

; 3541 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3542 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@7

; 3543 :   {
; 3544 :     //MMX
; 3545 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3546 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3547 :   }
; 3548 :   else

	jmp	SHORT $LN1@X86Emit_PA@7
$LN2@X86Emit_PA@7:

; 3549 :   {
; 3550 :     //SSE2
; 3551 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3552 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3553 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@7:

; 3554 :   }
; 3555 :   X86Emit_ModRegRM(x86ModType_reg,(x86ModReg)(regDest & 0x07),(regSrc & 0x07));

	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _regSrc$[ebp]
	and	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3556 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?X86Emit_PADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ENDP	; NativeCodeCache::X86Emit_PADDRR
_TEXT	ENDS
PUBLIC	?X86Emit_PADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PADDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regDest$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PADDMR
; _this$ = ecx

; 3559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3560 :   if(regDest < x86Reg_xmm0)

	cmp	DWORD PTR _regDest$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@8

; 3561 :   {
; 3562 :     //MMX
; 3563 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3564 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3565 :   }
; 3566 :   else

	jmp	SHORT $LN1@X86Emit_PA@8
$LN2@X86Emit_PA@8:

; 3567 :   {
; 3568 :     //SSE2
; 3569 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3570 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3571 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@8:

; 3572 :   }
; 3573 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regDest & 0x07), base, index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regDest$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3574 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PADDMR
_TEXT	ENDS
PUBLIC	?X86Emit_PADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_PADDRM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_regSrc$ = 8						; size = 4
_base$ = 12						; size = 4
_index$ = 16						; size = 4
_scale$ = 20						; size = 4
_disp$ = 24						; size = 4
?X86Emit_PADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z PROC ; NativeCodeCache::X86Emit_PADDRM
; _this$ = ecx

; 3577 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 3578 :   if(regSrc < x86Reg_xmm0)

	cmp	DWORD PTR _regSrc$[ebp], 40		; 00000028H
	jge	SHORT $LN2@X86Emit_PA@9

; 3579 :   {
; 3580 :     //MMX
; 3581 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3582 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3583 :   }
; 3584 :   else

	jmp	SHORT $LN1@X86Emit_PA@9
$LN2@X86Emit_PA@9:

; 3585 :   {
; 3586 :     //SSE2
; 3587 :     *pEmitLoc++ = 0x66;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx], 102			; 00000066H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3588 :     *pEmitLoc++ = 0x0F;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx], 15			; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 3589 :     *pEmitLoc++ = 0xFE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax], 254			; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN1@X86Emit_PA@9:

; 3590 :   }
; 3591 :   X86Emit_ModRegRM(x86ModType_mem,(x86ModReg)(regSrc & 0x07),base, index, scale, disp);

	mov	ecx, DWORD PTR _disp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _regSrc$[ebp]
	and	edx, 7
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?X86Emit_ModRegRM@NativeCodeCache@@QAEXW4x86ModType@@W4x86ModReg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ModRegRM

; 3592 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?X86Emit_PADDRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ENDP ; NativeCodeCache::X86Emit_PADDRM
_TEXT	ENDS
END

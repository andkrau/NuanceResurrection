; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\EmitRCU.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?saveReg@@3IA					; saveReg
_BSS	SEGMENT
?saveReg@@3IA DD 01H DUP (?)				; saveReg
_BSS	ENDS
PUBLIC	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
PUBLIC	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
PUBLIC	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
PUBLIC	?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc0
EXTRN	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORRM
EXTRN	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVRM
EXTRN	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVNLERR
EXTRN	?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z:PROC ; NativeCodeCache::X86Emit_CMOVNLRR
EXTRN	?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_DECR
EXTRN	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_XORRR
EXTRN	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_MOVRR
EXTRN	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_MOVIR
EXTRN	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVMR
EXTRN	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ANDIM
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\nuanceexperimental\emitrcu.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_ccDisp$ = -24						; size = 4
_rc0Disp$ = -20						; size = 4
_ccWriteBaseReg$ = -16					; size = 4
_rc0WriteBaseReg$ = -12					; size = 4
_ccReadBaseReg$ = -8					; size = 4
_rc0ReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DECRc0

; 10   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 11   :   x86BaseReg rc0ReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rc0ReadBaseReg$[ebp], eax

; 12   :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 13   :   x86BaseReg rc0WriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rc0WriteBaseReg$[ebp], eax

; 14   :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 15   :   int32 rc0Disp = GetMiscRegEmitDisp(vars,REGINDEX_RC0);

	push	1
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rc0Disp$[ebp], eax

; 16   :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 17   : 
; 18   :   //eax = rc0WriteBack, ebx = rc0M1, ecx = flagSetMask, ebp = 0
; 19   : 
; 20   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C0Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 1048576				; 00100000H
	je	SHORT $LN3@Emit_DECRc

; 21   :   {
; 22   :     //cc &= ~CC_COUNTER0_ZERO
; 23   :     vars->codeCache->X86Emit_ANDIM(~CC_COUNTER0_ZERO, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	push	-33					; ffffffdfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN3@Emit_DECRc:

; 24   :   }
; 25   :   //rc0WriteBack = rc0
; 26   :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rc0ReadBaseReg, x86IndexReg_none, x86Scale_1, rc0Disp);

	mov	edx, DWORD PTR _rc0Disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rc0ReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 27   :   //flagSetMask = CC_COUNTER0_ZERO
; 28   :   vars->codeCache->X86Emit_MOVIR(CC_COUNTER0_ZERO, x86Reg_ecx);

	push	17					; 00000011H
	push	32					; 00000020H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 29   :   //rc0M1 = rc0
; 30   :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 31   :   //ebp = 0
; 32   :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 33   :   //rc0M1 = rc0 - 1
; 34   :   vars->codeCache->X86Emit_DECR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_DECR

; 35   :   //if(rc0M1 >= 0), rc0WriteBack = rc0 (otherwise rc0M1)
; 36   :   vars->codeCache->X86Emit_CMOVNLRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLRR

; 37   :   //if(rc0M1) > 0), flagSetMask = 0 (otherwise CC_COUNTER0_ZERO)
; 38   :   vars->codeCache->X86Emit_CMOVNLERR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLERR

; 39   :   if(vars->miscRegOutDep & DEPENDENCY_MASK_RC0)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 1
	je	SHORT $LN2@Emit_DECRc

; 40   :   {
; 41   :     //rc0 = rc0WriteBack
; 42   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rc0WriteBaseReg, x86IndexReg_none, x86Scale_1, rc0Disp);

	mov	ecx, DWORD PTR _rc0Disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rc0WriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_DECRc:

; 43   :   }
; 44   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C0Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 1048576				; 00100000H
	je	SHORT $LN4@Emit_DECRc

; 45   :   {
; 46   :     //cc = cc | flagSetMask
; 47   :     vars->codeCache->X86Emit_ORRM(x86Reg_ecx, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_DECRc:

; 48   :   }
; 49   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DECRc0
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_mask$ = -4						; size = 4
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegReadBaseReg, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 53   :   uint32 mask = regIndex;

	mov	eax, DWORD PTR _regIndex$[ebp]
	mov	DWORD PTR _mask$[ebp], eax

; 54   : 
; 55   :   if(!regIndex)

	cmp	DWORD PTR _regIndex$[ebp], 0
	jne	SHORT $LN4@GetMiscReg

; 56   :   {
; 57   :     mask = DEPENDENCY_FLAG_ALLFLAGS;

	mov	DWORD PTR _mask$[ebp], 67076096		; 03ff8000H

; 58   :   }
; 59   :   else

	jmp	SHORT $LN3@GetMiscReg
$LN4@GetMiscReg:

; 60   :   {
; 61   :     mask = MISC_REG_DEPENDENCY_MASK(regIndex - 1);

	mov	ecx, DWORD PTR _regIndex$[ebp]
	sub	ecx, 1
	mov	edx, 1
	shl	edx, cl
	mov	DWORD PTR _mask$[ebp], edx
$LN3@GetMiscReg:

; 62   :   }
; 63   :     
; 64   : 
; 65   :   if(vars->miscRegDep & mask)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, DWORD PTR _mask$[ebp]
	je	SHORT $LN2@GetMiscReg

; 66   :   {
; 67   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN5@GetMiscReg

; 68   :   }
; 69   :   else

	jmp	SHORT $LN5@GetMiscReg
$LN2@GetMiscReg:

; 70   :   {
; 71   :     return x86BaseReg_esi;

	mov	eax, 6
$LN5@GetMiscReg:

; 72   :   }
; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetMiscRegWriteBaseReg, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp

; 76   :   return x86BaseReg_esi;

	mov	eax, 6

; 77   : }

	pop	ebp
	ret	0
?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetMiscRegWriteBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetMiscRegEmitDisp, COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp

; 81   :   return regIndex*sizeof(uint32);

	mov	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2

; 82   : }

	pop	ebp
	ret	0
?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetMiscRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc1
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitrcu.cpp
_TEXT	SEGMENT
_ccDisp$ = -24						; size = 4
_rc1Disp$ = -20						; size = 4
_ccWriteBaseReg$ = -16					; size = 4
_rc1WriteBaseReg$ = -12					; size = 4
_ccReadBaseReg$ = -8					; size = 4
_rc1ReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DECRc1

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 53   :   x86BaseReg rc1ReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rc1ReadBaseReg$[ebp], eax

; 54   :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 55   :   x86BaseReg rc1WriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rc1WriteBaseReg$[ebp], eax

; 56   :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 57   :   int32 rc1Disp = GetMiscRegEmitDisp(vars,REGINDEX_RC1);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rc1Disp$[ebp], eax

; 58   :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 59   : 
; 60   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C1Z)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 2097152				; 00200000H
	je	SHORT $LN3@Emit_DECRc@2

; 61   :   {
; 62   :     vars->codeCache->X86Emit_ANDIM(~CC_COUNTER1_ZERO, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	push	-65					; ffffffbfH
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN3@Emit_DECRc@2:

; 63   :   }
; 64   :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rc1ReadBaseReg, x86IndexReg_none, x86Scale_1, rc1Disp);

	mov	edx, DWORD PTR _rc1Disp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _rc1ReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 65   :   vars->codeCache->X86Emit_MOVIR(CC_COUNTER1_ZERO, x86Reg_ecx);

	push	17					; 00000011H
	push	64					; 00000040H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_MOVIR

; 66   :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 67   :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);

	push	21					; 00000015H
	push	21					; 00000015H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_XORRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_XORRR

; 68   :   vars->codeCache->X86Emit_DECR(x86Reg_ebx);

	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_DECR@NativeCodeCache@@QAEXW4x86Reg@@@Z ; NativeCodeCache::X86Emit_DECR

; 69   :   vars->codeCache->X86Emit_CMOVNLRR(x86Reg_eax, x86Reg_ebx);

	push	19					; 00000013H
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMOVNLRR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLRR

; 70   :   vars->codeCache->X86Emit_CMOVNLERR(x86Reg_ecx, x86Reg_ebp);

	push	21					; 00000015H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMOVNLERR@NativeCodeCache@@QAEXW4x86Reg@@I@Z ; NativeCodeCache::X86Emit_CMOVNLERR

; 71   :   if(vars->miscRegOutDep & DEPENDENCY_MASK_RC1)

	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+40]
	and	eax, 2
	je	SHORT $LN2@Emit_DECRc@2

; 72   :   {
; 73   :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rc1WriteBaseReg, x86IndexReg_none, x86Scale_1, rc1Disp);

	mov	ecx, DWORD PTR _rc1Disp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _rc1WriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_DECRc@2:

; 74   :   }
; 75   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C1Z)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 2097152				; 00200000H
	je	SHORT $LN4@Emit_DECRc@2

; 76   :   {
; 77   :     vars->codeCache->X86Emit_ORRM(x86Reg_ecx, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORRM
$LN4@Emit_DECRc@2:

; 78   :   }
; 79   : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DECRc1
_TEXT	ENDS
PUBLIC	?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECBoth
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ccDisp$ = -36						; size = 4
_rc1Disp$ = -32						; size = 4
_rc0Disp$ = -28						; size = 4
_ccWriteBaseReg$ = -24					; size = 4
_rc1WriteBaseReg$ = -20					; size = 4
_rc0WriteBaseReg$ = -16					; size = 4
_ccReadBaseReg$ = -12					; size = 4
_rc1ReadBaseReg$ = -8					; size = 4
_rc0ReadBaseReg$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_DECBoth

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 83   :   x86BaseReg rc0ReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rc0ReadBaseReg$[ebp], eax

; 84   :   x86BaseReg rc1ReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _rc1ReadBaseReg$[ebp], eax

; 85   :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 86   :   x86BaseReg rc0WriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rc0WriteBaseReg$[ebp], eax

; 87   :   x86BaseReg rc1WriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_RC1);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _rc1WriteBaseReg$[ebp], eax

; 88   :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 89   :   int32 rc0Disp = GetMiscRegEmitDisp(vars,REGINDEX_RC0);

	push	1
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rc0Disp$[ebp], eax

; 90   :   int32 rc1Disp = GetMiscRegEmitDisp(vars,REGINDEX_RC1);

	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _rc1Disp$[ebp], eax

; 91   :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 92   : 
; 93   :   Emit_DECRc0(vars,nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc0
	add	esp, 8

; 94   :   Emit_DECRc1(vars,nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc1
	add	esp, 8

; 95   : /*
; 96   :   //eax = rc0WriteBack, ebx = rc0M1, ecx = flagSetMask, ebp = 0
; 97   : 
; 98   :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_C0Z)
; 99   :   {
; 100  :     //cc &= ~(CC_COUNTER0_ZERO | CC_COUNTER1_ZERO)
; 101  :     vars->codeCache->X86Emit_ANDIM(~(CC_COUNTER0_ZERO | CC_COUNTER1_ZERO), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);
; 102  :   }
; 103  :   //rc0WriteBack = rc0
; 104  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rc0ReadBaseReg, x86IndexReg_none, x86Scale_1, rc0Disp);
; 105  :   //flagSetMask = CC_COUNTER0_ZERO
; 106  :   vars->codeCache->X86Emit_MOVIR(CC_COUNTER0_ZERO, x86Reg_ecx);
; 107  :   //rc0M1 = rc0
; 108  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);
; 109  :   //ebp = 0
; 110  :   vars->codeCache->X86Emit_XORRR(x86Reg_ebp, x86Reg_ebp);
; 111  :   //rc0M1 = rc0 - 1
; 112  :   vars->codeCache->X86Emit_DECR(x86Reg_ebx);
; 113  :   //if(rc0M1 >= 0), rc0WriteBack = rc0M1 (otherwise rc0)
; 114  :   vars->codeCache->X86Emit_CMOVNLRR(x86Reg_eax, x86Reg_ebx);
; 115  :   //if(rc0M1 > 0), flagSetMask = 0 (otherwise CC_COUNTER0_ZERO)
; 116  :   vars->codeCache->X86Emit_CMOVNLERR(x86Reg_ecx, x86Reg_ebp);
; 117  :   //rc0 = rc0WriteBack
; 118  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rc0WriteBaseReg, x86IndexReg_none, x86Scale_1, rc0Disp);
; 119  :   //cc = cc | flagSetMask
; 120  :   vars->codeCache->X86Emit_ORRM(x86Reg_ecx, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);
; 121  : 
; 122  :   //eax = rc1WriteBack, ebx = rc1M1, ecx = flagSetMask, ebp = 0
; 123  : 
; 124  :   //rc1WriteBack = rc1
; 125  :   vars->codeCache->X86Emit_MOVMR(x86Reg_eax, rc1ReadBaseReg, x86IndexReg_none, x86Scale_1, rc1Disp);
; 126  :   //flagSetMask = CC_COUNTER1_ZERO
; 127  :   vars->codeCache->X86Emit_MOVIR(CC_COUNTER1_ZERO, x86Reg_ecx);
; 128  :   //rc1M1 = rc1
; 129  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ebx, x86Reg_eax);
; 130  :   //rc1M1 = rc1 - 1
; 131  :   vars->codeCache->X86Emit_DECR(x86Reg_ebx);
; 132  :   //if(rc1M1 >= 0), rc1WriteBack = rc1M1 (otherwise rc1)
; 133  :   vars->codeCache->X86Emit_CMOVNLRR(x86Reg_eax, x86Reg_ebx);
; 134  :   //if(rc1M1 > 0), flagSetMask = 0 (otherwise CC_COUNTER1_ZERO)
; 135  :   vars->codeCache->X86Emit_CMOVNLERR(x86Reg_ecx, x86Reg_ebp);
; 136  :   //rc1 = rc1WriteBack
; 137  :   vars->codeCache->X86Emit_MOVRM(x86Reg_eax, rc1WriteBaseReg, x86IndexReg_none, x86Scale_1, rc1Disp);
; 138  :   //cc = cc | flagSetMask
; 139  :   vars->codeCache->X86Emit_ORRM(x86Reg_ecx, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);
; 140  : */
; 141  : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_DECBoth
_TEXT	ENDS
PUBLIC	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_DEC

; 144  : {

	push	ebp
	mov	ebp, esp

; 145  :   if(nuance.fields[FIELD_RCU_INFO] & RCU_DEC_RC0)

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 2
	je	SHORT $LN2@Emit_DEC

; 146  :   {
; 147  :     Emit_DECRc0(vars, nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc0
	add	esp, 8
$LN2@Emit_DEC:

; 148  :   }
; 149  : 
; 150  :   if(nuance.fields[FIELD_RCU_INFO] & RCU_DEC_RC1)

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 1
	je	SHORT $LN3@Emit_DEC

; 151  :   {
; 152  :     Emit_DECRc1(vars, nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DECRc1
	add	esp, 8
$LN3@Emit_DEC:

; 153  :   }
; 154  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_DEC
_TEXT	ENDS
PUBLIC	?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRImmediateOnly
EXTRN	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ADDIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_indexRegDisp$ = -16					; size = 4
_indexRegWriteBaseReg$ = -12				; size = 4
_indexRegReadBaseReg$ = -8				; size = 4
_indexRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDRImmediateOnly

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 158  :   uint32 indexRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 3
	mov	DWORD PTR _indexRegIndex$[ebp], ecx

; 159  : 
; 160  :   x86BaseReg indexRegReadBaseReg = GetMiscRegReadBaseReg(vars,indexRegIndex);

	mov	edx, DWORD PTR _indexRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegReadBaseReg$[ebp], eax

; 161  :   x86BaseReg indexRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,indexRegIndex);

	mov	ecx, DWORD PTR _indexRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegWriteBaseReg$[ebp], eax

; 162  :   int32 indexRegDisp = GetMiscRegEmitDisp(vars,indexRegIndex);

	mov	eax, DWORD PTR _indexRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _indexRegDisp$[ebp], eax

; 163  : 
; 164  :   if(vars->miscRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN2@Emit_ADDRI

; 165  :   {
; 166  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax,indexRegReadBaseReg,x86IndexReg_none,x86Scale_1,indexRegDisp);

	mov	eax, DWORD PTR _indexRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _indexRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 167  :     vars->codeCache->X86Emit_ADDIR(nuance.fields[FIELD_RCU_SRC], x86Reg_eax);

	push	16					; 00000010H
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ADDIR

; 168  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax,indexRegWriteBaseReg,x86IndexReg_none,x86Scale_1,indexRegDisp);

	mov	eax, DWORD PTR _indexRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _indexRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_ADDRI:

; 169  :   }
; 170  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDRImmediateOnly
_TEXT	ENDS
PUBLIC	?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDRImmediate

; 173  : {

	push	ebp
	mov	ebp, esp

; 174  :   Emit_ADDRImmediateOnly(vars, nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRImmediateOnly
	add	esp, 8

; 175  :   Emit_DEC(vars, nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 176  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDRImmediate
_TEXT	ENDS
PUBLIC	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
PUBLIC	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
PUBLIC	?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRScalarOnly
EXTRN	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ADDMR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_scalarRegDisp$ = -28					; size = 4
_indexRegDisp$ = -24					; size = 4
_scalarRegReadBaseReg$ = -20				; size = 4
_indexRegWriteBaseReg$ = -16				; size = 4
_indexRegReadBaseReg$ = -12				; size = 4
_scalarRegIndex$ = -8					; size = 4
_indexRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDRScalarOnly

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 180  :   uint32 indexRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 3
	mov	DWORD PTR _indexRegIndex$[ebp], ecx

; 181  :   uint32 scalarRegIndex = nuance.fields[FIELD_RCU_SRC];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _scalarRegIndex$[ebp], eax

; 182  : 
; 183  :   x86BaseReg indexRegReadBaseReg = GetMiscRegReadBaseReg(vars,indexRegIndex);

	mov	ecx, DWORD PTR _indexRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegReadBaseReg$[ebp], eax

; 184  :   x86BaseReg indexRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,indexRegIndex);

	mov	eax, DWORD PTR _indexRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegWriteBaseReg$[ebp], eax

; 185  :   x86BaseReg scalarRegReadBaseReg = GetScalarRegReadBaseReg(vars,scalarRegIndex);

	mov	edx, DWORD PTR _scalarRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _scalarRegReadBaseReg$[ebp], eax

; 186  :   int32 indexRegDisp = GetMiscRegEmitDisp(vars,indexRegIndex);

	mov	ecx, DWORD PTR _indexRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _indexRegDisp$[ebp], eax

; 187  :   int32 scalarRegDisp = GetScalarRegEmitDisp(vars,scalarRegIndex);

	mov	eax, DWORD PTR _scalarRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _scalarRegDisp$[ebp], eax

; 188  : 
; 189  :   if(vars->miscRegOutDep)

	mov	edx, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN2@Emit_ADDRS

; 190  :   {
; 191  :     //eax = rcu_dest
; 192  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, scalarRegReadBaseReg, x86IndexReg_none, x86Scale_1, scalarRegDisp);

	mov	eax, DWORD PTR _scalarRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _scalarRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 193  :     vars->codeCache->X86Emit_ADDMR(x86Reg_eax, indexRegReadBaseReg, x86IndexReg_none, x86Scale_1, indexRegDisp);

	mov	eax, DWORD PTR _indexRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _indexRegReadBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ADDMR

; 194  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, indexRegWriteBaseReg, x86IndexReg_none, x86Scale_1, indexRegDisp);

	mov	eax, DWORD PTR _indexRegDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _indexRegWriteBaseReg$[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_ADDRS:

; 195  :   }
; 196  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDRScalarOnly
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z PROC ; GetScalarRegReadBaseReg, COMDAT

; 35   : {

	push	ebp
	mov	ebp, esp

; 36   :   if(vars->scalarRegDep & SCALAR_REG_DEPENDENCY_MASK(regIndex))

	mov	eax, 1
	mov	ecx, DWORD PTR _regIndex$[ebp]
	shl	eax, cl
	mov	ecx, DWORD PTR _vars$[ebp]
	and	eax, DWORD PTR [ecx+28]
	je	SHORT $LN2@GetScalarR

; 37   :   {
; 38   :     return x86BaseReg_edi;

	mov	eax, 7
	jmp	SHORT $LN3@GetScalarR

; 39   :   }
; 40   :   else

	jmp	SHORT $LN3@GetScalarR
$LN2@GetScalarR:

; 41   :   {
; 42   :     return x86BaseReg_esi;

	mov	eax, 6
$LN3@GetScalarR:

; 43   :   }
; 44   : }

	pop	ebp
	ret	0
?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ENDP ; GetScalarRegReadBaseReg
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_regIndex$ = 12						; size = 4
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z PROC	; GetScalarRegEmitDisp, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :   return -((32 - (int32)regIndex) * ((int32)sizeof(uint32)));

	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR _regIndex$[ebp]
	shl	eax, 2
	neg	eax

; 87   : }

	pop	ebp
	ret	0
?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ENDP	; GetScalarRegEmitDisp
_TEXT	ENDS
PUBLIC	?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRScalar
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitrcu.cpp
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ADDRScalar

; 199  : {

	push	ebp
	mov	ebp, esp

; 200  :   Emit_ADDRScalarOnly(vars, nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ADDRScalarOnly
	add	esp, 8

; 201  :   Emit_DEC(vars, nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 202  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ADDRScalar
_TEXT	ENDS
PUBLIC	?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRImmediateOnly
EXTRN	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_MOVIM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_indexRegDisp$ = -12					; size = 4
_indexRegWriteBaseReg$ = -8				; size = 4
_indexRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MVRImmediateOnly

; 205  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 206  :   uint32 indexRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 3
	mov	DWORD PTR _indexRegIndex$[ebp], ecx

; 207  :   x86BaseReg indexRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,indexRegIndex);

	mov	edx, DWORD PTR _indexRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegWriteBaseReg$[ebp], eax

; 208  :   int32 indexRegDisp = GetMiscRegEmitDisp(vars,indexRegIndex);

	mov	ecx, DWORD PTR _indexRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _indexRegDisp$[ebp], eax

; 209  : 
; 210  :   if(vars->miscRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@Emit_MVRIm

; 211  :   {
; 212  :     vars->codeCache->X86Emit_MOVIM(nuance.fields[FIELD_RCU_SRC], x86MemPtr_dword, indexRegWriteBaseReg, x86IndexReg_none, x86Scale_1, indexRegDisp);

	mov	ecx, DWORD PTR _indexRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _indexRegWriteBaseReg$[ebp]
	push	edx
	push	2
	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVIM
$LN2@Emit_MVRIm:

; 213  :   }
; 214  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MVRImmediateOnly
_TEXT	ENDS
PUBLIC	?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRImmediate
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MVRImmediate

; 217  : {

	push	ebp
	mov	ebp, esp

; 218  :   Emit_MVRImmediateOnly(vars, nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRImmediateOnly
	add	esp, 8

; 219  :   Emit_DEC(vars, nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 220  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MVRImmediate
_TEXT	ENDS
PUBLIC	?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRScalarOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_scalarRegDisp$ = -24					; size = 4
_indexRegDisp$ = -20					; size = 4
_scalarRegReadBaseReg$ = -16				; size = 4
_indexRegWriteBaseReg$ = -12				; size = 4
_scalarRegIndex$ = -8					; size = 4
_indexRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MVRScalarOnly

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 224  :   uint32 indexRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 3
	mov	DWORD PTR _indexRegIndex$[ebp], ecx

; 225  :   uint32 scalarRegIndex = nuance.fields[FIELD_RCU_SRC];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _scalarRegIndex$[ebp], eax

; 226  :   x86BaseReg indexRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,indexRegIndex);

	mov	ecx, DWORD PTR _indexRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _indexRegWriteBaseReg$[ebp], eax

; 227  :   x86BaseReg scalarRegReadBaseReg = GetScalarRegReadBaseReg(vars,scalarRegIndex);

	mov	eax, DWORD PTR _scalarRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetScalarRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetScalarRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _scalarRegReadBaseReg$[ebp], eax

; 228  :   int32 indexRegDisp = GetMiscRegEmitDisp(vars,indexRegIndex);

	mov	edx, DWORD PTR _indexRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _indexRegDisp$[ebp], eax

; 229  :   int32 scalarRegDisp = GetScalarRegEmitDisp(vars,scalarRegIndex);

	mov	ecx, DWORD PTR _scalarRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetScalarRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetScalarRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _scalarRegDisp$[ebp], eax

; 230  : 
; 231  :   if(vars->miscRegOutDep)

	mov	eax, DWORD PTR _vars$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN2@Emit_MVRSc

; 232  :   {
; 233  :     //eax = rcu_src
; 234  :     vars->codeCache->X86Emit_MOVMR(x86Reg_eax, scalarRegReadBaseReg, x86IndexReg_none, x86Scale_1, scalarRegDisp);

	mov	ecx, DWORD PTR _scalarRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _scalarRegReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 235  :     //rcu_dest = eax
; 236  :     vars->codeCache->X86Emit_MOVRM(x86Reg_eax, indexRegWriteBaseReg, x86IndexReg_none, x86Scale_1, indexRegDisp);

	mov	ecx, DWORD PTR _indexRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _indexRegWriteBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_MVRSc:

; 237  :   }
; 238  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MVRScalarOnly
_TEXT	ENDS
PUBLIC	?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRScalar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_MVRScalar

; 241  : {

	push	ebp
	mov	ebp, esp

; 242  :   Emit_MVRScalarOnly(vars,nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_MVRScalarOnly
	add	esp, 8

; 243  :   Emit_DEC(vars,nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 244  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_MVRScalar
_TEXT	ENDS
PUBLIC	?SetLabelPointer@PatchManager@@QAEXIPAE@Z	; PatchManager::SetLabelPointer
PUBLIC	?GetEmitLoc@EmitterVariables@@QAEPAEXZ		; EmitterVariables::GetEmitLoc
PUBLIC	?Reset@PatchManager@@QAEXXZ			; PatchManager::Reset
PUBLIC	?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RangeOnly
EXTRN	?ApplyPatches@PatchManager@@QAEXXZ:PROC		; PatchManager::ApplyPatches
EXTRN	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_ADDRR
EXTRN	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_CMPIR
EXTRN	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z:PROC ; NativeCodeCache::X86Emit_JMPI_Label
EXTRN	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z:PROC ; NativeCodeCache::X86Emit_ORIM
EXTRN	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_SUBRR
EXTRN	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z:PROC ; NativeCodeCache::X86Emit_JCC_Label
EXTRN	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z:PROC ; NativeCodeCache::X86Emit_CMPRR
EXTRN	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z:PROC ; NativeCodeCache::X86Emit_ANDIR
EXTRN	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z:PROC ; NativeCodeCache::X86Emit_SHLIR
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv142 = -68						; size = 4
_ccDisp$ = -64						; size = 4
_destRegDisp$ = -60					; size = 4
_srcRegDisp$ = -56					; size = 4
_uvRangeDisp$ = -52					; size = 4
_xyRangeDisp$ = -48					; size = 4
_destRegWriteBaseReg$ = -44				; size = 4
_ccWriteBaseReg$ = -40					; size = 4
_destRegReadBaseReg$ = -36				; size = 4
_srcRegReadBaseReg$ = -32				; size = 4
_uvRangeReadBaseReg$ = -28				; size = 4
_xyRangeReadBaseReg$ = -24				; size = 4
_ccReadBaseReg$ = -20					; size = 4
_destRegIndex$ = -16					; size = 4
_srcRegIndex$ = -12					; size = 4
_l_exit$ = -8						; size = 4
_l_testmodmi$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_RangeOnly

; 249  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 250  :   uint32 l_testmodmi = 0;

	mov	DWORD PTR _l_testmodmi$[ebp], 0

; 251  :   uint32 l_exit = 1;

	mov	DWORD PTR _l_exit$[ebp], 1

; 252  : 
; 253  :   uint32 srcRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_SRC];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 3
	mov	DWORD PTR _srcRegIndex$[ebp], ecx

; 254  :   uint32 destRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 3
	mov	DWORD PTR _destRegIndex$[ebp], eax

; 255  :   x86BaseReg ccReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _ccReadBaseReg$[ebp], eax

; 256  :   x86BaseReg xyRangeReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _xyRangeReadBaseReg$[ebp], eax

; 257  :   x86BaseReg uvRangeReadBaseReg = GetMiscRegReadBaseReg(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _uvRangeReadBaseReg$[ebp], eax

; 258  :   x86BaseReg srcRegReadBaseReg = GetMiscRegReadBaseReg(vars,nuance.fields[FIELD_RCU_SRC]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _srcRegReadBaseReg$[ebp], eax

; 259  :   x86BaseReg destRegReadBaseReg = GetMiscRegReadBaseReg(vars,nuance.fields[FIELD_RCU_DEST]);

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegReadBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegReadBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegReadBaseReg$[ebp], eax

; 260  :   x86BaseReg ccWriteBaseReg = GetMiscRegWriteBaseReg(vars,REGINDEX_CC);

	push	0
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _ccWriteBaseReg$[ebp], eax

; 261  :   x86BaseReg destRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,nuance.fields[FIELD_RCU_DEST]);

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 262  :   int32 xyRangeDisp = GetMiscRegEmitDisp(vars,REGINDEX_XYRANGE);

	push	12					; 0000000cH
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _xyRangeDisp$[ebp], eax

; 263  :   int32 uvRangeDisp = GetMiscRegEmitDisp(vars,REGINDEX_UVRANGE);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _uvRangeDisp$[ebp], eax

; 264  :   int32 srcRegDisp = GetMiscRegEmitDisp(vars,srcRegIndex);

	mov	ecx, DWORD PTR _srcRegIndex$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _srcRegDisp$[ebp], eax

; 265  :   int32 destRegDisp = GetMiscRegEmitDisp(vars,destRegIndex);

	mov	eax, DWORD PTR _destRegIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 266  :   int32 ccDisp = GetMiscRegEmitDisp(vars,REGINDEX_CC);

	push	0
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _ccDisp$[ebp], eax

; 267  : 
; 268  :   vars->patchMgr->Reset();

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?Reset@PatchManager@@QAEXXZ		; PatchManager::Reset

; 269  : 
; 270  :   switch(nuance.fields[FIELD_RCU_SRC])

	mov	ecx, DWORD PTR _nuance$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv142[ebp], edx
	cmp	DWORD PTR tv142[ebp], 3
	ja	$LN8@Emit_Range
	mov	eax, DWORD PTR tv142[ebp]
	jmp	DWORD PTR $LN12@Emit_Range[eax*4]
$LN7@Emit_Range:

; 271  :   {
; 272  :     case 0:
; 273  :       vars->codeCache->X86Emit_MOVMR(x86Reg_eax, xyRangeReadBaseReg, x86IndexReg_none, x86Scale_1, xyRangeDisp);

	mov	ecx, DWORD PTR _xyRangeDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _xyRangeReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 274  :       vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 275  :       break;

	jmp	$LN8@Emit_Range
$LN6@Emit_Range:

; 276  :     case 1:
; 277  :       vars->codeCache->X86Emit_MOVMR(x86Reg_eax, xyRangeReadBaseReg, x86IndexReg_none, x86Scale_1, xyRangeDisp);

	mov	ecx, DWORD PTR _xyRangeDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _xyRangeReadBaseReg$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 278  :       vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	ecx, DWORD PTR _srcRegDisp$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	edx
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 279  :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR

; 280  :       break;

	jmp	SHORT $LN8@Emit_Range
$LN5@Emit_Range:

; 281  :     case 2:
; 282  :       vars->codeCache->X86Emit_MOVMR(x86Reg_eax, uvRangeReadBaseReg, x86IndexReg_none, x86Scale_1, uvRangeDisp);

	mov	edx, DWORD PTR _uvRangeDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _uvRangeReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 283  :       vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 284  :       break;

	jmp	SHORT $LN8@Emit_Range
$LN4@Emit_Range:

; 285  :     case 3:
; 286  :       vars->codeCache->X86Emit_MOVMR(x86Reg_eax, uvRangeReadBaseReg, x86IndexReg_none, x86Scale_1, uvRangeDisp);

	mov	edx, DWORD PTR _uvRangeDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _uvRangeReadBaseReg$[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 287  :       vars->codeCache->X86Emit_MOVMR(x86Reg_ebx, srcRegReadBaseReg, x86IndexReg_none, x86Scale_1, srcRegDisp);

	mov	edx, DWORD PTR _srcRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _srcRegReadBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVMR@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVMR

; 288  :       vars->codeCache->X86Emit_SHLIR(x86Reg_eax, 16);

	push	16					; 00000010H
	push	16					; 00000010H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_SHLIR@NativeCodeCache@@QAEXW4x86Reg@@E@Z ; NativeCodeCache::X86Emit_SHLIR
$LN8@Emit_Range:

; 289  :       break;
; 290  :   }
; 291  : 
; 292  :   if(vars->miscRegOutDep & (DEPENDENCY_FLAG_MODGE | DEPENDENCY_FLAG_MODMI))

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 12582912				; 00c00000H
	je	SHORT $LN3@Emit_Range

; 293  :   {
; 294  :     vars->codeCache->X86Emit_ANDIM(~(FLAG_DEPENDENCIES(vars->miscRegOutDep & (DEPENDENCY_FLAG_MODMI | DEPENDENCY_FLAG_MODGE))), x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 12582912				; 00c00000H
	shr	edx, 15					; 0000000fH
	not	edx
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ANDIM
$LN3@Emit_Range:

; 295  :   }
; 296  : 
; 297  :   vars->codeCache->X86Emit_ANDIR(0x03FF0000, x86Reg_eax);

	push	16					; 00000010H
	push	67043328				; 03ff0000H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 298  :   vars->codeCache->X86Emit_MOVRR(x86Reg_ecx, x86Reg_ebx);

	push	19					; 00000013H
	push	17					; 00000011H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_MOVRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_MOVRR

; 299  :   vars->codeCache->X86Emit_ANDIR(0xFFFF0000, x86Reg_ecx);

	push	17					; 00000011H
	push	-65536					; ffff0000H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_ANDIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_ANDIR

; 300  : 
; 301  :   //eax = rcu_range, ebx = rcu_src, ecx = rcu_src & 0xFFFF0000
; 302  :   
; 303  :   vars->codeCache->X86Emit_CMPRR(x86Reg_ecx, x86Reg_eax);

	push	16					; 00000010H
	push	17					; 00000011H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_CMPRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_CMPRR

; 304  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_L,l_testmodmi);

	mov	edx, DWORD PTR _l_testmodmi$[ebp]
	push	edx
	push	12					; 0000000cH
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 305  : 
; 306  :   vars->codeCache->X86Emit_SUBRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_SUBRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_SUBRR

; 307  : 
; 308  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MODGE)

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	and	edx, 4194304				; 00400000H
	je	SHORT $LN2@Emit_Range

; 309  :   {
; 310  :     vars->codeCache->X86Emit_ORIM(CC_MODGE, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	eax, DWORD PTR _ccDisp$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _ccWriteBaseReg$[ebp]
	push	ecx
	push	2
	push	128					; 00000080H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN2@Emit_Range:

; 311  :   }
; 312  : 
; 313  :   vars->codeCache->X86Emit_JMPI_Label(vars->patchMgr,l_exit);

	mov	eax, DWORD PTR _l_exit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_JMPI_Label@NativeCodeCache@@QAEXPAVPatchManager@@I@Z ; NativeCodeCache::X86Emit_JMPI_Label

; 314  :   vars->patchMgr->SetLabelPointer(l_testmodmi,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	ecx, DWORD PTR _l_testmodmi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 315  :   //compare rcu_src to zero
; 316  :   vars->codeCache->X86Emit_CMPIR(0,x86Reg_ebx);

	push	19					; 00000013H
	push	0
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?X86Emit_CMPIR@NativeCodeCache@@QAEXHW4x86Reg@@@Z ; NativeCodeCache::X86Emit_CMPIR

; 317  :   vars->codeCache->X86Emit_JCC_Label(vars->patchMgr,X86_CC_NL,l_exit);

	mov	ecx, DWORD PTR _l_exit$[ebp]
	push	ecx
	push	13					; 0000000dH
	mov	edx, DWORD PTR _vars$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_JCC_Label@NativeCodeCache@@QAEXPAVPatchManager@@CI@Z ; NativeCodeCache::X86Emit_JCC_Label

; 318  : 
; 319  :   vars->codeCache->X86Emit_ADDRR(x86Reg_ebx, x86Reg_eax);

	push	16					; 00000010H
	push	19					; 00000013H
	mov	edx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?X86Emit_ADDRR@NativeCodeCache@@QAEXW4x86Reg@@0@Z ; NativeCodeCache::X86Emit_ADDRR

; 320  : 
; 321  :   if(vars->miscRegOutDep & DEPENDENCY_FLAG_MODMI)

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, 8388608				; 00800000H
	je	SHORT $LN1@Emit_Range

; 322  :   {
; 323  :     vars->codeCache->X86Emit_ORIM(CC_MODMI, x86MemPtr_dword, ccWriteBaseReg, x86IndexReg_none, x86Scale_1, ccDisp);

	mov	edx, DWORD PTR _ccDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _ccWriteBaseReg$[ebp]
	push	eax
	push	2
	push	256					; 00000100H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_ORIM@NativeCodeCache@@QAEXHW4x86MemPtr@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_ORIM
$LN1@Emit_Range:

; 324  :   }
; 325  : 
; 326  :   vars->patchMgr->SetLabelPointer(l_exit,vars->GetEmitLoc());

	mov	ecx, DWORD PTR _vars$[ebp]
	call	?GetEmitLoc@EmitterVariables@@QAEPAEXZ	; EmitterVariables::GetEmitLoc
	push	eax
	mov	edx, DWORD PTR _l_exit$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?SetLabelPointer@PatchManager@@QAEXIPAE@Z ; PatchManager::SetLabelPointer

; 327  :   vars->patchMgr->ApplyPatches();

	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?ApplyPatches@PatchManager@@QAEXXZ	; PatchManager::ApplyPatches

; 328  : 
; 329  :   //ebx = modulo_writeback
; 330  : }

	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@Emit_Range:
	DD	$LN7@Emit_Range
	DD	$LN6@Emit_Range
	DD	$LN5@Emit_Range
	DD	$LN4@Emit_Range
?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_RangeOnly
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\patchmanager.h
_TEXT	ENDS
;	COMDAT ?Reset@PatchManager@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@PatchManager@@QAEXXZ PROC			; PatchManager::Reset, COMDAT
; _this$ = ecx

; 54   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 55   :     numPatches = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1280], 0

; 56   :     numLabels = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1284], 0

; 57   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@PatchManager@@QAEXXZ ENDP			; PatchManager::Reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetLabelPointer@PatchManager@@QAEXIPAE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_labelIndex$ = 8					; size = 4
_ptr$ = 12						; size = 4
?SetLabelPointer@PatchManager@@QAEXIPAE@Z PROC		; PatchManager::SetLabelPointer, COMDAT
; _this$ = ecx

; 69   :   {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     labelPointers[labelIndex] = ptr;

	mov	eax, DWORD PTR _labelIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [ecx+eax*4+1024], edx

; 71   :     numLabels++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1284]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1284], ecx

; 72   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetLabelPointer@PatchManager@@QAEXIPAE@Z ENDP		; PatchManager::SetLabelPointer
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitmisc.h
_TEXT	ENDS
;	COMDAT ?GetEmitLoc@EmitterVariables@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetEmitLoc@EmitterVariables@@QAEPAEXZ PROC		; EmitterVariables::GetEmitLoc, COMDAT
; _this$ = ecx

; 31   :   uint8 *GetEmitLoc() { return *ppEmitLoc; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEmitLoc@EmitterVariables@@QAEPAEXZ ENDP		; EmitterVariables::GetEmitLoc
_TEXT	ENDS
PUBLIC	?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_Range
; Function compile flags: /Odtp /RTCsu
; File c:\nuanceexperimental\emitrcu.cpp
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC	; Emit_Range

; 333  : {

	push	ebp
	mov	ebp, esp

; 334  :   Emit_RangeOnly(vars,nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RangeOnly
	add	esp, 8

; 335  :   Emit_DEC(vars,nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 336  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP	; Emit_Range
_TEXT	ENDS
PUBLIC	?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ModuloOnly
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_destRegDisp$ = -12					; size = 4
_destRegWriteBaseReg$ = -8				; size = 4
_destRegIndex$ = -4					; size = 4
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_ModuloOnly

; 339  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 340  :   uint32 destRegIndex = REGINDEX_RX + nuance.fields[FIELD_RCU_DEST];

	mov	eax, DWORD PTR _nuance$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 3
	mov	DWORD PTR _destRegIndex$[ebp], ecx

; 341  :   x86BaseReg destRegWriteBaseReg = GetMiscRegWriteBaseReg(vars,nuance.fields[FIELD_RCU_DEST]);

	mov	edx, DWORD PTR _nuance$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?GetMiscRegWriteBaseReg@@YA?AW4x86BaseReg@@PAVEmitterVariables@@I@Z ; GetMiscRegWriteBaseReg
	add	esp, 8
	mov	DWORD PTR _destRegWriteBaseReg$[ebp], eax

; 342  :   int32 destRegDisp = GetMiscRegEmitDisp(vars,destRegIndex);

	mov	edx, DWORD PTR _destRegIndex$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?GetMiscRegEmitDisp@@YAHPAVEmitterVariables@@I@Z ; GetMiscRegEmitDisp
	add	esp, 8
	mov	DWORD PTR _destRegDisp$[ebp], eax

; 343  : 
; 344  :   Emit_RangeOnly(vars,nuance);

	mov	ecx, DWORD PTR _nuance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vars$[ebp]
	push	edx
	call	?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_RangeOnly
	add	esp, 8

; 345  :   if(vars->miscRegOutDep & (~DEPENDENCY_FLAG_ALLFLAGS))

	mov	eax, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	and	ecx, -67076097				; fc007fffH
	je	SHORT $LN2@Emit_Modul

; 346  :   {
; 347  :     vars->codeCache->X86Emit_MOVRM(x86Reg_ebx, destRegWriteBaseReg, x86IndexReg_none, x86Scale_1, destRegDisp);

	mov	edx, DWORD PTR _destRegDisp$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _destRegWriteBaseReg$[ebp]
	push	eax
	push	19					; 00000013H
	mov	ecx, DWORD PTR _vars$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?X86Emit_MOVRM@NativeCodeCache@@QAEXW4x86Reg@@IW4x86IndexReg@@W4x86ScaleVal@@H@Z ; NativeCodeCache::X86Emit_MOVRM
$LN2@Emit_Modul:

; 348  :   }
; 349  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_ModuloOnly
_TEXT	ENDS
PUBLIC	?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_Modulo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_vars$ = 8						; size = 4
_nuance$ = 12						; size = 4
?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z PROC ; Emit_Modulo

; 352  : {

	push	ebp
	mov	ebp, esp

; 353  :   Emit_ModuloOnly(vars,nuance);

	mov	eax, DWORD PTR _nuance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vars$[ebp]
	push	ecx
	call	?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_ModuloOnly
	add	esp, 8

; 354  :   Emit_DEC(vars,nuance);

	mov	edx, DWORD PTR _nuance$[ebp]
	push	edx
	mov	eax, DWORD PTR _vars$[ebp]
	push	eax
	call	?Emit_DEC@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; Emit_DEC
	add	esp, 8

; 355  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z ENDP ; Emit_Modulo
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	c:\NuanceExperimental\mpe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?timer_start@@3_KA				; timer_start
PUBLIC	?mirrorLookup@MPE@@2PAEA			; MPE::mirrorLookup
PUBLIC	?timeDelta@@3NA					; timeDelta
PUBLIC	?timer_end@@3_KA				; timer_end
PUBLIC	?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA ; nuanceHandlers
PUBLIC	?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA	; printHandlers
PUBLIC	?emitHandlers@@3PAP6AXPAVEmitterVariables@@AAVNuance@@@ZA ; emitHandlers
PUBLIC	?logfile@@3PAU_iobuf@@A				; logfile
EXTRN	?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SaveRegs
EXTRN	?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreMiscRegisterConstant
EXTRN	?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarRegisterConstant
EXTRN	?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarImmediate
EXTRN	?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarControlRegisterImmediate
EXTRN	?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZBilinearXY
EXTRN	?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZBilinearUV
EXTRN	?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZLinear
EXTRN	?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelBilinearXY
EXTRN	?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelBilinearUV
EXTRN	?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelLinear
EXTRN	?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorBilinearXY
EXTRN	?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorBilinearUV
EXTRN	?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorLinear
EXTRN	?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorBilinearXY
EXTRN	?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorBilinearUV
EXTRN	?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorLinear
EXTRN	?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarBilinearXY
EXTRN	?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarBilinearUV
EXTRN	?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarLinear
EXTRN	?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelZAbsolute
EXTRN	?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StorePixelAbsolute
EXTRN	?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreVectorAbsolute
EXTRN	?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreShortVectorAbsolute
EXTRN	?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarControlRegisterAbsolute
EXTRN	?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_StoreScalarAbsolute
EXTRN	?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZBilinearXY
EXTRN	?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZBilinearUV
EXTRN	?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZLinear
EXTRN	?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelBilinearXY
EXTRN	?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelBilinearUV
EXTRN	?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelLinear
EXTRN	?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorBilinearXY
EXTRN	?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorBilinearUV
EXTRN	?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorLinear
EXTRN	?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorBilinearXY
EXTRN	?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorBilinearUV
EXTRN	?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorLinear
EXTRN	?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarBilinearXY
EXTRN	?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarBilinearUV
EXTRN	?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordBilinearXY
EXTRN	?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordBilinearUV
EXTRN	?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordLinear
EXTRN	?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteBilinearXY
EXTRN	?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteBilinearUV
EXTRN	?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteLinear
EXTRN	?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelZAbsolute
EXTRN	?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadPixelAbsolute
EXTRN	?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadVectorAbsolute
EXTRN	?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadShortVectorAbsolute
EXTRN	?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarAbsolute
EXTRN	?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadWordAbsolute
EXTRN	?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadByteAbsolute
EXTRN	?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarControlRegisterAbsolute
EXTRN	?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LoadScalarLinear
EXTRN	?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushScalarRzi2
EXTRN	?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushScalarRzi1
EXTRN	?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushVectorRz
EXTRN	?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PushVector
EXTRN	?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopScalarRzi2
EXTRN	?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopScalarRzi1
EXTRN	?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopVectorRz
EXTRN	?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_PopVector
EXTRN	?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_V
EXTRN	?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_SScalar
EXTRN	?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MV_SImmediate
EXTRN	?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Mirror
EXTRN	?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPVectorShiftSvshift
EXTRN	?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPVectorShiftImmediate
EXTRN	?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPScalarShiftSvshift
EXTRN	?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DOTPScalarShiftImmediate
EXTRN	?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PVectorShiftSvshift
EXTRN	?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PVectorShiftImmediate
EXTRN	?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRvShiftSvshift
EXTRN	?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRvShiftImmediate
EXTRN	?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRuShiftSvshift
EXTRN	?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PRuShiftImmediate
EXTRN	?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PScalarShiftSvshift
EXTRN	?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PScalarShiftImmediate
EXTRN	?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_PImmediateShiftImmediate
EXTRN	?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVVectorShiftSvshift
EXTRN	?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVVectorShiftImmediate
EXTRN	?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRvShiftSvshift
EXTRN	?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRvShiftImmediate
EXTRN	?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRuShiftSvshift
EXTRN	?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVRuShiftImmediate
EXTRN	?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVScalarShiftSvshift
EXTRN	?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVScalarShiftImmediate
EXTRN	?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MUL_SVImmediateShiftImmediate
EXTRN	?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftLeftImmediate
EXTRN	?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftRightImmediate
EXTRN	?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftScalar
EXTRN	?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftScalar
EXTRN	?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULImmediateShiftAcshift
EXTRN	?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftLeftImmediate
EXTRN	?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftRightImmediate
EXTRN	?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MULScalarShiftAcshift
EXTRN	?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBMImmediateReverse
EXTRN	?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBM
EXTRN	?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDMImmediate
EXTRN	?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDM
EXTRN	?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalarShiftLeftImmediate
EXTRN	?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalarShiftRightImmediate
EXTRN	?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCImmediateReverse
EXTRN	?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCImmediate
EXTRN	?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPWCScalar
EXTRN	?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalarShiftLeftImmediate
EXTRN	?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalarShiftRightImmediate
EXTRN	?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCImmediateReverse
EXTRN	?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCImmediate
EXTRN	?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBWCScalar
EXTRN	?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalarShiftLeftImmediate
EXTRN	?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalarShiftRightImmediate
EXTRN	?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCImmediate
EXTRN	?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDWCScalar
EXTRN	?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarRotateScalar
EXTRN	?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftScalar
EXTRN	?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftLeftImmediate
EXTRN	?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalarShiftRightImmediate
EXTRN	?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORImmediateShiftScalar
EXTRN	?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORScalar
EXTRN	?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_EORImmediate
EXTRN	?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarRotateScalar
EXTRN	?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftScalar
EXTRN	?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftLeftImmediate
EXTRN	?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalarShiftRightImmediate
EXTRN	?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORImmediateShiftScalar
EXTRN	?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORScalar
EXTRN	?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ORImmediate
EXTRN	?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarRotateScalar
EXTRN	?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftScalar
EXTRN	?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftLeftImmediate
EXTRN	?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalarShiftRightImmediate
EXTRN	?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTImmediateShiftScalar
EXTRN	?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTScalar
EXTRN	?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_FTSTImmediate
EXTRN	?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarRotateScalar
EXTRN	?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftScalar
EXTRN	?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftLeftImmediate
EXTRN	?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalarShiftRightImmediate
EXTRN	?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDImmediateShiftScalar
EXTRN	?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDScalar
EXTRN	?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ANDImmediate
EXTRN	?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalarShiftLeftImmediate
EXTRN	?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalarShiftRightImmediate
EXTRN	?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPScalar
EXTRN	?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPImmediateReverse
EXTRN	?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_CMPImmediate
EXTRN	?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalarShiftLeftImmediate
EXTRN	?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalarShiftRightImmediate
EXTRN	?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBScalar
EXTRN	?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBImmediateReverse
EXTRN	?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUBImmediate
EXTRN	?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalarShiftLeftImmediate
EXTRN	?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalarShiftRightImmediate
EXTRN	?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDScalar
EXTRN	?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDImmediate
EXTRN	?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUB_SV
EXTRN	?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADD_SV
EXTRN	?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SUB_P
EXTRN	?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADD_P
EXTRN	?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROR
EXTRN	?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROL
EXTRN	?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ROT
EXTRN	?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LSR
EXTRN	?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_LS
EXTRN	?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ASR
EXTRN	?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ASL
EXTRN	?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_AS
EXTRN	?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_SAT
EXTRN	?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MSB
EXTRN	?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_COPY
EXTRN	?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BUTT
EXTRN	?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BTST
EXTRN	?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BITSImmediate
EXTRN	?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BITSScalar
EXTRN	?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ABS
EXTRN	?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Modulo
EXTRN	?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ModuloOnly
EXTRN	?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_Range
EXTRN	?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RangeOnly
EXTRN	?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRScalar
EXTRN	?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRScalarOnly
EXTRN	?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRImmediate
EXTRN	?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_MVRImmediateOnly
EXTRN	?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRScalar
EXTRN	?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRScalarOnly
EXTRN	?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRImmediate
EXTRN	?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_ADDRImmediateOnly
EXTRN	?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECBoth
EXTRN	?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECRc0
EXTRN	?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_DECRc1
EXTRN	?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSConditional_NOP
EXTRN	?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSConditional
EXTRN	?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSAlways_NOP
EXTRN	?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTSAlways
EXTRN	?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI2Conditional_NOP
EXTRN	?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI2Conditional
EXTRN	?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI1Conditional_NOP
EXTRN	?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_RTI1Conditional
EXTRN	?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditionalIndirect_NOP
EXTRN	?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditionalIndirect
EXTRN	?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlwaysIndirect_NOP
EXTRN	?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlwaysIndirect
EXTRN	?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditional_NOP
EXTRN	?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRConditional
EXTRN	?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlways_NOP
EXTRN	?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JSRAlways
EXTRN	?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPConditionalIndirect_NOP
EXTRN	?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPConditionalIndirect
EXTRN	?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPAlwaysIndirect_NOP
EXTRN	?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_JMPAlwaysIndirect
EXTRN	?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAConditional_NOP
EXTRN	?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAConditional
EXTRN	?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAAlways_NOP
EXTRN	?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_BRAAlways
EXTRN	?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z:PROC ; Emit_NOP
EXTRN	?Print_SaveRegs@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SaveRegs
EXTRN	?Print_SaveFlags@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SaveFlags
EXTRN	?Print_CheckECUSkipCounter@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CheckECUSkipCounter
EXTRN	?Print_PacketEnd@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PacketEnd
EXTRN	?Print_PacketStart@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PacketStart
EXTRN	?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreMiscRegisterConstant
EXTRN	?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarRegisterConstant
EXTRN	?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarImmediate
EXTRN	?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarControlRegisterImmediate
EXTRN	?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZBilinearXY
EXTRN	?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZBilinearUV
EXTRN	?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZLinear
EXTRN	?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelBilinearXY
EXTRN	?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelBilinearUV
EXTRN	?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelLinear
EXTRN	?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorBilinearXY
EXTRN	?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorBilinearUV
EXTRN	?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorLinear
EXTRN	?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorBilinearXY
EXTRN	?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorBilinearUV
EXTRN	?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorLinear
EXTRN	?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarBilinearXY
EXTRN	?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarBilinearUV
EXTRN	?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarLinear
EXTRN	?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelZAbsolute
EXTRN	?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StorePixelAbsolute
EXTRN	?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorControlRegisterAbsolute
EXTRN	?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreVectorAbsolute
EXTRN	?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreShortVectorAbsolute
EXTRN	?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarControlRegisterAbsolute
EXTRN	?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_StoreScalarAbsolute
EXTRN	?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZBilinearXY
EXTRN	?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZBilinearUV
EXTRN	?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZLinear
EXTRN	?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelBilinearXY
EXTRN	?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelBilinearUV
EXTRN	?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelLinear
EXTRN	?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorBilinearXY
EXTRN	?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorBilinearUV
EXTRN	?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorLinear
EXTRN	?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorBilinearXY
EXTRN	?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorBilinearUV
EXTRN	?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorLinear
EXTRN	?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarBilinearXY
EXTRN	?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarBilinearUV
EXTRN	?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordBilinearXY
EXTRN	?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordBilinearUV
EXTRN	?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordLinear
EXTRN	?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteBilinearXY
EXTRN	?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteBilinearUV
EXTRN	?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteLinear
EXTRN	?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelZAbsolute
EXTRN	?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadPixelAbsolute
EXTRN	?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorControlRegisterAbsolute
EXTRN	?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadVectorAbsolute
EXTRN	?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadShortVectorAbsolute
EXTRN	?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarAbsolute
EXTRN	?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadWordAbsolute
EXTRN	?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadByteAbsolute
EXTRN	?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarControlRegisterAbsolute
EXTRN	?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z:PROC ; Print_LoadScalarLinear
EXTRN	?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PushScalarRzi2
EXTRN	?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PushScalarRzi1
EXTRN	?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PushVectorRz
EXTRN	?Print_PushVector@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PushVector
EXTRN	?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PopScalarRzi2
EXTRN	?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z:PROC ; Print_PopScalarRzi1
EXTRN	?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PopVectorRz
EXTRN	?Print_PopVector@@YAIPADAAVNuance@@_N@Z:PROC	; Print_PopVector
EXTRN	?Print_MV_V@@YAIPADAAVNuance@@_N@Z:PROC		; Print_MV_V
EXTRN	?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MV_SScalar
EXTRN	?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MV_SImmediate
EXTRN	?Print_Mirror@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Mirror
EXTRN	?Print_DOTPVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPVectorShiftSvshift
EXTRN	?Print_DOTPVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPVectorShiftImmediate
EXTRN	?Print_DOTPScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPScalarShiftSvshift
EXTRN	?Print_DOTPScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_DOTPScalarShiftImmediate
EXTRN	?Print_MUL_PVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PVectorShiftSvshift
EXTRN	?Print_MUL_PVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PVectorShiftImmediate
EXTRN	?Print_MUL_PRvShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRvShiftSvshift
EXTRN	?Print_MUL_PRvShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRvShiftImmediate
EXTRN	?Print_MUL_PRuShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRuShiftSvshift
EXTRN	?Print_MUL_PRuShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PRuShiftImmediate
EXTRN	?Print_MUL_PScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PScalarShiftSvshift
EXTRN	?Print_MUL_PScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PScalarShiftImmediate
EXTRN	?Print_MUL_PImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_PImmediateShiftImmediate
EXTRN	?Print_MUL_SVVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVVectorShiftSvshift
EXTRN	?Print_MUL_SVVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVVectorShiftImmediate
EXTRN	?Print_MUL_SVRvShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRvShiftSvshift
EXTRN	?Print_MUL_SVRvShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRvShiftImmediate
EXTRN	?Print_MUL_SVRuShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRuShiftSvshift
EXTRN	?Print_MUL_SVRuShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVRuShiftImmediate
EXTRN	?Print_MUL_SVScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVScalarShiftSvshift
EXTRN	?Print_MUL_SVScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVScalarShiftImmediate
EXTRN	?Print_MUL_SVImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MUL_SVImmediateShiftImmediate
EXTRN	?Print_MULImmediateShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftLeftImmediate
EXTRN	?Print_MULImmediateShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftRightImmediate
EXTRN	?Print_MULImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftScalar
EXTRN	?Print_MULScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftScalar
EXTRN	?Print_MULImmediateShiftAcshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULImmediateShiftAcshift
EXTRN	?Print_MULScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftLeftImmediate
EXTRN	?Print_MULScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftRightImmediate
EXTRN	?Print_MULScalarShiftAcshift@@YAIPADAAVNuance@@_N@Z:PROC ; Print_MULScalarShiftAcshift
EXTRN	?Print_SUBMImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBMImmediateReverse
EXTRN	?Print_SUBM@@YAIPADAAVNuance@@_N@Z:PROC		; Print_SUBM
EXTRN	?Print_ADDMImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDMImmediate
EXTRN	?Print_ADDM@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ADDM
EXTRN	?Print_CMPWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCScalarShiftLeftImmediate
EXTRN	?Print_CMPWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCScalarShiftRightImmediate
EXTRN	?Print_CMPWCImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCImmediateReverse
EXTRN	?Print_CMPWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPWCImmediate
EXTRN	?Print_CMPWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPWCScalar
EXTRN	?Print_SUBWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCScalarShiftLeftImmediate
EXTRN	?Print_SUBWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCScalarShiftRightImmediate
EXTRN	?Print_SUBWCImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCImmediateReverse
EXTRN	?Print_SUBWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBWCImmediate
EXTRN	?Print_SUBWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBWCScalar
EXTRN	?Print_ADDWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCScalarShiftLeftImmediate
EXTRN	?Print_ADDWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCScalarShiftRightImmediate
EXTRN	?Print_ADDWCImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDWCImmediate
EXTRN	?Print_ADDWCScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDWCScalar
EXTRN	?Print_EORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarRotateScalar
EXTRN	?Print_EORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftScalar
EXTRN	?Print_EORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftLeftImmediate
EXTRN	?Print_EORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORScalarShiftRightImmediate
EXTRN	?Print_EORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_EORImmediateShiftScalar
EXTRN	?Print_EORScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_EORScalar
EXTRN	?Print_EORImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_EORImmediate
EXTRN	?Print_ORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarRotateScalar
EXTRN	?Print_ORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftScalar
EXTRN	?Print_ORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftLeftImmediate
EXTRN	?Print_ORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORScalarShiftRightImmediate
EXTRN	?Print_ORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ORImmediateShiftScalar
EXTRN	?Print_ORScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ORScalar
EXTRN	?Print_ORImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ORImmediate
EXTRN	?Print_FTSTScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarRotateScalar
EXTRN	?Print_FTSTScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftScalar
EXTRN	?Print_FTSTScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftLeftImmediate
EXTRN	?Print_FTSTScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTScalarShiftRightImmediate
EXTRN	?Print_FTSTImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTImmediateShiftScalar
EXTRN	?Print_FTSTScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_FTSTScalar
EXTRN	?Print_FTSTImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_FTSTImmediate
EXTRN	?Print_ANDScalarRotateScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarRotateScalar
EXTRN	?Print_ANDScalarShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftScalar
EXTRN	?Print_ANDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftLeftImmediate
EXTRN	?Print_ANDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDScalarShiftRightImmediate
EXTRN	?Print_ANDImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ANDImmediateShiftScalar
EXTRN	?Print_ANDScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ANDScalar
EXTRN	?Print_ANDImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ANDImmediate
EXTRN	?Print_CMPScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPScalarShiftLeftImmediate
EXTRN	?Print_CMPScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPScalarShiftRightImmediate
EXTRN	?Print_CMPScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPScalar
EXTRN	?Print_CMPImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_CMPImmediateReverse
EXTRN	?Print_CMPImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_CMPImmediate
EXTRN	?Print_SUBScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBScalarShiftLeftImmediate
EXTRN	?Print_SUBScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBScalarShiftRightImmediate
EXTRN	?Print_SUBScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBScalar
EXTRN	?Print_SUBImmediateReverse@@YAIPADAAVNuance@@_N@Z:PROC ; Print_SUBImmediateReverse
EXTRN	?Print_SUBImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUBImmediate
EXTRN	?Print_ADDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDScalarShiftLeftImmediate
EXTRN	?Print_ADDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDScalarShiftRightImmediate
EXTRN	?Print_ADDScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDScalar
EXTRN	?Print_ADDImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDImmediate
EXTRN	?Print_SUB_SV@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUB_SV
EXTRN	?Print_ADD_SV@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADD_SV
EXTRN	?Print_SUB_P@@YAIPADAAVNuance@@_N@Z:PROC	; Print_SUB_P
EXTRN	?Print_ADD_P@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADD_P
EXTRN	?Print_ROR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROR
EXTRN	?Print_ROL@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROL
EXTRN	?Print_ROT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ROT
EXTRN	?Print_LSR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_LSR
EXTRN	?Print_LS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_LS
EXTRN	?Print_ASR@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ASR
EXTRN	?Print_ASL@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ASL
EXTRN	?Print_AS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_AS
EXTRN	?Print_SAT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_SAT
EXTRN	?Print_MSB@@YAIPADAAVNuance@@_N@Z:PROC		; Print_MSB
EXTRN	?Print_COPY@@YAIPADAAVNuance@@_N@Z:PROC		; Print_COPY
EXTRN	?Print_BUTT@@YAIPADAAVNuance@@_N@Z:PROC		; Print_BUTT
EXTRN	?Print_BTST@@YAIPADAAVNuance@@_N@Z:PROC		; Print_BTST
EXTRN	?Print_BITSImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BITSImmediate
EXTRN	?Print_BITSScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_BITSScalar
EXTRN	?Print_ABS@@YAIPADAAVNuance@@_N@Z:PROC		; Print_ABS
EXTRN	?Print_Modulo@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Modulo
EXTRN	?Print_Range@@YAIPADAAVNuance@@_N@Z:PROC	; Print_Range
EXTRN	?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MVRScalar
EXTRN	?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z:PROC	; Print_MVRImmediate
EXTRN	?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ADDRScalar
EXTRN	?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z:PROC ; Print_ADDRImmediate
EXTRN	?Print_DEC@@YAIPADAAVNuance@@_N@Z:PROC		; Print_DEC
EXTRN	?Print_RTSConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSConditional_NOP
EXTRN	?Print_RTSConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSConditional
EXTRN	?Print_RTSAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTSAlways_NOP
EXTRN	?Print_RTSAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_RTSAlways
EXTRN	?Print_RTI2Conditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI2Conditional_NOP
EXTRN	?Print_RTI2Conditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI2Conditional
EXTRN	?Print_RTI1Conditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI1Conditional_NOP
EXTRN	?Print_RTI1Conditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_RTI1Conditional
EXTRN	?Print_JSRConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditionalIndirect_NOP
EXTRN	?Print_JSRConditionalIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditionalIndirect
EXTRN	?Print_JSRAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlwaysIndirect_NOP
EXTRN	?Print_JSRAlwaysIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlwaysIndirect
EXTRN	?Print_JSRConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditional_NOP
EXTRN	?Print_JSRConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRConditional
EXTRN	?Print_JSRAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JSRAlways_NOP
EXTRN	?Print_JSRAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_JSRAlways
EXTRN	?Print_JMPConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPConditionalIndirect_NOP
EXTRN	?Print_JMPConditionalIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPConditionalIndirect
EXTRN	?Print_JMPAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPAlwaysIndirect_NOP
EXTRN	?Print_JMPAlwaysIndirect@@YAIPADAAVNuance@@_N@Z:PROC ; Print_JMPAlwaysIndirect
EXTRN	?Print_BRAConditional_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAConditional_NOP
EXTRN	?Print_BRAConditional@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAConditional
EXTRN	?Print_BRAAlways_NOP@@YAIPADAAVNuance@@_N@Z:PROC ; Print_BRAAlways_NOP
EXTRN	?Print_BRAAlways@@YAIPADAAVNuance@@_N@Z:PROC	; Print_BRAAlways
EXTRN	?Print_Halt@@YAIPADAAVNuance@@_N@Z:PROC		; Print_Halt
EXTRN	?Print_ECU_NOP@@YAIPADAAVNuance@@_N@Z:PROC	; Print_ECU_NOP
EXTRN	?Execute_SaveRegs@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SaveRegs
EXTRN	?Execute_SaveFlags@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SaveFlags
EXTRN	?Execute_CheckECUSkipCounter@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CheckECUSkipCounter
EXTRN	?Execute_StoreMiscRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreMiscRegisterConstant
EXTRN	?Execute_StoreScalarRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarRegisterConstant
EXTRN	?Execute_StoreScalarImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarImmediate
EXTRN	?Execute_StoreScalarControlRegisterImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarControlRegisterImmediate
EXTRN	?Execute_StorePixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZBilinearXY
EXTRN	?Execute_StorePixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZBilinearUV
EXTRN	?Execute_StorePixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZLinear
EXTRN	?Execute_StorePixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelBilinearXY
EXTRN	?Execute_StorePixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelBilinearUV
EXTRN	?Execute_StorePixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelLinear
EXTRN	?Execute_StoreVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorBilinearXY
EXTRN	?Execute_StoreVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorBilinearUV
EXTRN	?Execute_StoreVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorLinear
EXTRN	?Execute_StoreShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorBilinearXY
EXTRN	?Execute_StoreShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorBilinearUV
EXTRN	?Execute_StoreShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorLinear
EXTRN	?Execute_StoreScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarBilinearXY
EXTRN	?Execute_StoreScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarBilinearUV
EXTRN	?Execute_StoreScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarLinear
EXTRN	?Execute_StorePixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelZAbsolute
EXTRN	?Execute_StorePixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StorePixelAbsolute
EXTRN	?Execute_StoreVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorControlRegisterAbsolute
EXTRN	?Execute_StoreVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreVectorAbsolute
EXTRN	?Execute_StoreShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreShortVectorAbsolute
EXTRN	?Execute_StoreScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarControlRegisterAbsolute
EXTRN	?Execute_StoreScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_StoreScalarAbsolute
EXTRN	?Execute_LoadPixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZBilinearXY
EXTRN	?Execute_LoadPixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZBilinearUV
EXTRN	?Execute_LoadPixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZLinear
EXTRN	?Execute_LoadPixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelBilinearXY
EXTRN	?Execute_LoadPixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelBilinearUV
EXTRN	?Execute_LoadPixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelLinear
EXTRN	?Execute_LoadVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorBilinearXY
EXTRN	?Execute_LoadVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorBilinearUV
EXTRN	?Execute_LoadVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorLinear
EXTRN	?Execute_LoadShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorBilinearXY
EXTRN	?Execute_LoadShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorBilinearUV
EXTRN	?Execute_LoadShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorLinear
EXTRN	?Execute_LoadScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarBilinearXY
EXTRN	?Execute_LoadScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarBilinearUV
EXTRN	?Execute_LoadWordBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordBilinearXY
EXTRN	?Execute_LoadWordBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordBilinearUV
EXTRN	?Execute_LoadWordLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordLinear
EXTRN	?Execute_LoadByteBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteBilinearXY
EXTRN	?Execute_LoadByteBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteBilinearUV
EXTRN	?Execute_LoadByteLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteLinear
EXTRN	?Execute_LoadPixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelZAbsolute
EXTRN	?Execute_LoadPixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadPixelAbsolute
EXTRN	?Execute_LoadVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorControlRegisterAbsolute
EXTRN	?Execute_LoadVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadVectorAbsolute
EXTRN	?Execute_LoadShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadShortVectorAbsolute
EXTRN	?Execute_LoadScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarAbsolute
EXTRN	?Execute_LoadWordAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadWordAbsolute
EXTRN	?Execute_LoadByteAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadByteAbsolute
EXTRN	?Execute_LoadScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarControlRegisterAbsolute
EXTRN	?Execute_LoadScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LoadScalarLinear
EXTRN	?Execute_PushScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushScalarRzi2
EXTRN	?Execute_PushScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushScalarRzi1
EXTRN	?Execute_PushVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushVectorRz
EXTRN	?Execute_PushVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PushVector
EXTRN	?Execute_PopScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopScalarRzi2
EXTRN	?Execute_PopScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopScalarRzi1
EXTRN	?Execute_PopVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopVectorRz
EXTRN	?Execute_PopVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_PopVector
EXTRN	?Execute_MV_V@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_V
EXTRN	?Execute_MV_SScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_SScalar
EXTRN	?Execute_MV_SImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MV_SImmediate
EXTRN	?Execute_Mirror@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Mirror
EXTRN	?Execute_DOTPVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPVectorShiftSvshift
EXTRN	?Execute_DOTPVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPVectorShiftImmediate
EXTRN	?Execute_DOTPScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPScalarShiftSvshift
EXTRN	?Execute_DOTPScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DOTPScalarShiftImmediate
EXTRN	?Execute_MUL_PVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PVectorShiftSvshift
EXTRN	?Execute_MUL_PVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PVectorShiftImmediate
EXTRN	?Execute_MUL_PRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRvShiftSvshift
EXTRN	?Execute_MUL_PRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRvShiftImmediate
EXTRN	?Execute_MUL_PRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRuShiftSvshift
EXTRN	?Execute_MUL_PRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PRuShiftImmediate
EXTRN	?Execute_MUL_PScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PScalarShiftSvshift
EXTRN	?Execute_MUL_PScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PScalarShiftImmediate
EXTRN	?Execute_MUL_PImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_PImmediateShiftImmediate
EXTRN	?Execute_MUL_SVVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVVectorShiftSvshift
EXTRN	?Execute_MUL_SVVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVVectorShiftImmediate
EXTRN	?Execute_MUL_SVRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRvShiftSvshift
EXTRN	?Execute_MUL_SVRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRvShiftImmediate
EXTRN	?Execute_MUL_SVRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRuShiftSvshift
EXTRN	?Execute_MUL_SVRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVRuShiftImmediate
EXTRN	?Execute_MUL_SVScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVScalarShiftSvshift
EXTRN	?Execute_MUL_SVScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVScalarShiftImmediate
EXTRN	?Execute_MUL_SVImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MUL_SVImmediateShiftImmediate
EXTRN	?Execute_MULImmediateShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftLeftImmediate
EXTRN	?Execute_MULImmediateShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftRightImmediate
EXTRN	?Execute_MULImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftScalar
EXTRN	?Execute_MULScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftScalar
EXTRN	?Execute_MULImmediateShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULImmediateShiftAcshift
EXTRN	?Execute_MULScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftLeftImmediate
EXTRN	?Execute_MULScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftRightImmediate
EXTRN	?Execute_MULScalarShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MULScalarShiftAcshift
EXTRN	?Execute_SUBMImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBMImmediateReverse
EXTRN	?Execute_SUBM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBM
EXTRN	?Execute_ADDMImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDMImmediate
EXTRN	?Execute_ADDM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDM
EXTRN	?Execute_CMPWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalarShiftLeftImmediate
EXTRN	?Execute_CMPWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalarShiftRightImmediate
EXTRN	?Execute_CMPWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCImmediateReverse
EXTRN	?Execute_CMPWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCImmediate
EXTRN	?Execute_CMPWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPWCScalar
EXTRN	?Execute_SUBWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalarShiftLeftImmediate
EXTRN	?Execute_SUBWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalarShiftRightImmediate
EXTRN	?Execute_SUBWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCImmediateReverse
EXTRN	?Execute_SUBWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCImmediate
EXTRN	?Execute_SUBWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBWCScalar
EXTRN	?Execute_ADDWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalarShiftLeftImmediate
EXTRN	?Execute_ADDWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalarShiftRightImmediate
EXTRN	?Execute_ADDWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCImmediate
EXTRN	?Execute_ADDWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDWCScalar
EXTRN	?Execute_EORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarRotateScalar
EXTRN	?Execute_EORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftScalar
EXTRN	?Execute_EORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftLeftImmediate
EXTRN	?Execute_EORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalarShiftRightImmediate
EXTRN	?Execute_EORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORImmediateShiftScalar
EXTRN	?Execute_EORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORScalar
EXTRN	?Execute_EORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_EORImmediate
EXTRN	?Execute_ORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarRotateScalar
EXTRN	?Execute_ORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftScalar
EXTRN	?Execute_ORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftLeftImmediate
EXTRN	?Execute_ORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalarShiftRightImmediate
EXTRN	?Execute_ORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORImmediateShiftScalar
EXTRN	?Execute_ORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORScalar
EXTRN	?Execute_ORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ORImmediate
EXTRN	?Execute_FTSTScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarRotateScalar
EXTRN	?Execute_FTSTScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftScalar
EXTRN	?Execute_FTSTScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftLeftImmediate
EXTRN	?Execute_FTSTScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalarShiftRightImmediate
EXTRN	?Execute_FTSTImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTImmediateShiftScalar
EXTRN	?Execute_FTSTScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTScalar
EXTRN	?Execute_FTSTImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_FTSTImmediate
EXTRN	?Execute_ANDScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarRotateScalar
EXTRN	?Execute_ANDScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftScalar
EXTRN	?Execute_ANDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftLeftImmediate
EXTRN	?Execute_ANDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalarShiftRightImmediate
EXTRN	?Execute_ANDImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDImmediateShiftScalar
EXTRN	?Execute_ANDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDScalar
EXTRN	?Execute_ANDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ANDImmediate
EXTRN	?Execute_CMPScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalarShiftLeftImmediate
EXTRN	?Execute_CMPScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalarShiftRightImmediate
EXTRN	?Execute_CMPScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPScalar
EXTRN	?Execute_CMPImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPImmediateReverse
EXTRN	?Execute_CMPImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_CMPImmediate
EXTRN	?Execute_SUBScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalarShiftLeftImmediate
EXTRN	?Execute_SUBScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalarShiftRightImmediate
EXTRN	?Execute_SUBScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBScalar
EXTRN	?Execute_SUBImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBImmediateReverse
EXTRN	?Execute_SUBImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUBImmediate
EXTRN	?Execute_ADDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalarShiftLeftImmediate
EXTRN	?Execute_ADDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalarShiftRightImmediate
EXTRN	?Execute_ADDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDScalar
EXTRN	?Execute_ADDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDImmediate
EXTRN	?Execute_SUB_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUB_SV
EXTRN	?Execute_ADD_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADD_SV
EXTRN	?Execute_SUB_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SUB_P
EXTRN	?Execute_ADD_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADD_P
EXTRN	?Execute_ROR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROR
EXTRN	?Execute_ROL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROL
EXTRN	?Execute_ROT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ROT
EXTRN	?Execute_LSR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LSR
EXTRN	?Execute_LS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_LS
EXTRN	?Execute_ASR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ASR
EXTRN	?Execute_ASL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ASL
EXTRN	?Execute_AS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_AS
EXTRN	?Execute_SAT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_SAT
EXTRN	?Execute_MSB@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MSB
EXTRN	?Execute_COPY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_COPY
EXTRN	?Execute_BUTT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BUTT
EXTRN	?Execute_BTST@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BTST
EXTRN	?Execute_BITSImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BITSImmediate
EXTRN	?Execute_BITSScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BITSScalar
EXTRN	?Execute_ABS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ABS
EXTRN	?Execute_Modulo@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Modulo
EXTRN	?Execute_ModuloOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ModuloOnly
EXTRN	?Execute_Range@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Range
EXTRN	?Execute_RangeOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RangeOnly
EXTRN	?Execute_MVRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRScalar
EXTRN	?Execute_MVRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRScalarOnly
EXTRN	?Execute_MVRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRImmediate
EXTRN	?Execute_MVRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_MVRImmediateOnly
EXTRN	?Execute_ADDRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRScalar
EXTRN	?Execute_ADDRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRScalarOnly
EXTRN	?Execute_ADDRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRImmediate
EXTRN	?Execute_ADDRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ADDRImmediateOnly
EXTRN	?Execute_DECBoth@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECBoth
EXTRN	?Execute_DECRc0@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECRc0
EXTRN	?Execute_DECRc1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_DECRc1
EXTRN	?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSConditional_NOP
EXTRN	?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSConditional
EXTRN	?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSAlways_NOP
EXTRN	?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTSAlways
EXTRN	?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI2Conditional_NOP
EXTRN	?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI2Conditional
EXTRN	?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI1Conditional_NOP
EXTRN	?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_RTI1Conditional
EXTRN	?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditionalIndirect_NOP
EXTRN	?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditionalIndirect
EXTRN	?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlwaysIndirect_NOP
EXTRN	?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlwaysIndirect
EXTRN	?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditional_NOP
EXTRN	?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRConditional
EXTRN	?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlways_NOP
EXTRN	?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JSRAlways
EXTRN	?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPConditionalIndirect_NOP
EXTRN	?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPConditionalIndirect
EXTRN	?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPAlwaysIndirect_NOP
EXTRN	?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_JMPAlwaysIndirect
EXTRN	?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAConditional_NOP
EXTRN	?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAConditional
EXTRN	?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAAlways_NOP
EXTRN	?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_BRAAlways
EXTRN	?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_Halt
EXTRN	?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z:PROC ; Execute_ECU_NOP
_BSS	SEGMENT
?timer_start@@3_KA DQ 01H DUP (?)			; timer_start
?mirrorLookup@MPE@@2PAEA DB 0100H DUP (?)		; MPE::mirrorLookup
?timeDelta@@3NA DQ 01H DUP (?)				; timeDelta
?timer_end@@3_KA DQ 01H DUP (?)				; timer_end
?logfile@@3PAU_iobuf@@A DD 01H DUP (?)			; logfile
_BSS	ENDS
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:$SG23340
	ORG $+4
?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA DD FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z ; nuanceHandlers
	DD	FLAT:?Execute_Halt@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BRAConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JMPConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlwaysIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRAlwaysIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditionalIndirect@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_JSRConditionalIndirect_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI1Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI1Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI2Conditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTI2Conditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSAlways@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSAlways_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSConditional@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RTSConditional_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECRc1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECRc0@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DECBoth@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRImmediateOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRScalarOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MVRScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_RangeOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Range@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ModuloOnly@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Modulo@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ABS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BITSScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BITSImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BTST@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_BUTT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_COPY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MSB@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SAT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_AS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ASL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ASR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LS@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LSR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROT@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROL@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ROR@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADD_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUB_P@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADD_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUB_SV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ANDScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_FTSTScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_EORScalarRotateScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CMPWCScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ADDMImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBM@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SUBMImmediateReverse@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftAcshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULScalarShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftRightImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MULImmediateShiftLeftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_SVVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PImmediateShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRuShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRuShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRvShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PRvShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MUL_PVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPScalarShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPScalarShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPVectorShiftImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_DOTPVectorShiftSvshift@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_Mirror@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_SImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_SScalar@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_MV_V@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PopScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushVector@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushVectorRz@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushScalarRzi1@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_PushScalarRzi2@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadByteBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadWordBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_LoadPixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorControlRegisterAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZAbsolute@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreShortVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreVectorBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZLinear@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZBilinearUV@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StorePixelZBilinearXY@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarControlRegisterImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarImmediate@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreScalarRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_StoreMiscRegisterConstant@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_ECU_NOP@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_CheckECUSkipCounter@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SaveFlags@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
	DD	FLAT:?Execute_SaveRegs@@YAXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@Z
?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA DD FLAT:?Print_ECU_NOP@@YAIPADAAVNuance@@_N@Z ; printHandlers
	DD	FLAT:?Print_Halt@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BRAConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPAlwaysIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPConditionalIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JMPConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlwaysIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRAlwaysIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditionalIndirect@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_JSRConditionalIndirect_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI1Conditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI1Conditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI2Conditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTI2Conditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSAlways@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSAlways_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSConditional@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_RTSConditional_NOP@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DEC@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MVRScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Range@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Range@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Modulo@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Modulo@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ABS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BITSScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BITSImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BTST@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_BUTT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_COPY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MSB@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SAT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_AS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ASL@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ASR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LS@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LSR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROT@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROL@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ROR@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADD_P@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUB_P@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADD_SV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUB_SV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ANDScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_FTSTScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_EORScalarRotateScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CMPWCScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDM@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_ADDMImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBM@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SUBMImmediateReverse@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftAcshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftAcshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULScalarShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftRightImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MULImmediateShiftLeftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRuShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRuShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRvShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVRvShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_SVVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PImmediateShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRuShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRuShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRvShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PRvShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MUL_PVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPScalarShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPScalarShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPVectorShiftImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_DOTPVectorShiftSvshift@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_Mirror@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_SImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_SScalar@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_MV_V@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopVector@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopVectorRz@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopScalarRzi1@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PopScalarRzi2@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushVector@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushVectorRz@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushScalarRzi1@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PushScalarRzi2@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadByteBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadWordBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadScalarBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_LoadPixelZBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorControlRegisterAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZAbsolute@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreShortVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreVectorBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZLinear@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZBilinearUV@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StorePixelZBilinearXY@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarControlRegisterImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarImmediate@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreScalarRegisterConstant@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_StoreMiscRegisterConstant@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PacketStart@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_PacketEnd@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_CheckECUSkipCounter@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SaveFlags@@YAIPADAAVNuance@@_N@Z
	DD	FLAT:?Print_SaveRegs@@YAIPADAAVNuance@@_N@Z
?emitHandlers@@3PAP6AXPAVEmitterVariables@@AAVNuance@@@ZA DD FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z ; emitHandlers
	DD	00H
	DD	FLAT:?Emit_BRAAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BRAConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JMPConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlwaysIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRAlwaysIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditionalIndirect@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_JSRConditionalIndirect_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI1Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI1Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI2Conditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTI2Conditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSAlways@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSAlways_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSConditional@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RTSConditional_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECRc1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECRc0@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DECBoth@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRImmediateOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRScalarOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MVRScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_RangeOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Range@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ModuloOnly@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Modulo@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ABS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BITSScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BITSImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BTST@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_BUTT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_COPY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MSB@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SAT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_AS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ASL@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ASR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LS@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LSR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROT@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROL@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ROR@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADD_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUB_P@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADD_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUB_SV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ANDScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_FTSTScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_EORScalarRotateScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_CMPWCScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDM@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_ADDMImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBM@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SUBMImmediateReverse@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftAcshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULScalarShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftRightImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MULImmediateShiftLeftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_SVVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PImmediateShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRuShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRuShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRvShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PRvShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MUL_PVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPScalarShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPScalarShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPVectorShiftImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_DOTPVectorShiftSvshift@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_Mirror@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_SImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_SScalar@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_MV_V@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PopScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushVector@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushVectorRz@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushScalarRzi1@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_PushScalarRzi2@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	00H
	DD	FLAT:?Emit_LoadPixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadByteBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadWordBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_LoadPixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarControlRegisterAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	00H
	DD	FLAT:?Emit_StorePixelAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZAbsolute@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreShortVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreVectorBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZLinear@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZBilinearUV@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StorePixelZBilinearXY@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarControlRegisterImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarImmediate@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreScalarRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_StoreMiscRegisterConstant@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_NOP@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z
	DD	FLAT:?Emit_SaveRegs@@YAXPAVEmitterVariables@@AAVNuance@@@Z
_DATA	ENDS
CONST	SEGMENT
$SG23340 DB	'bad allocation', 00H
	ORG $+1
$SG52673 DB	'w', 00H
	ORG $+2
$SG52674 DB	'logfile', 00H
$SG52676 DB	'w', 00H
	ORG $+2
$SG52677 DB	'commlog', 00H
$SG53035 DB	'%s = $%8.8lx', 0aH, 00H
	ORG $+2
$SG53209 DB	'breakpoint', 0aH, 00H
$SG53212 DB	'nop', 0aH, 00H
CONST	ENDS
PUBLIC	?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\instructioncache.h
;	COMDAT ?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z
_TEXT	SEGMENT
_addressKey$ = 8					; size = 4
_bValid$ = 12						; size = 4
?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z PROC ; InstructionCache::FindInstructionCacheEntry, COMDAT
; _this$ = ecx

; 158  :   {

  00000	8b d1		 mov	 edx, ecx

; 159  :     uint32 cacheEntryIndex = (addressKey >> 1) & (numEntries - 1);

  00002	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00005	8b 4c 24 04	 mov	 ecx, DWORD PTR _addressKey$[esp-4]
  00009	83 e8 01	 sub	 eax, 1
  0000c	d1 e9		 shr	 ecx, 1
  0000e	56		 push	 esi

; 160  : 
; 161  :     if(bValid)

  0000f	8b 74 24 0c	 mov	 esi, DWORD PTR _bValid$[esp]
  00013	23 c1		 and	 eax, ecx
  00015	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00018	74 1c		 je	 SHORT $LN1@FindInstru
  0001a	53		 push	 ebx

; 162  :     {
; 163  :       bValid = validBitmap[cacheEntryIndex >> 5];
; 164  :       bValid &= (0x80000000UL >> (cacheEntryIndex & 0x1FUL));

  0001b	8b 1a		 mov	 ebx, DWORD PTR [edx]
  0001d	57		 push	 edi
  0001e	8b c8		 mov	 ecx, eax
  00020	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00023	bf 00 00 00 80	 mov	 edi, -2147483648	; 80000000H
  00028	d3 ef		 shr	 edi, cl
  0002a	8b c8		 mov	 ecx, eax
  0002c	c1 e9 05	 shr	 ecx, 5
  0002f	23 3c 8b	 and	 edi, DWORD PTR [ebx+ecx*4]
  00032	89 3e		 mov	 DWORD PTR [esi], edi
  00034	5f		 pop	 edi
  00035	5b		 pop	 ebx
$LN1@FindInstru:

; 165  :     }
; 166  :     return &cacheEntries[cacheEntryIndex];

  00036	69 c0 0c 01 00
	00		 imul	 eax, 268		; 0000010cH
  0003c	03 42 04	 add	 eax, DWORD PTR [edx+4]
  0003f	5e		 pop	 esi

; 167  :   }

  00040	c2 08 00	 ret	 8
?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ENDP ; InstructionCache::FindInstructionCacheEntry
_TEXT	ENDS
PUBLIC	?SetEntryValid@InstructionCache@@QAEXI@Z	; InstructionCache::SetEntryValid
; Function compile flags: /Ogtpy
;	COMDAT ?SetEntryValid@InstructionCache@@QAEXI@Z
_TEXT	SEGMENT
_addressKey$ = 8					; size = 4
?SetEntryValid@InstructionCache@@QAEXI@Z PROC		; InstructionCache::SetEntryValid, COMDAT
; _this$ = ecx

; 171  :     uint32 cacheEntryIndex = (addressKey >> 1) & (numEntries - 1);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	8b 54 24 04	 mov	 edx, DWORD PTR _addressKey$[esp-4]

; 172  :     validBitmap[cacheEntryIndex >> 5] |= (0x80000000UL >> (cacheEntryIndex & 0x1FUL));

  00007	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00009	d1 ea		 shr	 edx, 1
  0000b	83 e8 01	 sub	 eax, 1
  0000e	23 c2		 and	 eax, edx
  00010	8b d0		 mov	 edx, eax
  00012	c1 ea 05	 shr	 edx, 5
  00015	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00018	8b c8		 mov	 ecx, eax
  0001a	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0001d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00022	d3 e8		 shr	 eax, cl
  00024	09 02		 or	 DWORD PTR [edx], eax

; 173  :   }

  00026	c2 04 00	 ret	 4
?SetEntryValid@InstructionCache@@QAEXI@Z ENDP		; InstructionCache::SetEntryValid
_TEXT	ENDS
PUBLIC	?ClearCompiledStates@InstructionCache@@QAEXXZ	; InstructionCache::ClearCompiledStates
; Function compile flags: /Ogtpy
;	COMDAT ?ClearCompiledStates@InstructionCache@@QAEXXZ
_TEXT	SEGMENT
?ClearCompiledStates@InstructionCache@@QAEXXZ PROC	; InstructionCache::ClearCompiledStates, COMDAT
; _this$ = ecx

; 177  :     for(uint32 i = 0; i < numEntries; i++)

  00000	33 d2		 xor	 edx, edx
  00002	39 51 08	 cmp	 DWORD PTR [ecx+8], edx
  00005	76 27		 jbe	 SHORT $LN1@ClearCompi
  00007	56		 push	 esi
  00008	33 f6		 xor	 esi, esi
  0000a	8d 9b 00 00 00
	00		 npad	 6
$LL3@ClearCompi:

; 178  :     {
; 179  :       cacheEntries[i].packetInfo &= ~PACKETINFO_COMPILED;

  00010	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00013	81 64 30 18 ff
	ff ff 7f	 and	 DWORD PTR [eax+esi+24], 2147483647 ; 7fffffffH
  0001b	8d 44 30 18	 lea	 eax, DWORD PTR [eax+esi+24]
  0001f	83 c2 01	 add	 edx, 1
  00022	81 c6 0c 01 00
	00		 add	 esi, 268		; 0000010cH
  00028	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0002b	72 e3		 jb	 SHORT $LL3@ClearCompi
  0002d	5e		 pop	 esi
$LN1@ClearCompi:

; 180  :     }
; 181  :   }

  0002e	c3		 ret	 0
?ClearCompiledStates@InstructionCache@@QAEXXZ ENDP	; InstructionCache::ClearCompiledStates
_TEXT	ENDS
PUBLIC	?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ ; NativeCodeCache::GetEmitPointerAddress
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\nativecodecache.h
;	COMDAT ?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ
_TEXT	SEGMENT
?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ PROC	; NativeCodeCache::GetEmitPointerAddress, COMDAT
; _this$ = ecx

; 57   :     return &pEmitLoc;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 58   :   }

  00003	c3		 ret	 0
?GetEmitPointerAddress@NativeCodeCache@@QAEPAPAEXZ ENDP	; NativeCodeCache::GetEmitPointerAddress
_TEXT	ENDS
PUBLIC	?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ	; NativeCodeCache::GetUsedCodeBufferSize
; Function compile flags: /Ogtpy
;	COMDAT ?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ
_TEXT	SEGMENT
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ PROC	; NativeCodeCache::GetUsedCodeBufferSize, COMDAT
; _this$ = ecx

; 78   :     return (uint32)(pEmitLoc - ptrNativeCodeBuffer);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]

; 79   :   }

  00006	c3		 ret	 0
?GetUsedCodeBufferSize@NativeCodeCache@@QAEIXZ ENDP	; NativeCodeCache::GetUsedCodeBufferSize
_TEXT	ENDS
PUBLIC	?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ	; NativeCodeCache::IsBeyondThreshold
; Function compile flags: /Ogtpy
;	COMDAT ?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ
_TEXT	SEGMENT
?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ PROC	; NativeCodeCache::IsBeyondThreshold, COMDAT
; _this$ = ecx

; 103  :     return GetUsedCodeBufferSize() > warningThreshold;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  00006	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00009	1b c0		 sbb	 eax, eax
  0000b	f7 d8		 neg	 eax

; 104  :   }

  0000d	c3		 ret	 0
?IsBeyondThreshold@NativeCodeCache@@QAE_NXZ ENDP	; NativeCodeCache::IsBeyondThreshold
_TEXT	ENDS
PUBLIC	?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z ; NativeCodeCache::SetEmitVars
; Function compile flags: /Ogtpy
;	COMDAT ?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z
_TEXT	SEGMENT
_vars$ = 8						; size = 4
?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z PROC ; NativeCodeCache::SetEmitVars, COMDAT
; _this$ = ecx

; 112  :   {

  00000	56		 push	 esi

; 113  :     emitVars = vars;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _vars$[esp]
  00005	57		 push	 edi
  00006	8d 79 1c	 lea	 edi, DWORD PTR [ecx+28]
  00009	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000e	f3 a5		 rep movsd
  00010	5f		 pop	 edi
  00011	5e		 pop	 esi

; 114  :   }

  00012	c2 04 00	 ret	 4
?SetEmitVars@NativeCodeCache@@QAEXAAVEmitterVariables@@@Z ENDP ; NativeCodeCache::SetEmitVars
_TEXT	ENDS
PUBLIC	?GetOverlayMask@OverlayManager@@QAEIXZ		; OverlayManager::GetOverlayMask
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\overlaymanager.h
;	COMDAT ?GetOverlayMask@OverlayManager@@QAEIXZ
_TEXT	SEGMENT
?GetOverlayMask@OverlayManager@@QAEIXZ PROC		; OverlayManager::GetOverlayMask, COMDAT
; _this$ = ecx

; 19   :     return (currentOverlayIndex << 13);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c1 e0 0d	 shl	 eax, 13			; 0000000dH

; 20   :   }

  00006	c3		 ret	 0
?GetOverlayMask@OverlayManager@@QAEIXZ ENDP		; OverlayManager::GetOverlayMask
_TEXT	ENDS
PUBLIC	?SetOverlayLength@OverlayManager@@QAEXI@Z	; OverlayManager::SetOverlayLength
; Function compile flags: /Ogtpy
;	COMDAT ?SetOverlayLength@OverlayManager@@QAEXI@Z
_TEXT	SEGMENT
_len$ = 8						; size = 4
?SetOverlayLength@OverlayManager@@QAEXI@Z PROC		; OverlayManager::SetOverlayLength, COMDAT
; _this$ = ecx

; 34   :     overlayLength = len;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _len$[esp-4]
  00004	89 81 08 06 00
	00		 mov	 DWORD PTR [ecx+1544], eax

; 35   :   }

  0000a	c2 04 00	 ret	 4
?SetOverlayLength@OverlayManager@@QAEXI@Z ENDP		; OverlayManager::SetOverlayLength
_TEXT	ENDS
PUBLIC	?InvalidateICacheRegion@MPE@@QAEXII@Z		; MPE::InvalidateICacheRegion
EXTRN	?InvalidateRegion@InstructionCache@@QAEXII@Z:PROC ; InstructionCache::InvalidateRegion
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\mpe.h
;	COMDAT ?InvalidateICacheRegion@MPE@@QAEXII@Z
_TEXT	SEGMENT
_start$ = 8						; size = 4
_end$ = 12						; size = 4
?InvalidateICacheRegion@MPE@@QAEXII@Z PROC		; MPE::InvalidateICacheRegion, COMDAT
; _this$ = ecx

; 461  :     numInterpreterCacheFlushes++;

  00000	83 81 84 02 00
	00 01		 add	 DWORD PTR [ecx+644], 1

; 462  :     instructionCache->InvalidateRegion(start, end);

  00007	8b 89 a0 02 00
	00		 mov	 ecx, DWORD PTR [ecx+672]
  0000d	e9 00 00 00 00	 jmp	 ?InvalidateRegion@InstructionCache@@QAEXII@Z ; InstructionCache::InvalidateRegion
?InvalidateICacheRegion@MPE@@QAEXII@Z ENDP		; MPE::InvalidateICacheRegion
_TEXT	ENDS
PUBLIC	?Halt@MPE@@QAEXXZ				; MPE::Halt
; Function compile flags: /Ogtpy
;	COMDAT ?Halt@MPE@@QAEXXZ
_TEXT	SEGMENT
?Halt@MPE@@QAEXXZ PROC					; MPE::Halt, COMDAT
; _this$ = ecx

; 472  :     mpectl &= ~MPECTRL_MPEGO;

  00000	83 a1 80 01 00
	00 fd		 and	 DWORD PTR [ecx+384], -3	; fffffffdH

; 473  :   }

  00007	c3		 ret	 0
?Halt@MPE@@QAEXXZ ENDP					; MPE::Halt
_TEXT	ENDS
PUBLIC	?GetPointerToMemoryBank@MPE@@QAEPAEI@Z		; MPE::GetPointerToMemoryBank
; Function compile flags: /Ogtpy
;	COMDAT ?GetPointerToMemoryBank@MPE@@QAEPAEI@Z
_TEXT	SEGMENT
_address$ = 8						; size = 4
?GetPointerToMemoryBank@MPE@@QAEPAEI@Z PROC		; MPE::GetPointerToMemoryBank, COMDAT
; _this$ = ecx

; 493  :     return bankPtrTable[address >> 28] + (address & MPE_VALID_MEMORY_MASK);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _address$[esp-4]
  00004	8b d0		 mov	 edx, eax
  00006	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  00009	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  0000e	03 84 91 b0 02
	00 00		 add	 eax, DWORD PTR [ecx+edx*4+688]

; 494  :   }

  00015	c2 04 00	 ret	 4
?GetPointerToMemoryBank@MPE@@QAEPAEI@Z ENDP		; MPE::GetPointerToMemoryBank
_TEXT	ENDS
PUBLIC	??_GNativeCodeCache@@QAEPAXI@Z			; NativeCodeCache::`scalar deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1NativeCodeCache@@QAE@XZ:PROC			; NativeCodeCache::~NativeCodeCache
; Function compile flags: /Ogtpy
;	COMDAT ??_GNativeCodeCache@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GNativeCodeCache@@QAEPAXI@Z PROC			; NativeCodeCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1NativeCodeCache@@QAE@XZ ; NativeCodeCache::~NativeCodeCache
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GNativeCodeCache@@QAEPAXI@Z ENDP			; NativeCodeCache::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GInstructionCache@@QAEPAXI@Z			; InstructionCache::`scalar deleting destructor'
EXTRN	??1InstructionCache@@QAE@XZ:PROC		; InstructionCache::~InstructionCache
; Function compile flags: /Ogtpy
;	COMDAT ??_GInstructionCache@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GInstructionCache@@QAEPAXI@Z PROC			; InstructionCache::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1InstructionCache@@QAE@XZ ; InstructionCache::~InstructionCache
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@2
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@2:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GInstructionCache@@QAEPAXI@Z ENDP			; InstructionCache::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GSuperBlock@@QAEPAXI@Z			; SuperBlock::`scalar deleting destructor'
EXTRN	??1SuperBlock@@QAE@XZ:PROC			; SuperBlock::~SuperBlock
; Function compile flags: /Ogtpy
;	COMDAT ??_GSuperBlock@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSuperBlock@@QAEPAXI@Z PROC				; SuperBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1SuperBlock@@QAE@XZ	; SuperBlock::~SuperBlock
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $LN4@scalar@3
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$LN4@scalar@3:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GSuperBlock@@QAEPAXI@Z ENDP				; SuperBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?AllocateMPELocalMemory@MPE@@QAEXXZ		; MPE::AllocateMPELocalMemory
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\mpe.cpp
;	COMDAT ?AllocateMPELocalMemory@MPE@@QAEXXZ
_TEXT	SEGMENT
?AllocateMPELocalMemory@MPE@@QAEXXZ PROC		; MPE::AllocateMPELocalMemory, COMDAT
; _this$ = ecx

; 845  : {

  00000	56		 push	 esi

; 846  :   dtrom = new uint8[MPE_LOCAL_MEMORY_SIZE];

  00001	68 00 00 80 00	 push	 8388608			; 00800000H
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0000d	83 c4 04	 add	 esp, 4
  00010	89 86 30 02 00
	00		 mov	 DWORD PTR [esi+560], eax
  00016	5e		 pop	 esi

; 847  : }

  00017	c3		 ret	 0
?AllocateMPELocalMemory@MPE@@QAEXXZ ENDP		; MPE::AllocateMPELocalMemory
_TEXT	ENDS
PUBLIC	?FreeMPELocalMemory@MPE@@QAEXXZ			; MPE::FreeMPELocalMemory
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Ogtpy
;	COMDAT ?FreeMPELocalMemory@MPE@@QAEXXZ
_TEXT	SEGMENT
?FreeMPELocalMemory@MPE@@QAEXXZ PROC			; MPE::FreeMPELocalMemory, COMDAT
; _this$ = ecx

; 851  :   delete [] dtrom;

  00000	8b 81 30 02 00
	00		 mov	 eax, DWORD PTR [ecx+560]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000c	59		 pop	 ecx

; 852  : }

  0000d	c3		 ret	 0
?FreeMPELocalMemory@MPE@@QAEXXZ ENDP			; MPE::FreeMPELocalMemory
_TEXT	ENDS
PUBLIC	?GenerateMirrorLookupTable@MPE@@QAEXXZ		; MPE::GenerateMirrorLookupTable
; Function compile flags: /Ogtpy
;	COMDAT ?GenerateMirrorLookupTable@MPE@@QAEXXZ
_TEXT	SEGMENT
?GenerateMirrorLookupTable@MPE@@QAEXXZ PROC		; MPE::GenerateMirrorLookupTable, COMDAT
; _this$ = ecx

; 856  :   uint8 mirror;
; 857  : 
; 858  :   for(uint32 i = 0; i <= 0xFF; i++)

  00000	33 c0		 xor	 eax, eax
$LL3@GenerateMi:

; 859  :   {
; 860  :     mirror = 0;
; 861  :     mirror |= ((i & 0x01) << 7) & 0x80;
; 862  :     mirror |= ((i & 0x02) << 5) & 0x40;
; 863  :     mirror |= ((i & 0x04) << 3) & 0x20;
; 864  :     mirror |= ((i & 0x08) << 1) & 0x10;
; 865  :     mirror |= ((i & 0x10) >> 1) & 0x08;
; 866  :     mirror |= ((i & 0x20) >> 3) & 0x04;
; 867  :     mirror |= ((i & 0x40) >> 5) & 0x02;
; 868  :     mirror |= ((i & 0x80) >> 7) & 0x01;
; 869  : 
; 870  :     mirrorLookup[i] = mirror;

  00002	8a d0		 mov	 dl, al
  00004	02 d2		 add	 dl, dl
  00006	02 d2		 add	 dl, dl
  00008	8a c8		 mov	 cl, al
  0000a	80 e1 02	 and	 cl, 2
  0000d	0a ca		 or	 cl, dl
  0000f	02 c9		 add	 cl, cl
  00011	02 c9		 add	 cl, cl
  00013	8a d0		 mov	 dl, al
  00015	80 e2 04	 and	 dl, 4
  00018	0a ca		 or	 cl, dl
  0001a	02 c9		 add	 cl, cl
  0001c	02 c9		 add	 cl, cl
  0001e	8a d0		 mov	 dl, al
  00020	80 e2 08	 and	 dl, 8
  00023	0a ca		 or	 cl, dl
  00025	8b d0		 mov	 edx, eax
  00027	d1 ea		 shr	 edx, 1
  00029	80 e2 08	 and	 dl, 8
  0002c	02 c9		 add	 cl, cl
  0002e	0a ca		 or	 cl, dl
  00030	8b d0		 mov	 edx, eax
  00032	c1 ea 07	 shr	 edx, 7
  00035	80 e2 01	 and	 dl, 1
  00038	0a ca		 or	 cl, dl
  0003a	8b d0		 mov	 edx, eax
  0003c	c1 ea 03	 shr	 edx, 3
  0003f	80 e2 04	 and	 dl, 4
  00042	0a ca		 or	 cl, dl
  00044	8b d0		 mov	 edx, eax
  00046	c1 ea 05	 shr	 edx, 5
  00049	80 e2 02	 and	 dl, 2
  0004c	0a ca		 or	 cl, dl
  0004e	88 88 00 00 00
	00		 mov	 BYTE PTR ?mirrorLookup@MPE@@2PAEA[eax], cl
  00054	83 c0 01	 add	 eax, 1
  00057	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0005c	76 a4		 jbe	 SHORT $LL3@GenerateMi

; 871  :   }
; 872  : }

  0005e	c3		 ret	 0
?GenerateMirrorLookupTable@MPE@@QAEXXZ ENDP		; MPE::GenerateMirrorLookupTable
_TEXT	ENDS
PUBLIC	?InitializeBankTable@MPE@@QAEXPAE00@Z		; MPE::InitializeBankTable
; Function compile flags: /Ogtpy
;	COMDAT ?InitializeBankTable@MPE@@QAEXPAE00@Z
_TEXT	SEGMENT
_mainBusPtr$ = 8					; size = 4
_systemBusPtr$ = 12					; size = 4
_flashEEPROMPtr$ = 16					; size = 4
?InitializeBankTable@MPE@@QAEXPAE00@Z PROC		; MPE::InitializeBankTable, COMDAT
; _this$ = ecx

; 876  :   //Initialize the bank pointer lookup table for use with indirect
; 877  :   //loads and stores.  This table assumes that the only banks present
; 878  :   //are local MPE memory, system bus memory and main bus memory.  All
; 879  :   //other banks map to main bus memory in the hope that a bad memory address
; 880  :   //write will simply cause main bus graphics corruption
; 881  : 
; 882  :   //This table cannot distinguish between the ROM, reserved and other bus IO
; 883  :   //banks in the $F0000000/$F1000000/$FE000000 range but programs should
; 884  :   //never read or write in this range anyways.  If these banks are emulated
; 885  :   //at some future point, this table will need to expand to 256 entries in
; 886  :   //order to factor in the entire upper byte of the 32 bit address range
; 887  : 
; 888  :   bankPtrTable[0x0] = dtrom;

  00000	8b 81 30 02 00
	00		 mov	 eax, DWORD PTR [ecx+560]
  00006	89 81 b0 02 00
	00		 mov	 DWORD PTR [ecx+688], eax

; 889  :   bankPtrTable[0x1] = dtrom;

  0000c	89 81 b4 02 00
	00		 mov	 DWORD PTR [ecx+692], eax

; 890  :   bankPtrTable[0x2] = dtrom;

  00012	89 81 b8 02 00
	00		 mov	 DWORD PTR [ecx+696], eax

; 891  :   bankPtrTable[0x3] = mainBusPtr;

  00018	8b 44 24 04	 mov	 eax, DWORD PTR _mainBusPtr$[esp-4]
  0001c	89 81 bc 02 00
	00		 mov	 DWORD PTR [ecx+700], eax

; 892  :   bankPtrTable[0x4] = mainBusPtr;

  00022	89 81 c0 02 00
	00		 mov	 DWORD PTR [ecx+704], eax

; 893  :   bankPtrTable[0x5] = mainBusPtr;

  00028	89 81 c4 02 00
	00		 mov	 DWORD PTR [ecx+708], eax

; 894  :   bankPtrTable[0x6] = mainBusPtr;

  0002e	89 81 c8 02 00
	00		 mov	 DWORD PTR [ecx+712], eax

; 895  :   bankPtrTable[0x7] = mainBusPtr;

  00034	89 81 cc 02 00
	00		 mov	 DWORD PTR [ecx+716], eax

; 896  :   bankPtrTable[0x8] = systemBusPtr;

  0003a	8b 44 24 08	 mov	 eax, DWORD PTR _systemBusPtr$[esp-4]
  0003e	89 81 d0 02 00
	00		 mov	 DWORD PTR [ecx+720], eax

; 897  :   bankPtrTable[0x9] = systemBusPtr;

  00044	89 81 d4 02 00
	00		 mov	 DWORD PTR [ecx+724], eax

; 898  :   bankPtrTable[0xA] = systemBusPtr;

  0004a	89 81 d8 02 00
	00		 mov	 DWORD PTR [ecx+728], eax

; 899  :   bankPtrTable[0xB] = systemBusPtr;

  00050	89 81 dc 02 00
	00		 mov	 DWORD PTR [ecx+732], eax

; 900  :   bankPtrTable[0xC] = systemBusPtr;

  00056	89 81 e0 02 00
	00		 mov	 DWORD PTR [ecx+736], eax

; 901  :   bankPtrTable[0xD] = systemBusPtr;

  0005c	89 81 e4 02 00
	00		 mov	 DWORD PTR [ecx+740], eax

; 902  :   bankPtrTable[0xE] = systemBusPtr;

  00062	89 81 e8 02 00
	00		 mov	 DWORD PTR [ecx+744], eax

; 903  :   bankPtrTable[0xF] = flashEEPROMPtr;

  00068	8b 44 24 0c	 mov	 eax, DWORD PTR _flashEEPROMPtr$[esp-4]
  0006c	89 81 ec 02 00
	00		 mov	 DWORD PTR [ecx+748], eax

; 904  : }

  00072	c2 0c 00	 ret	 12			; 0000000cH
?InitializeBankTable@MPE@@QAEXPAE00@Z ENDP		; MPE::InitializeBankTable
_TEXT	ENDS
PUBLIC	?Reset@MPE@@QAEXXZ				; MPE::Reset
EXTRN	?Flush@NativeCodeCache@@QAEXXZ:PROC		; NativeCodeCache::Flush
EXTRN	?Invalidate@InstructionCache@@QAEXXZ:PROC	; InstructionCache::Invalidate
; Function compile flags: /Ogtpy
;	COMDAT ?Reset@MPE@@QAEXXZ
_TEXT	SEGMENT
?Reset@MPE@@QAEXXZ PROC					; MPE::Reset, COMDAT
; _this$ = ecx

; 909  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 910  :   //Explicitly clear CSTATE bits to zero so that code works in debug mode
; 911  :   dcachectl &= ~0xF0000000;
; 912  :   icachectl &= ~0xF0000000;
; 913  : 
; 914  :   instructionCache->Invalidate();

  00003	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  00009	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH
  0000e	21 86 18 02 00
	00		 and	 DWORD PTR [esi+536], eax
  00014	21 86 1c 02 00
	00		 and	 DWORD PTR [esi+540], eax
  0001a	e8 00 00 00 00	 call	 ?Invalidate@InstructionCache@@QAEXXZ ; InstructionCache::Invalidate

; 915  :   nativeCodeCache->Flush();

  0001f	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  00025	e8 00 00 00 00	 call	 ?Flush@NativeCodeCache@@QAEXXZ ; NativeCodeCache::Flush

; 916  : 
; 917  :   invalidateRegionStart = MPE_IRAM_BASE;
; 918  :   invalidateRegionEnd = (MPE_IRAM_BASE + OVERLAY_SIZE - 1);
; 919  :   interpreterInvalidateRegionStart = 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	b9 00 00 30 20	 mov	 ecx, 540016640		; 20300000H
  00031	89 8e 70 02 00
	00		 mov	 DWORD PTR [esi+624], ecx

; 920  :   interpreterInvalidateRegionEnd = 0;
; 921  : 
; 922  :   overlayIndex = 0;
; 923  : 
; 924  :   //Interpretation of Nuances require the use of the cc composite flags register 
; 925  :   bUsingCompositeFlags = true;
; 926  :   ecuSkipCounter = 0;
; 927  :   pcfetchnext = 0x20300000;

  00037	89 8e 34 02 00
	00		 mov	 DWORD PTR [esi+564], ecx

; 928  :   pcfetch = 0x20300000;

  0003d	89 8e 90 01 00
	00		 mov	 DWORD PTR [esi+400], ecx

; 929  :   pcroute = 0x20300000;

  00043	89 8e 94 01 00
	00		 mov	 DWORD PTR [esi+404], ecx

; 930  :   pcexec = 0x20300000;

  00049	89 8e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ecx

; 931  :   sp = 0x20001000;
; 932  :   //mpectl is halted on reset and has the was-reset bit set
; 933  :   mpectl = MPECTRL_MPEWASRESET;
; 934  :   //all exceptions halt the processor
; 935  :   excephalten = 0x1FFF;
; 936  :   //reset all exceptions
; 937  :   excepsrc = 0;
; 938  :   //intctl is set to 0 on reset according to SDK docs
; 939  :   intctl = 0;
; 940  :   //reset all interrupt sources
; 941  :   intsrc = 0;
; 942  :   //reset interupt enable registers
; 943  :   inten1 = 0;
; 944  :   //set level 2 selector to software
; 945  :   inten2sel = 1;
; 946  :   //enable other bus dma, no commands pending, no other bus activity
; 947  :   odmactl = 1UL << 5;
; 948  :   //set bus priority for MDMA transfers to 3 and clear all other bits
; 949  :   mdmactl = 3UL << 5;

  0004f	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00054	89 8e e0 01 00
	00		 mov	 DWORD PTR [esi+480], ecx

; 950  :   commxmit0 = 0;
; 951  :   commxmit1 = 0;
; 952  :   commxmit2 = 0;
; 953  :   commxmit3 = 0;
; 954  :   commrecv0 = 0;
; 955  :   commrecv1 = 0;
; 956  :   commrecv2 = 0;
; 957  :   commrecv3 = 0;
; 958  :   acshift = 0;
; 959  :   svshift = 0;
; 960  :   commctl = 0;
; 961  :   rc0 = 0;
; 962  :   rc1 = 0;
; 963  :   cc = (CC_COUNTER0_ZERO | CC_COUNTER1_ZERO);

  0005a	89 8e 80 00 00
	00		 mov	 DWORD PTR [esi+128], ecx

; 964  :   cycleCounter = 0;
; 965  :   //Nuon = aries 2, MPE release = aries 2, mpe identifier, halted on reset
; 966  :   configa = (3UL << 24) | (3UL << 16) | (mpeIndex << 8) | 0;

  00060	8b 8e 98 02 00
	00		 mov	 ecx, DWORD PTR [esi+664]
  00066	81 c9 00 03 03
	00		 or	 ecx, 197376		; 00030300H
  0006c	ba 01 00 00 00	 mov	 edx, 1
  00071	c1 e1 08	 shl	 ecx, 8
  00074	c7 86 74 02 00
	00 ff 1f 30 20	 mov	 DWORD PTR [esi+628], 540024831 ; 20301fffH
  0007e	89 86 78 02 00
	00		 mov	 DWORD PTR [esi+632], eax
  00084	89 86 7c 02 00
	00		 mov	 DWORD PTR [esi+636], eax
  0008a	89 86 64 02 00
	00		 mov	 DWORD PTR [esi+612], eax
  00090	88 96 58 02 00
	00		 mov	 BYTE PTR [esi+600], dl
  00096	89 86 40 02 00
	00		 mov	 DWORD PTR [esi+576], eax
  0009c	c7 86 d0 01 00
	00 00 10 00 20	 mov	 DWORD PTR [esi+464], 536875008 ; 20001000H
  000a6	c7 86 80 01 00
	00 00 80 00 00	 mov	 DWORD PTR [esi+384], 32768 ; 00008000H
  000b0	c7 86 8c 01 00
	00 ff 1f 00 00	 mov	 DWORD PTR [esi+396], 8191 ; 00001fffH
  000ba	89 86 84 01 00
	00		 mov	 DWORD PTR [esi+388], eax
  000c0	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
  000c6	89 86 a4 01 00
	00		 mov	 DWORD PTR [esi+420], eax
  000cc	89 86 b0 01 00
	00		 mov	 DWORD PTR [esi+432], eax
  000d2	89 96 bc 01 00
	00		 mov	 DWORD PTR [esi+444], edx
  000d8	c7 86 d8 01 00
	00 20 00 00 00	 mov	 DWORD PTR [esi+472], 32	; 00000020H
  000e2	89 86 f0 01 00
	00		 mov	 DWORD PTR [esi+496], eax
  000e8	89 86 f4 01 00
	00		 mov	 DWORD PTR [esi+500], eax
  000ee	89 86 f8 01 00
	00		 mov	 DWORD PTR [esi+504], eax
  000f4	89 86 fc 01 00
	00		 mov	 DWORD PTR [esi+508], eax
  000fa	89 86 00 02 00
	00		 mov	 DWORD PTR [esi+512], eax
  00100	89 86 04 02 00
	00		 mov	 DWORD PTR [esi+516], eax
  00106	89 86 08 02 00
	00		 mov	 DWORD PTR [esi+520], eax
  0010c	89 86 0c 02 00
	00		 mov	 DWORD PTR [esi+524], eax
  00112	89 86 b8 00 00
	00		 mov	 DWORD PTR [esi+184], eax
  00118	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax
  0011e	89 86 ec 01 00
	00		 mov	 DWORD PTR [esi+492], eax
  00124	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  0012a	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  00130	89 86 48 02 00
	00		 mov	 DWORD PTR [esi+584], eax
  00136	89 86 4c 02 00
	00		 mov	 DWORD PTR [esi+588], eax
  0013c	89 8e 10 02 00
	00		 mov	 DWORD PTR [esi+528], ecx

; 967  :   configb = 0;

  00142	89 86 14 02 00
	00		 mov	 DWORD PTR [esi+532], eax
  00148	5e		 pop	 esi

; 968  : }

  00149	c3		 ret	 0
?Reset@MPE@@QAEXXZ ENDP					; MPE::Reset
_TEXT	ENDS
PUBLIC	?LoadBinaryFile@MPE@@QAE_NPAE_N@Z		; MPE::LoadBinaryFile
EXTRN	_close:PROC
EXTRN	_read:PROC
EXTRN	_filelength:PROC
EXTRN	_open:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?LoadBinaryFile@MPE@@QAE_NPAE_N@Z
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_bIRAM$ = 12						; size = 1
?LoadBinaryFile@MPE@@QAE_NPAE_N@Z PROC			; MPE::LoadBinaryFile, COMDAT
; _this$ = ecx

; 972  :   int handle;
; 973  :   int byteLength;
; 974  :   uint8 *buffer = &dtrom[MPE_IROM_OFFSET];
; 975  : 
; 976  :   handle = open((char *)filename,_O_RDONLY|_O_BINARY,0);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _filename$[esp-4]
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	6a 00		 push	 0
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b b3 30 02 00
	00		 mov	 esi, DWORD PTR [ebx+560]
  00011	68 00 80 00 00	 push	 32768			; 00008000H
  00016	50		 push	 eax
  00017	81 c6 00 00 20
	00		 add	 esi, 2097152		; 00200000H
  0001d	e8 00 00 00 00	 call	 _open
  00022	8b f8		 mov	 edi, eax
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 977  :   if(handle >= 0)

  00027	85 ff		 test	 edi, edi
  00029	7c 35		 jl	 SHORT $LN3@LoadBinary

; 978  :   {
; 979  :     byteLength = filelength(handle);

  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 _filelength
  00031	83 c4 04	 add	 esp, 4

; 980  : 
; 981  :     if(bIRAM)

  00034	80 7c 24 14 00	 cmp	 BYTE PTR _bIRAM$[esp+8], 0
  00039	74 0c		 je	 SHORT $LN2@LoadBinary

; 982  :     {
; 983  :       buffer = &dtrom[MPE_IRAM_OFFSET];

  0003b	8b b3 30 02 00
	00		 mov	 esi, DWORD PTR [ebx+560]
  00041	81 c6 00 00 30
	00		 add	 esi, 3145728		; 00300000H
$LN2@LoadBinary:

; 984  :     }
; 985  : 
; 986  :     read(handle, buffer, byteLength);

  00047	50		 push	 eax
  00048	56		 push	 esi
  00049	57		 push	 edi
  0004a	e8 00 00 00 00	 call	 _read

; 987  :     close(handle);

  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 _close
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi

; 988  :     return true;

  0005a	b0 01		 mov	 al, 1
  0005c	5b		 pop	 ebx

; 993  :   }
; 994  : }

  0005d	c2 08 00	 ret	 8
$LN3@LoadBinary:
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 989  :   }
; 990  :   else
; 991  :   {
; 992  :     return false;

  00062	32 c0		 xor	 al, al
  00064	5b		 pop	 ebx

; 993  :   }
; 994  : }

  00065	c2 08 00	 ret	 8
?LoadBinaryFile@MPE@@QAE_NPAE_N@Z ENDP			; MPE::LoadBinaryFile
_TEXT	ENDS
PUBLIC	?GetPacketDelta@MPE@@QAEIPAEI@Z			; MPE::GetPacketDelta
; Function compile flags: /Ogtpy
;	COMDAT ?GetPacketDelta@MPE@@QAEIPAEI@Z
_TEXT	SEGMENT
_deltaBytes$ = -1					; size = 1
_iPtr$ = 8						; size = 4
_numLevels$ = 12					; size = 4
?GetPacketDelta@MPE@@QAEIPAEI@Z PROC			; MPE::GetPacketDelta, COMDAT
; _this$ = ecx

; 1008 : {

  00000	51		 push	 ecx
  00001	56		 push	 esi

; 1009 :   uint8 opcode;
; 1010 :   uint8 deltaBytes, packetBytes;
; 1011 :   bool bTerminating;
; 1012 : 
; 1013 :   packetBytes = 0;
; 1014 :   deltaBytes = 0;
; 1015 : 
; 1016 :   while(numLevels != 0)

  00002	8b 74 24 10	 mov	 esi, DWORD PTR _numLevels$[esp+4]
  00006	33 d2		 xor	 edx, edx
  00008	3b f2		 cmp	 esi, edx
  0000a	88 54 24 07	 mov	 BYTE PTR _deltaBytes$[esp+8], dl
  0000e	74 76		 je	 SHORT $LN18@GetPacketD
  00010	8b 4c 24 0c	 mov	 ecx, DWORD PTR _iPtr$[esp+4]
  00014	53		 push	 ebx
$LL13@GetPacketD:

; 1017 :   {
; 1018 :     opcode = *iPtr;

  00015	8a 01		 mov	 al, BYTE PTR [ecx]

; 1019 :     if(opcode <= 0x3F)

  00017	3c 3f		 cmp	 al, 63			; 0000003fH
  00019	77 0a		 ja	 SHORT $LN11@GetPacketD

; 1020 :     {
; 1021 :       bTerminating = true;
; 1022 :       deltaBytes += 2;

  0001b	80 44 24 0b 02	 add	 BYTE PTR _deltaBytes$[esp+12], 2

; 1023 :       packetBytes += 2;
; 1024 :       iPtr += 2;

  00020	83 c1 02	 add	 ecx, 2

; 1025 :     }
; 1026 :     else

  00023	eb 4d		 jmp	 SHORT $LN21@GetPacketD
$LN11@GetPacketD:

; 1027 :     {
; 1028 :       //Instruction is not a 16 bit ALU instruction
; 1029 : 
; 1030 :       //If 16 bit non-terminating non-ALU instruction, control instruction
; 1031 :       //or 32 bit immediate extension
; 1032 :       if(opcode < 0x88 || opcode > 0x9F)

  00025	8a d8		 mov	 bl, al
  00027	80 c3 78	 add	 bl, 120			; 00000078H
  0002a	80 fb 17	 cmp	 bl, 23			; 00000017H
  0002d	77 1e		 ja	 SHORT $LN8@GetPacketD

; 1049 :       }
; 1050 :       else if(opcode >= 0x90)
; 1051 :       {
; 1052 :         //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 1053 :         bTerminating = *(iPtr + 2) & 0x10;
; 1054 :         deltaBytes += 4;

  0002f	80 44 24 0b 04	 add	 BYTE PTR _deltaBytes$[esp+12], 4

; 1055 :         packetBytes += 4;

  00034	80 c2 04	 add	 dl, 4
  00037	3c 90		 cmp	 al, 144			; 00000090H
  00039	72 0d		 jb	 SHORT $LN4@GetPacketD
  0003b	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  0003e	c0 e8 04	 shr	 al, 4
  00041	24 01		 and	 al, 1

; 1056 :         iPtr += 4;

  00043	83 c1 04	 add	 ecx, 4

; 1057 :       }
; 1058 :       else

  00046	eb 21		 jmp	 SHORT $LN3@GetPacketD
$LN4@GetPacketD:

; 1059 :       {
; 1060 :         //32 bit extension (preceeding 48/64 bit instruction)
; 1061 :         bTerminating = false;
; 1062 :         deltaBytes += 4;
; 1063 :         packetBytes += 4;
; 1064 :         iPtr += 4;

  00048	83 c1 04	 add	 ecx, 4
  0004b	eb 20		 jmp	 SHORT $LN17@GetPacketD
$LN8@GetPacketD:

; 1033 :       {
; 1034 :         //If not a control instruction (PAD, NOP or BREAKPOINT)
; 1035 :         if((opcode & 0xFC) != 0x80)

  0004d	8a d8		 mov	 bl, al
  0004f	80 e3 fc	 and	 bl, 252			; 000000fcH
  00052	80 fb 80	 cmp	 bl, 128			; 00000080H
  00055	74 05		 je	 SHORT $LN7@GetPacketD

; 1036 :         {
; 1037 :           //if bit 15 is set, the instruction is a packet terminator
; 1038 :           bTerminating = (opcode & 0x80);

  00057	c0 e8 07	 shr	 al, 7

; 1039 :         }
; 1040 :         else

  0005a	eb 02		 jmp	 SHORT $LN6@GetPacketD
$LN7@GetPacketD:

; 1041 :         {
; 1042 :           //if bit 8 is set, the instruction is a terminating breakpoint or NOP
; 1043 :           bTerminating = (opcode & 0x01);

  0005c	24 01		 and	 al, 1
$LN6@GetPacketD:

; 1044 :         }
; 1045 : 
; 1046 :         deltaBytes += 2;

  0005e	80 44 24 0b 02	 add	 BYTE PTR _deltaBytes$[esp+12], 2

; 1047 :         packetBytes += 2;

  00063	80 c2 02	 add	 dl, 2

; 1048 :         iPtr += 2;

  00066	83 c1 02	 add	 ecx, 2
$LN3@GetPacketD:

; 1065 :       }
; 1066 :     }
; 1067 : 
; 1068 :     if(bTerminating || (packetBytes >= 128))

  00069	84 c0		 test	 al, al
  0006b	75 05		 jne	 SHORT $LN21@GetPacketD
$LN17@GetPacketD:
  0006d	80 fa 80	 cmp	 dl, 128			; 00000080H
  00070	72 05		 jb	 SHORT $LN20@GetPacketD
$LN21@GetPacketD:

; 1069 :     {
; 1070 :       numLevels--;

  00072	83 ee 01	 sub	 esi, 1

; 1071 :       packetBytes = 0;

  00075	32 d2		 xor	 dl, dl
$LN20@GetPacketD:

; 1009 :   uint8 opcode;
; 1010 :   uint8 deltaBytes, packetBytes;
; 1011 :   bool bTerminating;
; 1012 : 
; 1013 :   packetBytes = 0;
; 1014 :   deltaBytes = 0;
; 1015 : 
; 1016 :   while(numLevels != 0)

  00077	85 f6		 test	 esi, esi
  00079	75 9a		 jne	 SHORT $LL13@GetPacketD

; 1072 :     }
; 1073 :   }
; 1074 : 
; 1075 :   return deltaBytes;

  0007b	0f b6 44 24 0b	 movzx	 eax, BYTE PTR _deltaBytes$[esp+12]
  00080	5b		 pop	 ebx
  00081	5e		 pop	 esi

; 1076 : }

  00082	59		 pop	 ecx
  00083	c2 08 00	 ret	 8
$LN18@GetPacketD:

; 1072 :     }
; 1073 :   }
; 1074 : 
; 1075 :   return deltaBytes;

  00086	0f b6 c2	 movzx	 eax, dl
  00089	5e		 pop	 esi

; 1076 : }

  0008a	59		 pop	 ecx
  0008b	c2 08 00	 ret	 8
?GetPacketDelta@MPE@@QAEIPAEI@Z ENDP			; MPE::GetPacketDelta
_TEXT	ENDS
PUBLIC	?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
EXTRN	?OnesCount@@YAII@Z:PROC				; OnesCount
; Function compile flags: /Ogtpy
;	COMDAT ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z
_TEXT	SEGMENT
tv219 = 8						; size = 4
_yMiscInDep$ = 8					; size = 4
_entry$ = 8						; size = 4
_yScalarInDep$ = 12					; size = 4
_slot1$ = 12						; size = 4
_xMiscInDep$ = 16					; size = 4
_slot2$ = 16						; size = 4
?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z PROC ; MPE::ChooseInstructionPairOrdering, COMDAT
; _this$ = ecx

; 1728 :   uint32 xScalarInDep, yScalarInDep, xMiscInDep, yMiscInDep;
; 1729 :   uint32 xScalarOutDep, yScalarOutDep, xMiscOutDep, yMiscOutDep;
; 1730 : 
; 1731 :   xScalarInDep = entry->scalarInputDependencies[slot1];

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _entry$[esp-4]

; 1732 :   yScalarInDep = entry->scalarInputDependencies[slot2];

  00004	8b 54 24 0c	 mov	 edx, DWORD PTR _slot2$[esp-4]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR _slot1$[esp-4]
  0000c	53		 push	 ebx

; 1733 :   xMiscInDep = entry->miscInputDependencies[slot1];
; 1734 :   yMiscInDep = entry->miscInputDependencies[slot2];
; 1735 :   xScalarOutDep = entry->scalarOutputDependencies[slot1];
; 1736 :   yScalarOutDep = entry->scalarOutputDependencies[slot2];
; 1737 :   xMiscOutDep = entry->miscOutputDependencies[slot1];
; 1738 :   yMiscOutDep = entry->miscOutputDependencies[slot2];

  0000d	8b 9c 90 f8 00
	00 00		 mov	 ebx, DWORD PTR [eax+edx*4+248]
  00014	55		 push	 ebp
  00015	8b ac 88 bc 00
	00 00		 mov	 ebp, DWORD PTR [eax+ecx*4+188]
  0001c	56		 push	 esi
  0001d	8b b4 90 bc 00
	00 00		 mov	 esi, DWORD PTR [eax+edx*4+188]
  00024	89 74 24 14	 mov	 DWORD PTR _yScalarInDep$[esp+8], esi
  00028	8b b4 88 d0 00
	00 00		 mov	 esi, DWORD PTR [eax+ecx*4+208]
  0002f	89 74 24 18	 mov	 DWORD PTR _xMiscInDep$[esp+8], esi
  00033	8b b4 90 d0 00
	00 00		 mov	 esi, DWORD PTR [eax+edx*4+208]
  0003a	89 74 24 10	 mov	 DWORD PTR _yMiscInDep$[esp+8], esi
  0003e	8b b4 88 e4 00
	00 00		 mov	 esi, DWORD PTR [eax+ecx*4+228]
  00045	8b 8c 88 f8 00
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+248]

; 1739 :   return (OnesCount(yScalarInDep & xScalarOutDep) + OnesCount(yMiscInDep & xMiscOutDep)) 
; 1740 :     > (OnesCount(xScalarInDep & yScalarOutDep) + OnesCount(xMiscInDep & yMiscOutDep));

  0004c	23 4c 24 10	 and	 ecx, DWORD PTR _yMiscInDep$[esp+8]
  00050	57		 push	 edi
  00051	8b bc 90 e4 00
	00 00		 mov	 edi, DWORD PTR [eax+edx*4+228]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  0005e	23 74 24 1c	 and	 esi, DWORD PTR _yScalarInDep$[esp+16]
  00062	89 44 24 18	 mov	 DWORD PTR tv219[esp+16], eax
  00066	56		 push	 esi
  00067	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  0006c	23 5c 24 24	 and	 ebx, DWORD PTR _xMiscInDep$[esp+20]
  00070	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv219[esp+20]
  00074	53		 push	 ebx
  00075	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  00078	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  0007d	23 fd		 and	 edi, ebp
  0007f	57		 push	 edi
  00080	8b d8		 mov	 ebx, eax
  00082	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	03 d8		 add	 ebx, eax
  0008c	5f		 pop	 edi
  0008d	3b de		 cmp	 ebx, esi
  0008f	5e		 pop	 esi
  00090	1b c0		 sbb	 eax, eax
  00092	5d		 pop	 ebp
  00093	f7 d8		 neg	 eax
  00095	5b		 pop	 ebx

; 1741 : }

  00096	c2 0c 00	 ret	 12			; 0000000cH
?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ENDP ; MPE::ChooseInstructionPairOrdering
_TEXT	ENDS
PUBLIC	?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
EXTRN	?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z:PROC ; InstructionCacheEntry::CopyInstructionData
;	COMDAT ?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 02H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot3
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	00H
_DATA	ENDS
;	COMDAT ?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 01H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot2
	DD	02H
	DD	02H
	DD	00H
	DD	00H
	DD	01H
_DATA	ENDS
;	COMDAT ?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA
_DATA	SEGMENT
?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA DD 00H ; `MPE::ScheduleInstructionTriplet'::`2'::destSlot1
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
; Function compile flags: /Ogtpy
_DATA	ENDS
;	COMDAT ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z
_TEXT	SEGMENT
_scores$ = -24						; size = 24
_destEntry$ = 8						; size = 4
_baseSlot$ = 12						; size = 4
tv467 = 16						; size = 4
tv389 = 16						; size = 4
tv292 = 16						; size = 4
_minIndex$ = 16						; size = 4
_tempMiscInDep$ = 16					; size = 4
_srcEntry$ = 16						; size = 4
_tempScalarInDep$ = 20					; size = 4
_slot1$ = 20						; size = 4
tv538 = 24						; size = 4
tv533 = 24						; size = 4
tv479 = 24						; size = 4
_slot2$ = 24						; size = 4
tv465 = 28						; size = 4
tv398 = 28						; size = 4
_slot3$ = 28						; size = 4
?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z PROC ; MPE::ScheduleInstructionTriplet, COMDAT
; _this$ = ecx

; 1744 : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H
  00003	53		 push	 ebx

; 1745 :   static uint32 destSlot1[6] = {0,0,1,1,2,2};
; 1746 :   static uint32 destSlot2[6] = {1,2,2,0,0,1};
; 1747 :   static uint32 destSlot3[6] = {2,1,0,2,1,0};
; 1748 : 
; 1749 :   uint32 comboScalarOutDep12, comboScalarOutDep23, comboScalarOutDep13;
; 1750 :   uint32 comboMiscOutDep12, comboMiscOutDep23, comboMiscOutDep13;
; 1751 :   uint32 tempScalarInDep, tempMiscInDep, i, minVal, minIndex;
; 1752 :   uint32 scores[6];
; 1753 :   
; 1754 : /*
; 1755 :   After completion, scores will contain the dependency count for the following permuations:
; 1756 :   {[1,2,3],[1,3,2],[2,3,1],[2,1,3],[3,1,2],[3,2,1]}.  Choose the permutation with the lowest
; 1757 :   score.
; 1758 : */
; 1759 : 
; 1760 :   comboScalarOutDep12 = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

  00004	8b 5c 24 30	 mov	 ebx, DWORD PTR _slot2$[esp+24]
  00008	55		 push	 ebp
  00009	8b 6c 24 30	 mov	 ebp, DWORD PTR _slot1$[esp+28]
  0000d	56		 push	 esi
  0000e	8b 74 24 30	 mov	 esi, DWORD PTR _srcEntry$[esp+32]

; 1761 :   comboMiscOutDep12 = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];

  00012	8b 94 ae f8 00
	00 00		 mov	 edx, DWORD PTR [esi+ebp*4+248]
  00019	8b 8c 9e f8 00
	00 00		 mov	 ecx, DWORD PTR [esi+ebx*4+248]
  00020	8b 84 9e e4 00
	00 00		 mov	 eax, DWORD PTR [esi+ebx*4+228]
  00027	0b 84 ae e4 00
	00 00		 or	 eax, DWORD PTR [esi+ebp*4+228]
  0002e	0b ca		 or	 ecx, edx
  00030	57		 push	 edi

; 1762 : 
; 1763 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep12;

  00031	8b 7c 24 40	 mov	 edi, DWORD PTR _slot3$[esp+36]

; 1764 :   tempMiscInDep = srcEntry->miscInputDependencies[slot3] & comboMiscOutDep12;

  00035	23 8c be d0 00
	00 00		 and	 ecx, DWORD PTR [esi+edi*4+208]
  0003c	23 84 be bc 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+188]
  00043	89 4c 24 34	 mov	 DWORD PTR _tempMiscInDep$[esp+36], ecx

; 1765 : 
; 1766 :   scores[0] = 
; 1767 :     OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1768 :               (tempScalarInDep)) +
; 1769 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1770 :               (tempMiscInDep));

  00047	8b 8c 9e bc 00
	00 00		 mov	 ecx, DWORD PTR [esi+ebx*4+188]
  0004e	23 8c ae e4 00
	00 00		 and	 ecx, DWORD PTR [esi+ebp*4+228]
  00055	89 44 24 38	 mov	 DWORD PTR _tempScalarInDep$[esp+36], eax
  00059	0b c8		 or	 ecx, eax
  0005b	51		 push	 ecx
  0005c	89 54 24 40	 mov	 DWORD PTR tv533[esp+40], edx
  00060	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00065	89 44 24 44	 mov	 DWORD PTR tv465[esp+40], eax
  00069	8b 44 24 40	 mov	 eax, DWORD PTR tv533[esp+40]
  0006d	23 84 9e d0 00
	00 00		 and	 eax, DWORD PTR [esi+ebx*4+208]
  00074	0b 44 24 38	 or	 eax, DWORD PTR _tempMiscInDep$[esp+40]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  0007e	8b 54 24 48	 mov	 edx, DWORD PTR tv465[esp+44]
  00082	03 d0		 add	 edx, eax

; 1771 : 
; 1772 :   scores[3] = 
; 1773 :     OnesCount((srcEntry->scalarInputDependencies[slot1] & srcEntry->scalarOutputDependencies[slot2]) |
; 1774 :               (tempScalarInDep)) +
; 1775 :     OnesCount((srcEntry->miscInputDependencies[slot1] & srcEntry->miscOutputDependencies[slot2]) |
; 1776 :               (tempMiscInDep));

  00084	8b 84 ae d0 00
	00 00		 mov	 eax, DWORD PTR [esi+ebp*4+208]
  0008b	23 84 9e f8 00
	00 00		 and	 eax, DWORD PTR [esi+ebx*4+248]
  00092	89 54 24 18	 mov	 DWORD PTR _scores$[esp+48], edx
  00096	0b 44 24 3c	 or	 eax, DWORD PTR _tempMiscInDep$[esp+44]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  000a0	8b 8c 9e e4 00
	00 00		 mov	 ecx, DWORD PTR [esi+ebx*4+228]
  000a7	23 8c ae bc 00
	00 00		 and	 ecx, DWORD PTR [esi+ebp*4+188]
  000ae	89 44 24 40	 mov	 DWORD PTR tv467[esp+48], eax
  000b2	0b 4c 24 44	 or	 ecx, DWORD PTR _tempScalarInDep$[esp+48]
  000b6	51		 push	 ecx
  000b7	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  000bc	8b 54 24 44	 mov	 edx, DWORD PTR tv467[esp+52]

; 1777 : 
; 1778 :   comboScalarOutDep13 = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot3];
; 1779 :   comboMiscOutDep13 = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot3];

  000c0	8b 8c be f8 00
	00 00		 mov	 ecx, DWORD PTR [esi+edi*4+248]
  000c7	03 d0		 add	 edx, eax
  000c9	8b 84 ae e4 00
	00 00		 mov	 eax, DWORD PTR [esi+ebp*4+228]
  000d0	0b 84 be e4 00
	00 00		 or	 eax, DWORD PTR [esi+edi*4+228]
  000d7	89 54 24 2c	 mov	 DWORD PTR _scores$[esp+68], edx

; 1780 : 
; 1781 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot2] & comboScalarOutDep13;

  000db	23 84 9e bc 00
	00 00		 and	 eax, DWORD PTR [esi+ebx*4+188]
  000e2	89 44 24 48	 mov	 DWORD PTR _tempScalarInDep$[esp+52], eax
  000e6	8b 84 ae f8 00
	00 00		 mov	 eax, DWORD PTR [esi+ebp*4+248]
  000ed	0b c8		 or	 ecx, eax

; 1782 :   tempMiscInDep = srcEntry->miscInputDependencies[slot2] & comboMiscOutDep13;

  000ef	23 8c 9e d0 00
	00 00		 and	 ecx, DWORD PTR [esi+ebx*4+208]

; 1783 : 
; 1784 :   scores[1] = 
; 1785 :     OnesCount((srcEntry->scalarInputDependencies[slot3] & srcEntry->scalarOutputDependencies[slot1]) |
; 1786 :               (tempScalarInDep)) +
; 1787 :     OnesCount((srcEntry->miscInputDependencies[slot3] & srcEntry->miscOutputDependencies[slot1]) |
; 1788 :               (tempMiscInDep));

  000f6	23 84 be d0 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+208]
  000fd	89 4c 24 44	 mov	 DWORD PTR _tempMiscInDep$[esp+52], ecx
  00101	0b c1		 or	 eax, ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00109	89 44 24 50	 mov	 DWORD PTR tv479[esp+56], eax
  0010d	8b 84 ae e4 00
	00 00		 mov	 eax, DWORD PTR [esi+ebp*4+228]
  00114	23 84 be bc 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+188]
  0011b	0b 44 24 4c	 or	 eax, DWORD PTR _tempScalarInDep$[esp+56]
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount

; 1789 : 
; 1790 :   scores[4] = 
; 1791 :     OnesCount((srcEntry->scalarInputDependencies[slot1] & srcEntry->scalarOutputDependencies[slot3]) |
; 1792 :               (tempScalarInDep)) +
; 1793 :     OnesCount((srcEntry->miscInputDependencies[slot1] & srcEntry->miscOutputDependencies[slot3]) |
; 1794 :               (tempMiscInDep));

  00125	8b 94 ae d0 00
	00 00		 mov	 edx, DWORD PTR [esi+ebp*4+208]
  0012c	23 94 be f8 00
	00 00		 and	 edx, DWORD PTR [esi+edi*4+248]
  00133	8b 4c 24 54	 mov	 ecx, DWORD PTR tv479[esp+60]
  00137	0b 54 24 4c	 or	 edx, DWORD PTR _tempMiscInDep$[esp+60]
  0013b	03 c8		 add	 ecx, eax
  0013d	52		 push	 edx
  0013e	89 4c 24 30	 mov	 DWORD PTR _scores$[esp+72], ecx
  00142	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00147	89 44 24 50	 mov	 DWORD PTR tv292[esp+64], eax
  0014b	8b 84 ae bc 00
	00 00		 mov	 eax, DWORD PTR [esi+ebp*4+188]
  00152	23 84 be e4 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+228]
  00159	0b 44 24 54	 or	 eax, DWORD PTR _tempScalarInDep$[esp+64]
  0015d	50		 push	 eax
  0015e	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00163	8b 4c 24 54	 mov	 ecx, DWORD PTR tv292[esp+68]
  00167	03 c8		 add	 ecx, eax

; 1795 : 
; 1796 :   comboScalarOutDep23 = srcEntry->scalarOutputDependencies[slot2] | srcEntry->scalarOutputDependencies[slot3];
; 1797 :   comboMiscOutDep23 = srcEntry->miscOutputDependencies[slot2] | srcEntry->miscOutputDependencies[slot3];

  00169	8b 94 9e f8 00
	00 00		 mov	 edx, DWORD PTR [esi+ebx*4+248]
  00170	8b 84 9e e4 00
	00 00		 mov	 eax, DWORD PTR [esi+ebx*4+228]
  00177	0b 84 be e4 00
	00 00		 or	 eax, DWORD PTR [esi+edi*4+228]
  0017e	89 4c 24 40	 mov	 DWORD PTR _scores$[esp+88], ecx
  00182	8b 8c be f8 00
	00 00		 mov	 ecx, DWORD PTR [esi+edi*4+248]

; 1798 : 
; 1799 :   tempScalarInDep = srcEntry->scalarInputDependencies[slot1] & comboScalarOutDep23;

  00189	23 84 ae bc 00
	00 00		 and	 eax, DWORD PTR [esi+ebp*4+188]
  00190	0b ca		 or	 ecx, edx

; 1800 :   tempMiscInDep = srcEntry->miscInputDependencies[slot1] & comboMiscOutDep23;

  00192	23 8c ae d0 00
	00 00		 and	 ecx, DWORD PTR [esi+ebp*4+208]
  00199	89 54 24 5c	 mov	 DWORD PTR tv538[esp+68], edx

; 1801 : 
; 1802 :   scores[2] = 
; 1803 :     OnesCount((srcEntry->scalarInputDependencies[slot3] & srcEntry->scalarOutputDependencies[slot2]) |
; 1804 :               (tempScalarInDep)) +
; 1805 :     OnesCount((srcEntry->miscInputDependencies[slot3] & srcEntry->miscOutputDependencies[slot2]) |
; 1806 :               (tempMiscInDep));

  0019d	8b 94 9e e4 00
	00 00		 mov	 edx, DWORD PTR [esi+ebx*4+228]
  001a4	23 94 be bc 00
	00 00		 and	 edx, DWORD PTR [esi+edi*4+188]
  001ab	89 44 24 58	 mov	 DWORD PTR _tempScalarInDep$[esp+68], eax
  001af	0b d0		 or	 edx, eax
  001b1	52		 push	 edx
  001b2	89 4c 24 58	 mov	 DWORD PTR _tempMiscInDep$[esp+72], ecx
  001b6	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  001bb	89 44 24 64	 mov	 DWORD PTR tv398[esp+72], eax
  001bf	8b 44 24 60	 mov	 eax, DWORD PTR tv538[esp+72]
  001c3	23 84 be d0 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+208]
  001ca	0b 44 24 58	 or	 eax, DWORD PTR _tempMiscInDep$[esp+72]
  001ce	50		 push	 eax
  001cf	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount

; 1807 : 
; 1808 :   scores[5] = 
; 1809 :     OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot3]) |
; 1810 :               (tempScalarInDep)) +
; 1811 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot3]) |
; 1812 :               (tempMiscInDep));

  001d4	8b 94 be f8 00
	00 00		 mov	 edx, DWORD PTR [esi+edi*4+248]
  001db	23 94 9e d0 00
	00 00		 and	 edx, DWORD PTR [esi+ebx*4+208]
  001e2	8b 4c 24 68	 mov	 ecx, DWORD PTR tv398[esp+76]
  001e6	0b 54 24 5c	 or	 edx, DWORD PTR _tempMiscInDep$[esp+76]
  001ea	03 c8		 add	 ecx, eax
  001ec	52		 push	 edx
  001ed	89 4c 24 44	 mov	 DWORD PTR _scores$[esp+92], ecx
  001f1	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  001f6	89 44 24 60	 mov	 DWORD PTR tv389[esp+80], eax
  001fa	8b 84 9e bc 00
	00 00		 mov	 eax, DWORD PTR [esi+ebx*4+188]
  00201	23 84 be e4 00
	00 00		 and	 eax, DWORD PTR [esi+edi*4+228]
  00208	0b 44 24 64	 or	 eax, DWORD PTR _tempScalarInDep$[esp+80]
  0020c	50		 push	 eax
  0020d	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00212	8b 4c 24 64	 mov	 ecx, DWORD PTR tv389[esp+84]

; 1813 : 
; 1814 :   minVal = scores[0];
; 1815 :   minIndex = 0;
; 1816 : 
; 1817 :   for(i = 1; i < 6; i++)
; 1818 :   {
; 1819 :     if(scores[i] <= minVal)

  00216	8b 54 24 44	 mov	 edx, DWORD PTR _scores$[esp+92]
  0021a	03 c8		 add	 ecx, eax
  0021c	8b 44 24 40	 mov	 eax, DWORD PTR _scores$[esp+88]
  00220	83 c4 30	 add	 esp, 48			; 00000030H
  00223	3b d0		 cmp	 edx, eax
  00225	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 0
  0022d	77 0a		 ja	 SHORT $LN18@ScheduleIn

; 1820 :     {
; 1821 :       minIndex = i;

  0022f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 1

; 1822 :       minVal = scores[i];

  00237	eb 02		 jmp	 SHORT $LN3@ScheduleIn
$LN18@ScheduleIn:
  00239	8b d0		 mov	 edx, eax
$LN3@ScheduleIn:

; 1813 : 
; 1814 :   minVal = scores[0];
; 1815 :   minIndex = 0;
; 1816 : 
; 1817 :   for(i = 1; i < 6; i++)
; 1818 :   {
; 1819 :     if(scores[i] <= minVal)

  0023b	8b 44 24 18	 mov	 eax, DWORD PTR _scores$[esp+48]
  0023f	3b c2		 cmp	 eax, edx
  00241	77 0a		 ja	 SHORT $LN11@ScheduleIn

; 1820 :     {
; 1821 :       minIndex = i;

  00243	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 2

; 1822 :       minVal = scores[i];

  0024b	8b d0		 mov	 edx, eax
$LN11@ScheduleIn:
  0024d	8b 44 24 1c	 mov	 eax, DWORD PTR _scores$[esp+52]
  00251	3b c2		 cmp	 eax, edx
  00253	77 0a		 ja	 SHORT $LN13@ScheduleIn
  00255	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 3
  0025d	8b d0		 mov	 edx, eax
$LN13@ScheduleIn:
  0025f	8b 44 24 20	 mov	 eax, DWORD PTR _scores$[esp+56]
  00263	3b c2		 cmp	 eax, edx
  00265	77 0a		 ja	 SHORT $LN19@ScheduleIn
  00267	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 4
  0026f	8b d0		 mov	 edx, eax
$LN19@ScheduleIn:

; 1813 : 
; 1814 :   minVal = scores[0];
; 1815 :   minIndex = 0;
; 1816 : 
; 1817 :   for(i = 1; i < 6; i++)
; 1818 :   {
; 1819 :     if(scores[i] <= minVal)

  00271	3b ca		 cmp	 ecx, edx
  00273	77 08		 ja	 SHORT $LN17@ScheduleIn

; 1820 :     {
; 1821 :       minIndex = i;

  00275	c7 44 24 34 05
	00 00 00	 mov	 DWORD PTR _minIndex$[esp+36], 5
$LN17@ScheduleIn:

; 1823 :     }
; 1824 :   }
; 1825 : 
; 1826 :   destEntry->CopyInstructionData(baseSlot + destSlot1[minIndex], srcEntry, slot1);

  0027d	8b 4c 24 34	 mov	 ecx, DWORD PTR _minIndex$[esp+36]
  00281	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?destSlot1@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[ecx*4]
  00288	8b 4c 24 2c	 mov	 ecx, DWORD PTR _destEntry$[esp+36]
  0028c	55		 push	 ebp
  0028d	8b 6c 24 34	 mov	 ebp, DWORD PTR _baseSlot$[esp+40]
  00291	56		 push	 esi
  00292	03 d5		 add	 edx, ebp
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1827 :   destEntry->CopyInstructionData(baseSlot + destSlot2[minIndex], srcEntry, slot2);

  0029a	8b 4c 24 2c	 mov	 ecx, DWORD PTR _destEntry$[esp+36]
  0029e	53		 push	 ebx
  0029f	8b 5c 24 38	 mov	 ebx, DWORD PTR _minIndex$[esp+40]
  002a3	8b 04 9d 00 00
	00 00		 mov	 eax, DWORD PTR ?destSlot2@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[ebx*4]
  002aa	56		 push	 esi
  002ab	03 c5		 add	 eax, ebp
  002ad	50		 push	 eax
  002ae	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1828 :   destEntry->CopyInstructionData(baseSlot + destSlot3[minIndex], srcEntry, slot3);

  002b3	8b 0c 9d 00 00
	00 00		 mov	 ecx, DWORD PTR ?destSlot3@?1??ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z@4PAIA[ebx*4]
  002ba	57		 push	 edi
  002bb	03 cd		 add	 ecx, ebp
  002bd	56		 push	 esi
  002be	51		 push	 ecx
  002bf	8b 4c 24 38	 mov	 ecx, DWORD PTR _destEntry$[esp+48]
  002c3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  002c8	5f		 pop	 edi
  002c9	5e		 pop	 esi
  002ca	5d		 pop	 ebp
  002cb	5b		 pop	 ebx

; 1829 : }

  002cc	83 c4 18	 add	 esp, 24			; 00000018H
  002cf	c2 18 00	 ret	 24			; 00000018H
?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ENDP ; MPE::ScheduleInstructionTriplet
_TEXT	ENDS
PUBLIC	?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z ; MPE::ScoreInstructionTriplet
; Function compile flags: /Ogtpy
;	COMDAT ?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z
_TEXT	SEGMENT
_srcEntry$ = 8						; size = 4
_slot1$ = 12						; size = 4
_slot2$ = 16						; size = 4
tv217 = 20						; size = 4
_slot3$ = 20						; size = 4
?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z PROC ; MPE::ScoreInstructionTriplet, COMDAT
; _this$ = ecx

; 1832 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 1833 :   uint32 comboScalarOutDep, comboMiscOutDep;
; 1834 : 
; 1835 :   comboMiscOutDep = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR _slot1$[esp+4]
  00006	56		 push	 esi
  00007	8b 74 24 10	 mov	 esi, DWORD PTR _srcEntry$[esp+8]

; 1836 :   comboScalarOutDep = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

  0000b	8b 8c ae e4 00
	00 00		 mov	 ecx, DWORD PTR [esi+ebp*4+228]
  00012	57		 push	 edi
  00013	8b 7c 24 1c	 mov	 edi, DWORD PTR _slot2$[esp+12]
  00017	8b 84 be e4 00
	00 00		 mov	 eax, DWORD PTR [esi+edi*4+228]

; 1837 : 
; 1838 :   return OnesCount((srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1839 :     (srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep)) +
; 1840 :     OnesCount((srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1841 :     (srcEntry->miscInputDependencies[slot3] & comboMiscOutDep));

  0001e	8b 94 be bc 00
	00 00		 mov	 edx, DWORD PTR [esi+edi*4+188]
  00025	8b 9c be f8 00
	00 00		 mov	 ebx, DWORD PTR [esi+edi*4+248]
  0002c	0b 9c ae f8 00
	00 00		 or	 ebx, DWORD PTR [esi+ebp*4+248]
  00033	23 d1		 and	 edx, ecx
  00035	0b c1		 or	 eax, ecx
  00037	8b 4c 24 20	 mov	 ecx, DWORD PTR _slot3$[esp+12]
  0003b	8b 8c 8e bc 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx*4+188]
  00042	23 c8		 and	 ecx, eax
  00044	0b d1		 or	 edx, ecx
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  0004c	8b 54 24 24	 mov	 edx, DWORD PTR _slot3$[esp+16]
  00050	8b 8c 96 d0 00
	00 00		 mov	 ecx, DWORD PTR [esi+edx*4+208]
  00057	8b 94 be d0 00
	00 00		 mov	 edx, DWORD PTR [esi+edi*4+208]
  0005e	23 94 ae f8 00
	00 00		 and	 edx, DWORD PTR [esi+ebp*4+248]
  00065	23 cb		 and	 ecx, ebx
  00067	0b ca		 or	 ecx, edx
  00069	51		 push	 ecx
  0006a	89 44 24 28	 mov	 DWORD PTR tv217[esp+20], eax
  0006e	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00073	8b 4c 24 28	 mov	 ecx, DWORD PTR tv217[esp+20]
  00077	83 c4 08	 add	 esp, 8
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5d		 pop	 ebp
  0007d	03 c1		 add	 eax, ecx
  0007f	5b		 pop	 ebx

; 1842 : }

  00080	c2 10 00	 ret	 16			; 00000010H
?ScoreInstructionTriplet@MPE@@QAEIPAVInstructionCacheEntry@@III@Z ENDP ; MPE::ScoreInstructionTriplet
_TEXT	ENDS
PUBLIC	?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies
; Function compile flags: /Ogtpy
;	COMDAT ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z
_TEXT	SEGMENT
_comboScalarDep$ = 8					; size = 4
_comboMiscDep$ = 12					; size = 4
_srcEntry$ = 16						; size = 4
_slot1$ = 20						; size = 4
_slot2$ = 24						; size = 4
_slot3$ = 28						; size = 4
?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z PROC ; MPE::GetInstructionTripletDependencies, COMDAT
; _this$ = ecx

; 1846 :   uint32 comboScalarOutDep, comboMiscOutDep;
; 1847 : 
; 1848 :   comboMiscOutDep = srcEntry->miscOutputDependencies[slot1] | srcEntry->miscOutputDependencies[slot2];
; 1849 :   comboScalarOutDep = srcEntry->scalarOutputDependencies[slot1] | srcEntry->scalarOutputDependencies[slot2];

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _srcEntry$[esp-4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR _slot2$[esp-4]
  00008	8b 94 88 e4 00
	00 00		 mov	 edx, DWORD PTR [eax+ecx*4+228]
  0000f	53		 push	 ebx
  00010	8b 9c 88 f8 00
	00 00		 mov	 ebx, DWORD PTR [eax+ecx*4+248]
  00017	55		 push	 ebp

; 1850 : 
; 1851 :   *comboMiscDep = (srcEntry->miscInputDependencies[slot2] & srcEntry->miscOutputDependencies[slot1]) |
; 1852 :     (srcEntry->miscInputDependencies[slot3] & comboMiscOutDep);

  00018	8b 6c 24 20	 mov	 ebp, DWORD PTR _slot3$[esp+4]
  0001c	56		 push	 esi
  0001d	8b 74 24 1c	 mov	 esi, DWORD PTR _slot1$[esp+8]
  00021	0b 94 b0 e4 00
	00 00		 or	 edx, DWORD PTR [eax+esi*4+228]
  00028	57		 push	 edi
  00029	8b bc b0 f8 00
	00 00		 mov	 edi, DWORD PTR [eax+esi*4+248]
  00030	0b df		 or	 ebx, edi
  00032	23 9c a8 d0 00
	00 00		 and	 ebx, DWORD PTR [eax+ebp*4+208]
  00039	8b ac 88 d0 00
	00 00		 mov	 ebp, DWORD PTR [eax+ecx*4+208]
  00040	23 ef		 and	 ebp, edi
  00042	8b 7c 24 18	 mov	 edi, DWORD PTR _comboMiscDep$[esp+12]
  00046	0b dd		 or	 ebx, ebp
  00048	89 1f		 mov	 DWORD PTR [edi], ebx

; 1853 :   *comboScalarDep = (srcEntry->scalarInputDependencies[slot2] & srcEntry->scalarOutputDependencies[slot1]) |
; 1854 :     (srcEntry->scalarInputDependencies[slot3] & comboScalarOutDep);

  0004a	8b 7c 24 28	 mov	 edi, DWORD PTR _slot3$[esp+12]
  0004e	8b bc b8 bc 00
	00 00		 mov	 edi, DWORD PTR [eax+edi*4+188]
  00055	8b 8c 88 bc 00
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+188]
  0005c	23 8c b0 e4 00
	00 00		 and	 ecx, DWORD PTR [eax+esi*4+228]
  00063	23 fa		 and	 edi, edx
  00065	8b 54 24 14	 mov	 edx, DWORD PTR _comboScalarDep$[esp+12]
  00069	0b f9		 or	 edi, ecx
  0006b	89 3a		 mov	 DWORD PTR [edx], edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5d		 pop	 ebp
  00070	5b		 pop	 ebx

; 1855 : }

  00071	c2 18 00	 ret	 24			; 00000018H
?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ENDP ; MPE::GetInstructionTripletDependencies
_TEXT	ENDS
PUBLIC	?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
;	COMDAT ?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 03H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotMEM
	DD	03H
	DD	03H
	DD	00H
	DD	00H
	DD	01H
_DATA	ENDS
;	COMDAT ?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 02H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotMUL
	DD	01H
	DD	00H
	DD	02H
	DD	01H
	DD	02H
_DATA	ENDS
;	COMDAT ?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 01H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotALU
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
_DATA	ENDS
;	COMDAT ?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA
_DATA	SEGMENT
?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA DD 00H ; `MPE::ScheduleInstructionQuartet'::`2'::destSlotRCU
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	00H
; Function compile flags: /Ogtpy
_DATA	ENDS
;	COMDAT ?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z
_TEXT	SEGMENT
_tempScalarDep1$ = -40					; size = 4
tv260 = -36						; size = 4
tv181 = -36						; size = 4
_comboScalarOutDep2$ = -32				; size = 4
tv284 = -28						; size = 4
tv69 = -28						; size = 4
_comboMiscOutDep2$ = -28				; size = 4
_scores$ = -24						; size = 24
_destEntry$ = 8						; size = 4
_baseSlot$ = 12						; size = 4
_tempMiscDep1$ = 16					; size = 4
_srcEntry$ = 16						; size = 4
?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z PROC ; MPE::ScheduleInstructionQuartet, COMDAT
; _this$ = ecx

; 1858 : {

  00000	83 ec 28	 sub	 esp, 40			; 00000028H
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi

; 1859 :   static uint32 destSlotRCU[6] = {0,0,1,1,2,0};
; 1860 :   static uint32 destSlotALU[6] = {1,2,2,3,3,3};
; 1861 :   static uint32 destSlotMUL[6] = {2,1,0,2,1,2};
; 1862 :   static uint32 destSlotMEM[6] = {3,3,3,0,0,1};
; 1863 : 
; 1864 :   uint32 comboScalarOutDep1, comboScalarOutDep2;
; 1865 :   uint32 comboMiscOutDep1, comboMiscOutDep2;
; 1866 :   uint32 tempScalarDep1, tempMiscDep1, tempScalarDep2, tempMiscDep2;
; 1867 :   uint32 minVal, minIndex, i;
; 1868 :   uint32 scores[6];
; 1869 : 
; 1870 :   tempScalarDep1 = srcEntry->scalarOutputDependencies[SLOT_RCU] | srcEntry->scalarOutputDependencies[SLOT_MUL];

  00006	8b 74 24 40	 mov	 esi, DWORD PTR _srcEntry$[esp+48]
  0000a	8b 86 f0 00 00
	00		 mov	 eax, DWORD PTR [esi+240]
  00010	0b 86 e8 00 00
	00		 or	 eax, DWORD PTR [esi+232]

; 1871 :   tempMiscDep1 = srcEntry->miscOutputDependencies[SLOT_RCU] | srcEntry->miscOutputDependencies[SLOT_MUL];
; 1872 :   
; 1873 :   comboScalarOutDep1 = srcEntry->scalarOutputDependencies[SLOT_ALU] | tempScalarDep1;
; 1874 :   comboMiscOutDep1 = srcEntry->miscOutputDependencies[SLOT_ALU] | tempMiscDep1;
; 1875 : 
; 1876 :   comboScalarOutDep2 = srcEntry->scalarOutputDependencies[SLOT_MEM] | tempScalarDep1;

  00016	8b 96 f4 00 00
	00		 mov	 edx, DWORD PTR [esi+244]
  0001c	8b 9e 00 01 00
	00		 mov	 ebx, DWORD PTR [esi+256]
  00022	57		 push	 edi
  00023	8b be ec 00 00
	00		 mov	 edi, DWORD PTR [esi+236]

; 1877 :   comboMiscOutDep2 = srcEntry->miscOutputDependencies[SLOT_MEM] | tempMiscDep1;
; 1878 : 
; 1879 :   tempScalarDep2 = srcEntry->scalarInputDependencies[SLOT_MEM] & comboScalarOutDep1;
; 1880 :   tempMiscDep2 = srcEntry->miscInputDependencies[SLOT_MEM] & comboMiscOutDep1;
; 1881 : 
; 1882 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_ALU,SLOT_MUL);

  00029	6a 03		 push	 3
  0002b	8b e9		 mov	 ebp, ecx
  0002d	8b 8e 04 01 00
	00		 mov	 ecx, DWORD PTR [esi+260]
  00033	0b 8e fc 00 00
	00		 or	 ecx, DWORD PTR [esi+252]
  00039	0b d0		 or	 edx, eax
  0003b	6a 02		 push	 2
  0003d	6a 01		 push	 1
  0003f	89 54 24 24	 mov	 DWORD PTR _comboScalarOutDep2$[esp+68], edx
  00043	8b 96 08 01 00
	00		 mov	 edx, DWORD PTR [esi+264]
  00049	0b f8		 or	 edi, eax
  0004b	23 be cc 00 00
	00		 and	 edi, DWORD PTR [esi+204]
  00051	89 44 24 1c	 mov	 DWORD PTR _tempScalarDep1$[esp+68], eax
  00055	0b d1		 or	 edx, ecx
  00057	0b d9		 or	 ebx, ecx
  00059	23 9e e0 00 00
	00		 and	 ebx, DWORD PTR [esi+224]
  0005f	56		 push	 esi
  00060	89 4c 24 54	 mov	 DWORD PTR _tempMiscDep1$[esp+68], ecx
  00064	8d 44 24 54	 lea	 eax, DWORD PTR _tempMiscDep1$[esp+68]
  00068	50		 push	 eax
  00069	8d 4c 24 24	 lea	 ecx, DWORD PTR _tempScalarDep1$[esp+76]
  0006d	51		 push	 ecx
  0006e	8b cd		 mov	 ecx, ebp
  00070	89 54 24 34	 mov	 DWORD PTR _comboMiscOutDep2$[esp+80], edx
  00074	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1883 :   scores[0] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  00079	8b d3		 mov	 edx, ebx
  0007b	0b 54 24 44	 or	 edx, DWORD PTR _tempMiscDep1$[esp+52]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00085	89 44 24 18	 mov	 DWORD PTR tv260[esp+60], eax
  00089	8b c7		 mov	 eax, edi
  0008b	0b 44 24 14	 or	 eax, DWORD PTR _tempScalarDep1$[esp+60]
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00095	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv260[esp+64]
  00099	83 c4 08	 add	 esp, 8

; 1884 : 
; 1885 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_MUL,SLOT_ALU);

  0009c	6a 02		 push	 2
  0009e	6a 03		 push	 3
  000a0	6a 01		 push	 1
  000a2	03 c8		 add	 ecx, eax
  000a4	56		 push	 esi
  000a5	8d 54 24 54	 lea	 edx, DWORD PTR _tempMiscDep1$[esp+68]
  000a9	52		 push	 edx
  000aa	8d 44 24 24	 lea	 eax, DWORD PTR _tempScalarDep1$[esp+76]
  000ae	89 4c 24 34	 mov	 DWORD PTR _scores$[esp+76], ecx
  000b2	50		 push	 eax
  000b3	8b cd		 mov	 ecx, ebp
  000b5	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1886 :   scores[1] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  000ba	8b cb		 mov	 ecx, ebx
  000bc	0b 4c 24 44	 or	 ecx, DWORD PTR _tempMiscDep1$[esp+52]
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  000c6	8b d7		 mov	 edx, edi
  000c8	0b 54 24 14	 or	 edx, DWORD PTR _tempScalarDep1$[esp+60]
  000cc	89 44 24 18	 mov	 DWORD PTR tv181[esp+60], eax
  000d0	52		 push	 edx
  000d1	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  000d6	8b 4c 24 1c	 mov	 ecx, DWORD PTR tv181[esp+64]
  000da	83 c4 08	 add	 esp, 8

; 1887 : 
; 1888 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MUL,SLOT_RCU,SLOT_ALU);

  000dd	6a 02		 push	 2
  000df	6a 01		 push	 1
  000e1	6a 03		 push	 3
  000e3	03 c8		 add	 ecx, eax
  000e5	56		 push	 esi
  000e6	8d 54 24 54	 lea	 edx, DWORD PTR _tempMiscDep1$[esp+68]
  000ea	52		 push	 edx
  000eb	8d 44 24 24	 lea	 eax, DWORD PTR _tempScalarDep1$[esp+76]
  000ef	89 4c 24 38	 mov	 DWORD PTR _scores$[esp+80], ecx
  000f3	50		 push	 eax
  000f4	8b cd		 mov	 ecx, ebp
  000f6	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1889 :   scores[2] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  000fb	0b 5c 24 44	 or	 ebx, DWORD PTR _tempMiscDep1$[esp+52]
  000ff	53		 push	 ebx
  00100	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00105	0b 7c 24 14	 or	 edi, DWORD PTR _tempScalarDep1$[esp+60]
  00109	8b d8		 mov	 ebx, eax
  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount

; 1890 : 
; 1891 :   tempScalarDep2 = srcEntry->scalarInputDependencies[SLOT_ALU] & comboScalarOutDep2;

  00111	8b be c4 00 00
	00		 mov	 edi, DWORD PTR [esi+196]
  00117	23 7c 24 20	 and	 edi, DWORD PTR _comboScalarOutDep2$[esp+64]
  0011b	83 c4 08	 add	 esp, 8

; 1892 :   tempMiscDep2 = srcEntry->miscInputDependencies[SLOT_ALU] & comboMiscOutDep2;
; 1893 : 
; 1894 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MEM,SLOT_RCU,SLOT_MUL);

  0011e	6a 03		 push	 3
  00120	6a 01		 push	 1
  00122	6a 04		 push	 4
  00124	03 d8		 add	 ebx, eax
  00126	56		 push	 esi
  00127	8d 4c 24 54	 lea	 ecx, DWORD PTR _tempMiscDep1$[esp+68]
  0012b	51		 push	 ecx
  0012c	89 5c 24 3c	 mov	 DWORD PTR _scores$[esp+84], ebx
  00130	8b 9e d8 00 00
	00		 mov	 ebx, DWORD PTR [esi+216]
  00136	23 5c 24 30	 and	 ebx, DWORD PTR _comboMiscOutDep2$[esp+76]
  0013a	8d 54 24 24	 lea	 edx, DWORD PTR _tempScalarDep1$[esp+76]
  0013e	52		 push	 edx
  0013f	8b cd		 mov	 ecx, ebp
  00141	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1895 :   scores[3] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  00146	8b c3		 mov	 eax, ebx
  00148	0b 44 24 44	 or	 eax, DWORD PTR _tempMiscDep1$[esp+52]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00152	8b cf		 mov	 ecx, edi
  00154	0b 4c 24 14	 or	 ecx, DWORD PTR _tempScalarDep1$[esp+60]
  00158	89 44 24 20	 mov	 DWORD PTR tv69[esp+60], eax
  0015c	51		 push	 ecx
  0015d	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00162	8b 54 24 24	 mov	 edx, DWORD PTR tv69[esp+64]
  00166	83 c4 08	 add	 esp, 8

; 1896 : 
; 1897 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_MEM,SLOT_MUL,SLOT_RCU);

  00169	6a 01		 push	 1
  0016b	6a 03		 push	 3
  0016d	6a 04		 push	 4
  0016f	03 d0		 add	 edx, eax
  00171	56		 push	 esi
  00172	8d 44 24 54	 lea	 eax, DWORD PTR _tempMiscDep1$[esp+68]
  00176	50		 push	 eax
  00177	8d 4c 24 24	 lea	 ecx, DWORD PTR _tempScalarDep1$[esp+76]
  0017b	51		 push	 ecx
  0017c	8b cd		 mov	 ecx, ebp
  0017e	89 54 24 44	 mov	 DWORD PTR _scores$[esp+92], edx
  00182	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1898 :   scores[4] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  00187	8b d3		 mov	 edx, ebx
  00189	0b 54 24 44	 or	 edx, DWORD PTR _tempMiscDep1$[esp+52]
  0018d	52		 push	 edx
  0018e	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  00193	89 44 24 20	 mov	 DWORD PTR tv284[esp+60], eax
  00197	8b c7		 mov	 eax, edi
  00199	0b 44 24 14	 or	 eax, DWORD PTR _tempScalarDep1$[esp+60]
  0019d	50		 push	 eax
  0019e	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  001a3	8b 4c 24 24	 mov	 ecx, DWORD PTR tv284[esp+64]
  001a7	83 c4 08	 add	 esp, 8

; 1899 :  
; 1900 :   GetInstructionTripletDependencies(&tempScalarDep1,&tempMiscDep1,srcEntry,SLOT_RCU,SLOT_MEM,SLOT_MUL);

  001aa	6a 03		 push	 3
  001ac	6a 04		 push	 4
  001ae	6a 01		 push	 1
  001b0	03 c8		 add	 ecx, eax
  001b2	56		 push	 esi
  001b3	8d 54 24 54	 lea	 edx, DWORD PTR _tempMiscDep1$[esp+68]
  001b7	52		 push	 edx
  001b8	8d 44 24 24	 lea	 eax, DWORD PTR _tempScalarDep1$[esp+76]
  001bc	89 4c 24 44	 mov	 DWORD PTR _scores$[esp+92], ecx
  001c0	50		 push	 eax
  001c1	8b cd		 mov	 ecx, ebp
  001c3	e8 00 00 00 00	 call	 ?GetInstructionTripletDependencies@MPE@@QAEXPAI0PAVInstructionCacheEntry@@III@Z ; MPE::GetInstructionTripletDependencies

; 1901 :   scores[5] = OnesCount(tempScalarDep1 | tempScalarDep2) + OnesCount(tempMiscDep1 | tempMiscDep2);

  001c8	0b 5c 24 44	 or	 ebx, DWORD PTR _tempMiscDep1$[esp+52]
  001cc	53		 push	 ebx
  001cd	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount
  001d2	0b 7c 24 14	 or	 edi, DWORD PTR _tempScalarDep1$[esp+60]
  001d6	8b d8		 mov	 ebx, eax
  001d8	57		 push	 edi
  001d9	e8 00 00 00 00	 call	 ?OnesCount@@YAII@Z	; OnesCount

; 1902 : 
; 1903 :   minVal = scores[0];
; 1904 :   minIndex = 0;
; 1905 : 
; 1906 :   for(i = 1; i < 6; i++)
; 1907 :   {
; 1908 :     if(scores[i] <= minVal)

  001de	8b 4c 24 2c	 mov	 ecx, DWORD PTR _scores$[esp+68]
  001e2	03 d8		 add	 ebx, eax
  001e4	8b 44 24 28	 mov	 eax, DWORD PTR _scores$[esp+64]
  001e8	83 c4 08	 add	 esp, 8
  001eb	33 ff		 xor	 edi, edi
  001ed	3b c8		 cmp	 ecx, eax
  001ef	77 07		 ja	 SHORT $LN3@ScheduleIn@2

; 1909 :     {
; 1910 :       minIndex = i;

  001f1	bf 01 00 00 00	 mov	 edi, 1

; 1911 :       minVal = scores[i];

  001f6	8b c1		 mov	 eax, ecx
$LN3@ScheduleIn@2:
  001f8	8b 4c 24 28	 mov	 ecx, DWORD PTR _scores$[esp+64]
  001fc	3b c8		 cmp	 ecx, eax
  001fe	77 07		 ja	 SHORT $LN19@ScheduleIn@2
  00200	bf 02 00 00 00	 mov	 edi, 2
  00205	8b c1		 mov	 eax, ecx
$LN19@ScheduleIn@2:
  00207	8b 4c 24 2c	 mov	 ecx, DWORD PTR _scores$[esp+68]
  0020b	3b c8		 cmp	 ecx, eax
  0020d	77 07		 ja	 SHORT $LN20@ScheduleIn@2
  0020f	bf 03 00 00 00	 mov	 edi, 3
  00214	8b c1		 mov	 eax, ecx
$LN20@ScheduleIn@2:
  00216	8b 4c 24 30	 mov	 ecx, DWORD PTR _scores$[esp+72]
  0021a	3b c8		 cmp	 ecx, eax
  0021c	77 07		 ja	 SHORT $LN21@ScheduleIn@2
  0021e	bf 04 00 00 00	 mov	 edi, 4
  00223	8b c1		 mov	 eax, ecx
$LN21@ScheduleIn@2:

; 1902 : 
; 1903 :   minVal = scores[0];
; 1904 :   minIndex = 0;
; 1905 : 
; 1906 :   for(i = 1; i < 6; i++)
; 1907 :   {
; 1908 :     if(scores[i] <= minVal)

  00225	3b d8		 cmp	 ebx, eax
  00227	77 05		 ja	 SHORT $LN17@ScheduleIn@2

; 1909 :     {
; 1910 :       minIndex = i;

  00229	bf 05 00 00 00	 mov	 edi, 5
$LN17@ScheduleIn@2:

; 1912 :     }
; 1913 :   }
; 1914 : 
; 1915 :   destEntry->CopyInstructionData(baseSlot + destSlotRCU[minIndex], srcEntry, SLOT_RCU);

  0022e	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?destSlotRCU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[edi*4]
  00235	8b 5c 24 40	 mov	 ebx, DWORD PTR _baseSlot$[esp+52]
  00239	8b 6c 24 3c	 mov	 ebp, DWORD PTR _destEntry$[esp+52]
  0023d	6a 01		 push	 1
  0023f	03 cb		 add	 ecx, ebx
  00241	56		 push	 esi
  00242	51		 push	 ecx
  00243	8b cd		 mov	 ecx, ebp
  00245	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1916 :   destEntry->CopyInstructionData(baseSlot + destSlotALU[minIndex], srcEntry, SLOT_ALU);

  0024a	8b 14 bd 00 00
	00 00		 mov	 edx, DWORD PTR ?destSlotALU@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[edi*4]
  00251	6a 02		 push	 2
  00253	56		 push	 esi
  00254	03 d3		 add	 edx, ebx
  00256	52		 push	 edx
  00257	8b cd		 mov	 ecx, ebp
  00259	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1917 :   destEntry->CopyInstructionData(baseSlot + destSlotMUL[minIndex], srcEntry, SLOT_MUL);

  0025e	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?destSlotMUL@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[edi*4]
  00265	6a 03		 push	 3
  00267	56		 push	 esi
  00268	03 c3		 add	 eax, ebx
  0026a	50		 push	 eax
  0026b	8b cd		 mov	 ecx, ebp
  0026d	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1918 :   destEntry->CopyInstructionData(baseSlot + destSlotMEM[minIndex], srcEntry, SLOT_MEM);

  00272	8b 0c bd 00 00
	00 00		 mov	 ecx, DWORD PTR ?destSlotMEM@?1??ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z@4PAIA[edi*4]
  00279	6a 04		 push	 4
  0027b	03 cb		 add	 ecx, ebx
  0027d	56		 push	 esi
  0027e	51		 push	 ecx
  0027f	8b cd		 mov	 ecx, ebp
  00281	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00286	5f		 pop	 edi
  00287	5e		 pop	 esi
  00288	5d		 pop	 ebp
  00289	5b		 pop	 ebx

; 1919 : }

  0028a	83 c4 28	 add	 esp, 40			; 00000028H
  0028d	c2 0c 00	 ret	 12			; 0000000cH
?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ENDP ; MPE::ScheduleInstructionQuartet
_TEXT	ENDS
PUBLIC	?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z ; LogMemoryLocation
EXTRN	_fprintf:PROC
EXTRN	?SwapScalarBytes@@YIXPAI@Z:PROC			; SwapScalarBytes
EXTRN	?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z:PROC ; NuonEnvironment::GetPointerToMemory
EXTRN	?nuonEnv@@3PAVNuonEnvironment@@A:DWORD		; nuonEnv
; Function compile flags: /Ogtpy
;	COMDAT ?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z
_TEXT	SEGMENT
_value$ = -4						; size = 4
_outFile$ = 8						; size = 4
_varname$ = 12						; size = 4
_address$ = 16						; size = 4
_mpe$ = 20						; size = 4
?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z PROC	; LogMemoryLocation, COMDAT

; 1922 : {

  00000	51		 push	 ecx

; 1923 :   uint32 value = *((uint32 *)nuonEnv->GetPointerToMemory(mpe,address));

  00001	8b 44 24 10	 mov	 eax, DWORD PTR _address$[esp]
  00005	8b 4c 24 14	 mov	 ecx, DWORD PTR _mpe$[esp]
  00009	6a 01		 push	 1
  0000b	50		 push	 eax
  0000c	51		 push	 ecx
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
  00013	e8 00 00 00 00	 call	 ?GetPointerToMemory@NuonEnvironment@@QAEPAXPAVMPE@@I_N@Z ; NuonEnvironment::GetPointerToMemory
  00018	8b 10		 mov	 edx, DWORD PTR [eax]

; 1924 :   SwapScalarBytes(&value);

  0001a	8d 0c 24	 lea	 ecx, DWORD PTR _value$[esp+4]
  0001d	89 14 24	 mov	 DWORD PTR _value$[esp+4], edx
  00020	e8 00 00 00 00	 call	 ?SwapScalarBytes@@YIXPAI@Z ; SwapScalarBytes

; 1925 :   fprintf(outFile,"%s = $%8.8lx\n",varname,value);

  00025	8b 04 24	 mov	 eax, DWORD PTR _value$[esp+4]
  00028	8b 4c 24 0c	 mov	 ecx, DWORD PTR _varname$[esp]
  0002c	8b 54 24 08	 mov	 edx, DWORD PTR _outFile$[esp]
  00030	50		 push	 eax
  00031	51		 push	 ecx
  00032	68 00 00 00 00	 push	 OFFSET $SG53035
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _fprintf

; 1926 : }

  0003d	83 c4 14	 add	 esp, 20			; 00000014H
  00040	c3		 ret	 0
?LogMemoryLocation@@YAXPAU_iobuf@@PADIPAVMPE@@@Z ENDP	; LogMemoryLocation
_TEXT	ENDS
PUBLIC	?UpdateInvalidateRegion@MPE@@QAEXII@Z		; MPE::UpdateInvalidateRegion
; Function compile flags: /Ogtpy
;	COMDAT ?UpdateInvalidateRegion@MPE@@QAEXII@Z
_TEXT	SEGMENT
_start$ = 8						; size = 4
_length$ = 12						; size = 4
?UpdateInvalidateRegion@MPE@@QAEXII@Z PROC		; MPE::UpdateInvalidateRegion, COMDAT
; _this$ = ecx

; 1930 :   uint32 end = (start + length - 1);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _start$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR _length$[esp-4]
  00008	56		 push	 esi
  00009	8d 74 02 ff	 lea	 esi, DWORD PTR [edx+eax-1]

; 1931 : 
; 1932 :   invalidateRegionStart = (((start < invalidateRegionStart) || !invalidateRegionStart) ? start : invalidateRegionStart);

  0000d	8b 81 70 02 00
	00		 mov	 eax, DWORD PTR [ecx+624]
  00013	3b d0		 cmp	 edx, eax
  00015	72 04		 jb	 SHORT $LN3@UpdateInva
  00017	85 c0		 test	 eax, eax
  00019	75 02		 jne	 SHORT $LN4@UpdateInva
$LN3@UpdateInva:
  0001b	8b c2		 mov	 eax, edx
$LN4@UpdateInva:
  0001d	89 81 70 02 00
	00		 mov	 DWORD PTR [ecx+624], eax

; 1933 :   invalidateRegionEnd = ((end > invalidateRegionEnd) ? end : invalidateRegionEnd);

  00023	8b 81 74 02 00
	00		 mov	 eax, DWORD PTR [ecx+628]
  00029	3b f0		 cmp	 esi, eax
  0002b	76 02		 jbe	 SHORT $LN5@UpdateInva
  0002d	8b c6		 mov	 eax, esi
$LN5@UpdateInva:
  0002f	89 81 74 02 00
	00		 mov	 DWORD PTR [ecx+628], eax

; 1934 : 
; 1935 :   interpreterInvalidateRegionStart = (((start < interpreterInvalidateRegionStart) || !interpreterInvalidateRegionStart) ? start : interpreterInvalidateRegionStart);

  00035	8b 81 78 02 00
	00		 mov	 eax, DWORD PTR [ecx+632]
  0003b	3b d0		 cmp	 edx, eax
  0003d	72 04		 jb	 SHORT $LN7@UpdateInva
  0003f	85 c0		 test	 eax, eax
  00041	75 02		 jne	 SHORT $LN8@UpdateInva
$LN7@UpdateInva:
  00043	8b c2		 mov	 eax, edx
$LN8@UpdateInva:
  00045	89 81 78 02 00
	00		 mov	 DWORD PTR [ecx+632], eax

; 1936 :   interpreterInvalidateRegionEnd = ((end > interpreterInvalidateRegionEnd) ? end : interpreterInvalidateRegionEnd);

  0004b	8b 81 7c 02 00
	00		 mov	 eax, DWORD PTR [ecx+636]
  00051	3b f0		 cmp	 esi, eax
  00053	76 0a		 jbe	 SHORT $LN9@UpdateInva
  00055	89 b1 7c 02 00
	00		 mov	 DWORD PTR [ecx+636], esi
  0005b	5e		 pop	 esi

; 1937 : }

  0005c	c2 08 00	 ret	 8
$LN9@UpdateInva:

; 1936 :   interpreterInvalidateRegionEnd = ((end > interpreterInvalidateRegionEnd) ? end : interpreterInvalidateRegionEnd);

  0005f	89 81 7c 02 00
	00		 mov	 DWORD PTR [ecx+636], eax
  00065	5e		 pop	 esi

; 1937 : }

  00066	c2 08 00	 ret	 8
?UpdateInvalidateRegion@MPE@@QAEXII@Z ENDP		; MPE::UpdateInvalidateRegion
_TEXT	ENDS
PUBLIC	?InitStaticICacheEntries@MPE@@QAEXXZ		; MPE::InitStaticICacheEntries
; Function compile flags: /Ogtpy
;	COMDAT ?InitStaticICacheEntries@MPE@@QAEXXZ
_TEXT	SEGMENT
?InitStaticICacheEntries@MPE@@QAEXXZ PROC		; MPE::InitStaticICacheEntries, COMDAT
; _this$ = ecx

; 2338 :   ICacheEntry_SaveRegs.pScalarRegs = tempScalarRegs;

  00000	8d 81 c0 00 00
	00		 lea	 eax, DWORD PTR [ecx+192]
  00006	89 81 4c 03 00
	00		 mov	 DWORD PTR [ecx+844], eax

; 2339 :   ICacheEntry_SaveRegs.pIndexRegs = &tempRx;

  0000c	8d 91 4c 01 00
	00		 lea	 edx, DWORD PTR [ecx+332]
  00012	89 91 50 03 00
	00		 mov	 DWORD PTR [ecx+848], edx

; 2340 :   ICacheEntry_SaveRegs.pRzRegs = &tempRz;

  00018	8d 81 5c 01 00
	00		 lea	 eax, DWORD PTR [ecx+348]
  0001e	89 81 58 03 00
	00		 mov	 DWORD PTR [ecx+856], eax

; 2341 :   ICacheEntry_SaveRegs.pCounterRegs = &tempRc0;

  00024	8d 91 44 01 00
	00		 lea	 edx, DWORD PTR [ecx+324]
  0002a	89 91 54 03 00
	00		 mov	 DWORD PTR [ecx+852], edx

; 2342 :   ICacheEntry_SaveRegs.pAcshift = &tempAcshift;

  00030	8d 81 78 01 00
	00		 lea	 eax, DWORD PTR [ecx+376]
  00036	89 81 5c 03 00
	00		 mov	 DWORD PTR [ecx+860], eax

; 2343 :   ICacheEntry_SaveRegs.pSvshift = &tempSvshift;

  0003c	8d 91 7c 01 00
	00		 lea	 edx, DWORD PTR [ecx+380]
  00042	89 91 60 03 00
	00		 mov	 DWORD PTR [ecx+864], edx

; 2344 :   ICacheEntry_SaveRegs.pXyctl = &tempXyctl;

  00048	8d 81 68 01 00
	00		 lea	 eax, DWORD PTR [ecx+360]
  0004e	89 81 64 03 00
	00		 mov	 DWORD PTR [ecx+868], eax

; 2345 :   ICacheEntry_SaveRegs.pUvctl = &tempUvctl;

  00054	8d 91 6c 01 00
	00		 lea	 edx, DWORD PTR [ecx+364]
  0005a	89 91 68 03 00
	00		 mov	 DWORD PTR [ecx+872], edx

; 2346 :   ICacheEntry_SaveRegs.pXyrange = &tempXyrange;

  00060	8d 81 70 01 00
	00		 lea	 eax, DWORD PTR [ecx+368]
  00066	89 81 6c 03 00
	00		 mov	 DWORD PTR [ecx+876], eax

; 2347 :   ICacheEntry_SaveRegs.pUvrange = &tempUvrange;

  0006c	8d 91 74 01 00
	00		 lea	 edx, DWORD PTR [ecx+372]
  00072	89 91 70 03 00
	00		 mov	 DWORD PTR [ecx+880], edx

; 2348 :   
; 2349 :   ICacheEntry_SaveFlags.pScalarRegs = regs;
; 2350 :   ICacheEntry_SaveFlags.pIndexRegs = &rx;

  00078	8d 81 8c 00 00
	00		 lea	 eax, DWORD PTR [ecx+140]
  0007e	89 81 5c 04 00
	00		 mov	 DWORD PTR [ecx+1116], eax

; 2351 :   ICacheEntry_SaveFlags.pRzRegs = &rz;

  00084	8d 91 9c 00 00
	00		 lea	 edx, DWORD PTR [ecx+156]

; 2352 :   ICacheEntry_SaveFlags.pCounterRegs = &rc0;

  0008a	8d 81 84 00 00
	00		 lea	 eax, DWORD PTR [ecx+132]
  00090	89 91 64 04 00
	00		 mov	 DWORD PTR [ecx+1124], edx
  00096	89 81 60 04 00
	00		 mov	 DWORD PTR [ecx+1120], eax

; 2353 :   ICacheEntry_SaveFlags.pAcshift = &acshift;

  0009c	8d 91 b8 00 00
	00		 lea	 edx, DWORD PTR [ecx+184]

; 2354 :   ICacheEntry_SaveFlags.pSvshift = &svshift;

  000a2	8d 81 bc 00 00
	00		 lea	 eax, DWORD PTR [ecx+188]
  000a8	89 91 68 04 00
	00		 mov	 DWORD PTR [ecx+1128], edx
  000ae	89 81 6c 04 00
	00		 mov	 DWORD PTR [ecx+1132], eax

; 2355 :   ICacheEntry_SaveFlags.pXyctl = &xyctl;

  000b4	8d 91 a8 00 00
	00		 lea	 edx, DWORD PTR [ecx+168]

; 2356 :   ICacheEntry_SaveFlags.pUvctl = &uvctl;

  000ba	8d 81 ac 00 00
	00		 lea	 eax, DWORD PTR [ecx+172]
  000c0	89 91 70 04 00
	00		 mov	 DWORD PTR [ecx+1136], edx
  000c6	89 81 74 04 00
	00		 mov	 DWORD PTR [ecx+1140], eax

; 2357 :   ICacheEntry_SaveFlags.pXyrange = &xyrange;

  000cc	8d 91 b0 00 00
	00		 lea	 edx, DWORD PTR [ecx+176]

; 2358 :   ICacheEntry_SaveFlags.pUvrange = &uvrange;

  000d2	8d 81 b4 00 00
	00		 lea	 eax, DWORD PTR [ecx+180]
  000d8	89 89 58 04 00
	00		 mov	 DWORD PTR [ecx+1112], ecx
  000de	89 91 78 04 00
	00		 mov	 DWORD PTR [ecx+1144], edx
  000e4	89 81 7c 04 00
	00		 mov	 DWORD PTR [ecx+1148], eax

; 2359 : }

  000ea	c3		 ret	 0
?InitStaticICacheEntries@MPE@@QAEXXZ ENDP		; MPE::InitStaticICacheEntries
_TEXT	ENDS
PUBLIC	?SaveRegisters@MPE@@QAEXXZ			; MPE::SaveRegisters
; Function compile flags: /Ogtpy
;	COMDAT ?SaveRegisters@MPE@@QAEXXZ
_TEXT	SEGMENT
?SaveRegisters@MPE@@QAEXXZ PROC				; MPE::SaveRegisters, COMDAT
; _this$ = ecx

; 2362 : {

  00000	56		 push	 esi
  00001	8b c1		 mov	 eax, ecx
  00003	57		 push	 edi

; 2363 :   memcpy(tempScalarRegs, regs, sizeof(uint32) * 32);

  00004	8d b8 c0 00 00
	00		 lea	 edi, DWORD PTR [eax+192]
  0000a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0000f	8b f0		 mov	 esi, eax
  00011	f3 a5		 rep movsd

; 2364 :   memcpy(&tempRc0, &rc0, sizeof(uint32) * 15);

  00013	8d b0 84 00 00
	00		 lea	 esi, DWORD PTR [eax+132]
  00019	8d b8 44 01 00
	00		 lea	 edi, DWORD PTR [eax+324]
  0001f	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00024	f3 a5		 rep movsd
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 2365 : }

  00028	c3		 ret	 0
?SaveRegisters@MPE@@QAEXXZ ENDP				; MPE::SaveRegisters
_TEXT	ENDS
PUBLIC	?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ; MPE::ExecuteNuances
; Function compile flags: /Ogtpy
;	COMDAT ?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z
_TEXT	SEGMENT
_entry$ = 8						; size = 4
?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z PROC ; MPE::ExecuteNuances, COMDAT
; _this$ = ecx

; 2368 : {

  00000	53		 push	 ebx

; 2369 :   uint32 i;
; 2370 : 
; 2371 :   if(entry.packetInfo & PACKETINFO_BREAKPOINT)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _entry$[esp]
  00005	f6 43 18 02	 test	 BYTE PTR [ebx+24], 2
  00009	55		 push	 ebp
  0000a	8b e9		 mov	 ebp, ecx
  0000c	74 23		 je	 SHORT $LN13@ExecuteNua

; 2372 :   {
; 2373 :     excepsrc |= 0x04;

  0000e	b8 04 00 00 00	 mov	 eax, 4
  00013	09 85 84 01 00
	00		 or	 DWORD PTR [ebp+388], eax

; 2374 :     if(excephalten & 0x04)

  00019	84 85 8c 01 00
	00		 test	 BYTE PTR [ebp+396], al
  0001f	74 09		 je	 SHORT $LN7@ExecuteNua

; 2375 :     {
; 2376 :       //clear mpego bit
; 2377 :       mpectl &= ~MPECTRL_MPEGO;

  00021	83 a5 80 01 00
	00 fd		 and	 DWORD PTR [ebp+384], -3	; fffffffdH

; 2378 :     }
; 2379 :     else

  00028	eb 07		 jmp	 SHORT $LN13@ExecuteNua
$LN7@ExecuteNua:

; 2380 :     {
; 2381 :       //set exception bit in interrupt source register
; 2382 :       intsrc |= 0x01;

  0002a	83 8d a4 01 00
	00 01		 or	 DWORD PTR [ebp+420], 1
$LN13@ExecuteNua:

; 2383 :     }
; 2384 :   }
; 2385 : 
; 2386 :   if(!(entry.packetInfo & PACKETINFO_NOP))

  00031	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00034	a8 01		 test	 al, 1
  00036	75 67		 jne	 SHORT $LN1@ExecuteNua

; 2387 :   {
; 2388 :     if(entry.packetInfo & PACKETINFO_DEPENDENCY_PRESENT)

  00038	84 c0		 test	 al, al
  0003a	56		 push	 esi
  0003b	57		 push	 edi
  0003c	79 22		 jns	 SHORT $LN4@ExecuteNua

; 2389 :     {
; 2390 :       memcpy(tempScalarRegs, regs, sizeof(uint32) * 32);

  0003e	8d bd c0 00 00
	00		 lea	 edi, DWORD PTR [ebp+192]
  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	8b f5		 mov	 esi, ebp
  0004b	f3 a5		 rep movsd

; 2391 :       memcpy(&tempRc0, &rc0, sizeof(uint32) * 15);

  0004d	8d b5 84 00 00
	00		 lea	 esi, DWORD PTR [ebp+132]
  00053	8d bd 44 01 00
	00		 lea	 edi, DWORD PTR [ebp+324]
  00059	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0005e	f3 a5		 rep movsd
$LN4@ExecuteNua:

; 2392 :     }
; 2393 : 
; 2394 :     tempCC = cc;

  00060	8b 85 80 00 00
	00		 mov	 eax, DWORD PTR [ebp+128]

; 2395 : 
; 2396 :     for(i = 0; i < entry.nuanceCount; i++)

  00066	33 f6		 xor	 esi, esi
  00068	89 85 40 01 00
	00		 mov	 DWORD PTR [ebp+320], eax
  0006e	39 73 14	 cmp	 DWORD PTR [ebx+20], esi
  00071	76 2a		 jbe	 SHORT $LN14@ExecuteNua

; 2392 :     }
; 2393 : 
; 2394 :     tempCC = cc;

  00073	8d 7b 58	 lea	 edi, DWORD PTR [ebx+88]
  00076	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL3@ExecuteNua:

; 2397 :     {
; 2398 :       (nuanceHandlers[entry.handlers[i]])(*this,entry,*((Nuance *)(&entry.nuances[FIXED_FIELD(i,0)])));

  00080	8b 0c b3	 mov	 ecx, DWORD PTR [ebx+esi*4]
  00083	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA[ecx*4]
  0008a	57		 push	 edi
  0008b	53		 push	 ebx
  0008c	55		 push	 ebp
  0008d	ff d2		 call	 edx
  0008f	83 c6 01	 add	 esi, 1
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
  00095	83 c7 14	 add	 edi, 20			; 00000014H
  00098	3b 73 14	 cmp	 esi, DWORD PTR [ebx+20]
  0009b	72 e3		 jb	 SHORT $LL3@ExecuteNua
$LN14@ExecuteNua:
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
$LN1@ExecuteNua:
  0009f	5d		 pop	 ebp
  000a0	5b		 pop	 ebx

; 2399 :     }
; 2400 :   }
; 2401 : }

  000a1	c2 04 00	 ret	 4
?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ENDP ; MPE::ExecuteNuances
_TEXT	ENDS
PUBLIC	?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ; MPE::DecodeSingleInstruction
EXTRN	?DecodeInstruction_RCU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_RCU16
EXTRN	?DecodeInstruction_ECU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ECU16
EXTRN	?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MUL16
EXTRN	?DecodeInstruction_MEM16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MEM16
EXTRN	?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MUL32
EXTRN	?DecodeInstruction_ALU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ALU32
EXTRN	?DecodeInstruction_MEM32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_MEM32
EXTRN	?DecodeInstruction_ECU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ECU32
EXTRN	?DecodeInstruction_ALU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z:PROC ; MPE::DecodeInstruction_ALU16
; Function compile flags: /Ogtpy
;	COMDAT ?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z
_TEXT	SEGMENT
_iPtr$ = 8						; size = 4
_entry$ = 12						; size = 4
_immExt$ = 16						; size = 4
_bTerminating$ = 20					; size = 4
?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z PROC ; MPE::DecodeSingleInstruction, COMDAT
; _this$ = ecx

; 2404 : {

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 2405 :   //if 16 bit ALU instruction
; 2406 :   uint8 opcode = *iPtr;

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _iPtr$[esp+4]
  00006	8a 1e		 mov	 bl, BYTE PTR [esi]

; 2407 :   if(opcode <= 0x3F)

  00008	80 fb 3f	 cmp	 bl, 63			; 0000003fH
  0000b	57		 push	 edi
  0000c	77 25		 ja	 SHORT $LN21@DecodeSing

; 2408 :   {
; 2409 :     DecodeInstruction_ALU16(iPtr,entry,immExt);

  0000e	8b 7c 24 18	 mov	 edi, DWORD PTR _immExt$[esp+8]
  00012	8b 44 24 14	 mov	 eax, DWORD PTR _entry$[esp+8]
  00016	57		 push	 edi
  00017	50		 push	 eax
  00018	56		 push	 esi
  00019	e8 00 00 00 00	 call	 ?DecodeInstruction_ALU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ALU16

; 2410 :     bTerminating = true;

  0001e	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bTerminating$[esp+8]
  00022	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  00025	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 2461 :       return 2;

  0002d	b0 02		 mov	 al, 2
  0002f	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  00030	c2 10 00	 ret	 16			; 00000010H
$LN21@DecodeSing:

; 2411 :     *immExt = 0;
; 2412 :     return 2;
; 2413 :   }
; 2414 :   else
; 2415 :   {
; 2416 :     //Instruction is not a 16 bit ALU instruction
; 2417 : 
; 2418 :     //If 16 bit non-terminating non-ALU instruction, control instruction
; 2419 :     //or 32 bit immediate extension
; 2420 :     if(opcode < 0x88 || opcode > 0x9F)

  00033	8a d3		 mov	 dl, bl
  00035	80 c2 78	 add	 dl, 120			; 00000078H
  00038	80 fa 17	 cmp	 dl, 23			; 00000017H
  0003b	0f 87 df 00 00
	00		 ja	 $LN18@DecodeSing

; 2462 :     }
; 2463 :     else if(opcode >= 0x90)

  00041	80 fb 90	 cmp	 bl, 144			; 00000090H
  00044	0f 82 ba 00 00
	00		 jb	 $LN8@DecodeSing

; 2464 :     {
; 2465 :       switch((opcode & 0x0C) >> 2)

  0004a	8b 7c 24 18	 mov	 edi, DWORD PTR _immExt$[esp+8]
  0004e	c1 eb 02	 shr	 ebx, 2
  00051	83 e3 03	 and	 ebx, 3
  00054	83 fb 03	 cmp	 ebx, 3
  00057	0f 87 8b 00 00
	00		 ja	 $LN6@DecodeSing
  0005d	ff 24 9d 00 00
	00 00		 jmp	 DWORD PTR $LN25@DecodeSing[ebx*4]
$LN5@DecodeSing:

; 2466 :       {
; 2467 :         case 0:
; 2468 :           DecodeInstruction_ECU32(iPtr,entry,immExt);

  00064	8b 44 24 14	 mov	 eax, DWORD PTR _entry$[esp+8]
  00068	57		 push	 edi
  00069	50		 push	 eax
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 ?DecodeInstruction_ECU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ECU32

; 2478 :           break;
; 2479 :       }
; 2480 : 
; 2481 :       //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 2482 :       bTerminating = *(iPtr + 2) & 0x10;

  00070	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  00073	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bTerminating$[esp+8]
  00077	c0 e8 04	 shr	 al, 4
  0007a	24 01		 and	 al, 1
  0007c	88 01		 mov	 BYTE PTR [ecx], al
  0007e	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi

; 2483 :       *immExt = 0;
; 2484 :       return 4;

  00086	b0 04		 mov	 al, 4
  00088	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  00089	c2 10 00	 ret	 16			; 00000010H
$LN4@DecodeSing:

; 2469 :           break;
; 2470 :         case 1:
; 2471 :           DecodeInstruction_MEM32(iPtr,entry,immExt);

  0008c	8b 54 24 14	 mov	 edx, DWORD PTR _entry$[esp+8]
  00090	57		 push	 edi
  00091	52		 push	 edx
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ?DecodeInstruction_MEM32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MEM32

; 2478 :           break;
; 2479 :       }
; 2480 : 
; 2481 :       //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 2482 :       bTerminating = *(iPtr + 2) & 0x10;

  00098	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  0009b	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bTerminating$[esp+8]
  0009f	c0 e8 04	 shr	 al, 4
  000a2	24 01		 and	 al, 1
  000a4	88 01		 mov	 BYTE PTR [ecx], al
  000a6	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi

; 2483 :       *immExt = 0;
; 2484 :       return 4;

  000ae	b0 04		 mov	 al, 4
  000b0	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  000b1	c2 10 00	 ret	 16			; 00000010H
$LN3@DecodeSing:

; 2472 :           break;
; 2473 :         case 2:
; 2474 :           DecodeInstruction_ALU32(iPtr,entry,immExt);

  000b4	8b 44 24 14	 mov	 eax, DWORD PTR _entry$[esp+8]
  000b8	57		 push	 edi
  000b9	50		 push	 eax
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ?DecodeInstruction_ALU32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ALU32

; 2478 :           break;
; 2479 :       }
; 2480 : 
; 2481 :       //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 2482 :       bTerminating = *(iPtr + 2) & 0x10;

  000c0	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  000c3	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bTerminating$[esp+8]
  000c7	c0 e8 04	 shr	 al, 4
  000ca	24 01		 and	 al, 1
  000cc	88 01		 mov	 BYTE PTR [ecx], al
  000ce	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000d4	5f		 pop	 edi
  000d5	5e		 pop	 esi

; 2483 :       *immExt = 0;
; 2484 :       return 4;

  000d6	b0 04		 mov	 al, 4
  000d8	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  000d9	c2 10 00	 ret	 16			; 00000010H
$LN2@DecodeSing:

; 2475 :           break;
; 2476 :         case 3:
; 2477 :           DecodeInstruction_MUL32(iPtr,entry,immExt);

  000dc	8b 54 24 14	 mov	 edx, DWORD PTR _entry$[esp+8]
  000e0	57		 push	 edi
  000e1	52		 push	 edx
  000e2	56		 push	 esi
  000e3	e8 00 00 00 00	 call	 ?DecodeInstruction_MUL32@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL32
$LN6@DecodeSing:

; 2478 :           break;
; 2479 :       }
; 2480 : 
; 2481 :       //32 bit instruction: if bit 12 is set, instruction is a packet terminator
; 2482 :       bTerminating = *(iPtr + 2) & 0x10;

  000e8	8a 46 02	 mov	 al, BYTE PTR [esi+2]
  000eb	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bTerminating$[esp+8]
  000ef	c0 e8 04	 shr	 al, 4
  000f2	24 01		 and	 al, 1
  000f4	88 01		 mov	 BYTE PTR [ecx], al
  000f6	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  000fc	5f		 pop	 edi
  000fd	5e		 pop	 esi

; 2483 :       *immExt = 0;
; 2484 :       return 4;

  000fe	b0 04		 mov	 al, 4
  00100	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  00101	c2 10 00	 ret	 16			; 00000010H
$LN8@DecodeSing:

; 2485 :     }
; 2486 :     else
; 2487 :     {
; 2488 :       //32 bit extension (preceeding 48/64 bit instruction)
; 2489 :       *immExt = *((uint32 *)iPtr);

  00104	8b 16		 mov	 edx, DWORD PTR [esi]
  00106	8b 4c 24 18	 mov	 ecx, DWORD PTR _immExt$[esp+8]
  0010a	89 11		 mov	 DWORD PTR [ecx], edx

; 2490 :       SwapScalarBytes(immExt);

  0010c	e8 00 00 00 00	 call	 ?SwapScalarBytes@@YIXPAI@Z ; SwapScalarBytes

; 2491 :       bTerminating = false;

  00111	8b 44 24 1c	 mov	 eax, DWORD PTR _bTerminating$[esp+8]
  00115	5f		 pop	 edi
  00116	5e		 pop	 esi
  00117	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2492 :       return 4;

  0011a	b0 04		 mov	 al, 4
  0011c	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  0011d	c2 10 00	 ret	 16			; 00000010H
$LN18@DecodeSing:

; 2421 :     {
; 2422 :       //If not a control instruction (PAD, NOP or BREAKPOINT)
; 2423 :       if((opcode & 0xFC) != 0x80)

  00120	8b 7c 24 18	 mov	 edi, DWORD PTR _immExt$[esp+8]
  00124	8a d3		 mov	 dl, bl
  00126	80 e2 fc	 and	 dl, 252			; 000000fcH
  00129	80 fa 80	 cmp	 dl, 128			; 00000080H
  0012c	0f 84 99 00 00
	00		 je	 $LN17@DecodeSing

; 2424 :       {
; 2425 :         if((opcode & 0x7F) <= 0x67)

  00132	8a c3		 mov	 al, bl
  00134	24 7f		 and	 al, 127			; 0000007fH
  00136	3c 67		 cmp	 al, 103			; 00000067H

; 2428 :           {
; 2429 :             DecodeInstruction_MEM16(iPtr,entry,immExt);

  00138	57		 push	 edi
  00139	77 48		 ja	 SHORT $LN16@DecodeSing

; 2426 :         {
; 2427 :           if((opcode & 0x7F) >= 0x48)

  0013b	3c 48		 cmp	 al, 72			; 00000048H
  0013d	72 22		 jb	 SHORT $LN15@DecodeSing

; 2428 :           {
; 2429 :             DecodeInstruction_MEM16(iPtr,entry,immExt);

  0013f	8b 44 24 18	 mov	 eax, DWORD PTR _entry$[esp+12]
  00143	50		 push	 eax
  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 ?DecodeInstruction_MEM16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MEM16

; 2445 :           }
; 2446 :         }
; 2447 : 
; 2448 :         //if bit 15 is set, the instruction is a packet terminator
; 2449 :         bTerminating = (opcode & 0x80);

  0014a	8b 44 24 1c	 mov	 eax, DWORD PTR _bTerminating$[esp+8]
  0014e	c0 eb 07	 shr	 bl, 7
  00151	88 18		 mov	 BYTE PTR [eax], bl

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  00153	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00159	5f		 pop	 edi
  0015a	5e		 pop	 esi

; 2461 :       return 2;

  0015b	b0 02		 mov	 al, 2
  0015d	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  0015e	c2 10 00	 ret	 16			; 00000010H
$LN15@DecodeSing:

; 2430 :           }
; 2431 :           else
; 2432 :           {
; 2433 :             DecodeInstruction_MUL16(iPtr,entry,immExt);

  00161	8b 54 24 18	 mov	 edx, DWORD PTR _entry$[esp+12]
  00165	52		 push	 edx
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 ?DecodeInstruction_MUL16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_MUL16

; 2445 :           }
; 2446 :         }
; 2447 : 
; 2448 :         //if bit 15 is set, the instruction is a packet terminator
; 2449 :         bTerminating = (opcode & 0x80);

  0016c	8b 44 24 1c	 mov	 eax, DWORD PTR _bTerminating$[esp+8]
  00170	c0 eb 07	 shr	 bl, 7
  00173	88 18		 mov	 BYTE PTR [eax], bl

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  00175	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi

; 2461 :       return 2;

  0017d	b0 02		 mov	 al, 2
  0017f	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  00180	c2 10 00	 ret	 16			; 00000010H
$LN16@DecodeSing:

; 2434 :           }
; 2435 :         }
; 2436 :         else
; 2437 :         {
; 2438 :           if((opcode & 0x7F) <= 0x73)

  00183	3c 73		 cmp	 al, 115			; 00000073H
  00185	77 22		 ja	 SHORT $LN12@DecodeSing

; 2439 :           {
; 2440 :             DecodeInstruction_ECU16(iPtr,entry,immExt);

  00187	8b 44 24 18	 mov	 eax, DWORD PTR _entry$[esp+12]
  0018b	50		 push	 eax
  0018c	56		 push	 esi
  0018d	e8 00 00 00 00	 call	 ?DecodeInstruction_ECU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_ECU16

; 2445 :           }
; 2446 :         }
; 2447 : 
; 2448 :         //if bit 15 is set, the instruction is a packet terminator
; 2449 :         bTerminating = (opcode & 0x80);

  00192	8b 44 24 1c	 mov	 eax, DWORD PTR _bTerminating$[esp+8]
  00196	c0 eb 07	 shr	 bl, 7
  00199	88 18		 mov	 BYTE PTR [eax], bl

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  0019b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi

; 2461 :       return 2;

  001a3	b0 02		 mov	 al, 2
  001a5	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  001a6	c2 10 00	 ret	 16			; 00000010H
$LN12@DecodeSing:

; 2441 :           }
; 2442 :           else
; 2443 :           {
; 2444 :             DecodeInstruction_RCU16(iPtr,entry,immExt);

  001a9	8b 54 24 18	 mov	 edx, DWORD PTR _entry$[esp+12]
  001ad	52		 push	 edx
  001ae	56		 push	 esi
  001af	e8 00 00 00 00	 call	 ?DecodeInstruction_RCU16@MPE@@QAEXPAEPAVInstructionCacheEntry@@PAI@Z ; MPE::DecodeInstruction_RCU16

; 2445 :           }
; 2446 :         }
; 2447 : 
; 2448 :         //if bit 15 is set, the instruction is a packet terminator
; 2449 :         bTerminating = (opcode & 0x80);

  001b4	8b 44 24 1c	 mov	 eax, DWORD PTR _bTerminating$[esp+8]
  001b8	c0 eb 07	 shr	 bl, 7
  001bb	88 18		 mov	 BYTE PTR [eax], bl

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  001bd	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi

; 2461 :       return 2;

  001c5	b0 02		 mov	 al, 2
  001c7	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  001c8	c2 10 00	 ret	 16			; 00000010H
$LN17@DecodeSing:

; 2450 :       }
; 2451 :       else
; 2452 :       {
; 2453 :         //PAD, NOP, or BREAKPOINT.
; 2454 :         entry->packetInfo |= (opcode & 0x03);

  001cb	8b 44 24 14	 mov	 eax, DWORD PTR _entry$[esp+8]

; 2455 : 
; 2456 :         //if bit 8 is set, the instruction is a terminating breakpoint or NOP
; 2457 :         bTerminating = (opcode & 0x01);

  001cf	8b 54 24 1c	 mov	 edx, DWORD PTR _bTerminating$[esp+8]
  001d3	0f b6 cb	 movzx	 ecx, bl
  001d6	83 e1 03	 and	 ecx, 3
  001d9	09 48 18	 or	 DWORD PTR [eax+24], ecx
  001dc	80 e3 01	 and	 bl, 1
  001df	88 1a		 mov	 BYTE PTR [edx], bl

; 2458 :       }
; 2459 : 
; 2460 :       *immExt = 0;

  001e1	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi

; 2461 :       return 2;

  001e9	b0 02		 mov	 al, 2
  001eb	5b		 pop	 ebx

; 2493 :     }
; 2494 :   }
; 2495 :   return 0;
; 2496 : }

  001ec	c2 10 00	 ret	 16			; 00000010H
  001ef	90		 npad	 1
$LN25@DecodeSing:
  001f0	00 00 00 00	 DD	 $LN5@DecodeSing
  001f4	00 00 00 00	 DD	 $LN4@DecodeSing
  001f8	00 00 00 00	 DD	 $LN3@DecodeSing
  001fc	00 00 00 00	 DD	 $LN2@DecodeSing
?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ENDP ; MPE::DecodeSingleInstruction
_TEXT	ENDS
PUBLIC	?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ; MPE::CompileNativeCodeBlock
EXTRN	?CompileBlock@SuperBlock@@QAEP6AXXZPAVMPE@@IAAVNativeCodeCache@@W4SuperBlockCompileType@@_NAA_N@Z:PROC ; SuperBlock::CompileBlock
; Function compile flags: /Ogtpy
;	COMDAT ?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z
_TEXT	SEGMENT
_pcexec$ = 8						; size = 4
_compileType$ = 12					; size = 4
_bError$ = 16						; size = 4
_bSinglePacket$ = 20					; size = 1
?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z PROC ; MPE::CompileNativeCodeBlock, COMDAT
; _this$ = ecx

; 2500 :   return superBlock->CompileBlock(this, pcexec, *nativeCodeCache, compileType, bSinglePacket, bError);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _bError$[esp-4]
  00004	8b 54 24 10	 mov	 edx, DWORD PTR _bSinglePacket$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 0c	 mov	 eax, DWORD PTR _compileType$[esp]
  0000d	52		 push	 edx
  0000e	8b 91 a8 02 00
	00		 mov	 edx, DWORD PTR [ecx+680]
  00014	50		 push	 eax
  00015	8b 44 24 10	 mov	 eax, DWORD PTR _pcexec$[esp+8]
  00019	52		 push	 edx
  0001a	50		 push	 eax
  0001b	51		 push	 ecx
  0001c	8b 89 a4 02 00
	00		 mov	 ecx, DWORD PTR [ecx+676]
  00022	e8 00 00 00 00	 call	 ?CompileBlock@SuperBlock@@QAEP6AXXZPAVMPE@@IAAVNativeCodeCache@@W4SuperBlockCompileType@@_NAA_N@Z ; SuperBlock::CompileBlock

; 2501 : }

  00027	c2 10 00	 ret	 16			; 00000010H
?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ENDP ; MPE::CompileNativeCodeBlock
_TEXT	ENDS
PUBLIC	?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket
EXTRN	_sprintf:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_entry$ = 12						; size = 4
?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z PROC ; MPE::PrintInstructionCachePacket, COMDAT
; _this$ = ecx

; 2504 : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi

; 2505 :   if(entry.nuanceCount != 0)

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR _entry$[esp+8]
  00007	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000a	85 c0		 test	 eax, eax
  0000c	74 35		 je	 SHORT $LN12@PrintInstr

; 2506 :   {
; 2507 :     for(uint32 i = 0; i < entry.nuanceCount; i++)

  0000e	33 f6		 xor	 esi, esi
  00010	85 c0		 test	 eax, eax
  00012	76 2f		 jbe	 SHORT $LN12@PrintInstr
  00014	8b 6c 24 10	 mov	 ebp, DWORD PTR _buffer$[esp+8]
  00018	53		 push	 ebx
  00019	8d 5f 58	 lea	 ebx, DWORD PTR [edi+88]
  0001c	8d 64 24 00	 npad	 4
$LL6@PrintInstr:

; 2508 :     {
; 2509 :       buffer += (printHandlers[entry.handlers[i]])(buffer, *((Nuance *)(&entry.nuances[FIXED_FIELD(i,0)])), true);

  00020	8b 04 b7	 mov	 eax, DWORD PTR [edi+esi*4]
  00023	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?printHandlers@@3PAP6AIPADAAVNuance@@_N@ZA[eax*4]
  0002a	6a 01		 push	 1
  0002c	53		 push	 ebx
  0002d	55		 push	 ebp
  0002e	ff d1		 call	 ecx
  00030	83 c6 01	 add	 esi, 1
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH
  00036	03 e8		 add	 ebp, eax
  00038	83 c3 14	 add	 ebx, 20			; 00000014H
  0003b	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0003e	72 e0		 jb	 SHORT $LL6@PrintInstr
  00040	5b		 pop	 ebx

; 2506 :   {
; 2507 :     for(uint32 i = 0; i < entry.nuanceCount; i++)

  00041	eb 04		 jmp	 SHORT $LN4@PrintInstr
$LN12@PrintInstr:
  00043	8b 6c 24 10	 mov	 ebp, DWORD PTR _buffer$[esp+8]
$LN4@PrintInstr:

; 2510 :     }
; 2511 :   }
; 2512 :   
; 2513 :   if(entry.packetInfo & PACKETINFO_BREAKPOINT)

  00047	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0004a	a8 02		 test	 al, 2
  0004c	74 14		 je	 SHORT $LN3@PrintInstr

; 2514 :   {
; 2515 :       sprintf(buffer,"breakpoint\n");

  0004e	68 00 00 00 00	 push	 OFFSET $SG53209

; 2518 :   {
; 2519 :     sprintf(buffer,"nop\n");

  00053	55		 push	 ebp
  00054	e8 00 00 00 00	 call	 _sprintf
  00059	83 c4 08	 add	 esp, 8
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp

; 2520 :   }
; 2521 : }

  0005f	c2 08 00	 ret	 8
$LN3@PrintInstr:

; 2516 :   }
; 2517 :   else if(entry.packetInfo & PACKETINFO_NOP)

  00062	a8 01		 test	 al, 1
  00064	74 0e		 je	 SHORT $LN1@PrintInstr

; 2518 :   {
; 2519 :     sprintf(buffer,"nop\n");

  00066	68 00 00 00 00	 push	 OFFSET $SG53212
  0006b	55		 push	 ebp
  0006c	e8 00 00 00 00	 call	 _sprintf
  00071	83 c4 08	 add	 esp, 8
$LN1@PrintInstr:
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp

; 2520 :   }
; 2521 : }

  00077	c2 08 00	 ret	 8
?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ENDP ; MPE::PrintInstructionCachePacket
_TEXT	ENDS
PUBLIC	??0MPE@@QAE@I@Z					; MPE::MPE
EXTRN	?commLogFile@@3PAU_iobuf@@A:DWORD		; commLogFile
EXTRN	_fopen:PROC
EXTRN	??0SuperBlock@@QAE@PAVMPE@@II@Z:PROC		; SuperBlock::SuperBlock
EXTRN	??0OverlayManager@@QAE@XZ:PROC			; OverlayManager::OverlayManager
EXTRN	??0InstructionCache@@QAE@I@Z:PROC		; InstructionCache::InstructionCache
EXTRN	??0NativeCodeCache@@QAE@III@Z:PROC		; NativeCodeCache::NativeCodeCache
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___CxxFrameHandler3:PROC
;	COMDAT xdata$x
; File c:\nuanceexperimental\nativecodecache.h
xdata$x	SEGMENT
__unwindtable$??0MPE@@QAE@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0MPE@@QAE@I@Z$3
__ehfuncinfo$??0MPE@@QAE@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0MPE@@QAE@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\nuanceexperimental\mpe.cpp
xdata$x	ENDS
;	COMDAT ??0MPE@@QAE@I@Z
_TEXT	SEGMENT
_numTLBEntries$ = -108					; size = 16
_numCacheEntries$ = -92					; size = 16
_overlayLengths$ = -76					; size = 16
_emitvars$ = -60					; size = 48
__$EHRec$ = -12						; size = 12
$T54994 = 8						; size = 4
$T54990 = 8						; size = 4
$T54986 = 8						; size = 4
$T54982 = 8						; size = 4
_index$ = 8						; size = 4
??0MPE@@QAE@I@Z PROC					; MPE::MPE, COMDAT
; _this$ = ecx

; 773  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0MPE@@QAE@I@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:0, esp
  00015	83 ec 60	 sub	 esp, 96			; 00000060H
  00018	53		 push	 ebx

; 774  :   EmitterVariables emitvars;
; 775  :   uint32 numCacheEntries[] = {4096,2048,2048,262144};

  00019	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  0001e	55		 push	 ebp
  0001f	8b e9		 mov	 ebp, ecx
  00021	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00026	56		 push	 esi
  00027	89 44 24 1c	 mov	 DWORD PTR _numCacheEntries$[esp+120], eax

; 776  :   uint32 numTLBEntries[] = {4096,2048,2048,98304};

  0002b	89 44 24 0c	 mov	 DWORD PTR _numTLBEntries$[esp+120], eax

; 777  :   uint32 overlayLengths[] = {8192,4096,4096,4096};

  0002f	89 44 24 30	 mov	 DWORD PTR _overlayLengths$[esp+124], eax
  00033	89 44 24 34	 mov	 DWORD PTR _overlayLengths$[esp+128], eax
  00037	89 44 24 38	 mov	 DWORD PTR _overlayLengths$[esp+132], eax

; 778  : 
; 779  :   numInterpreterCacheFlushes = 0;
; 780  :   numNativeCodeCacheFlushes = 0;
; 781  :   numNonCompilablePackets = 0;
; 782  :   mpeIndex = index;

  0003b	8b 44 24 7c	 mov	 eax, DWORD PTR _index$[esp+116]
  0003f	33 db		 xor	 ebx, ebx

; 783  :   bStrictMemoryDependencyPolicy = true;
; 784  :   strictMemoryMiscInputDependencies = 0xFFFFFFFF;

  00041	83 ce ff	 or	 esi, -1

; 785  :   strictMemoryMiscOutputDependencies = 0xFFFFFFFF;
; 786  :   AllocateMPELocalMemory();

  00044	68 00 00 80 00	 push	 8388608			; 00800000H
  00049	89 4c 24 24	 mov	 DWORD PTR _numCacheEntries$[esp+128], ecx
  0004d	89 4c 24 28	 mov	 DWORD PTR _numCacheEntries$[esp+132], ecx
  00051	c7 44 24 2c 00
	00 04 00	 mov	 DWORD PTR _numCacheEntries$[esp+136], 262144 ; 00040000H
  00059	89 4c 24 14	 mov	 DWORD PTR _numTLBEntries$[esp+128], ecx
  0005d	89 4c 24 18	 mov	 DWORD PTR _numTLBEntries$[esp+132], ecx
  00061	c7 44 24 1c 00
	80 01 00	 mov	 DWORD PTR _numTLBEntries$[esp+136], 98304 ; 00018000H
  00069	c7 44 24 30 00
	20 00 00	 mov	 DWORD PTR _overlayLengths$[esp+124], 8192 ; 00002000H
  00071	89 9d 84 02 00
	00		 mov	 DWORD PTR [ebp+644], ebx
  00077	89 9d 88 02 00
	00		 mov	 DWORD PTR [ebp+648], ebx
  0007d	89 9d 8c 02 00
	00		 mov	 DWORD PTR [ebp+652], ebx
  00083	89 85 98 02 00
	00		 mov	 DWORD PTR [ebp+664], eax
  00089	c6 85 40 05 00
	00 01		 mov	 BYTE PTR [ebp+1344], 1
  00090	89 b5 44 05 00
	00		 mov	 DWORD PTR [ebp+1348], esi
  00096	89 b5 48 05 00
	00		 mov	 DWORD PTR [ebp+1352], esi
  0009c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000a1	83 c4 04	 add	 esp, 4

; 787  :   GenerateMirrorLookupTable();

  000a4	8b cd		 mov	 ecx, ebp
  000a6	89 85 30 02 00
	00		 mov	 DWORD PTR [ebp+560], eax
  000ac	e8 00 00 00 00	 call	 ?GenerateMirrorLookupTable@MPE@@QAEXXZ ; MPE::GenerateMirrorLookupTable

; 788  :   nativeCodeCache = new NativeCodeCache(5UL*1024UL*1024UL, 0, numTLBEntries[mpeIndex & 0x03]);

  000b1	6a 4c		 push	 76			; 0000004cH
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b8	83 c4 04	 add	 esp, 4
  000bb	89 44 24 7c	 mov	 DWORD PTR $T54982[esp+116], eax
  000bf	3b c3		 cmp	 eax, ebx
  000c1	89 5c 24 74	 mov	 DWORD PTR __$EHRec$[esp+128], ebx
  000c5	74 1d		 je	 SHORT $LN6@MPE
  000c7	8b 8d 98 02 00
	00		 mov	 ecx, DWORD PTR [ebp+664]
  000cd	83 e1 03	 and	 ecx, 3
  000d0	8b 54 8c 0c	 mov	 edx, DWORD PTR _numTLBEntries$[esp+ecx*4+120]
  000d4	52		 push	 edx
  000d5	53		 push	 ebx
  000d6	68 00 00 50 00	 push	 5242880			; 00500000H
  000db	8b c8		 mov	 ecx, eax
  000dd	e8 00 00 00 00	 call	 ??0NativeCodeCache@@QAE@III@Z ; NativeCodeCache::NativeCodeCache
  000e2	eb 02		 jmp	 SHORT $LN7@MPE
$LN6@MPE:
  000e4	33 c0		 xor	 eax, eax
$LN7@MPE:

; 789  :   instructionCache = new InstructionCache(numCacheEntries[mpeIndex & 0x03]);

  000e6	6a 0c		 push	 12			; 0000000cH
  000e8	89 74 24 78	 mov	 DWORD PTR __$EHRec$[esp+132], esi
  000ec	89 85 a8 02 00
	00		 mov	 DWORD PTR [ebp+680], eax
  000f2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f7	83 c4 04	 add	 esp, 4
  000fa	89 44 24 7c	 mov	 DWORD PTR $T54986[esp+116], eax
  000fe	3b c3		 cmp	 eax, ebx
  00100	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+128], 1
  00108	74 17		 je	 SHORT $LN8@MPE
  0010a	8b 8d 98 02 00
	00		 mov	 ecx, DWORD PTR [ebp+664]
  00110	83 e1 03	 and	 ecx, 3
  00113	8b 54 8c 1c	 mov	 edx, DWORD PTR _numCacheEntries$[esp+ecx*4+120]
  00117	52		 push	 edx
  00118	8b c8		 mov	 ecx, eax
  0011a	e8 00 00 00 00	 call	 ??0InstructionCache@@QAE@I@Z ; InstructionCache::InstructionCache
  0011f	eb 02		 jmp	 SHORT $LN9@MPE
$LN8@MPE:
  00121	33 c0		 xor	 eax, eax
$LN9@MPE:

; 790  :   overlayManager = new OverlayManager();

  00123	68 0c 06 00 00	 push	 1548			; 0000060cH
  00128	89 74 24 78	 mov	 DWORD PTR __$EHRec$[esp+132], esi
  0012c	89 85 a0 02 00
	00		 mov	 DWORD PTR [ebp+672], eax
  00132	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00137	83 c4 04	 add	 esp, 4
  0013a	89 44 24 7c	 mov	 DWORD PTR $T54990[esp+116], eax
  0013e	3b c3		 cmp	 eax, ebx
  00140	c7 44 24 74 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+128], 2
  00148	74 09		 je	 SHORT $LN10@MPE
  0014a	8b c8		 mov	 ecx, eax
  0014c	e8 00 00 00 00	 call	 ??0OverlayManager@@QAE@XZ ; OverlayManager::OverlayManager
  00151	eb 02		 jmp	 SHORT $LN11@MPE
$LN10@MPE:
  00153	33 c0		 xor	 eax, eax
$LN11@MPE:

; 791  :   overlayManager->SetOverlayLength(overlayLengths[mpeIndex]);

  00155	8b 8d 98 02 00
	00		 mov	 ecx, DWORD PTR [ebp+664]
  0015b	8b 4c 8c 2c	 mov	 ecx, DWORD PTR _overlayLengths$[esp+ecx*4+120]
  0015f	89 85 ac 02 00
	00		 mov	 DWORD PTR [ebp+684], eax
  00165	89 88 08 06 00
	00		 mov	 DWORD PTR [eax+1544], ecx

; 792  :   bInvalidateInstructionCaches = false;
; 793  :   bInvalidateInterpreterCache = false;
; 794  :   
; 795  :   interpretNextPacket = 0;
; 796  : 
; 797  :   emitvars.mpe = this;
; 798  :   emitvars.codeCache = nativeCodeCache;

  0016b	8b 85 a8 02 00
	00		 mov	 eax, DWORD PTR [ebp+680]

; 799  :   emitvars.regBase = (uint32)&cc;
; 800  :   emitvars.tempRegBase = (uint32)&tempCC;

  00171	8d 8d 40 01 00
	00		 lea	 ecx, DWORD PTR [ebp+320]
  00177	89 4c 24 54	 mov	 DWORD PTR _emitvars$[esp+144], ecx
  0017b	88 9d 81 02 00
	00		 mov	 BYTE PTR [ebp+641], bl
  00181	88 9d 80 02 00
	00		 mov	 BYTE PTR [ebp+640], bl
  00187	89 9d 6c 02 00
	00		 mov	 DWORD PTR [ebp+620], ebx

; 801  :   emitvars.ppEmitLoc = nativeCodeCache->GetEmitPointerAddress();
; 802  :   emitvars.patchMgr = nativeCodeCache->patchMgr;

  0018d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018f	8d 95 80 00 00
	00		 lea	 edx, DWORD PTR [ebp+128]
  00195	89 54 24 50	 mov	 DWORD PTR _emitvars$[esp+140], edx
  00199	57		 push	 edi
  0019a	89 74 24 78	 mov	 DWORD PTR __$EHRec$[esp+132], esi
  0019e	89 4c 24 48	 mov	 DWORD PTR _emitvars$[esp+132], ecx
  001a2	8d 50 04	 lea	 edx, DWORD PTR [eax+4]

; 803  :   nativeCodeCache->SetEmitVars(emitvars);

  001a5	8d 78 1c	 lea	 edi, DWORD PTR [eax+28]
  001a8	89 44 24 44	 mov	 DWORD PTR _emitvars$[esp+128], eax
  001ac	89 54 24 6c	 mov	 DWORD PTR _emitvars$[esp+168], edx
  001b0	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  001b5	8d 74 24 40	 lea	 esi, DWORD PTR _emitvars$[esp+124]
  001b9	89 6c 24 40	 mov	 DWORD PTR _emitvars$[esp+124], ebp

; 804  : 
; 805  :   //SuperBlock(mpe,maxPackets, maxInstructionsPerPacket)
; 806  :   superBlock = new SuperBlock(this,120,5);

  001bd	6a 40		 push	 64			; 00000040H
  001bf	f3 a5		 rep movsd
  001c1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001c6	83 c4 04	 add	 esp, 4
  001c9	89 84 24 80 00
	00 00		 mov	 DWORD PTR $T54994[esp+120], eax
  001d0	3b c3		 cmp	 eax, ebx
  001d2	c7 44 24 78 03
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+132], 3
  001da	5f		 pop	 edi
  001db	74 0e		 je	 SHORT $LN12@MPE
  001dd	6a 05		 push	 5
  001df	6a 78		 push	 120			; 00000078H
  001e1	55		 push	 ebp
  001e2	8b c8		 mov	 ecx, eax
  001e4	e8 00 00 00 00	 call	 ??0SuperBlock@@QAE@PAVMPE@@II@Z ; SuperBlock::SuperBlock
  001e9	eb 02		 jmp	 SHORT $LN13@MPE
$LN12@MPE:
  001eb	33 c0		 xor	 eax, eax
$LN13@MPE:

; 807  :   InitStaticICacheEntries();

  001ed	8b cd		 mov	 ecx, ebp
  001ef	c7 44 24 74 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+128], -1
  001f7	89 85 a4 02 00
	00		 mov	 DWORD PTR [ebp+676], eax
  001fd	e8 00 00 00 00	 call	 ?InitStaticICacheEntries@MPE@@QAEXXZ ; MPE::InitStaticICacheEntries

; 808  :   if(mpeIndex == LOG_MPE_INDEX)

  00202	83 bd 98 02 00
	00 01		 cmp	 DWORD PTR [ebp+664], 1
  00209	75 3e		 jne	 SHORT $LN1@MPE

; 809  :   {      
; 810  :     if(!logfile)

  0020b	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?logfile@@3PAU_iobuf@@A, ebx ; logfile
  00211	75 17		 jne	 SHORT $LN2@MPE

; 811  :     {
; 812  :       logfile = fopen("logfile","w");

  00213	68 00 00 00 00	 push	 OFFSET $SG52673
  00218	68 00 00 00 00	 push	 OFFSET $SG52674
  0021d	e8 00 00 00 00	 call	 _fopen
  00222	83 c4 08	 add	 esp, 8
  00225	a3 00 00 00 00	 mov	 DWORD PTR ?logfile@@3PAU_iobuf@@A, eax ; logfile
$LN2@MPE:

; 813  :     }
; 814  : 
; 815  :     if(!commLogFile)

  0022a	39 1d 00 00 00
	00		 cmp	 DWORD PTR ?commLogFile@@3PAU_iobuf@@A, ebx ; commLogFile
  00230	75 17		 jne	 SHORT $LN1@MPE

; 816  :     {
; 817  :       commLogFile = fopen("commlog","w");

  00232	68 00 00 00 00	 push	 OFFSET $SG52676
  00237	68 00 00 00 00	 push	 OFFSET $SG52677
  0023c	e8 00 00 00 00	 call	 _fopen
  00241	83 c4 08	 add	 esp, 8
  00244	a3 00 00 00 00	 mov	 DWORD PTR ?commLogFile@@3PAU_iobuf@@A, eax ; commLogFile
$LN1@MPE:

; 818  :     }
; 819  :   }
; 820  :   Reset();

  00249	8b cd		 mov	 ecx, ebp
  0024b	e8 00 00 00 00	 call	 ?Reset@MPE@@QAEXXZ	; MPE::Reset

; 821  : }

  00250	8b 4c 24 6c	 mov	 ecx, DWORD PTR __$EHRec$[esp+120]
  00254	5e		 pop	 esi
  00255	8b c5		 mov	 eax, ebp
  00257	5d		 pop	 ebp
  00258	5b		 pop	 ebx
  00259	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00260	83 c4 6c	 add	 esp, 108		; 0000006cH
  00263	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0MPE@@QAE@I@Z$0:
  00000	8b 45 04	 mov	 eax, DWORD PTR $T54982[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__unwindfunclet$??0MPE@@QAE@I@Z$1:
  0000b	8b 45 04	 mov	 eax, DWORD PTR $T54986[ebp-4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
__unwindfunclet$??0MPE@@QAE@I@Z$2:
  00016	8b 45 04	 mov	 eax, DWORD PTR $T54990[ebp-4]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	c3		 ret	 0
__unwindfunclet$??0MPE@@QAE@I@Z$3:
  00021	8b 45 04	 mov	 eax, DWORD PTR $T54994[ebp-4]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	59		 pop	 ecx
  0002b	c3		 ret	 0
__ehhandler$??0MPE@@QAE@I@Z:
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0MPE@@QAE@I@Z
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0MPE@@QAE@I@Z ENDP					; MPE::MPE
PUBLIC	??1MPE@@QAE@XZ					; MPE::~MPE
EXTRN	_fclose:PROC
; Function compile flags: /Ogtpy
;	COMDAT ??1MPE@@QAE@XZ
_TEXT	SEGMENT
??1MPE@@QAE@XZ PROC					; MPE::~MPE, COMDAT
; _this$ = ecx

; 824  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 825  :   delete nativeCodeCache;

  00004	8b be a8 02 00
	00		 mov	 edi, DWORD PTR [esi+680]
  0000a	85 ff		 test	 edi, edi
  0000c	74 10		 je	 SHORT $LN6@MPE@2
  0000e	8b cf		 mov	 ecx, edi
  00010	e8 00 00 00 00	 call	 ??1NativeCodeCache@@QAE@XZ ; NativeCodeCache::~NativeCodeCache
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$LN6@MPE@2:

; 826  :   delete instructionCache;

  0001e	8b be a0 02 00
	00		 mov	 edi, DWORD PTR [esi+672]
  00024	85 ff		 test	 edi, edi
  00026	74 10		 je	 SHORT $LN8@MPE@2
  00028	8b cf		 mov	 ecx, edi
  0002a	e8 00 00 00 00	 call	 ??1InstructionCache@@QAE@XZ ; InstructionCache::~InstructionCache
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	83 c4 04	 add	 esp, 4
$LN8@MPE@2:

; 827  :   delete overlayManager;

  00038	8b 86 ac 02 00
	00		 mov	 eax, DWORD PTR [esi+684]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 828  :   delete superBlock;

  00044	8b be a4 02 00
	00		 mov	 edi, DWORD PTR [esi+676]
  0004a	83 c4 04	 add	 esp, 4
  0004d	85 ff		 test	 edi, edi
  0004f	74 10		 je	 SHORT $LN10@MPE@2
  00051	8b cf		 mov	 ecx, edi
  00053	e8 00 00 00 00	 call	 ??1SuperBlock@@QAE@XZ	; SuperBlock::~SuperBlock
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005e	83 c4 04	 add	 esp, 4
$LN10@MPE@2:

; 829  :   if(mpeIndex == LOG_MPE_INDEX)

  00061	83 be 98 02 00
	00 01		 cmp	 DWORD PTR [esi+664], 1
  00068	75 24		 jne	 SHORT $LN1@MPE@2

; 830  :   {
; 831  :     if(logfile)

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?logfile@@3PAU_iobuf@@A ; logfile
  0006f	85 c0		 test	 eax, eax
  00071	74 09		 je	 SHORT $LN2@MPE@2

; 832  :     {
; 833  :       fclose(logfile);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 _fclose
  00079	83 c4 04	 add	 esp, 4
$LN2@MPE@2:

; 834  :     }
; 835  : 
; 836  :     if(commLogFile)

  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?commLogFile@@3PAU_iobuf@@A ; commLogFile
  00081	85 c0		 test	 eax, eax
  00083	74 09		 je	 SHORT $LN1@MPE@2

; 837  :     {
; 838  :       fclose(commLogFile);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _fclose
  0008b	83 c4 04	 add	 esp, 4
$LN1@MPE@2:

; 839  :     }
; 840  :   }
; 841  :   FreeMPELocalMemory();

  0008e	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  00094	51		 push	 ecx
  00095	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0009a	83 c4 04	 add	 esp, 4
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi

; 842  : }

  0009f	c3		 ret	 0
??1MPE@@QAE@XZ ENDP					; MPE::~MPE
_TEXT	ENDS
PUBLIC	?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket
; Function compile flags: /Ogtpy
;	COMDAT ?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z
_TEXT	SEGMENT
_bTerminating$ = -277					; size = 1
_ecuIndex$ = -276					; size = 4
_pStruct$ = -272					; size = 268
_immExt$ = -4						; size = 4
_iBuffer$ = 8						; size = 4
_pICacheEntry$ = 12					; size = 4
_options$ = 16						; size = 4
?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z PROC ; MPE::DecompressPacket, COMDAT
; _this$ = ecx

; 1079 : {

  00000	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H

; 1080 :   InstructionCacheEntry pStruct;
; 1081 :   uint32 executionUnits, i;
; 1082 :   uint32 ecuIndex, rcuIndex, aluIndex, mulIndex, memIndex, baseIndex;
; 1083 :   uint32 immExt = 0;

  00006	33 c0		 xor	 eax, eax
  00008	55		 push	 ebp
  00009	56		 push	 esi

; 1084 :   uint32 packetByteCount = 0;
; 1085 :   uint32 comboScalarInDep;
; 1086 :   uint32 comboMiscInDep;
; 1087 :   uint32 comboScalarOutDep;
; 1088 :   uint32 comboMiscOutDep;
; 1089 :   bool bTerminating = false;
; 1090 :   bool bCanEmitNativeCode = true;
; 1091 :   uint8 iLength;
; 1092 : 
; 1093 :   pStruct.pcexec = pICacheEntry->pcexec;

  0000a	8b b4 24 28 01
	00 00		 mov	 esi, DWORD PTR _pICacheEntry$[esp+284]

; 1094 :   pICacheEntry->pcroute = pICacheEntry->pcexec;
; 1095 :   pICacheEntry->nuanceCount = 0;

  00011	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00014	8b e9		 mov	 ebp, ecx
  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx
  0001c	57		 push	 edi

; 1096 :   pStruct.packetInfo = 0;
; 1097 : 
; 1098 :   for(i = 0; i < 5; i++)
; 1099 :   {
; 1100 :     pStruct.scalarInputDependencies[i] = 0;
; 1101 :     pStruct.miscInputDependencies[i] = 0;
; 1102 :     pStruct.scalarOutputDependencies[i] = 0;
; 1103 :     pStruct.miscOutputDependencies[i] = 0;
; 1104 :     pICacheEntry->scalarInputDependencies[i] = 0;
; 1105 :     pICacheEntry->miscInputDependencies[i] = 0;
; 1106 :     pICacheEntry->scalarOutputDependencies[i] = 0;
; 1107 :     pICacheEntry->miscOutputDependencies[i] = 0;

  0001d	8b bc 24 28 01
	00 00		 mov	 edi, DWORD PTR _iBuffer$[esp+288]
  00024	89 84 24 20 01
	00 00		 mov	 DWORD PTR _immExt$[esp+292], eax
  0002b	88 44 24 0f	 mov	 BYTE PTR _bTerminating$[esp+292], al
  0002f	89 4c 24 30	 mov	 DWORD PTR _pStruct$[esp+320], ecx
  00033	89 44 24 2c	 mov	 DWORD PTR _pStruct$[esp+316], eax
  00037	89 84 24 d0 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+480], eax
  0003e	89 84 24 e4 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+500], eax
  00045	89 84 24 f8 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+520], eax
  0004c	89 84 24 0c 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+540], eax
  00053	89 86 bc 00 00
	00		 mov	 DWORD PTR [esi+188], eax
  00059	89 86 d0 00 00
	00		 mov	 DWORD PTR [esi+208], eax
  0005f	89 86 e4 00 00
	00		 mov	 DWORD PTR [esi+228], eax
  00065	89 86 f8 00 00
	00		 mov	 DWORD PTR [esi+248], eax
  0006b	89 84 24 d4 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+484], eax
  00072	89 84 24 e8 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+504], eax
  00079	89 84 24 fc 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+524], eax
  00080	89 84 24 10 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+544], eax
  00087	89 86 c0 00 00
	00		 mov	 DWORD PTR [esi+192], eax
  0008d	89 86 d4 00 00
	00		 mov	 DWORD PTR [esi+212], eax
  00093	89 86 e8 00 00
	00		 mov	 DWORD PTR [esi+232], eax
  00099	89 86 fc 00 00
	00		 mov	 DWORD PTR [esi+252], eax
  0009f	89 84 24 d8 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+488], eax
  000a6	89 84 24 ec 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+508], eax
  000ad	89 84 24 00 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+528], eax
  000b4	89 84 24 14 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+548], eax
  000bb	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
  000c1	89 86 d8 00 00
	00		 mov	 DWORD PTR [esi+216], eax
  000c7	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  000cd	89 86 00 01 00
	00		 mov	 DWORD PTR [esi+256], eax
  000d3	89 84 24 dc 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+492], eax
  000da	89 84 24 f0 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+512], eax
  000e1	89 84 24 04 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+532], eax
  000e8	89 84 24 18 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+552], eax
  000ef	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax
  000f5	89 86 dc 00 00
	00		 mov	 DWORD PTR [esi+220], eax
  000fb	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  00101	89 86 04 01 00
	00		 mov	 DWORD PTR [esi+260], eax
  00107	89 84 24 e0 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+496], eax
  0010e	89 84 24 f4 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+516], eax
  00115	89 84 24 08 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+536], eax
  0011c	89 84 24 1c 01
	00 00		 mov	 DWORD PTR _pStruct$[esp+556], eax
  00123	89 86 cc 00 00
	00		 mov	 DWORD PTR [esi+204], eax
  00129	89 86 e0 00 00
	00		 mov	 DWORD PTR [esi+224], eax
  0012f	89 86 f4 00 00
	00		 mov	 DWORD PTR [esi+244], eax
  00135	89 86 08 01 00
	00		 mov	 DWORD PTR [esi+264], eax
  0013b	53		 push	 ebx
  0013c	8d 64 24 00	 npad	 4
$LL133@Decompress:

; 1108 :   }
; 1109 : 
; 1110 :   do
; 1111 :   {
; 1112 :     iLength = DecodeSingleInstruction(iBuffer,&pStruct,&immExt,bTerminating);

  00140	8d 44 24 13	 lea	 eax, DWORD PTR _bTerminating$[esp+296]
  00144	50		 push	 eax
  00145	8d 8c 24 28 01
	00 00		 lea	 ecx, DWORD PTR _immExt$[esp+300]
  0014c	51		 push	 ecx
  0014d	8d 54 24 20	 lea	 edx, DWORD PTR _pStruct$[esp+304]
  00151	52		 push	 edx
  00152	57		 push	 edi
  00153	8b cd		 mov	 ecx, ebp
  00155	e8 00 00 00 00	 call	 ?DecodeSingleInstruction@MPE@@QAEEPAEPAVInstructionCacheEntry@@PAIAA_N@Z ; MPE::DecodeSingleInstruction

; 1113 : 
; 1114 :     pICacheEntry->pcroute += iLength;

  0015a	0f b6 c0	 movzx	 eax, al
  0015d	01 46 4c	 add	 DWORD PTR [esi+76], eax
  00160	8b 5e 4c	 mov	 ebx, DWORD PTR [esi+76]

; 1115 : 
; 1116 :     if(packetByteCount >= 128)
; 1117 :     {
; 1118 :       pICacheEntry->pcroute = pICacheEntry->pcexec + 128;
; 1119 :       break;
; 1120 :     }
; 1121 : 
; 1122 :     iBuffer += iLength;

  00163	03 f8		 add	 edi, eax

; 1123 :   }
; 1124 :   while(!bTerminating);

  00165	80 7c 24 13 00	 cmp	 BYTE PTR _bTerminating$[esp+296], 0
  0016a	74 d4		 je	 SHORT $LL133@Decompress

; 1125 : 
; 1126 :   pStruct.nuances[FIXED_FIELD(SLOT_ECU,FIELD_ECU_PCROUTE)] = pICacheEntry->pcroute;
; 1127 : 
; 1128 :   if(pStruct.packetInfo & PACKETINFO_NEEDS_PCFETCHNEXT)

  0016c	f7 44 24 30 00
	00 00 10	 test	 DWORD PTR _pStruct$[esp+320], 268435456 ; 10000000H
  00174	89 5c 24 7c	 mov	 DWORD PTR _pStruct$[esp+396], ebx
  00178	74 16		 je	 SHORT $LN129@Decompress

; 1129 :   {
; 1130 :     pICacheEntry->pcfetchnext = pICacheEntry->pcroute + GetPacketDelta(iBuffer, 2);

  0017a	6a 02		 push	 2
  0017c	57		 push	 edi
  0017d	8b cd		 mov	 ecx, ebp
  0017f	e8 00 00 00 00	 call	 ?GetPacketDelta@MPE@@QAEIPAEI@Z ; MPE::GetPacketDelta
  00184	03 c3		 add	 eax, ebx
  00186	89 46 50	 mov	 DWORD PTR [esi+80], eax

; 1131 :     pStruct.nuances[FIXED_FIELD(SLOT_ECU,FIELD_ECU_PCFETCHNEXT)] = pICacheEntry->pcfetchnext;

  00189	89 84 24 80 00
	00 00		 mov	 DWORD PTR _pStruct$[esp+400], eax
$LN129@Decompress:

; 1132 :   }
; 1133 : 
; 1134 :   if(options & DECOMPRESS_OPTIONS_INHIBIT_ECU)

  00190	8a 9c 24 34 01
	00 00		 mov	 bl, BYTE PTR _options$[esp+292]
  00197	f6 c3 04	 test	 bl, 4
  0019a	74 08		 je	 SHORT $LN155@Decompress

; 1135 :   {
; 1136 :     pStruct.packetInfo &= ~(PACKETINFO_ECU | PACKETINFO_BRANCH_CONDITIONAL | PACKETINFO_BRANCH_ALWAYS | PACKETINFO_BRANCH_NOP);

  0019c	81 64 24 30 fb
	ff ff f1	 and	 DWORD PTR _pStruct$[esp+320], -234881029 ; f1fffffbH
$LN155@Decompress:

; 1137 :   }
; 1138 : 
; 1139 :   executionUnits = GETPACKETEXECUTIONUNITS(pStruct.packetInfo);

  001a4	8b 44 24 30	 mov	 eax, DWORD PTR _pStruct$[esp+320]
  001a8	c1 e8 02	 shr	 eax, 2
  001ab	83 e0 1f	 and	 eax, 31			; 0000001fH

; 1140 :  
; 1141 :   switch(executionUnits)

  001ae	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b1	0f 87 b3 0b 00
	00		 ja	 $LN7@Decompress
  001b7	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN171@Decompress[eax*4]
$LN125@Decompress:

; 1142 :   {
; 1143 :     case 0:
; 1144 :       pICacheEntry->nuanceCount = 0;

  001be	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1145 :       break;

  001c5	e9 a0 0b 00 00	 jmp	 $LN7@Decompress
$LN124@Decompress:

; 1146 :     case (PACKETINFO_ECU >> 2):
; 1147 :       pICacheEntry->nuanceCount = 1;
; 1148 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  001ca	6a 00		 push	 0
  001cc	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  001d0	50		 push	 eax
  001d1	6a 00		 push	 0
  001d3	8b ce		 mov	 ecx, esi
  001d5	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  001dc	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1149 :       break;

  001e1	e9 84 0b 00 00	 jmp	 $LN7@Decompress
$LN123@Decompress:

; 1150 :     case (PACKETINFO_RCU >> 2):
; 1151 :       pICacheEntry->nuanceCount = 1;
; 1152 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

  001e6	6a 01		 push	 1
  001e8	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  001ec	51		 push	 ecx
  001ed	6a 00		 push	 0
  001ef	8b ce		 mov	 ecx, esi
  001f1	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  001f8	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1153 :       break;

  001fd	e9 68 0b 00 00	 jmp	 $LN7@Decompress
$LN122@Decompress:

; 1154 :     case ((PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1155 :       pICacheEntry->nuanceCount = 2;
; 1156 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00202	f6 c3 01	 test	 bl, 1
  00205	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  0020c	74 25		 je	 SHORT $LN121@Decompress

; 1157 :       {
; 1158 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

  0020e	6a 01		 push	 1
  00210	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00214	52		 push	 edx
  00215	6a 00		 push	 0
  00217	8b ce		 mov	 ecx, esi
  00219	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1159 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  0021e	6a 00		 push	 0
  00220	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00224	50		 push	 eax
  00225	6a 01		 push	 1

; 1184 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  00227	8b ce		 mov	 ecx, esi
  00229	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1185 :       break;

  0022e	e9 37 0b 00 00	 jmp	 $LN7@Decompress
$LN121@Decompress:

; 1160 :       }
; 1161 :       else
; 1162 :       {
; 1163 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  00233	6a 00		 push	 0
  00235	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00239	51		 push	 ecx
  0023a	6a 00		 push	 0
  0023c	8b ce		 mov	 ecx, esi
  0023e	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1164 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  00243	6a 01		 push	 1
  00245	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00249	52		 push	 edx
  0024a	6a 01		 push	 1
  0024c	8b ce		 mov	 ecx, esi
  0024e	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1165 :       }    
; 1166 :       break;

  00253	e9 12 0b 00 00	 jmp	 $LN7@Decompress
$LN119@Decompress:

; 1167 :     case (PACKETINFO_MEM >> 2):
; 1168 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00258	6a 04		 push	 4
  0025a	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  0025e	50		 push	 eax
  0025f	6a 00		 push	 0
  00261	8b ce		 mov	 ecx, esi
  00263	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1169 :       pICacheEntry->nuanceCount = 1;

  00268	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1

; 1170 :       break;

  0026f	e9 f6 0a 00 00	 jmp	 $LN7@Decompress
$LN118@Decompress:

; 1171 :     case ((PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1172 :       pICacheEntry->nuanceCount = 2;
; 1173 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ECU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  00274	6a 04		 push	 4
  00276	6a 00		 push	 0
  00278	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  0027c	51		 push	 ecx
  0027d	8b cd		 mov	 ecx, ebp
  0027f	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  00286	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  0028b	84 c0		 test	 al, al
  0028d	75 0e		 jne	 SHORT $LN116@Decompress
  0028f	f6 c3 03	 test	 bl, 3
  00292	75 09		 jne	 SHORT $LN116@Decompress

; 1177 :       }
; 1178 :       else
; 1179 :       {
; 1180 :         memIndex = 1;

  00294	bf 01 00 00 00	 mov	 edi, 1

; 1181 :         ecuIndex = 0;

  00299	33 c0		 xor	 eax, eax
  0029b	eb 07		 jmp	 SHORT $LN115@Decompress
$LN116@Decompress:

; 1174 :       {
; 1175 :         memIndex = 0;

  0029d	33 ff		 xor	 edi, edi

; 1176 :         ecuIndex = 1;

  0029f	b8 01 00 00 00	 mov	 eax, 1
$LN115@Decompress:

; 1182 :       }       
; 1183 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

  002a4	6a 00		 push	 0
$LN157@Decompress:
  002a6	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  002aa	52		 push	 edx
  002ab	50		 push	 eax
  002ac	8b ce		 mov	 ecx, esi
  002ae	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1184 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  002b3	6a 04		 push	 4
  002b5	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  002b9	50		 push	 eax
  002ba	57		 push	 edi
  002bb	8b ce		 mov	 ecx, esi
  002bd	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1185 :       break;

  002c2	e9 a3 0a 00 00	 jmp	 $LN7@Decompress
$LN114@Decompress:

; 1186 :     case ((PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1187 :       pICacheEntry->nuanceCount = 2;
; 1188 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  002c7	6a 04		 push	 4
  002c9	6a 01		 push	 1
  002cb	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  002cf	51		 push	 ecx
  002d0	8b cd		 mov	 ecx, ebp
  002d2	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  002d9	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  002de	84 c0		 test	 al, al
  002e0	75 0f		 jne	 SHORT $LN112@Decompress
  002e2	f6 c3 02	 test	 bl, 2
  002e5	75 0a		 jne	 SHORT $LN112@Decompress

; 1192 :       }
; 1193 :       else
; 1194 :       {
; 1195 :         memIndex = 1;

  002e7	bf 01 00 00 00	 mov	 edi, 1

; 1196 :         rcuIndex = 0;

  002ec	33 c0		 xor	 eax, eax

; 1197 :       }       
; 1198 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

  002ee	57		 push	 edi

; 1199 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);
; 1200 :       break;

  002ef	eb b5		 jmp	 SHORT $LN157@Decompress
$LN112@Decompress:

; 1189 :       {
; 1190 :         memIndex = 0;

  002f1	33 ff		 xor	 edi, edi

; 1191 :         rcuIndex = 1;

  002f3	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 1197 :       }       
; 1198 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

  002f6	50		 push	 eax

; 1199 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);
; 1200 :       break;

  002f7	eb ad		 jmp	 SHORT $LN157@Decompress
$LN110@Decompress:

; 1201 :     case ((PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1202 :       pICacheEntry->nuanceCount = 3;
; 1203 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  002f9	f6 c3 01	 test	 bl, 1
  002fc	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  00303	74 5c		 je	 SHORT $LN109@Decompress

; 1204 :       {
; 1205 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  00305	6a 04		 push	 4
  00307	6a 01		 push	 1
  00309	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  0030d	51		 push	 ecx
  0030e	8b cd		 mov	 ecx, ebp
  00310	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  00315	84 c0		 test	 al, al
  00317	75 0e		 jne	 SHORT $LN107@Decompress
  00319	f6 c3 02	 test	 bl, 2
  0031c	75 09		 jne	 SHORT $LN107@Decompress

; 1209 :         }
; 1210 :         else
; 1211 :         {
; 1212 :           memIndex = 1;

  0031e	bf 01 00 00 00	 mov	 edi, 1

; 1213 :           rcuIndex = 0;

  00323	33 c0		 xor	 eax, eax
  00325	eb 07		 jmp	 SHORT $LN106@Decompress
$LN107@Decompress:

; 1206 :         {
; 1207 :           memIndex = 0;

  00327	33 ff		 xor	 edi, edi

; 1208 :           rcuIndex = 1;

  00329	b8 01 00 00 00	 mov	 eax, 1
$LN106@Decompress:

; 1214 :         }        
; 1215 :         pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

  0032e	6a 01		 push	 1
  00330	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00334	52		 push	 edx
  00335	50		 push	 eax
  00336	8b ce		 mov	 ecx, esi
  00338	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1216 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  0033d	6a 04		 push	 4
  0033f	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00343	50		 push	 eax
  00344	57		 push	 edi
  00345	8b ce		 mov	 ecx, esi
  00347	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1217 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

  0034c	6a 00		 push	 0
  0034e	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00352	51		 push	 ecx
  00353	6a 02		 push	 2
  00355	8b ce		 mov	 ecx, esi
  00357	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0035c	e9 09 0a 00 00	 jmp	 $LN7@Decompress
$LN109@Decompress:

; 1218 :       }
; 1219 :       else
; 1220 :       {
; 1221 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00361	f6 c3 02	 test	 bl, 2

; 1222 :         {
; 1223 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00364	8d 54 24 18	 lea	 edx, DWORD PTR _pStruct$[esp+296]
  00368	74 31		 je	 SHORT $LN104@Decompress
  0036a	6a 04		 push	 4
  0036c	52		 push	 edx
  0036d	6a 00		 push	 0
  0036f	8b ce		 mov	 ecx, esi
  00371	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1224 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  00376	6a 01		 push	 1
$LN164@Decompress:
  00378	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  0037c	50		 push	 eax
  0037d	6a 01		 push	 1
$LN165@Decompress:
  0037f	8b ce		 mov	 ecx, esi
  00381	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1225 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

  00386	6a 00		 push	 0
  00388	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  0038c	51		 push	 ecx
  0038d	6a 02		 push	 2
  0038f	8b ce		 mov	 ecx, esi
  00391	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00396	e9 cf 09 00 00	 jmp	 $LN7@Decompress
$LN104@Decompress:

; 1226 :         }
; 1227 :         else
; 1228 :         {
; 1229 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MEM,SLOT_ECU,SLOT_RCU);

  0039b	6a 01		 push	 1
  0039d	6a 00		 push	 0
  0039f	6a 04		 push	 4
  003a1	52		 push	 edx
  003a2	6a 00		 push	 0
  003a4	56		 push	 esi
  003a5	8b cd		 mov	 ecx, ebp
  003a7	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1230 :         }
; 1231 :       }
; 1232 :       break;

  003ac	e9 b9 09 00 00	 jmp	 $LN7@Decompress
$LN102@Decompress:

; 1233 :     case (PACKETINFO_MUL >> 2):
; 1234 :       pICacheEntry->nuanceCount = 1;
; 1235 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

  003b1	6a 03		 push	 3
  003b3	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  003b7	50		 push	 eax
  003b8	6a 00		 push	 0
  003ba	8b ce		 mov	 ecx, esi
  003bc	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  003c3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  003c8	e9 9d 09 00 00	 jmp	 $LN7@Decompress
$LN101@Decompress:

; 1236 :       break;
; 1237 :     case ((PACKETINFO_MUL | PACKETINFO_ECU) >> 2):
; 1238 :       pICacheEntry->nuanceCount = 2;
; 1239 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  003cd	f6 c3 01	 test	 bl, 1
  003d0	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  003d7	74 25		 je	 SHORT $LN100@Decompress

; 1240 :       {
; 1241 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

  003d9	6a 03		 push	 3
$LN168@Decompress:
  003db	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  003df	51		 push	 ecx
  003e0	6a 00		 push	 0
  003e2	8b ce		 mov	 ecx, esi
  003e4	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1242 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  003e9	6a 00		 push	 0
  003eb	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  003ef	52		 push	 edx
  003f0	6a 01		 push	 1
  003f2	8b ce		 mov	 ecx, esi
  003f4	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  003f9	e9 6c 09 00 00	 jmp	 $LN7@Decompress
$LN100@Decompress:

; 1243 :       }
; 1244 :       else
; 1245 :       {
; 1246 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  003fe	6a 00		 push	 0
  00400	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00404	50		 push	 eax
  00405	6a 01		 push	 1
  00407	8b ce		 mov	 ecx, esi
  00409	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1247 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MUL);

  0040e	6a 03		 push	 3
  00410	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00414	51		 push	 ecx
  00415	6a 00		 push	 0
  00417	8b ce		 mov	 ecx, esi
  00419	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0041e	e9 47 09 00 00	 jmp	 $LN7@Decompress
$LN98@Decompress:

; 1248 :       }
; 1249 :       break;
; 1250 :     case ((PACKETINFO_MUL | PACKETINFO_RCU) >> 2):
; 1251 :       pICacheEntry->nuanceCount = 2;
; 1252 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MUL))

  00423	6a 03		 push	 3
  00425	6a 01		 push	 1
  00427	8d 54 24 20	 lea	 edx, DWORD PTR _pStruct$[esp+304]
  0042b	52		 push	 edx
  0042c	8b cd		 mov	 ecx, ebp
  0042e	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  00435	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  0043a	84 c0		 test	 al, al
  0043c	74 07		 je	 SHORT $LN97@Decompress

; 1253 :       {
; 1254 :         mulIndex = 0;

  0043e	33 ff		 xor	 edi, edi

; 1255 :         rcuIndex = 1;

  00440	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 1256 :       }
; 1257 :       else

  00443	eb 07		 jmp	 SHORT $LN96@Decompress
$LN97@Decompress:

; 1258 :       {
; 1259 :         mulIndex = 1;

  00445	bf 01 00 00 00	 mov	 edi, 1

; 1260 :         rcuIndex = 0;

  0044a	33 c0		 xor	 eax, eax
$LN96@Decompress:

; 1261 :       }
; 1262 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

  0044c	6a 01		 push	 1
  0044e	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00452	51		 push	 ecx
  00453	50		 push	 eax
  00454	8b ce		 mov	 ecx, esi
  00456	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1263 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  0045b	6a 03		 push	 3
  0045d	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00461	52		 push	 edx
  00462	57		 push	 edi
  00463	8b ce		 mov	 ecx, esi
  00465	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0046a	e9 fb 08 00 00	 jmp	 $LN7@Decompress
$LN95@Decompress:

; 1264 :       break;
; 1265 :     case ((PACKETINFO_MUL | PACKETINFO_RCU | PACKETINFO_ECU) >> 2): 
; 1266 :       pICacheEntry->nuanceCount = 3;
; 1267 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  0046f	f6 c3 01	 test	 bl, 1
  00472	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  00479	74 0c		 je	 SHORT $LN94@Decompress

; 1268 :       {
; 1269 :         baseIndex = 0;

  0047b	33 ff		 xor	 edi, edi

; 1270 :         ecuIndex = 2;

  0047d	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR _ecuIndex$[esp+296], 2

; 1271 :       }
; 1272 :       else

  00485	eb 0d		 jmp	 SHORT $LN93@Decompress
$LN94@Decompress:

; 1273 :       {
; 1274 :         baseIndex = 1;

  00487	bf 01 00 00 00	 mov	 edi, 1

; 1275 :         ecuIndex = 0;

  0048c	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _ecuIndex$[esp+296], 0
$LN93@Decompress:

; 1276 :       }
; 1277 : 
; 1278 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_RCU,SLOT_MUL))

  00494	6a 03		 push	 3
  00496	6a 01		 push	 1
  00498	8d 44 24 20	 lea	 eax, DWORD PTR _pStruct$[esp+304]
  0049c	50		 push	 eax
  0049d	8b cd		 mov	 ecx, ebp
  0049f	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  004a4	84 c0		 test	 al, al
  004a6	74 07		 je	 SHORT $LN92@Decompress

; 1279 :       {
; 1280 :         mulIndex = baseIndex + 0;

  004a8	8b df		 mov	 ebx, edi

; 1281 :         rcuIndex = baseIndex + 1;

  004aa	83 c7 01	 add	 edi, 1

; 1282 :       }
; 1283 :       else

  004ad	eb 03		 jmp	 SHORT $LN91@Decompress
$LN92@Decompress:

; 1284 :       {
; 1285 :         mulIndex = baseIndex + 1;

  004af	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
$LN91@Decompress:

; 1286 :         rcuIndex = baseIndex + 0;
; 1287 :       }
; 1288 :       
; 1289 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

  004b2	8b 54 24 14	 mov	 edx, DWORD PTR _ecuIndex$[esp+296]
  004b6	6a 00		 push	 0
  004b8	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  004bc	51		 push	 ecx
  004bd	52		 push	 edx
  004be	8b ce		 mov	 ecx, esi
  004c0	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1290 :       pICacheEntry->CopyInstructionData(rcuIndex,&pStruct,SLOT_RCU);

  004c5	6a 01		 push	 1
  004c7	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  004cb	50		 push	 eax
  004cc	57		 push	 edi
  004cd	8b ce		 mov	 ecx, esi
  004cf	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1291 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  004d4	6a 03		 push	 3
  004d6	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  004da	51		 push	 ecx
  004db	53		 push	 ebx
  004dc	8b ce		 mov	 ecx, esi
  004de	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  004e3	e9 82 08 00 00	 jmp	 $LN7@Decompress
$LN90@Decompress:

; 1292 :       break;
; 1293 :     case ((PACKETINFO_MUL | PACKETINFO_MEM) >> 2):
; 1294 :       pICacheEntry->nuanceCount = 2;
; 1295 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_MUL,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  004e8	6a 04		 push	 4
  004ea	6a 03		 push	 3
  004ec	8d 54 24 20	 lea	 edx, DWORD PTR _pStruct$[esp+304]
  004f0	52		 push	 edx
  004f1	8b cd		 mov	 ecx, ebp
  004f3	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  004fa	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  004ff	84 c0		 test	 al, al
  00501	75 0e		 jne	 SHORT $LN88@Decompress
  00503	f6 c3 02	 test	 bl, 2
  00506	75 09		 jne	 SHORT $LN88@Decompress

; 1299 :       }
; 1300 :       else
; 1301 :       {
; 1302 :         memIndex = 1;

  00508	bf 01 00 00 00	 mov	 edi, 1

; 1303 :         mulIndex = 0;

  0050d	33 c0		 xor	 eax, eax
  0050f	eb 07		 jmp	 SHORT $LN87@Decompress
$LN88@Decompress:

; 1296 :       {
; 1297 :         memIndex = 0;

  00511	33 ff		 xor	 edi, edi

; 1298 :         mulIndex = 1;

  00513	b8 01 00 00 00	 mov	 eax, 1
$LN87@Decompress:

; 1304 :       }       
; 1305 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  00518	6a 03		 push	 3
  0051a	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  0051e	51		 push	 ecx
  0051f	50		 push	 eax
  00520	8b ce		 mov	 ecx, esi
  00522	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1306 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  00527	6a 04		 push	 4
  00529	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  0052d	52		 push	 edx
  0052e	57		 push	 edi
  0052f	8b ce		 mov	 ecx, esi
  00531	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00536	e9 2f 08 00 00	 jmp	 $LN7@Decompress
$LN86@Decompress:

; 1307 :       break;
; 1308 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1309 :       pICacheEntry->nuanceCount = 3;
; 1310 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  0053b	f6 c3 01	 test	 bl, 1
  0053e	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  00545	74 5c		 je	 SHORT $LN85@Decompress

; 1311 :       {
; 1312 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_MUL,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  00547	6a 04		 push	 4
  00549	6a 03		 push	 3
  0054b	8d 44 24 20	 lea	 eax, DWORD PTR _pStruct$[esp+304]
  0054f	50		 push	 eax
  00550	8b cd		 mov	 ecx, ebp
  00552	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  00557	84 c0		 test	 al, al
  00559	75 0e		 jne	 SHORT $LN83@Decompress
  0055b	f6 c3 02	 test	 bl, 2
  0055e	75 09		 jne	 SHORT $LN83@Decompress

; 1316 :         }
; 1317 :         else
; 1318 :         {
; 1319 :           memIndex = 1;

  00560	bf 01 00 00 00	 mov	 edi, 1

; 1320 :           mulIndex = 0;

  00565	33 c0		 xor	 eax, eax
  00567	eb 07		 jmp	 SHORT $LN82@Decompress
$LN83@Decompress:

; 1313 :         {
; 1314 :           memIndex = 0;

  00569	33 ff		 xor	 edi, edi

; 1315 :           mulIndex = 1;

  0056b	b8 01 00 00 00	 mov	 eax, 1
$LN82@Decompress:

; 1321 :         }       
; 1322 :         
; 1323 :         pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  00570	6a 03		 push	 3
  00572	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00576	51		 push	 ecx
  00577	50		 push	 eax
  00578	8b ce		 mov	 ecx, esi
  0057a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1324 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  0057f	6a 04		 push	 4
  00581	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00585	52		 push	 edx
  00586	57		 push	 edi
  00587	8b ce		 mov	 ecx, esi
  00589	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1325 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

  0058e	6a 00		 push	 0
  00590	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00594	50		 push	 eax
  00595	6a 02		 push	 2
  00597	8b ce		 mov	 ecx, esi
  00599	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0059e	e9 c7 07 00 00	 jmp	 $LN7@Decompress
$LN85@Decompress:

; 1326 :       }
; 1327 :       else
; 1328 :       {
; 1329 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  005a3	f6 c3 02	 test	 bl, 2

; 1330 :         {
; 1331 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  005a6	8d 4c 24 18	 lea	 ecx, DWORD PTR _pStruct$[esp+296]
  005aa	74 31		 je	 SHORT $LN80@Decompress
  005ac	6a 04		 push	 4
  005ae	51		 push	 ecx
  005af	6a 00		 push	 0
  005b1	8b ce		 mov	 ecx, esi
  005b3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1332 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_MUL);

  005b8	6a 03		 push	 3
$LN169@Decompress:
  005ba	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  005be	52		 push	 edx
  005bf	6a 01		 push	 1
  005c1	8b ce		 mov	 ecx, esi
  005c3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1333 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);

  005c8	6a 00		 push	 0
  005ca	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  005ce	50		 push	 eax
  005cf	6a 02		 push	 2
  005d1	8b ce		 mov	 ecx, esi
  005d3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  005d8	e9 8d 07 00 00	 jmp	 $LN7@Decompress
$LN80@Decompress:

; 1334 :         }
; 1335 :         else
; 1336 :         {
; 1337 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_ECU);

  005dd	6a 00		 push	 0
  005df	6a 04		 push	 4
  005e1	6a 03		 push	 3
  005e3	51		 push	 ecx
  005e4	6a 00		 push	 0
  005e6	56		 push	 esi
  005e7	8b cd		 mov	 ecx, ebp
  005e9	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1338 :         }
; 1339 :       }
; 1340 :       break;

  005ee	e9 77 07 00 00	 jmp	 $LN7@Decompress
$LN78@Decompress:

; 1341 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1342 :       pICacheEntry->nuanceCount = 3;
; 1343 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  005f3	f6 c3 02	 test	 bl, 2
  005f6	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3

; 1344 :       {
; 1345 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  005fd	8d 54 24 18	 lea	 edx, DWORD PTR _pStruct$[esp+296]
  00601	74 31		 je	 SHORT $LN77@Decompress
  00603	6a 04		 push	 4
  00605	52		 push	 edx
  00606	6a 00		 push	 0
  00608	8b ce		 mov	 ecx, esi
  0060a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1346 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_MUL);

  0060f	6a 03		 push	 3
  00611	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00615	50		 push	 eax
  00616	6a 01		 push	 1
  00618	8b ce		 mov	 ecx, esi
  0061a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1347 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_RCU);

  0061f	6a 01		 push	 1
  00621	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00625	51		 push	 ecx
  00626	6a 02		 push	 2
  00628	8b ce		 mov	 ecx, esi
  0062a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0062f	e9 36 07 00 00	 jmp	 $LN7@Decompress
$LN77@Decompress:

; 1348 :       }
; 1349 :       else
; 1350 :       {
; 1351 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

  00634	6a 01		 push	 1
  00636	6a 04		 push	 4
  00638	6a 03		 push	 3
  0063a	52		 push	 edx
  0063b	6a 00		 push	 0
  0063d	56		 push	 esi
  0063e	8b cd		 mov	 ecx, ebp
  00640	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1352 :       }
; 1353 :       break;

  00645	e9 20 07 00 00	 jmp	 $LN7@Decompress
$LN75@Decompress:

; 1354 :     case ((PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1355 :       pICacheEntry->nuanceCount = 4;
; 1356 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  0064a	f6 c3 01	 test	 bl, 1
  0064d	c7 46 14 04 00
	00 00		 mov	 DWORD PTR [esi+20], 4
  00654	74 74		 je	 SHORT $LN74@Decompress

; 1357 :       {
; 1358 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00656	f6 c3 02	 test	 bl, 2
  00659	74 45		 je	 SHORT $LN73@Decompress

; 1359 :         {
; 1360 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  0065b	6a 04		 push	 4
  0065d	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00661	50		 push	 eax
  00662	6a 00		 push	 0
  00664	8b ce		 mov	 ecx, esi
  00666	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1361 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  0066b	6a 01		 push	 1
  0066d	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00671	51		 push	 ecx
  00672	6a 01		 push	 1
  00674	8b ce		 mov	 ecx, esi
  00676	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1362 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

  0067b	6a 03		 push	 3
  0067d	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00681	52		 push	 edx
  00682	6a 02		 push	 2
  00684	8b ce		 mov	 ecx, esi
  00686	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1363 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  0068b	6a 00		 push	 0
  0068d	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00691	50		 push	 eax
  00692	6a 03		 push	 3
  00694	8b ce		 mov	 ecx, esi
  00696	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0069b	e9 ca 06 00 00	 jmp	 $LN7@Decompress
$LN73@Decompress:

; 1364 :         }
; 1365 :         else
; 1366 :         {
; 1367 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

  006a0	6a 01		 push	 1
  006a2	6a 04		 push	 4
  006a4	6a 03		 push	 3
  006a6	8d 4c 24 24	 lea	 ecx, DWORD PTR _pStruct$[esp+308]
  006aa	51		 push	 ecx
  006ab	6a 00		 push	 0
  006ad	56		 push	 esi
  006ae	8b cd		 mov	 ecx, ebp
  006b0	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1368 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  006b5	6a 00		 push	 0
  006b7	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  006bb	52		 push	 edx
  006bc	6a 03		 push	 3
  006be	8b ce		 mov	 ecx, esi
  006c0	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  006c5	e9 a0 06 00 00	 jmp	 $LN7@Decompress
$LN74@Decompress:

; 1369 :         }
; 1370 :       }
; 1371 :       else
; 1372 :       {
; 1373 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  006ca	f6 c3 02	 test	 bl, 2
  006cd	74 45		 je	 SHORT $LN70@Decompress

; 1374 :         {
; 1375 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  006cf	6a 04		 push	 4
  006d1	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  006d5	50		 push	 eax
  006d6	6a 00		 push	 0
  006d8	8b ce		 mov	 ecx, esi
  006da	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1376 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  006df	6a 01		 push	 1
$LN170@Decompress:
  006e1	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  006e5	51		 push	 ecx
  006e6	6a 01		 push	 1
  006e8	8b ce		 mov	 ecx, esi
  006ea	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1377 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

  006ef	6a 03		 push	 3
  006f1	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  006f5	52		 push	 edx
  006f6	6a 02		 push	 2
  006f8	8b ce		 mov	 ecx, esi
  006fa	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1378 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  006ff	6a 00		 push	 0
  00701	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00705	50		 push	 eax
  00706	6a 03		 push	 3
  00708	8b ce		 mov	 ecx, esi
  0070a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0070f	e9 56 06 00 00	 jmp	 $LN7@Decompress
$LN70@Decompress:

; 1379 :         }
; 1380 :         else
; 1381 :         {
; 1382 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  00714	6a 00		 push	 0
  00716	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  0071a	51		 push	 ecx
  0071b	6a 00		 push	 0
  0071d	8b ce		 mov	 ecx, esi
  0071f	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1383 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_MUL,SLOT_MEM,SLOT_RCU);

  00724	6a 01		 push	 1
  00726	6a 04		 push	 4
  00728	6a 03		 push	 3
  0072a	8d 54 24 24	 lea	 edx, DWORD PTR _pStruct$[esp+308]
  0072e	52		 push	 edx
  0072f	6a 01		 push	 1
  00731	56		 push	 esi
  00732	8b cd		 mov	 ecx, ebp
  00734	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1384 :         }
; 1385 :       }
; 1386 :       break;

  00739	e9 2c 06 00 00	 jmp	 $LN7@Decompress
$LN68@Decompress:

; 1387 :     case (PACKETINFO_ALU >> 2):
; 1388 :       pICacheEntry->nuanceCount = 1;
; 1389 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

  0073e	6a 02		 push	 2
  00740	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00744	50		 push	 eax
  00745	6a 00		 push	 0
  00747	8b ce		 mov	 ecx, esi
  00749	c7 46 14 01 00
	00 00		 mov	 DWORD PTR [esi+20], 1
  00750	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00755	e9 10 06 00 00	 jmp	 $LN7@Decompress
$LN67@Decompress:

; 1390 :       break;
; 1391 :     case ((PACKETINFO_ALU | PACKETINFO_ECU) >> 2):
; 1392 :       pICacheEntry->nuanceCount = 2;
; 1393 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  0075a	f6 c3 01	 test	 bl, 1
  0075d	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  00764	74 07		 je	 SHORT $LN66@Decompress

; 1394 :       {
; 1395 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

  00766	6a 02		 push	 2

; 1396 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);
; 1397 :       }
; 1398 :       else

  00768	e9 6e fc ff ff	 jmp	 $LN168@Decompress
$LN66@Decompress:

; 1399 :       {
; 1400 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  0076d	6a 00		 push	 0
  0076f	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00773	50		 push	 eax
  00774	6a 01		 push	 1
  00776	8b ce		 mov	 ecx, esi
  00778	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1401 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ALU);

  0077d	6a 02		 push	 2
  0077f	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00783	51		 push	 ecx
  00784	6a 00		 push	 0
  00786	8b ce		 mov	 ecx, esi
  00788	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0078d	e9 d8 05 00 00	 jmp	 $LN7@Decompress
$LN64@Decompress:

; 1402 :       }
; 1403 :       break;
; 1404 :     case ((PACKETINFO_ALU | PACKETINFO_RCU) >> 2):
; 1405 :       pICacheEntry->nuanceCount = 2;
; 1406 :       pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

  00792	6a 01		 push	 1
  00794	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00798	52		 push	 edx
  00799	6a 00		 push	 0
  0079b	8b ce		 mov	 ecx, esi
  0079d	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  007a4	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1407 :       pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

  007a9	6a 02		 push	 2
  007ab	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  007af	50		 push	 eax
  007b0	6a 01		 push	 1
  007b2	8b ce		 mov	 ecx, esi
  007b4	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  007b9	e9 ac 05 00 00	 jmp	 $LN7@Decompress
$LN63@Decompress:

; 1408 :       break;
; 1409 :     case ((PACKETINFO_ALU | PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1410 :       pICacheEntry->nuanceCount = 3;
; 1411 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  007be	f6 c3 01	 test	 bl, 1
  007c1	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3

; 1412 :       {
; 1413 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_RCU);

  007c8	8d 4c 24 18	 lea	 ecx, DWORD PTR _pStruct$[esp+296]
  007cc	74 13		 je	 SHORT $LN62@Decompress
  007ce	6a 01		 push	 1
  007d0	51		 push	 ecx
  007d1	6a 00		 push	 0
  007d3	8b ce		 mov	 ecx, esi
  007d5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1414 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

  007da	6a 02		 push	 2

; 1415 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);
; 1416 :       }
; 1417 :       else

  007dc	e9 d9 fd ff ff	 jmp	 $LN169@Decompress
$LN62@Decompress:

; 1418 :       {
; 1419 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  007e1	6a 00		 push	 0
  007e3	51		 push	 ecx
  007e4	6a 00		 push	 0
  007e6	8b ce		 mov	 ecx, esi
  007e8	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1420 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  007ed	6a 01		 push	 1
  007ef	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  007f3	52		 push	 edx
  007f4	6a 01		 push	 1
  007f6	8b ce		 mov	 ecx, esi
  007f8	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1421 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

  007fd	6a 02		 push	 2
  007ff	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00803	50		 push	 eax
  00804	6a 02		 push	 2
  00806	8b ce		 mov	 ecx, esi
  00808	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0080d	e9 58 05 00 00	 jmp	 $LN7@Decompress
$LN60@Decompress:

; 1422 :       }
; 1423 :       break;
; 1424 :     case ((PACKETINFO_ALU | PACKETINFO_MEM) >> 2):
; 1425 :       pICacheEntry->nuanceCount = 2;
; 1426 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  00812	6a 04		 push	 4
  00814	6a 02		 push	 2
  00816	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  0081a	51		 push	 ecx
  0081b	8b cd		 mov	 ecx, ebp
  0081d	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  00824	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  00829	84 c0		 test	 al, al
  0082b	75 0e		 jne	 SHORT $LN58@Decompress
  0082d	f6 c3 02	 test	 bl, 2
  00830	75 09		 jne	 SHORT $LN58@Decompress

; 1430 :       }
; 1431 :       else
; 1432 :       {
; 1433 :         memIndex = 1;

  00832	b8 01 00 00 00	 mov	 eax, 1

; 1434 :         aluIndex = 0;

  00837	33 ff		 xor	 edi, edi
  00839	eb 05		 jmp	 SHORT $LN57@Decompress
$LN58@Decompress:

; 1427 :       {
; 1428 :         memIndex = 0;

  0083b	33 c0		 xor	 eax, eax

; 1429 :         aluIndex = 1;

  0083d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN57@Decompress:

; 1435 :       }       
; 1436 :       pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  00840	6a 04		 push	 4
  00842	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00846	52		 push	 edx
  00847	50		 push	 eax
  00848	8b ce		 mov	 ecx, esi
  0084a	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1437 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

  0084f	6a 02		 push	 2
  00851	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00855	50		 push	 eax
  00856	57		 push	 edi
  00857	8b ce		 mov	 ecx, esi
  00859	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0085e	e9 07 05 00 00	 jmp	 $LN7@Decompress
$LN56@Decompress:

; 1438 :       break;
; 1439 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1440 :       pICacheEntry->nuanceCount = 3;
; 1441 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00863	f6 c3 01	 test	 bl, 1
  00866	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  0086d	74 43		 je	 SHORT $LN55@Decompress

; 1442 :       {
; 1443 :         if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MEM) || (options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST))

  0086f	6a 04		 push	 4
  00871	6a 02		 push	 2
  00873	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  00877	51		 push	 ecx
  00878	8b cd		 mov	 ecx, ebp
  0087a	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  0087f	84 c0		 test	 al, al
  00881	75 0e		 jne	 SHORT $LN53@Decompress
  00883	f6 c3 02	 test	 bl, 2
  00886	75 09		 jne	 SHORT $LN53@Decompress

; 1447 :         }
; 1448 :         else
; 1449 :         {
; 1450 :           memIndex = 1;

  00888	b8 01 00 00 00	 mov	 eax, 1

; 1451 :           aluIndex = 0;

  0088d	33 ff		 xor	 edi, edi
  0088f	eb 05		 jmp	 SHORT $LN52@Decompress
$LN53@Decompress:

; 1444 :         {
; 1445 :           memIndex = 0;

  00891	33 c0		 xor	 eax, eax

; 1446 :           aluIndex = 1;

  00893	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LN52@Decompress:

; 1452 :         }       
; 1453 :         pICacheEntry->CopyInstructionData(memIndex,&pStruct,SLOT_MEM);

  00896	6a 04		 push	 4
  00898	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  0089c	52		 push	 edx
  0089d	50		 push	 eax
  0089e	8b ce		 mov	 ecx, esi
  008a0	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1454 :         pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

  008a5	6a 02		 push	 2
  008a7	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  008ab	50		 push	 eax
  008ac	57		 push	 edi

; 1455 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);
; 1456 :       }
; 1457 :       else

  008ad	e9 cd fa ff ff	 jmp	 $LN165@Decompress
$LN55@Decompress:

; 1458 :       {
; 1459 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  008b2	f6 c3 02	 test	 bl, 2

; 1460 :         {
; 1461 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  008b5	8d 54 24 18	 lea	 edx, DWORD PTR _pStruct$[esp+296]
  008b9	74 13		 je	 SHORT $LN50@Decompress
  008bb	6a 04		 push	 4
  008bd	52		 push	 edx
  008be	6a 00		 push	 0
  008c0	8b ce		 mov	 ecx, esi
  008c2	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1462 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

  008c7	6a 02		 push	 2

; 1463 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ECU);
; 1464 :         }
; 1465 :         else

  008c9	e9 aa fa ff ff	 jmp	 $LN164@Decompress
$LN50@Decompress:

; 1466 :         {
; 1467 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_ECU);

  008ce	6a 00		 push	 0
  008d0	6a 04		 push	 4
  008d2	6a 02		 push	 2
  008d4	52		 push	 edx
  008d5	6a 00		 push	 0
  008d7	56		 push	 esi
  008d8	8b cd		 mov	 ecx, ebp
  008da	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1468 :         }
; 1469 :       }
; 1470 :       break;

  008df	e9 86 04 00 00	 jmp	 $LN7@Decompress
$LN48@Decompress:

; 1471 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1472 :       pICacheEntry->nuanceCount = 3;
; 1473 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  008e4	f6 c3 02	 test	 bl, 2
  008e7	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3

; 1474 :       {
; 1475 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  008ee	8d 44 24 18	 lea	 eax, DWORD PTR _pStruct$[esp+296]
  008f2	74 31		 je	 SHORT $LN47@Decompress
  008f4	6a 04		 push	 4
  008f6	50		 push	 eax
  008f7	6a 00		 push	 0
  008f9	8b ce		 mov	 ecx, esi
  008fb	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1476 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  00900	6a 01		 push	 1
  00902	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00906	51		 push	 ecx
  00907	6a 01		 push	 1
  00909	8b ce		 mov	 ecx, esi
  0090b	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1477 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

  00910	6a 02		 push	 2
  00912	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00916	52		 push	 edx
  00917	6a 02		 push	 2
  00919	8b ce		 mov	 ecx, esi
  0091b	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00920	e9 45 04 00 00	 jmp	 $LN7@Decompress
$LN47@Decompress:

; 1478 :       }
; 1479 :       else
; 1480 :       {
; 1481 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

  00925	6a 01		 push	 1
  00927	6a 04		 push	 4
  00929	6a 02		 push	 2
  0092b	50		 push	 eax
  0092c	6a 00		 push	 0
  0092e	56		 push	 esi
  0092f	8b cd		 mov	 ecx, ebp
  00931	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1482 :       }
; 1483 :       break;

  00936	e9 2f 04 00 00	 jmp	 $LN7@Decompress
$LN45@Decompress:

; 1484 :     case ((PACKETINFO_ALU | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1485 :       pICacheEntry->nuanceCount = 4;
; 1486 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  0093b	f6 c3 01	 test	 bl, 1
  0093e	c7 46 14 04 00
	00 00		 mov	 DWORD PTR [esi+20], 4
  00945	74 74		 je	 SHORT $LN44@Decompress

; 1487 :       {
; 1488 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00947	f6 c3 02	 test	 bl, 2
  0094a	74 45		 je	 SHORT $LN43@Decompress

; 1489 :         {
; 1490 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  0094c	6a 04		 push	 4
  0094e	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00952	51		 push	 ecx
  00953	6a 00		 push	 0
  00955	8b ce		 mov	 ecx, esi
  00957	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1491 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  0095c	6a 01		 push	 1
  0095e	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00962	52		 push	 edx
  00963	6a 01		 push	 1
  00965	8b ce		 mov	 ecx, esi
  00967	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1492 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

  0096c	6a 02		 push	 2
  0096e	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00972	50		 push	 eax
  00973	6a 02		 push	 2
  00975	8b ce		 mov	 ecx, esi
  00977	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1493 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  0097c	6a 00		 push	 0
  0097e	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00982	51		 push	 ecx
  00983	6a 03		 push	 3
  00985	8b ce		 mov	 ecx, esi
  00987	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  0098c	e9 d9 03 00 00	 jmp	 $LN7@Decompress
$LN43@Decompress:

; 1494 :         }
; 1495 :         else
; 1496 :         {
; 1497 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

  00991	6a 01		 push	 1
  00993	6a 04		 push	 4
  00995	6a 02		 push	 2
  00997	8d 54 24 24	 lea	 edx, DWORD PTR _pStruct$[esp+308]
  0099b	52		 push	 edx
  0099c	6a 00		 push	 0
  0099e	56		 push	 esi
  0099f	8b cd		 mov	 ecx, ebp
  009a1	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1498 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  009a6	6a 00		 push	 0
  009a8	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  009ac	50		 push	 eax
  009ad	6a 03		 push	 3
  009af	8b ce		 mov	 ecx, esi
  009b1	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  009b6	e9 af 03 00 00	 jmp	 $LN7@Decompress
$LN44@Decompress:

; 1499 :         }
; 1500 :       }
; 1501 :       else
; 1502 :       {
; 1503 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  009bb	f6 c3 02	 test	 bl, 2
  009be	74 45		 je	 SHORT $LN40@Decompress

; 1504 :         {    
; 1505 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  009c0	6a 04		 push	 4
  009c2	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  009c6	51		 push	 ecx
  009c7	6a 00		 push	 0
  009c9	8b ce		 mov	 ecx, esi
  009cb	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1506 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  009d0	6a 00		 push	 0
  009d2	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  009d6	52		 push	 edx
  009d7	6a 01		 push	 1
  009d9	8b ce		 mov	 ecx, esi
  009db	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1507 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_RCU);

  009e0	6a 01		 push	 1
  009e2	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  009e6	50		 push	 eax
  009e7	6a 02		 push	 2
  009e9	8b ce		 mov	 ecx, esi
  009eb	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1508 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ALU);

  009f0	6a 02		 push	 2
  009f2	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  009f6	51		 push	 ecx
  009f7	6a 03		 push	 3
  009f9	8b ce		 mov	 ecx, esi
  009fb	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00a00	e9 65 03 00 00	 jmp	 $LN7@Decompress
$LN40@Decompress:

; 1509 :         }
; 1510 :         else
; 1511 :         {
; 1512 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  00a05	6a 00		 push	 0
  00a07	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00a0b	52		 push	 edx
  00a0c	6a 00		 push	 0
  00a0e	8b ce		 mov	 ecx, esi
  00a10	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1513 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MEM,SLOT_RCU);

  00a15	6a 01		 push	 1
  00a17	6a 04		 push	 4
  00a19	6a 02		 push	 2
  00a1b	8d 44 24 24	 lea	 eax, DWORD PTR _pStruct$[esp+308]
  00a1f	50		 push	 eax
  00a20	6a 01		 push	 1
  00a22	56		 push	 esi
  00a23	8b cd		 mov	 ecx, ebp
  00a25	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1514 :         }
; 1515 :       }
; 1516 :       break;

  00a2a	e9 3b 03 00 00	 jmp	 $LN7@Decompress
$LN38@Decompress:

; 1517 :     case ((PACKETINFO_ALU | PACKETINFO_MUL) >> 2):
; 1518 :       pICacheEntry->nuanceCount = 2;
; 1519 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MUL))

  00a2f	6a 03		 push	 3
  00a31	6a 02		 push	 2
  00a33	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  00a37	51		 push	 ecx
  00a38	8b cd		 mov	 ecx, ebp
  00a3a	c7 46 14 02 00
	00 00		 mov	 DWORD PTR [esi+20], 2
  00a41	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  00a46	84 c0		 test	 al, al
  00a48	74 07		 je	 SHORT $LN37@Decompress

; 1520 :       {
; 1521 :         mulIndex = 0;

  00a4a	33 c0		 xor	 eax, eax

; 1522 :         aluIndex = 1;

  00a4c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1523 :       }
; 1524 :       else

  00a4f	eb 07		 jmp	 SHORT $LN36@Decompress
$LN37@Decompress:

; 1525 :       {
; 1526 :         mulIndex = 1;

  00a51	b8 01 00 00 00	 mov	 eax, 1

; 1527 :         aluIndex = 0;

  00a56	33 ff		 xor	 edi, edi
$LN36@Decompress:

; 1528 :       }
; 1529 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  00a58	6a 03		 push	 3
  00a5a	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00a5e	52		 push	 edx
  00a5f	50		 push	 eax
  00a60	8b ce		 mov	 ecx, esi
  00a62	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1530 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

  00a67	6a 02		 push	 2
  00a69	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00a6d	50		 push	 eax
  00a6e	57		 push	 edi
  00a6f	8b ce		 mov	 ecx, esi
  00a71	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00a76	e9 ef 02 00 00	 jmp	 $LN7@Decompress
$LN35@Decompress:

; 1531 :       break;
; 1532 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_ECU) >> 2):
; 1533 :       pICacheEntry->nuanceCount = 3;
; 1534 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00a7b	f6 c3 01	 test	 bl, 1
  00a7e	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  00a85	74 0c		 je	 SHORT $LN34@Decompress

; 1535 :       {
; 1536 :         ecuIndex = 2;

  00a87	c7 44 24 14 02
	00 00 00	 mov	 DWORD PTR _ecuIndex$[esp+296], 2

; 1537 :         baseIndex = 0;

  00a8f	33 ff		 xor	 edi, edi

; 1538 :       }
; 1539 :       else

  00a91	eb 0d		 jmp	 SHORT $LN33@Decompress
$LN34@Decompress:

; 1540 :       {
; 1541 :         ecuIndex = 0;

  00a93	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _ecuIndex$[esp+296], 0

; 1542 :         baseIndex = 1;

  00a9b	bf 01 00 00 00	 mov	 edi, 1
$LN33@Decompress:

; 1543 :       }
; 1544 :       
; 1545 :       if(ChooseInstructionPairOrdering(&pStruct,SLOT_ALU,SLOT_MUL))

  00aa0	6a 03		 push	 3
  00aa2	6a 02		 push	 2
  00aa4	8d 4c 24 20	 lea	 ecx, DWORD PTR _pStruct$[esp+304]
  00aa8	51		 push	 ecx
  00aa9	8b cd		 mov	 ecx, ebp
  00aab	e8 00 00 00 00	 call	 ?ChooseInstructionPairOrdering@MPE@@QAE_NPAVInstructionCacheEntry@@II@Z ; MPE::ChooseInstructionPairOrdering
  00ab0	84 c0		 test	 al, al
  00ab2	74 07		 je	 SHORT $LN32@Decompress

; 1546 :       {
; 1547 :         mulIndex = baseIndex + 0;

  00ab4	8b df		 mov	 ebx, edi

; 1548 :         aluIndex = baseIndex + 1;

  00ab6	83 c7 01	 add	 edi, 1

; 1549 :       }
; 1550 :       else

  00ab9	eb 03		 jmp	 SHORT $LN31@Decompress
$LN32@Decompress:

; 1551 :       {
; 1552 :         mulIndex = baseIndex + 1;

  00abb	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
$LN31@Decompress:

; 1553 :         aluIndex = baseIndex + 0;
; 1554 :       }
; 1555 :       pICacheEntry->CopyInstructionData(ecuIndex,&pStruct,SLOT_ECU);

  00abe	8b 44 24 14	 mov	 eax, DWORD PTR _ecuIndex$[esp+296]
  00ac2	6a 00		 push	 0
  00ac4	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00ac8	52		 push	 edx
  00ac9	50		 push	 eax
  00aca	8b ce		 mov	 ecx, esi
  00acc	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1556 :       pICacheEntry->CopyInstructionData(mulIndex,&pStruct,SLOT_MUL);

  00ad1	6a 03		 push	 3
  00ad3	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00ad7	51		 push	 ecx
  00ad8	53		 push	 ebx
  00ad9	8b ce		 mov	 ecx, esi
  00adb	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1557 :       pICacheEntry->CopyInstructionData(aluIndex,&pStruct,SLOT_ALU);

  00ae0	6a 02		 push	 2
  00ae2	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00ae6	52		 push	 edx
  00ae7	57		 push	 edi
  00ae8	8b ce		 mov	 ecx, esi
  00aea	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00aef	e9 76 02 00 00	 jmp	 $LN7@Decompress
$LN30@Decompress:

; 1558 :       break;
; 1559 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_RCU) >> 2):
; 1560 :       pICacheEntry->nuanceCount = 3;
; 1561 :       ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

  00af4	6a 01		 push	 1
  00af6	6a 03		 push	 3
  00af8	6a 02		 push	 2
  00afa	8d 44 24 24	 lea	 eax, DWORD PTR _pStruct$[esp+308]
  00afe	50		 push	 eax
  00aff	6a 00		 push	 0
  00b01	56		 push	 esi
  00b02	8b cd		 mov	 ecx, ebp
  00b04	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3
  00b0b	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1562 :       break;

  00b10	e9 55 02 00 00	 jmp	 $LN7@Decompress
$LN29@Decompress:

; 1563 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_RCU | PACKETINFO_ECU) >> 2):
; 1564 :       pICacheEntry->nuanceCount = 4;
; 1565 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00b15	f6 c3 01	 test	 bl, 1
  00b18	c7 46 14 04 00
	00 00		 mov	 DWORD PTR [esi+20], 4

; 1566 :       {
; 1567 :         pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  00b1f	6a 00		 push	 0
  00b21	0f 84 3e 01 00
	00		 je	 $LN28@Decompress
  00b27	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00b2b	51		 push	 ecx
  00b2c	6a 03		 push	 3
  00b2e	8b ce		 mov	 ecx, esi
  00b30	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1568 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

  00b35	6a 01		 push	 1
$LN161@Decompress:
  00b37	6a 03		 push	 3
  00b39	6a 02		 push	 2
  00b3b	8d 54 24 24	 lea	 edx, DWORD PTR _pStruct$[esp+308]
  00b3f	52		 push	 edx
  00b40	6a 00		 push	 0
  00b42	56		 push	 esi
  00b43	8b cd		 mov	 ecx, ebp
  00b45	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1569 :       }
; 1570 :       else

  00b4a	e9 1b 02 00 00	 jmp	 $LN7@Decompress
$LN26@Decompress:

; 1571 :       {
; 1572 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);
; 1573 :         ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);
; 1574 :       }
; 1575 :       break;
; 1576 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM) >> 2):
; 1577 :       pICacheEntry->nuanceCount = 3;
; 1578 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00b4f	f6 c3 02	 test	 bl, 2
  00b52	c7 46 14 03 00
	00 00		 mov	 DWORD PTR [esi+20], 3

; 1579 :       {
; 1580 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00b59	6a 04		 push	 4
  00b5b	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00b5f	74 2f		 je	 SHORT $LN25@Decompress
  00b61	52		 push	 edx
  00b62	6a 00		 push	 0
  00b64	8b ce		 mov	 ecx, esi
  00b66	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1581 :         pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

  00b6b	6a 02		 push	 2
  00b6d	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00b71	50		 push	 eax
  00b72	6a 01		 push	 1
  00b74	8b ce		 mov	 ecx, esi
  00b76	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1582 :         pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);

  00b7b	6a 03		 push	 3
  00b7d	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00b81	51		 push	 ecx
  00b82	6a 02		 push	 2
  00b84	8b ce		 mov	 ecx, esi
  00b86	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00b8b	e9 da 01 00 00	 jmp	 $LN7@Decompress
$LN25@Decompress:

; 1583 :       }
; 1584 :       else
; 1585 :       {
; 1586 :         ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

  00b90	6a 03		 push	 3
  00b92	6a 02		 push	 2
  00b94	52		 push	 edx
  00b95	6a 00		 push	 0
  00b97	56		 push	 esi
  00b98	8b cd		 mov	 ecx, ebp
  00b9a	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1587 :       }
; 1588 :       break;

  00b9f	e9 c6 01 00 00	 jmp	 $LN7@Decompress
$LN23@Decompress:

; 1589 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU) >> 2): 
; 1590 :       pICacheEntry->nuanceCount = 4;
; 1591 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00ba4	f6 c3 01	 test	 bl, 1
  00ba7	c7 46 14 04 00
	00 00		 mov	 DWORD PTR [esi+20], 4
  00bae	74 33		 je	 SHORT $LN22@Decompress

; 1592 :       {
; 1593 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00bb0	f6 c3 02	 test	 bl, 2
  00bb3	74 17		 je	 SHORT $LN21@Decompress

; 1594 :         {
; 1595 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00bb5	6a 04		 push	 4
  00bb7	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00bbb	50		 push	 eax
  00bbc	6a 00		 push	 0
  00bbe	8b ce		 mov	 ecx, esi
  00bc0	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1596 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ALU);

  00bc5	6a 02		 push	 2

; 1597 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_MUL);
; 1598 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);
; 1599 :         }
; 1600 :         else

  00bc7	e9 15 fb ff ff	 jmp	 $LN170@Decompress
$LN21@Decompress:

; 1601 :         {
; 1602 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_ECU);

  00bcc	6a 00		 push	 0
  00bce	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00bd2	51		 push	 ecx
  00bd3	6a 03		 push	 3
  00bd5	8b ce		 mov	 ecx, esi
  00bd7	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1603 :           ScheduleInstructionTriplet(pICacheEntry,0,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

  00bdc	6a 04		 push	 4

; 1604 :         }
; 1605 :       }
; 1606 :       else

  00bde	e9 54 ff ff ff	 jmp	 $LN161@Decompress
$LN22@Decompress:

; 1607 :       {
; 1608 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00be3	f6 c3 02	 test	 bl, 2
  00be6	74 45		 je	 SHORT $LN18@Decompress

; 1609 :         {
; 1610 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00be8	6a 04		 push	 4
  00bea	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00bee	50		 push	 eax
  00bef	6a 00		 push	 0
  00bf1	8b ce		 mov	 ecx, esi
  00bf3	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1611 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  00bf8	6a 00		 push	 0
  00bfa	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00bfe	51		 push	 ecx
  00bff	6a 01		 push	 1
  00c01	8b ce		 mov	 ecx, esi
  00c03	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1612 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

  00c08	6a 02		 push	 2
  00c0a	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00c0e	52		 push	 edx
  00c0f	6a 02		 push	 2
  00c11	8b ce		 mov	 ecx, esi
  00c13	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1613 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_MUL);

  00c18	6a 03		 push	 3
  00c1a	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00c1e	50		 push	 eax
  00c1f	6a 03		 push	 3
  00c21	8b ce		 mov	 ecx, esi
  00c23	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00c28	e9 3d 01 00 00	 jmp	 $LN7@Decompress
$LN18@Decompress:

; 1614 :         }
; 1615 :         else
; 1616 :         {
; 1617 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  00c2d	6a 00		 push	 0
  00c2f	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00c33	51		 push	 ecx
  00c34	6a 00		 push	 0
  00c36	8b ce		 mov	 ecx, esi
  00c38	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1618 :           ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_MEM);

  00c3d	6a 04		 push	 4
  00c3f	6a 03		 push	 3
  00c41	6a 02		 push	 2
  00c43	8d 54 24 24	 lea	 edx, DWORD PTR _pStruct$[esp+308]
  00c47	52		 push	 edx
  00c48	6a 01		 push	 1
  00c4a	56		 push	 esi
  00c4b	8b cd		 mov	 ecx, ebp
  00c4d	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1619 :         }
; 1620 :       }
; 1621 :       break;

  00c52	e9 13 01 00 00	 jmp	 $LN7@Decompress
$LN16@Decompress:

; 1622 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_RCU) >> 2): 
; 1623 :       pICacheEntry->nuanceCount = 4;
; 1624 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00c57	f6 c3 02	 test	 bl, 2
  00c5a	c7 46 14 04 00
	00 00		 mov	 DWORD PTR [esi+20], 4
  00c61	74 2a		 je	 SHORT $LN15@Decompress

; 1625 :       {
; 1626 :         pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00c63	6a 04		 push	 4
$LN28@Decompress:
  00c65	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00c69	50		 push	 eax
  00c6a	6a 00		 push	 0
  00c6c	8b ce		 mov	 ecx, esi
  00c6e	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1627 :         ScheduleInstructionTriplet(pICacheEntry,1,&pStruct,SLOT_ALU,SLOT_MUL,SLOT_RCU);

  00c73	6a 01		 push	 1
  00c75	6a 03		 push	 3
  00c77	6a 02		 push	 2
  00c79	8d 4c 24 24	 lea	 ecx, DWORD PTR _pStruct$[esp+308]
  00c7d	51		 push	 ecx
  00c7e	6a 01		 push	 1
  00c80	56		 push	 esi
  00c81	8b cd		 mov	 ecx, ebp
  00c83	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet
  00c88	e9 dd 00 00 00	 jmp	 $LN7@Decompress
$LN15@Decompress:

; 1628 :       }
; 1629 :       else
; 1630 :       {
; 1631 :         ScheduleInstructionQuartet(pICacheEntry,0,&pStruct);

  00c8d	8d 54 24 18	 lea	 edx, DWORD PTR _pStruct$[esp+296]
  00c91	52		 push	 edx
  00c92	6a 00		 push	 0

; 1632 :       }
; 1633 :       break;

  00c94	e9 c9 00 00 00	 jmp	 $LN156@Decompress
$LN13@Decompress:

; 1634 :     case ((PACKETINFO_ALU | PACKETINFO_MUL | PACKETINFO_MEM | PACKETINFO_ECU | PACKETINFO_RCU) >> 2): 
; 1635 :       pICacheEntry->nuanceCount = 5;
; 1636 :       if(options & DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST)

  00c99	f6 c3 01	 test	 bl, 1
  00c9c	c7 46 14 05 00
	00 00		 mov	 DWORD PTR [esi+20], 5
  00ca3	74 6e		 je	 SHORT $LN12@Decompress

; 1637 :       {
; 1638 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00ca5	f6 c3 02	 test	 bl, 2

; 1639 :         {
; 1640 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00ca8	8b ce		 mov	 ecx, esi
  00caa	74 50		 je	 SHORT $LN11@Decompress
  00cac	6a 04		 push	 4
  00cae	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00cb2	50		 push	 eax
  00cb3	6a 00		 push	 0
  00cb5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1641 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_RCU);

  00cba	6a 01		 push	 1
  00cbc	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00cc0	51		 push	 ecx
  00cc1	6a 01		 push	 1
  00cc3	8b ce		 mov	 ecx, esi
  00cc5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1642 :           pICacheEntry->CopyInstructionData(2,&pStruct,SLOT_ALU);

  00cca	6a 02		 push	 2
  00ccc	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00cd0	52		 push	 edx
  00cd1	6a 02		 push	 2
  00cd3	8b ce		 mov	 ecx, esi
  00cd5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1643 :           pICacheEntry->CopyInstructionData(3,&pStruct,SLOT_MUL);

  00cda	6a 03		 push	 3
  00cdc	8d 44 24 1c	 lea	 eax, DWORD PTR _pStruct$[esp+300]
  00ce0	50		 push	 eax
  00ce1	6a 03		 push	 3
  00ce3	8b ce		 mov	 ecx, esi
  00ce5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1644 :           pICacheEntry->CopyInstructionData(4,&pStruct,SLOT_ECU);

  00cea	6a 00		 push	 0
  00cec	8d 4c 24 1c	 lea	 ecx, DWORD PTR _pStruct$[esp+300]
  00cf0	51		 push	 ecx
  00cf1	6a 04		 push	 4
  00cf3	8b ce		 mov	 ecx, esi
  00cf5	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData
  00cfa	eb 6e		 jmp	 SHORT $LN7@Decompress
$LN11@Decompress:

; 1645 :         }
; 1646 :         else
; 1647 :         {
; 1648 :           pICacheEntry->CopyInstructionData(4,&pStruct,SLOT_ECU);

  00cfc	6a 00		 push	 0
  00cfe	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00d02	52		 push	 edx
  00d03	6a 04		 push	 4
  00d05	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1649 :           ScheduleInstructionQuartet(pICacheEntry,0,&pStruct);

  00d0a	8d 44 24 18	 lea	 eax, DWORD PTR _pStruct$[esp+296]
  00d0e	50		 push	 eax
  00d0f	6a 00		 push	 0

; 1650 :         }
; 1651 :       }
; 1652 :       else

  00d11	eb 4f		 jmp	 SHORT $LN156@Decompress
$LN12@Decompress:

; 1653 :       {
; 1654 :         if(options & DECOMPRESS_OPTIONS_SCHEDULE_MEM_FIRST)

  00d13	f6 c3 02	 test	 bl, 2

; 1655 :         {
; 1656 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_MEM);

  00d16	8d 4c 24 18	 lea	 ecx, DWORD PTR _pStruct$[esp+296]
  00d1a	74 33		 je	 SHORT $LN8@Decompress
  00d1c	6a 04		 push	 4
  00d1e	51		 push	 ecx
  00d1f	6a 00		 push	 0
  00d21	8b ce		 mov	 ecx, esi
  00d23	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1657 :           pICacheEntry->CopyInstructionData(1,&pStruct,SLOT_ECU);

  00d28	6a 00		 push	 0
  00d2a	8d 54 24 1c	 lea	 edx, DWORD PTR _pStruct$[esp+300]
  00d2e	52		 push	 edx
  00d2f	6a 01		 push	 1
  00d31	8b ce		 mov	 ecx, esi
  00d33	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1658 :           ScheduleInstructionTriplet(pICacheEntry,2,&pStruct,SLOT_RCU,SLOT_ALU,SLOT_MUL);

  00d38	6a 03		 push	 3
  00d3a	6a 02		 push	 2
  00d3c	6a 01		 push	 1
  00d3e	8d 44 24 24	 lea	 eax, DWORD PTR _pStruct$[esp+308]
  00d42	50		 push	 eax
  00d43	6a 02		 push	 2
  00d45	56		 push	 esi
  00d46	8b cd		 mov	 ecx, ebp
  00d48	e8 00 00 00 00	 call	 ?ScheduleInstructionTriplet@MPE@@QAEXPAVInstructionCacheEntry@@I0III@Z ; MPE::ScheduleInstructionTriplet

; 1659 :         }
; 1660 :         else

  00d4d	eb 1b		 jmp	 SHORT $LN7@Decompress
$LN8@Decompress:

; 1661 :         {
; 1662 :           pICacheEntry->CopyInstructionData(0,&pStruct,SLOT_ECU);

  00d4f	6a 00		 push	 0
  00d51	51		 push	 ecx
  00d52	6a 00		 push	 0
  00d54	8b ce		 mov	 ecx, esi
  00d56	e8 00 00 00 00	 call	 ?CopyInstructionData@InstructionCacheEntry@@QAEXIPAV1@I@Z ; InstructionCacheEntry::CopyInstructionData

; 1663 :           ScheduleInstructionQuartet(pICacheEntry,1,&pStruct);

  00d5b	8d 54 24 18	 lea	 edx, DWORD PTR _pStruct$[esp+296]
  00d5f	52		 push	 edx
  00d60	6a 01		 push	 1
$LN156@Decompress:
  00d62	56		 push	 esi
  00d63	8b cd		 mov	 ecx, ebp
  00d65	e8 00 00 00 00	 call	 ?ScheduleInstructionQuartet@MPE@@QAEXPAVInstructionCacheEntry@@I0@Z ; MPE::ScheduleInstructionQuartet
$LN7@Decompress:

; 1664 :         }
; 1665 :       }
; 1666 :       break;
; 1667 :   }
; 1668 : 
; 1669 :   comboScalarInDep = 0;
; 1670 :   comboMiscInDep = 0;
; 1671 :   comboScalarOutDep = pICacheEntry->scalarOutputDependencies[0];
; 1672 :   comboMiscOutDep = pICacheEntry->miscOutputDependencies[0];
; 1673 : 
; 1674 :   for(i = 1; i < 5; i++)
; 1675 :   {
; 1676 :     comboScalarInDep |= (pICacheEntry->scalarInputDependencies[i] & comboScalarOutDep);

  00d6a	8b be c0 00 00
	00		 mov	 edi, DWORD PTR [esi+192]
  00d70	8b 86 e4 00 00
	00		 mov	 eax, DWORD PTR [esi+228]
  00d76	8b 8e f8 00 00
	00		 mov	 ecx, DWORD PTR [esi+248]
  00d7c	8b 9e c4 00 00
	00		 mov	 ebx, DWORD PTR [esi+196]
  00d82	23 f8		 and	 edi, eax

; 1677 :     comboMiscInDep |= (pICacheEntry->miscInputDependencies[i] & comboMiscOutDep);
; 1678 :     comboScalarOutDep |= pICacheEntry->scalarOutputDependencies[i];

  00d84	0b 86 e8 00 00
	00		 or	 eax, DWORD PTR [esi+232]
  00d8a	8b d1		 mov	 edx, ecx

; 1679 :     comboMiscOutDep |= pICacheEntry->miscOutputDependencies[i];

  00d8c	0b 8e fc 00 00
	00		 or	 ecx, DWORD PTR [esi+252]
  00d92	23 96 d4 00 00
	00		 and	 edx, DWORD PTR [esi+212]
  00d98	23 d8		 and	 ebx, eax
  00d9a	0b 86 ec 00 00
	00		 or	 eax, DWORD PTR [esi+236]
  00da0	0b fb		 or	 edi, ebx
  00da2	8b d9		 mov	 ebx, ecx
  00da4	23 9e d8 00 00
	00		 and	 ebx, DWORD PTR [esi+216]
  00daa	0b 8e 00 01 00
	00		 or	 ecx, DWORD PTR [esi+256]
  00db0	0b d3		 or	 edx, ebx
  00db2	8b 9e c8 00 00
	00		 mov	 ebx, DWORD PTR [esi+200]
  00db8	23 d8		 and	 ebx, eax
  00dba	0b fb		 or	 edi, ebx
  00dbc	8b d9		 mov	 ebx, ecx
  00dbe	23 9e dc 00 00
	00		 and	 ebx, DWORD PTR [esi+220]
  00dc4	0b d3		 or	 edx, ebx
  00dc6	8b 9e f0 00 00
	00		 mov	 ebx, DWORD PTR [esi+240]
  00dcc	0b d8		 or	 ebx, eax
  00dce	8b 86 04 01 00
	00		 mov	 eax, DWORD PTR [esi+260]
  00dd4	23 9e cc 00 00
	00		 and	 ebx, DWORD PTR [esi+204]
  00dda	0b c1		 or	 eax, ecx
  00ddc	23 86 e0 00 00
	00		 and	 eax, DWORD PTR [esi+224]

; 1680 :   }
; 1681 : 
; 1682 :   pICacheEntry->packetInfo = pStruct.packetInfo;
; 1683 :   pICacheEntry->ecuConditionCode = pStruct.ecuConditionCode;

  00de2	8b 4c 24 6c	 mov	 ecx, DWORD PTR _pStruct$[esp+380]
  00de6	0b d0		 or	 edx, eax
  00de8	8b 44 24 30	 mov	 eax, DWORD PTR _pStruct$[esp+320]
  00dec	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00def	89 4e 54	 mov	 DWORD PTR [esi+84], ecx

; 1684 : 
; 1685 :   if(!nuonEnv->compilerOptions.bAllowCompile)

  00df2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
  00df8	0b fb		 or	 edi, ebx
  00dfa	80 79 77 00	 cmp	 BYTE PTR [ecx+119], 0
  00dfe	5b		 pop	 ebx
  00dff	75 08		 jne	 SHORT $LN3@Decompress

; 1686 :   {
; 1687 :     pICacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

  00e01	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H
  00e06	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN3@Decompress:

; 1688 :   }
; 1689 : 
; 1690 :   if(comboScalarInDep | comboMiscInDep)

  00e09	0b d7		 or	 edx, edi
  00e0b	74 60		 je	 SHORT $LN2@Decompress

; 1691 :   {
; 1692 :     pICacheEntry->packetInfo |= PACKETINFO_DEPENDENCY_PRESENT;

  00e0d	81 4e 18 80 00
	00 00		 or	 DWORD PTR [esi+24], 128	; 00000080H

; 1693 : 
; 1694 :     pICacheEntry->pScalarRegs = tempScalarRegs;

  00e14	8d 95 c0 00 00
	00		 lea	 edx, DWORD PTR [ebp+192]

; 1695 :     pICacheEntry->pIndexRegs = &tempRx;

  00e1a	8d 85 4c 01 00
	00		 lea	 eax, DWORD PTR [ebp+332]

; 1696 :     pICacheEntry->pRzRegs = &tempRz;

  00e20	8d 8d 5c 01 00
	00		 lea	 ecx, DWORD PTR [ebp+348]
  00e26	89 56 24	 mov	 DWORD PTR [esi+36], edx
  00e29	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00e2c	89 4e 30	 mov	 DWORD PTR [esi+48], ecx

; 1697 :     pICacheEntry->pCounterRegs = &tempRc0;

  00e2f	8d 95 44 01 00
	00		 lea	 edx, DWORD PTR [ebp+324]

; 1698 :     pICacheEntry->pAcshift = &tempAcshift;

  00e35	8d 85 78 01 00
	00		 lea	 eax, DWORD PTR [ebp+376]

; 1699 :     pICacheEntry->pSvshift = &tempSvshift;

  00e3b	8d 8d 7c 01 00
	00		 lea	 ecx, DWORD PTR [ebp+380]
  00e41	89 56 2c	 mov	 DWORD PTR [esi+44], edx
  00e44	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00e47	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 1700 :     pICacheEntry->pXyctl = &tempXyctl;

  00e4a	8d 95 68 01 00
	00		 lea	 edx, DWORD PTR [ebp+360]

; 1701 :     pICacheEntry->pUvctl = &tempUvctl;

  00e50	8d 85 6c 01 00
	00		 lea	 eax, DWORD PTR [ebp+364]

; 1702 :     pICacheEntry->pXyrange = &tempXyrange;

  00e56	8d 8d 70 01 00
	00		 lea	 ecx, DWORD PTR [ebp+368]
  00e5c	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  00e5f	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00e62	89 4e 44	 mov	 DWORD PTR [esi+68], ecx

; 1703 :     pICacheEntry->pUvrange = &tempUvrange;

  00e65	81 c5 74 01 00
	00		 add	 ebp, 372		; 00000174H

; 1704 :   }
; 1705 :   else

  00e6b	eb 51		 jmp	 SHORT $LN163@Decompress
$LN2@Decompress:

; 1706 :   {
; 1707 :     pICacheEntry->pScalarRegs = regs;
; 1708 :     pICacheEntry->pIndexRegs = &rx;

  00e6d	8d 95 8c 00 00
	00		 lea	 edx, DWORD PTR [ebp+140]

; 1709 :     pICacheEntry->pRzRegs = &rz;

  00e73	8d 85 9c 00 00
	00		 lea	 eax, DWORD PTR [ebp+156]
  00e79	89 56 28	 mov	 DWORD PTR [esi+40], edx
  00e7c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 1710 :     pICacheEntry->pCounterRegs = &rc0;

  00e7f	8d 8d 84 00 00
	00		 lea	 ecx, DWORD PTR [ebp+132]

; 1711 :     pICacheEntry->pAcshift = &acshift;

  00e85	8d 95 b8 00 00
	00		 lea	 edx, DWORD PTR [ebp+184]

; 1712 :     pICacheEntry->pSvshift = &svshift;

  00e8b	8d 85 bc 00 00
	00		 lea	 eax, DWORD PTR [ebp+188]
  00e91	89 4e 2c	 mov	 DWORD PTR [esi+44], ecx
  00e94	89 56 34	 mov	 DWORD PTR [esi+52], edx
  00e97	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 1713 :     pICacheEntry->pXyctl = &xyctl;

  00e9a	8d 8d a8 00 00
	00		 lea	 ecx, DWORD PTR [ebp+168]

; 1714 :     pICacheEntry->pUvctl = &uvctl;

  00ea0	8d 95 ac 00 00
	00		 lea	 edx, DWORD PTR [ebp+172]

; 1715 :     pICacheEntry->pXyrange = &xyrange;

  00ea6	8d 85 b0 00 00
	00		 lea	 eax, DWORD PTR [ebp+176]
  00eac	89 6e 24	 mov	 DWORD PTR [esi+36], ebp
  00eaf	89 4e 3c	 mov	 DWORD PTR [esi+60], ecx
  00eb2	89 56 40	 mov	 DWORD PTR [esi+64], edx
  00eb5	89 46 44	 mov	 DWORD PTR [esi+68], eax

; 1716 :     pICacheEntry->pUvrange = &uvrange;

  00eb8	81 c5 b4 00 00
	00		 add	 ebp, 180		; 000000b4H
$LN163@Decompress:

; 1717 :   }
; 1718 : 
; 1719 :   pICacheEntry->handlers[0] = pICacheEntry->nuances[0];

  00ebe	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 1720 :   pICacheEntry->handlers[1] = pICacheEntry->nuances[5];

  00ec1	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]

; 1721 :   pICacheEntry->handlers[2] = pICacheEntry->nuances[10];

  00ec4	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00eca	89 0e		 mov	 DWORD PTR [esi], ecx

; 1722 :   pICacheEntry->handlers[3] = pICacheEntry->nuances[15];

  00ecc	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]
  00ed2	89 56 04	 mov	 DWORD PTR [esi+4], edx

; 1723 :   pICacheEntry->handlers[4] = pICacheEntry->nuances[20];

  00ed5	8b 96 a8 00 00
	00		 mov	 edx, DWORD PTR [esi+168]
  00edb	5f		 pop	 edi
  00edc	89 6e 48	 mov	 DWORD PTR [esi+72], ebp
  00edf	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00ee2	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00ee5	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00ee8	5e		 pop	 esi
  00ee9	5d		 pop	 ebp

; 1724 : }

  00eea	81 c4 18 01 00
	00		 add	 esp, 280		; 00000118H
  00ef0	c2 0c 00	 ret	 12			; 0000000cH
  00ef3	90		 npad	 1
$LN171@Decompress:
  00ef4	00 00 00 00	 DD	 $LN125@Decompress
  00ef8	00 00 00 00	 DD	 $LN124@Decompress
  00efc	00 00 00 00	 DD	 $LN123@Decompress
  00f00	00 00 00 00	 DD	 $LN122@Decompress
  00f04	00 00 00 00	 DD	 $LN119@Decompress
  00f08	00 00 00 00	 DD	 $LN118@Decompress
  00f0c	00 00 00 00	 DD	 $LN114@Decompress
  00f10	00 00 00 00	 DD	 $LN110@Decompress
  00f14	00 00 00 00	 DD	 $LN102@Decompress
  00f18	00 00 00 00	 DD	 $LN101@Decompress
  00f1c	00 00 00 00	 DD	 $LN98@Decompress
  00f20	00 00 00 00	 DD	 $LN95@Decompress
  00f24	00 00 00 00	 DD	 $LN90@Decompress
  00f28	00 00 00 00	 DD	 $LN86@Decompress
  00f2c	00 00 00 00	 DD	 $LN78@Decompress
  00f30	00 00 00 00	 DD	 $LN75@Decompress
  00f34	00 00 00 00	 DD	 $LN68@Decompress
  00f38	00 00 00 00	 DD	 $LN67@Decompress
  00f3c	00 00 00 00	 DD	 $LN64@Decompress
  00f40	00 00 00 00	 DD	 $LN63@Decompress
  00f44	00 00 00 00	 DD	 $LN60@Decompress
  00f48	00 00 00 00	 DD	 $LN56@Decompress
  00f4c	00 00 00 00	 DD	 $LN48@Decompress
  00f50	00 00 00 00	 DD	 $LN45@Decompress
  00f54	00 00 00 00	 DD	 $LN38@Decompress
  00f58	00 00 00 00	 DD	 $LN35@Decompress
  00f5c	00 00 00 00	 DD	 $LN30@Decompress
  00f60	00 00 00 00	 DD	 $LN29@Decompress
  00f64	00 00 00 00	 DD	 $LN26@Decompress
  00f68	00 00 00 00	 DD	 $LN23@Decompress
  00f6c	00 00 00 00	 DD	 $LN16@Decompress
  00f70	00 00 00 00	 DD	 $LN13@Decompress
?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ENDP ; MPE::DecompressPacket
_TEXT	ENDS
PUBLIC	?FetchDecodeExecute@MPE@@QAE_NXZ		; MPE::FetchDecodeExecute
EXTRN	?CallPEHandler@@YAXPAVMPE@@I@Z:PROC		; CallPEHandler
EXTRN	?bCallingMediaCallback@@3_NA:BYTE		; bCallingMediaCallback
EXTRN	?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA:BYTE		; BiosJumpTable
EXTRN	?PrintBlockToFile@SuperBlock@@QAEXW4SuperBlockCompileType@@I@Z:PROC ; SuperBlock::PrintBlockToFile
EXTRN	?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z:PROC ; NativeCodeCache::FindNativeCodeCacheEntry
EXTRN	?FlushRegion@NativeCodeCache@@QAEXII@Z:PROC	; NativeCodeCache::FlushRegion
EXTRN	?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z:PROC	; OverlayManager::FindOverlay
; Function compile flags: /Ogtpy
;	COMDAT ?FetchDecodeExecute@MPE@@QAE_NXZ
_TEXT	SEGMENT
_bInvalidateOverlayRegion$ = -14			; size = 1
_bError$ = -13						; size = 1
_bCacheEntryValid$ = -12				; size = 4
_nativeCodeCacheEntryPoint$ = -8			; size = 4
_pNativeCodeCacheEntry$ = -4				; size = 4
?FetchDecodeExecute@MPE@@QAE_NXZ PROC			; MPE::FetchDecodeExecute, COMDAT
; _this$ = ecx

; 1940 : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	55		 push	 ebp
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1941 :   NativeCodeCacheEntry *pNativeCodeCacheEntry;
; 1942 :   InstructionCacheEntry *pInstructionCacheEntry;
; 1943 :   Nuance *pNuance;
; 1944 :   uint32 nInstructions, i, oldOverlayIndex, newOverlayIndex, pcexecLookupValue;
; 1945 :   bool bInvalidateOverlayRegion;
; 1946 :   bool bError;
; 1947 :   bool memory_valid;
; 1948 :   uint32 blockExecuteCount = 100;
; 1949 :   uint32 bCacheEntryValid;
; 1950 : 
; 1951 :   NativeCodeCacheEntryPoint nativeCodeCacheEntryPoint;
; 1952 : 
; 1953 :   cycleCounter = 0;

  00007	33 ed		 xor	 ebp, ebp

; 1954 : 
; 1955 :   if(mpectl & MPECTRL_MPEGO)

  00009	f6 86 80 01 00
	00 02		 test	 BYTE PTR [esi+384], 2
  00010	89 ae 48 02 00
	00		 mov	 DWORD PTR [esi+584], ebp
  00016	89 ae 4c 02 00
	00		 mov	 DWORD PTR [esi+588], ebp
  0001c	0f 84 b9 05 00
	00		 je	 $LN65@FetchDecod

; 1956 :   {
; 1957 :     //StartPerformanceTimer();
; 1958 : 
; 1959 :     bInvalidateOverlayRegion = false;
; 1960 :     nativeCodeCacheEntryPoint = 0;
; 1961 :     pNativeCodeCacheEntry = 0;
; 1962 :     pInstructionCacheEntry = 0;
; 1963 : 
; 1964 :     /* Force 16 bit alignment of pcexec */
; 1965 :     pcexec &= ~0x01UL;

  00022	83 a6 98 01 00
	00 fe		 and	 DWORD PTR [esi+408], -2	; fffffffeH

; 1966 : 
; 1967 :     /* Check for interrupts and update pcexec, rzi1 and rzi2 if an interrupt is to be serviced */
; 1968 : 
; 1969 :     if(intsrc && (ecuSkipCounter == 0))

  00029	8b 96 a4 01 00
	00		 mov	 edx, DWORD PTR [esi+420]
  0002f	53		 push	 ebx
  00030	8b 9e 98 01 00
	00		 mov	 ebx, DWORD PTR [esi+408]
  00036	57		 push	 edi
  00037	33 ff		 xor	 edi, edi
  00039	3b d5		 cmp	 edx, ebp
  0003b	c6 44 24 12 00	 mov	 BYTE PTR _bInvalidateOverlayRegion$[esp+32], 0
  00040	89 6c 24 18	 mov	 DWORD PTR _nativeCodeCacheEntryPoint$[esp+32], ebp
  00044	89 6c 24 1c	 mov	 DWORD PTR _pNativeCodeCacheEntry$[esp+32], ebp
  00048	74 67		 je	 SHORT $LN58@FetchDecod
  0004a	39 ae 40 02 00
	00		 cmp	 DWORD PTR [esi+576], ebp
  00050	75 5f		 jne	 SHORT $LN58@FetchDecod

; 1970 :     {
; 1971 :       //Test imaskHw2 bit
; 1972 :       if((intctl & (1UL << 5)) == 0)

  00052	8b 86 ac 01 00
	00		 mov	 eax, DWORD PTR [esi+428]
  00058	a8 20		 test	 al, 32			; 00000020H
  0005a	75 55		 jne	 SHORT $LN58@FetchDecod

; 1973 :       {
; 1974 :         //imaskHw2 not set
; 1975 :         //Test to see if the level 2 interrupt has occurred
; 1976 :         if(intsrc & (1UL << inten2sel))

  0005c	8b 8e bc 01 00
	00		 mov	 ecx, DWORD PTR [esi+444]
  00062	bd 01 00 00 00	 mov	 ebp, 1
  00067	d3 e5		 shl	 ebp, cl
  00069	85 ea		 test	 ebp, edx
  0006b	74 1b		 je	 SHORT $LN62@FetchDecod

; 1977 :         {
; 1978 :           //Test imaskSw2 mask
; 1979 :           if((intctl & (1UL << 7)) == 0)

  0006d	84 c0		 test	 al, al
  0006f	78 3e		 js	 SHORT $LN86@FetchDecod

; 1980 :           {
; 1981 :             //imaskSw2 not set so jump to the level 2 interrupt vector
; 1982 :             rzi2 = pcexec;
; 1983 :             pcexec = intvec2;

  00071	8b 8e a0 01 00
	00		 mov	 ecx, DWORD PTR [esi+416]
  00077	89 9e a4 00 00
	00		 mov	 DWORD PTR [esi+164], ebx
  0007d	89 8e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ecx

; 1984 :             //set imaskHw2 flag
; 1985 :             intctl |= (1UL << 5);

  00083	83 c8 20	 or	 eax, 32			; 00000020H

; 1986 :           }
; 1987 :         }

  00086	eb 21		 jmp	 SHORT $LN95@FetchDecod
$LN62@FetchDecod:

; 1988 :         else if((intctl & ((1UL << 3) | (1UL << 1))) == 0)

  00088	a8 0a		 test	 al, 10			; 0000000aH
  0008a	75 23		 jne	 SHORT $LN86@FetchDecod

; 1989 :         {
; 1990 :           //imaskHw2 not set
; 1991 :           //neither imaskSw1 nor imaskHw1 set
; 1992 :           //Test to see if an enabled level 1 interrupt has occurred
; 1993 :           if(intsrc & inten1)

  0008c	85 96 b0 01 00
	00		 test	 DWORD PTR [esi+432], edx
  00092	74 1b		 je	 SHORT $LN86@FetchDecod

; 1994 :           {
; 1995 :             //Jump to the level 1 interrupt vector
; 1996 :             rzi1 = pcexec;
; 1997 :             pcexec = intvec1;

  00094	8b 96 9c 01 00
	00		 mov	 edx, DWORD PTR [esi+412]
  0009a	89 9e a0 00 00
	00		 mov	 DWORD PTR [esi+160], ebx
  000a0	89 96 98 01 00
	00		 mov	 DWORD PTR [esi+408], edx

; 1998 :             //set imaskHw1 flag
; 1999 :             intctl |= (1UL << 1);

  000a6	83 c8 02	 or	 eax, 2
$LN95@FetchDecod:
  000a9	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
$LN86@FetchDecod:
  000af	33 ed		 xor	 ebp, ebp
$LN58@FetchDecod:

; 2000 :           }
; 2001 :         }
; 2002 :       }
; 2003 :     }
; 2004 : 
; 2005 :     pcexecLookupValue = pcexec;

  000b1	8b 9e 98 01 00
	00		 mov	 ebx, DWORD PTR [esi+408]

; 2006 : 
; 2007 :     /* Now check to see if the MPE is executing out of local MPE memory.  If it is, then check to see if the MPE is executing */
; 2008 :     /* code within a region that has been marked for invalidation.  If executing with an invalidated region, the overlay manager */
; 2009 :     /* needs to hash the local MPE memory and see if the hash matches that of any existing compiled overlays in its list.  If it */
; 2010 :     /* can't find a match, a new overlay index is allocated or an existing set of compiled overlay code is replaced.  It a match is */
; 2011 :     /* made then that index is used.  Once an index is assigned, the index is combined with the current pcexec value to map the overlay */
; 2012 :     /* to an unused region of the Nuon address space to allow multiple sets of compiled overlays to co-exist even when the overlays */
; 2013 :     /* correspond to the same physical memory addresses.  As an example, the first set of code to be executed from MPE memory will be */
; 2014 :     /* assigned overlay index 0 and the compiled code will be assigned to the code cache range $20300000-$20307FFF.  If new overlay code
; 2015 :     /* is loaded into the MPE local memory and executed, the hash will not match that of overlay index 0 and so overlay index 1 will be */
; 2016 :     /* assigned with a code cache range of $20308000-$2030FFFF.  This is an important optimization as games like Tempest 3000 load */
; 2017 :     /* multiple overlays into the MPEs several times per frame.  If compiled overlay code was not allowed to exist, the overlay code would */
; 2018 :     /* require compiliation every time new overlay code was loaded into an MPE even when ping-ponging between two sets of overlay code. */
; 2019 :     /* The code cache entries would also require invalidation each time this happened. */
; 2020 : 
; 2021 :     if((pcexec < (MPE_IRAM_BASE + OVERLAY_SIZE)) && (pcexec >= MPE_IRAM_BASE))

  000b7	81 fb 00 20 30
	20		 cmp	 ebx, 540024832		; 20302000H
  000bd	0f 83 9b 00 00
	00		 jae	 $LN57@FetchDecod
  000c3	81 fb 00 00 30
	20		 cmp	 ebx, 540016640		; 20300000H
  000c9	0f 82 8f 00 00
	00		 jb	 $LN57@FetchDecod

; 2022 :     {
; 2023 :       //pcexec is within local MPE IRAM address space
; 2024 :       if((pcexec <= invalidateRegionEnd) && (pcexec >= invalidateRegionStart))

  000cf	3b 9e 74 02 00
	00		 cmp	 ebx, DWORD PTR [esi+628]
  000d5	77 7f		 ja	 SHORT $LN87@FetchDecod
  000d7	3b 9e 70 02 00
	00		 cmp	 ebx, DWORD PTR [esi+624]
  000dd	72 77		 jb	 SHORT $LN87@FetchDecod

; 2025 :       {
; 2026 :         //pcexec is within MPE IRAM region that has been modified since the last time it was hashed
; 2027 : 
; 2028 :         overlayIndex = overlayManager->FindOverlay((uint32 *)&dtrom[MPE_IRAM_OFFSET], bInvalidateOverlayRegion);

  000df	8b 8e 30 02 00
	00		 mov	 ecx, DWORD PTR [esi+560]
  000e5	8d 44 24 12	 lea	 eax, DWORD PTR _bInvalidateOverlayRegion$[esp+32]
  000e9	81 c1 00 00 30
	00		 add	 ecx, 3145728		; 00300000H
  000ef	50		 push	 eax
  000f0	51		 push	 ecx
  000f1	8b 8e ac 02 00
	00		 mov	 ecx, DWORD PTR [esi+684]
  000f7	e8 00 00 00 00	 call	 ?FindOverlay@OverlayManager@@QAEIPAIAA_N@Z ; OverlayManager::FindOverlay

; 2029 : 
; 2030 :         //Get the new overlay mask
; 2031 :         overlayMask = overlayManager->GetOverlayMask();

  000fc	8b 96 ac 02 00
	00		 mov	 edx, DWORD PTR [esi+684]
  00102	89 86 64 02 00
	00		 mov	 DWORD PTR [esi+612], eax
  00108	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0010b	c1 e0 0d	 shl	 eax, 13			; 0000000dH

; 2032 : 
; 2033 :         //Invalidate the interpreter cache because these entries are not mapped to unique address ranges
; 2034 :         
; 2035 :         //numInterpreterCacheFlushes++;
; 2036 :         //instructionCache->InvalidateRegion(invalidateRegionStart, invalidateRegionEnd);
; 2037 :         bInvalidateInterpreterCache = true;
; 2038 : 
; 2039 :         if(bInvalidateOverlayRegion)

  0010e	80 7c 24 12 00	 cmp	 BYTE PTR _bInvalidateOverlayRegion$[esp+32], 0
  00113	89 86 68 02 00
	00		 mov	 DWORD PTR [esi+616], eax
  00119	c6 86 80 02 00
	00 01		 mov	 BYTE PTR [esi+640], 1
  00120	74 24		 je	 SHORT $ResetInvalidateRegion$53071

; 2040 :         {
; 2041 :           //The overlay manager assigned a previously used overlay ID so invalidate the code cache entries
; 2042 :           //associated with the overlay address range
; 2043 :           numNativeCodeCacheFlushes++;
; 2044 :           nativeCodeCache->FlushRegion(invalidateRegionStart | overlayMask, invalidateRegionEnd | overlayMask);

  00122	8b 8e 74 02 00
	00		 mov	 ecx, DWORD PTR [esi+628]
  00128	8b 96 70 02 00
	00		 mov	 edx, DWORD PTR [esi+624]
  0012e	83 86 88 02 00
	00 01		 add	 DWORD PTR [esi+648], 1
  00135	0b c8		 or	 ecx, eax
  00137	51		 push	 ecx
  00138	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  0013e	0b d0		 or	 edx, eax
  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ?FlushRegion@NativeCodeCache@@QAEXII@Z ; NativeCodeCache::FlushRegion
$ResetInvalidateRegion$53071:

; 2045 :         }
; 2046 : ResetInvalidateRegion:
; 2047 :         //Reset the IRAM invalidation indicators
; 2048 :         invalidateRegionStart = 0xFFFFFFFFUL;

  00146	c7 86 70 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+624], -1

; 2049 :         invalidateRegionEnd = 0x00000000UL;

  00150	89 ae 74 02 00
	00		 mov	 DWORD PTR [esi+628], ebp
$LN87@FetchDecod:

; 2050 :       }
; 2051 : 
; 2052 :       //Modify the pcexec lookup value.  If pcexec is not within MPE IRAM, the lookup value will remain equal to
; 2053 :       //pcexec otherwise it will be equal to pcexec ORed with the overlay mask
; 2054 : 
; 2055 :       pcexecLookupValue |= overlayMask;

  00156	0b 9e 68 02 00
	00		 or	 ebx, DWORD PTR [esi+616]

; 2056 :     }
; 2057 :     else

  0015c	eb 65		 jmp	 SHORT $LN92@FetchDecod
$LN57@FetchDecod:

; 2058 :     {
; 2059 :       if(bInvalidateInstructionCaches)

  0015e	80 be 81 02 00
	00 00		 cmp	 BYTE PTR [esi+641], 0
  00165	74 5c		 je	 SHORT $LN92@FetchDecod

; 2060 :       {
; 2061 :         bInvalidateInstructionCaches = false;
; 2062 :         instructionCache->Invalidate();

  00167	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  0016d	c6 86 81 02 00
	00 00		 mov	 BYTE PTR [esi+641], 0
  00174	e8 00 00 00 00	 call	 ?Invalidate@InstructionCache@@QAEXXZ ; InstructionCache::Invalidate

; 2063 :         numInterpreterCacheFlushes++;

  00179	b8 01 00 00 00	 mov	 eax, 1
  0017e	01 86 84 02 00
	00		 add	 DWORD PTR [esi+644], eax

; 2064 :         numNativeCodeCacheFlushes++;

  00184	01 86 88 02 00
	00		 add	 DWORD PTR [esi+648], eax

; 2065 :         if((mpeIndex == 0) || (mpeIndex == 3))

  0018a	8b 86 98 02 00
	00		 mov	 eax, DWORD PTR [esi+664]
  00190	3b c5		 cmp	 eax, ebp
  00192	74 05		 je	 SHORT $LN51@FetchDecod
  00194	83 f8 03	 cmp	 eax, 3
  00197	75 2a		 jne	 SHORT $LN92@FetchDecod
$LN51@FetchDecod:

; 2066 :         {
; 2067 :           nativeCodeCache->FlushRegion(MAIN_BUS_BASE, MAIN_BUS_BASE + MAIN_BUS_SIZE - 1);

  00199	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  0019f	68 ff ff 7f 40	 push	 1082130431		; 407fffffH
  001a4	68 00 00 00 40	 push	 1073741824		; 40000000H
  001a9	e8 00 00 00 00	 call	 ?FlushRegion@NativeCodeCache@@QAEXII@Z ; NativeCodeCache::FlushRegion

; 2068 :           nativeCodeCache->FlushRegion(SYSTEM_BUS_BASE, SYSTEM_BUS_BASE + SYSTEM_BUS_SIZE - 1);

  001ae	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  001b4	68 ff ff 7f 80	 push	 -2139095041		; 807fffffH
  001b9	68 00 00 00 80	 push	 -2147483648		; 80000000H
  001be	e8 00 00 00 00	 call	 ?FlushRegion@NativeCodeCache@@QAEXII@Z ; NativeCodeCache::FlushRegion
$LN92@FetchDecod:

; 2069 :         }
; 2070 :       }
; 2071 :     }
; 2072 : 
; 2073 :     if(!(ecuSkipCounter | interpretNextPacket))

  001c3	8b 86 40 02 00
	00		 mov	 eax, DWORD PTR [esi+576]
  001c9	0b 86 6c 02 00
	00		 or	 eax, DWORD PTR [esi+620]
  001cf	0f 85 92 01 00
	00		 jne	 $find_icache_entry$53101

; 2074 :     {
; 2075 : find_code_cache_entry:
; 2076 :       if(pNativeCodeCacheEntry = nativeCodeCache->FindNativeCodeCacheEntry(pcexecLookupValue))

  001d5	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  001db	53		 push	 ebx
$find_code_cache_entry$53077:
  001dc	e8 00 00 00 00	 call	 ?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ; NativeCodeCache::FindNativeCodeCacheEntry
  001e1	3b c5		 cmp	 eax, ebp
  001e3	89 44 24 1c	 mov	 DWORD PTR _pNativeCodeCacheEntry$[esp+32], eax
  001e7	74 0b		 je	 SHORT $LN49@FetchDecod

; 2077 :       {
; 2078 :         nativeCodeCacheEntryPoint = pNativeCodeCacheEntry->entryPoint;

  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	89 4c 24 18	 mov	 DWORD PTR _nativeCodeCacheEntryPoint$[esp+32], ecx
  001ef	e9 30 02 00 00	 jmp	 $execute_block$53079
$LN49@FetchDecod:

; 2079 :         goto execute_block;
; 2080 :       }
; 2081 :     
; 2082 :       if(bInvalidateInterpreterCache)

  001f4	80 be 80 02 00
	00 00		 cmp	 BYTE PTR [esi+640], 0
  001fb	74 37		 je	 SHORT $LN93@FetchDecod

; 2083 :       {
; 2084 :         numInterpreterCacheFlushes++;
; 2085 :         instructionCache->InvalidateRegion(interpreterInvalidateRegionStart, interpreterInvalidateRegionEnd);

  001fd	8b 96 7c 02 00
	00		 mov	 edx, DWORD PTR [esi+636]
  00203	8b 86 78 02 00
	00		 mov	 eax, DWORD PTR [esi+632]
  00209	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  0020f	83 86 84 02 00
	00 01		 add	 DWORD PTR [esi+644], 1
  00216	52		 push	 edx
  00217	50		 push	 eax
  00218	e8 00 00 00 00	 call	 ?InvalidateRegion@InstructionCache@@QAEXII@Z ; InstructionCache::InvalidateRegion

; 2086 :         bInvalidateInterpreterCache = false;

  0021d	c6 86 80 02 00
	00 00		 mov	 BYTE PTR [esi+640], 0

; 2087 :         interpreterInvalidateRegionStart = 0xFFFFFFFFUL;

  00224	c7 86 78 02 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+632], -1

; 2088 :         interpreterInvalidateRegionEnd = 0x00000000;

  0022e	89 ae 7c 02 00
	00		 mov	 DWORD PTR [esi+636], ebp
$LN93@FetchDecod:

; 2089 :       }
; 2090 : 
; 2091 :       bCacheEntryValid = 1;
; 2092 :       pInstructionCacheEntry = instructionCache->FindInstructionCacheEntry(pcexec,bCacheEntryValid);

  00234	8b ae 98 01 00
	00		 mov	 ebp, DWORD PTR [esi+408]
  0023a	8d 4c 24 14	 lea	 ecx, DWORD PTR _bCacheEntryValid$[esp+32]
  0023e	51		 push	 ecx
  0023f	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  00245	55		 push	 ebp
  00246	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR _bCacheEntryValid$[esp+40], 1
  0024e	e8 00 00 00 00	 call	 ?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry

; 2093 :       if(bCacheEntryValid && (pcexec == pInstructionCacheEntry->pcexec))

  00253	83 7c 24 14 00	 cmp	 DWORD PTR _bCacheEntryValid$[esp+32], 0
  00258	8b f8		 mov	 edi, eax
  0025a	0f 84 38 01 00
	00		 je	 $create_icache_entry$53098
  00260	3b 6f 1c	 cmp	 ebp, DWORD PTR [edi+28]
  00263	0f 85 2f 01 00
	00		 jne	 $create_icache_entry$53098
$check_compile_threshhold$53083:

; 2094 :       {
; 2095 : check_compile_threshhold:
; 2096 :         if(!(pInstructionCacheEntry->packetInfo & (PACKETINFO_COMPILED | PACKETINFO_NEVERCOMPILE)) && (pInstructionCacheEntry->frequencyCount >= COMPILE_THRESHOLD))

  00269	f7 47 18 00 00
	00 c0		 test	 DWORD PTR [edi+24], -1073741824 ; c0000000H
  00270	0f 85 d9 00 00
	00		 jne	 $LN45@FetchDecod
  00276	83 7f 20 32	 cmp	 DWORD PTR [edi+32], 50	; 00000032H
  0027a	0f 82 cf 00 00
	00		 jb	 $LN45@FetchDecod

; 2097 :         {
; 2098 :           if(nativeCodeCache->IsBeyondThreshold())

  00280	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  00286	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00289	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]

; 2099 :           {
; 2100 :             numNativeCodeCacheFlushes++;

  0028c	bd 01 00 00 00	 mov	 ebp, 1
  00291	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00294	76 16		 jbe	 SHORT $LN44@FetchDecod
  00296	01 ae 88 02 00
	00		 add	 DWORD PTR [esi+648], ebp

; 2101 :             nativeCodeCache->Flush();

  0029c	e8 00 00 00 00	 call	 ?Flush@NativeCodeCache@@QAEXXZ ; NativeCodeCache::Flush

; 2102 :             instructionCache->ClearCompiledStates();

  002a1	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  002a7	e8 00 00 00 00	 call	 ?ClearCompiledStates@InstructionCache@@QAEXXZ ; InstructionCache::ClearCompiledStates
$LN44@FetchDecod:

; 2103 :           }
; 2104 : 
; 2105 : //#define COMPILE_TYPE SUPERBLOCKCOMPILETYPE_IL_BLOCK
; 2106 : #define COMPILE_TYPE SUPERBLOCKCOMPILETYPE_NATIVE_CODE_BLOCK
; 2107 : 
; 2108 :           nativeCodeCacheEntryPoint = CompileNativeCodeBlock(pcexecLookupValue, COMPILE_TYPE, bError);

  002ac	6a 00		 push	 0
  002ae	8d 44 24 17	 lea	 eax, DWORD PTR _bError$[esp+36]
  002b2	50		 push	 eax
  002b3	6a 03		 push	 3
  002b5	53		 push	 ebx
  002b6	8b ce		 mov	 ecx, esi
  002b8	e8 00 00 00 00	 call	 ?CompileNativeCodeBlock@MPE@@QAEP6AXXZIW4SuperBlockCompileType@@AA_N_N@Z ; MPE::CompileNativeCodeBlock

; 2109 :           if(!bError)

  002bd	80 7c 24 13 00	 cmp	 BYTE PTR _bError$[esp+32], 0
  002c2	89 44 24 18	 mov	 DWORD PTR _nativeCodeCacheEntryPoint$[esp+32], eax
  002c6	75 3b		 jne	 SHORT $LN43@FetchDecod

; 2110 :           {
; 2111 :             pNativeCodeCacheEntry = nativeCodeCache->FindNativeCodeCacheEntry(pcexecLookupValue);

  002c8	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  002ce	53		 push	 ebx
  002cf	e8 00 00 00 00	 call	 ?FindNativeCodeCacheEntry@NativeCodeCache@@QAEPAVNativeCodeCacheEntry@@I@Z ; NativeCodeCache::FindNativeCodeCacheEntry

; 2112 :             if(nuonEnv->compilerOptions.bDumpBlocks)

  002d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nuonEnv@@3PAVNuonEnvironment@@A ; nuonEnv
  002da	80 79 78 00	 cmp	 BYTE PTR [ecx+120], 0
  002de	89 44 24 1c	 mov	 DWORD PTR _pNativeCodeCacheEntry$[esp+32], eax
  002e2	74 13		 je	 SHORT $LN42@FetchDecod

; 2113 :             {
; 2114 :               //if(pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_NATIVE_CODE_BLOCK)
; 2115 :               //if(pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_BLOCK)
; 2116 :               {
; 2117 :                 superBlock->PrintBlockToFile(pNativeCodeCacheEntry->compileType, pNativeCodeCacheEntry->codeSize);

  002e4	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
  002e7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002ea	8b 8e a4 02 00
	00		 mov	 ecx, DWORD PTR [esi+676]
  002f0	52		 push	 edx
  002f1	50		 push	 eax
  002f2	e8 00 00 00 00	 call	 ?PrintBlockToFile@SuperBlock@@QAEXW4SuperBlockCompileType@@I@Z ; SuperBlock::PrintBlockToFile
$LN42@FetchDecod:

; 2118 :               }
; 2119 :             }
; 2120 : 
; 2121 :             pInstructionCacheEntry->packetInfo |= PACKETINFO_COMPILED;

  002f7	81 4f 18 00 00
	00 80		 or	 DWORD PTR [edi+24], -2147483648 ; 80000000H

; 2183 : execute_block:

  002fe	e9 1f 01 00 00	 jmp	 $LN91@FetchDecod
$LN43@FetchDecod:

; 2122 :             goto execute_block;
; 2123 :           }
; 2124 :           else
; 2125 :           {
; 2126 :             if(((int32)nativeCodeCacheEntryPoint) == -1)

  00303	83 f8 ff	 cmp	 eax, -1
  00306	75 1a		 jne	 SHORT $LN39@FetchDecod

; 2127 :             {
; 2128 :               pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

  00308	81 4f 18 00 00
	00 40		 or	 DWORD PTR [edi+24], 1073741824 ; 40000000H

; 2129 :               numNonCompilablePackets++;

  0030f	01 ae 8c 02 00
	00		 add	 DWORD PTR [esi+652], ebp

; 2136 :             }
; 2137 : 
; 2138 :             nativeCodeCacheEntryPoint = 0;

  00315	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _nativeCodeCacheEntryPoint$[esp+32], 0

; 2183 : execute_block:

  0031d	e9 00 01 00 00	 jmp	 $LN91@FetchDecod
$LN39@FetchDecod:

; 2130 :             }
; 2131 :             else if(nativeCodeCacheEntryPoint == 0)

  00322	85 c0		 test	 eax, eax
  00324	75 1c		 jne	 SHORT $LN37@FetchDecod

; 2132 :             {
; 2133 :               numNativeCodeCacheFlushes++;
; 2134 :               nativeCodeCache->Flush();

  00326	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  0032c	01 ae 88 02 00
	00		 add	 DWORD PTR [esi+648], ebp
  00332	e8 00 00 00 00	 call	 ?Flush@NativeCodeCache@@QAEXXZ ; NativeCodeCache::Flush

; 2135 :               instructionCache->ClearCompiledStates();

  00337	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  0033d	e8 00 00 00 00	 call	 ?ClearCompiledStates@InstructionCache@@QAEXXZ ; InstructionCache::ClearCompiledStates
$LN37@FetchDecod:

; 2136 :             }
; 2137 : 
; 2138 :             nativeCodeCacheEntryPoint = 0;

  00342	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _nativeCodeCacheEntryPoint$[esp+32], 0

; 2183 : execute_block:

  0034a	e9 d3 00 00 00	 jmp	 $LN91@FetchDecod
$LN45@FetchDecod:
  0034f	33 ed		 xor	 ebp, ebp
  00351	83 47 20 01	 add	 DWORD PTR [edi+32], 1
  00355	0f 85 c9 00 00
	00		 jne	 $execute_block$53079

; 2139 :             goto execute_block;
; 2140 :           }
; 2141 :         }
; 2142 :         else
; 2143 :         {
; 2144 :           pInstructionCacheEntry->frequencyCount++;
; 2145 :           if(!pInstructionCacheEntry->frequencyCount)
; 2146 :           {
; 2147 :             pInstructionCacheEntry->frequencyCount--;

  0035b	c7 47 20 ff ff
	ff ff		 mov	 DWORD PTR [edi+32], -1

; 2183 : execute_block:

  00362	e9 bd 00 00 00	 jmp	 $execute_block$53079
$find_icache_entry$53101:

; 2148 :           }
; 2149 :           goto execute_block;
; 2150 :         }
; 2151 :       }
; 2152 : 
; 2153 :       goto create_icache_entry;
; 2154 :     }
; 2155 :     else
; 2156 :     {
; 2157 : find_icache_entry:
; 2158 :       bCacheEntryValid = 1;
; 2159 :       pInstructionCacheEntry = instructionCache->FindInstructionCacheEntry(pcexec,bCacheEntryValid);

  00367	8b ae 98 01 00
	00		 mov	 ebp, DWORD PTR [esi+408]
  0036d	8d 4c 24 14	 lea	 ecx, DWORD PTR _bCacheEntryValid$[esp+32]
  00371	51		 push	 ecx
  00372	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  00378	55		 push	 ebp
  00379	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR _bCacheEntryValid$[esp+40], 1
  00381	e8 00 00 00 00	 call	 ?FindInstructionCacheEntry@InstructionCache@@QAEPAVInstructionCacheEntry@@IAAI@Z ; InstructionCache::FindInstructionCacheEntry

; 2160 :       if(bCacheEntryValid && (pcexec == pInstructionCacheEntry->pcexec))

  00386	83 7c 24 14 00	 cmp	 DWORD PTR _bCacheEntryValid$[esp+32], 0
  0038b	8b f8		 mov	 edi, eax
  0038d	74 09		 je	 SHORT $create_icache_entry$53098
  0038f	3b 6f 1c	 cmp	 ebp, DWORD PTR [edi+28]
  00392	0f 84 8a 00 00
	00		 je	 $LN91@FetchDecod
$create_icache_entry$53098:

; 2161 :       {
; 2162 :         goto execute_block;
; 2163 :       }
; 2164 : 
; 2165 : create_icache_entry:
; 2166 :       pInstructionCacheEntry->pcexec = pcexec;

  00398	89 6f 1c	 mov	 DWORD PTR [edi+28], ebp

; 2167 :       pInstructionCacheEntry->frequencyCount = 1;

  0039b	c7 47 20 01 00
	00 00		 mov	 DWORD PTR [edi+32], 1

; 2168 :       if(pcexec < ROM_BIOS_BASE)

  003a2	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  003a8	3d 00 00 00 f0	 cmp	 eax, -268435456		; f0000000H
  003ad	73 38		 jae	 SHORT $LN28@FetchDecod

; 2169 :       {
; 2170 :         DecompressPacket(GetPointerToMemoryBank(pcexec),pInstructionCacheEntry,DECOMPRESS_OPTIONS_SCHEDULE_ECU_LAST);

  003af	8b d0		 mov	 edx, eax
  003b1	6a 01		 push	 1
  003b3	c1 ea 1c	 shr	 edx, 28			; 0000001cH
  003b6	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  003bb	03 84 96 b0 02
	00 00		 add	 eax, DWORD PTR [esi+edx*4+688]
  003c2	57		 push	 edi
  003c3	50		 push	 eax
  003c4	8b ce		 mov	 ecx, esi
  003c6	e8 00 00 00 00	 call	 ?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket

; 2171 :         if(((pcexec >= BIOS_JUMPTABLE_START) && (pcexec <= BIOS_JUMPTABLE_END))  || (pInstructionCacheEntry->packetInfo & PACKETINFO_BREAKPOINT))

  003cb	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  003d1	3d 00 00 00 80	 cmp	 eax, -2147483648	; 80000000H
  003d6	72 07		 jb	 SHORT $LN25@FetchDecod
  003d8	3d ff 02 00 80	 cmp	 eax, -2147482881	; 800002ffH
  003dd	76 10		 jbe	 SHORT $LN26@FetchDecod
$LN25@FetchDecod:
  003df	f6 47 18 02	 test	 BYTE PTR [edi+24], 2
  003e3	74 11		 je	 SHORT $LN24@FetchDecod

; 2172 :         {
; 2173 :           pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;            
; 2174 :         }
; 2175 :       }
; 2176 :       else

  003e5	eb 08		 jmp	 SHORT $LN26@FetchDecod
$LN28@FetchDecod:

; 2177 :       {
; 2178 :         pInstructionCacheEntry->nuanceCount = 0;

  003e7	33 c0		 xor	 eax, eax
  003e9	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 2179 :         pInstructionCacheEntry->pcroute = 0;

  003ec	89 47 4c	 mov	 DWORD PTR [edi+76], eax
$LN26@FetchDecod:

; 2180 :         pInstructionCacheEntry->packetInfo |= PACKETINFO_NEVERCOMPILE;

  003ef	81 4f 18 00 00
	00 40		 or	 DWORD PTR [edi+24], 1073741824 ; 40000000H
$LN24@FetchDecod:

; 2181 :       }
; 2182 :       instructionCache->SetEntryValid(pcexec);

  003f6	8b 86 a0 02 00
	00		 mov	 eax, DWORD PTR [esi+672]
  003fc	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  003ff	8b 96 98 01 00
	00		 mov	 edx, DWORD PTR [esi+408]
  00405	8b 00		 mov	 eax, DWORD PTR [eax]
  00407	d1 ea		 shr	 edx, 1
  00409	83 e9 01	 sub	 ecx, 1
  0040c	23 ca		 and	 ecx, edx
  0040e	8b d1		 mov	 edx, ecx
  00410	c1 ea 05	 shr	 edx, 5
  00413	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00416	83 e1 1f	 and	 ecx, 31			; 0000001fH
  00419	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0041e	d3 ea		 shr	 edx, cl
  00420	09 10		 or	 DWORD PTR [eax], edx
$LN91@FetchDecod:

; 2077 :       {
; 2078 :         nativeCodeCacheEntryPoint = pNativeCodeCacheEntry->entryPoint;

  00422	33 ed		 xor	 ebp, ebp
$execute_block$53079:

; 2184 :       interpretNextPacket = 0;
; 2185 : 
; 2186 :     //StopPerformanceTimer();
; 2187 :     //timeDelta = GetTimeDeltaMs();
; 2188 : 
; 2189 : #ifdef LOG_STUFF
; 2190 :       if(LOG_MPE_INDEX == mpeIndex)
; 2191 :       {
; 2192 :         fprintf(logfile,"pcexec: %8.8x\n",pcexec);
; 2193 :       }
; 2194 : #endif
; 2195 : 
; 2196 :       if(nativeCodeCacheEntryPoint)

  00424	8b 54 24 18	 mov	 edx, DWORD PTR _nativeCodeCacheEntryPoint$[esp+32]
  00428	3b d5		 cmp	 edx, ebp
  0042a	89 ae 6c 02 00
	00		 mov	 DWORD PTR [esi+620], ebp
  00430	0f 84 aa 00 00
	00		 je	 $LN23@FetchDecod

; 2197 :       {
; 2198 :         pNativeCodeCacheEntry->accessCount += 1;

  00436	8b 44 24 1c	 mov	 eax, DWORD PTR _pNativeCodeCacheEntry$[esp+32]
  0043a	83 40 20 01	 add	 DWORD PTR [eax+32], 1

; 2199 :         cycleCounter += pNativeCodeCacheEntry->numPackets;

  0043e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00441	01 8e 48 02 00
	00		 add	 DWORD PTR [esi+584], ecx
  00447	11 ae 4c 02 00
	00		 adc	 DWORD PTR [esi+588], ebp

; 2200 : 
; 2201 :         if(!pNativeCodeCacheEntry->accessCount)

  0044d	39 68 20	 cmp	 DWORD PTR [eax+32], ebp
  00450	75 07		 jne	 SHORT $LN22@FetchDecod

; 2202 :         {
; 2203 :           pNativeCodeCacheEntry->accessCount -= 1;          

  00452	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [eax+32], -1
$LN22@FetchDecod:

; 2204 :         }
; 2205 : 
; 2206 :         if((pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_BLOCK) || (pNativeCodeCacheEntry->compileType == SUPERBLOCKCOMPILETYPE_IL_SINGLE))

  00459	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0045c	83 f9 02	 cmp	 ecx, 2
  0045f	74 18		 je	 SHORT $LN20@FetchDecod
  00461	83 f9 01	 cmp	 ecx, 1
  00464	74 13		 je	 SHORT $LN20@FetchDecod

; 2224 :           goto check_for_halt;
; 2225 :         }
; 2226 :         else
; 2227 :         {
; 2228 :           prevPcexec = pcexec;

  00466	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  0046c	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax

; 2229 :           //do
; 2230 :           {
; 2231 :             nativeCodeCacheEntryPoint();

  00472	ff d2		 call	 edx

; 2232 :             //blockExecuteCount--;
; 2233 :           } 
; 2234 :           //while((pcexec == prevPcexec) && (mpectl & MPECTRL_MPEGO) && !ecuSkipCounter && blockExecuteCount);       
; 2235 :         }
; 2236 :       }
; 2237 :       else

  00474	e9 12 01 00 00	 jmp	 $LN12@FetchDecod
$LN20@FetchDecod:

; 2207 :         {
; 2208 :           nInstructions = pNativeCodeCacheEntry->numInstructions;

  00479	8b 68 10	 mov	 ebp, DWORD PTR [eax+16]

; 2209 :           pNuance = (Nuance *)nativeCodeCacheEntryPoint;
; 2210 :           bInterpretedBranchTaken = false;
; 2211 :           prevPcexec = pcexec;

  0047c	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]

; 2212 :           for(i = 0; i < nInstructions; i++)

  00482	33 db		 xor	 ebx, ebx
  00484	85 ed		 test	 ebp, ebp
  00486	8b fa		 mov	 edi, edx
  00488	c6 86 82 02 00
	00 00		 mov	 BYTE PTR [esi+642], 0
  0048f	89 8e 38 02 00
	00		 mov	 DWORD PTR [esi+568], ecx
  00495	76 37		 jbe	 SHORT $LN17@FetchDecod
  00497	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL19@FetchDecod:

; 2213 :           {
; 2214 :             (nuanceHandlers[pNuance->fields[0]])(*this,*pICacheEntry,*pNuance);

  004a0	8b 86 9c 02 00
	00		 mov	 eax, DWORD PTR [esi+668]
  004a6	8b 17		 mov	 edx, DWORD PTR [edi]
  004a8	8b 0c 95 00 00
	00 00		 mov	 ecx, DWORD PTR ?nuanceHandlers@@3PAP6AXAAVMPE@@AAVInstructionCacheEntry@@AAVNuance@@@ZA[edx*4]
  004af	57		 push	 edi
  004b0	50		 push	 eax
  004b1	56		 push	 esi
  004b2	ff d1		 call	 ecx
  004b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2215 :             pNuance++;

  004b7	83 c7 14	 add	 edi, 20			; 00000014H

; 2216 : 
; 2217 :             if(bInterpretedBranchTaken)

  004ba	80 be 82 02 00
	00 00		 cmp	 BYTE PTR [esi+642], 0
  004c1	0f 85 db 00 00
	00		 jne	 $LN81@FetchDecod
  004c7	83 c3 01	 add	 ebx, 1
  004ca	3b dd		 cmp	 ebx, ebp
  004cc	72 d2		 jb	 SHORT $LL19@FetchDecod
$LN17@FetchDecod:

; 2218 :             {
; 2219 :               pcexec = pcfetchnext;
; 2220 :               goto check_for_halt;
; 2221 :             }
; 2222 :           }
; 2223 :           pcexec = pNativeCodeCacheEntry->nextVirtualAddress;

  004ce	8b 44 24 1c	 mov	 eax, DWORD PTR _pNativeCodeCacheEntry$[esp+32]
  004d2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  004d5	89 8e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ecx

; 2310 :         }
; 2311 :       }
; 2312 :       
; 2313 : check_for_halt:

  004db	e9 ce 00 00 00	 jmp	 $check_for_halt$53118
$LN23@FetchDecod:

; 2238 :       {
; 2239 :         if(pcexec < ROM_BIOS_BASE)

  004e0	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  004e6	3d 00 00 00 f0	 cmp	 eax, -268435456		; f0000000H
  004eb	73 2c		 jae	 SHORT $LN11@FetchDecod

; 2240 :         {
; 2241 :           cycleCounter++;

  004ed	83 86 48 02 00
	00 01		 add	 DWORD PTR [esi+584], 1

; 2242 : 
; 2243 :           prevPcexec = pcexec;

  004f4	89 86 38 02 00
	00		 mov	 DWORD PTR [esi+568], eax

; 2244 :           pcroute = pInstructionCacheEntry->pcroute;
; 2245 :           pcexec = pcroute;
; 2246 :           ExecuteNuances(*pInstructionCacheEntry);

  004fa	57		 push	 edi
  004fb	11 ae 4c 02 00
	00		 adc	 DWORD PTR [esi+588], ebp
  00501	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00504	8b ce		 mov	 ecx, esi
  00506	89 86 94 01 00
	00		 mov	 DWORD PTR [esi+404], eax
  0050c	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax
  00512	e8 00 00 00 00	 call	 ?ExecuteNuances@MPE@@QAEXAAVInstructionCacheEntry@@@Z ; MPE::ExecuteNuances
  00517	eb 6b		 jmp	 SHORT $LN6@FetchDecod
$LN11@FetchDecod:

; 2247 :         }
; 2248 :         else if(pcexec < 0xF0008000)

  00519	3d 00 80 00 f0	 cmp	 eax, -268402688		; f0008000H
  0051e	73 38		 jae	 SHORT $LN9@FetchDecod

; 2249 :         {
; 2250 :           cycleCounter++;

  00520	83 86 48 02 00
	00 01		 add	 DWORD PTR [esi+584], 1

; 2251 :           //Execute BIOS function: force to one of 256 entries
; 2252 :           BiosJumpTable[(pcexec >> 1) & 0xFF](this);

  00527	56		 push	 esi
  00528	11 ae 4c 02 00
	00		 adc	 DWORD PTR [esi+588], ebp
  0052e	d1 e8		 shr	 eax, 1
  00530	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00535	8b 14 85 00 00
	00 00		 mov	 edx, DWORD PTR ?BiosJumpTable@@3PAP6AXPAVMPE@@@ZA[eax*4]
  0053c	ff d2		 call	 edx
  0053e	83 c4 04	 add	 esp, 4

; 2253 : 
; 2254 :           if(!bCallingMediaCallback)

  00541	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCallingMediaCallback@@3_NA, 0 ; bCallingMediaCallback
  00548	75 3a		 jne	 SHORT $LN6@FetchDecod

; 2255 :           {
; 2256 :             //Perform an implicit RTS, nop
; 2257 :             pcexec = rz;

  0054a	8b 86 9c 00 00
	00		 mov	 eax, DWORD PTR [esi+156]
  00550	89 86 98 01 00
	00		 mov	 DWORD PTR [esi+408], eax

; 2258 :           }
; 2259 :         }
; 2260 :         else

  00556	eb 2c		 jmp	 SHORT $LN6@FetchDecod
$LN9@FetchDecod:

; 2261 :         {
; 2262 :           //Execute PE function
; 2263 :           cycleCounter++;

  00558	83 86 48 02 00
	00 01		 add	 DWORD PTR [esi+584], 1

; 2264 :           CallPEHandler(this, pcexec);

  0055f	50		 push	 eax
  00560	56		 push	 esi
  00561	11 ae 4c 02 00
	00		 adc	 DWORD PTR [esi+588], ebp
  00567	e8 00 00 00 00	 call	 ?CallPEHandler@@YAXPAVMPE@@I@Z ; CallPEHandler
  0056c	83 c4 08	 add	 esp, 8

; 2265 :           if(!bCallingMediaCallback)

  0056f	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?bCallingMediaCallback@@3_NA, 0 ; bCallingMediaCallback
  00576	75 0c		 jne	 SHORT $LN6@FetchDecod

; 2266 :           {
; 2267 :             //Perform an implicit RTS, nop
; 2268 :             pcexec = rz;

  00578	8b 8e 9c 00 00
	00		 mov	 ecx, DWORD PTR [esi+156]
  0057e	89 8e 98 01 00
	00		 mov	 DWORD PTR [esi+408], ecx
$LN6@FetchDecod:

; 2269 :           }
; 2270 :         }
; 2271 :         
; 2272 :         bCallingMediaCallback = false;

  00584	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?bCallingMediaCallback@@3_NA, 0 ; bCallingMediaCallback
$LN12@FetchDecod:

; 2273 :       }
; 2274 : 
; 2275 :       if(ecuSkipCounter)

  0058b	8b 86 40 02 00
	00		 mov	 eax, DWORD PTR [esi+576]
  00591	3b c5		 cmp	 eax, ebp
  00593	74 19		 je	 SHORT $check_for_halt$53118

; 2276 :       {
; 2277 :         ecuSkipCounter--;

  00595	83 c0 ff	 add	 eax, -1

; 2278 :         if(!ecuSkipCounter)

  00598	3b c5		 cmp	 eax, ebp
  0059a	89 86 40 02 00
	00		 mov	 DWORD PTR [esi+576], eax
  005a0	75 0c		 jne	 SHORT $check_for_halt$53118
$LN81@FetchDecod:

; 2279 :         {
; 2280 : #ifdef LOG_BIOS_CALLS
; 2281 :           if(((pcfetchnext >= 0x80000000) && (pcfetchnext <= 0x8000FFFF)) && (mpeIndex == LOG_MPE_INDEX))
; 2282 :           {
; 2283 :             if(logfile)
; 2284 :             {
; 2285 :               if(pcfetchnext >= 0x80008000)
; 2286 :               {
; 2287 : #ifdef LOG_ADDRESS_ONLY
; 2288 :                 fprintf(logfile,"PE CALL: $%8.8lX\n",pcfetchnext);
; 2289 :                 fflush(logfile);
; 2290 : #else
; 2291 :                 //fprintf(logfile,"PE CALL: %s ($%8.8lX): V0 = [$%lX,$%lX,$%lX,%lX], R4 = %lX, R5 = %lX\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2292 :                 fprintf(logfile,"PE CALL: %s ($%8.8lX)n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2293 :                 fflush(logfile);
; 2294 : #endif
; 2295 :               }
; 2296 :               else
; 2297 :               {
; 2298 : #ifdef LOG_ADDRESS_ONLY
; 2299 :                 fprintf(logfile,"BIOS CALL: %s ($%8.8lX)\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext);
; 2300 :                 fflush(logfile);
; 2301 : #else
; 2302 :                 fprintf(logfile,"BIOS CALL: %s ($%8.8lX): V0 = [$%lX,$%lX,$%lX,%lX], R4 = %lX, R5 = %lX\n",BiosRoutineNames[(pcfetchnext >> 3) & 0x3FFF],pcfetchnext,regs[0],regs[1],regs[2],regs[3],regs[4],regs[5]);
; 2303 :                 fflush(logfile);
; 2304 : #endif
; 2305 :               }
; 2306 :             }
; 2307 :           }
; 2308 : #endif
; 2309 :           pcexec = pcfetchnext;

  005a2	8b 96 34 02 00
	00		 mov	 edx, DWORD PTR [esi+564]
  005a8	89 96 98 01 00
	00		 mov	 DWORD PTR [esi+408], edx
$check_for_halt$53118:

; 2314 : 
; 2315 :       if(excephalten & excepsrc)

  005ae	8b 86 8c 01 00
	00		 mov	 eax, DWORD PTR [esi+396]
  005b4	85 86 84 01 00
	00		 test	 eax, DWORD PTR [esi+388]
  005ba	5f		 pop	 edi
  005bb	5b		 pop	 ebx

; 2316 :       {
; 2317 :         Halt();

  005bc	75 0e		 jne	 SHORT $LN94@FetchDecod

; 2318 :       }
; 2319 :       else if(pcexec == breakpointAddress)

  005be	8b 8e 98 01 00
	00		 mov	 ecx, DWORD PTR [esi+408]
  005c4	3b 8e 3c 02 00
	00		 cmp	 ecx, DWORD PTR [esi+572]
  005ca	75 07		 jne	 SHORT $LN1@FetchDecod
$LN94@FetchDecod:

; 2320 :       {
; 2321 :         mpectl &= ~MPECTRL_MPEGO;

  005cc	83 a6 80 01 00
	00 fd		 and	 DWORD PTR [esi+384], -3	; fffffffdH
$LN1@FetchDecod:
  005d3	5e		 pop	 esi

; 2322 :       }
; 2323 : 
; 2324 :     }
; 2325 :     
; 2326 :     //StopPerformanceTimer();
; 2327 :     //timeDelta = GetTimeDeltaMs();
; 2328 :     return true;

  005d4	b0 01		 mov	 al, 1
  005d6	5d		 pop	 ebp

; 2334 : }

  005d7	83 c4 10	 add	 esp, 16			; 00000010H
  005da	c3		 ret	 0
$LN65@FetchDecod:
  005db	5e		 pop	 esi

; 2329 :   }
; 2330 : 
; 2331 :   //StopPerformanceTimer();
; 2332 :   //timeDelta = GetTimeDeltaMs();
; 2333 :   return false;

  005dc	32 c0		 xor	 al, al
  005de	5d		 pop	 ebp

; 2334 : }

  005df	83 c4 10	 add	 esp, 16			; 00000010H
  005e2	c3		 ret	 0
?FetchDecodeExecute@MPE@@QAE_NXZ ENDP			; MPE::FetchDecodeExecute
_TEXT	ENDS
PUBLIC	?PrintInstructionCachePacket@MPE@@QAEXPADI@Z	; MPE::PrintInstructionCachePacket
; Function compile flags: /Ogtpy
;	COMDAT ?PrintInstructionCachePacket@MPE@@QAEXPADI@Z
_TEXT	SEGMENT
_entry$ = -268						; size = 268
_buffer$ = 8						; size = 4
_address$ = 12						; size = 4
?PrintInstructionCachePacket@MPE@@QAEXPADI@Z PROC	; MPE::PrintInstructionCachePacket, COMDAT
; _this$ = ecx

; 2524 : {

  00000	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	55		 push	 ebp
  0000a	56		 push	 esi

; 2525 :   InstructionCacheEntry entry;
; 2526 :   uint8 *memPtr;
; 2527 :   uint32 bCacheEntryValid;
; 2528 : 
; 2529 :   bCacheEntryValid = 1;
; 2530 :   InstructionCacheEntry *pEntry = instructionCache->FindInstructionCacheEntry(address,bCacheEntryValid);

  0000b	8b b4 24 20 01
	00 00		 mov	 esi, DWORD PTR _address$[esp+276]
  00012	57		 push	 edi
  00013	8b bb a0 02 00
	00		 mov	 edi, DWORD PTR [ebx+672]
  00019	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001c	8b 2f		 mov	 ebp, DWORD PTR [edi]
  0001e	83 e8 01	 sub	 eax, 1
  00021	8b ce		 mov	 ecx, esi
  00023	d1 e9		 shr	 ecx, 1
  00025	23 c1		 and	 eax, ecx
  00027	8b c8		 mov	 ecx, eax
  00029	83 e1 1f	 and	 ecx, 31			; 0000001fH
  0002c	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00031	d3 ea		 shr	 edx, cl
  00033	8b c8		 mov	 ecx, eax
  00035	69 c0 0c 01 00
	00		 imul	 eax, 268		; 0000010cH
  0003b	03 47 04	 add	 eax, DWORD PTR [edi+4]
  0003e	c1 e9 05	 shr	 ecx, 5
  00041	23 54 8d 00	 and	 edx, DWORD PTR [ebp+ecx*4]

; 2531 :   
; 2532 :   if(bCacheEntryValid && (address == pEntry->pcexec))

  00045	85 d2		 test	 edx, edx
  00047	74 22		 je	 SHORT $LN2@PrintInstr@2
  00049	3b 70 1c	 cmp	 esi, DWORD PTR [eax+28]
  0004c	75 1d		 jne	 SHORT $LN2@PrintInstr@2

; 2533 :   {
; 2534 :     PrintInstructionCachePacket(buffer,*pEntry);

  0004e	8b 94 24 20 01
	00 00		 mov	 edx, DWORD PTR _buffer$[esp+280]
  00055	50		 push	 eax
  00056	52		 push	 edx

; 2541 :     PrintInstructionCachePacket(buffer,entry);    

  00057	8b cb		 mov	 ecx, ebx
  00059	e8 00 00 00 00	 call	 ?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5d		 pop	 ebp
  00061	5b		 pop	 ebx

; 2542 :   }
; 2543 : }

  00062	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00068	c2 08 00	 ret	 8
$LN2@PrintInstr@2:

; 2535 :   }
; 2536 :   else
; 2537 :   {
; 2538 :     entry.pcexec = address;
; 2539 :     memPtr = GetPointerToMemoryBank(address);

  0006b	8b ce		 mov	 ecx, esi
  0006d	89 74 24 2c	 mov	 DWORD PTR _entry$[esp+312], esi
  00071	c1 e9 1c	 shr	 ecx, 28			; 0000001cH

; 2540 :     DecompressPacket(memPtr,&entry);

  00074	6a 00		 push	 0
  00076	8d 44 24 14	 lea	 eax, DWORD PTR _entry$[esp+288]
  0007a	81 e6 ff ff 7f
	00		 and	 esi, 8388607		; 007fffffH
  00080	03 b4 8b b0 02
	00 00		 add	 esi, DWORD PTR [ebx+ecx*4+688]
  00087	50		 push	 eax
  00088	56		 push	 esi
  00089	8b cb		 mov	 ecx, ebx
  0008b	e8 00 00 00 00	 call	 ?DecompressPacket@MPE@@QAEXPAEPAVInstructionCacheEntry@@I@Z ; MPE::DecompressPacket

; 2541 :     PrintInstructionCachePacket(buffer,entry);    

  00090	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR _buffer$[esp+280]
  00097	8d 54 24 10	 lea	 edx, DWORD PTR _entry$[esp+284]
  0009b	52		 push	 edx
  0009c	50		 push	 eax
  0009d	8b cb		 mov	 ecx, ebx
  0009f	e8 00 00 00 00	 call	 ?PrintInstructionCachePacket@MPE@@QAEXPADAAVInstructionCacheEntry@@@Z ; MPE::PrintInstructionCachePacket
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5d		 pop	 ebp
  000a7	5b		 pop	 ebx

; 2542 :   }
; 2543 : }

  000a8	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000ae	c2 08 00	 ret	 8
?PrintInstructionCachePacket@MPE@@QAEXPADI@Z ENDP	; MPE::PrintInstructionCachePacket
_TEXT	ENDS
PUBLIC	?ExecuteSingleStep@MPE@@QAEXXZ			; MPE::ExecuteSingleStep
; Function compile flags: /Ogtpy
;	COMDAT ?ExecuteSingleStep@MPE@@QAEXXZ
_TEXT	SEGMENT
?ExecuteSingleStep@MPE@@QAEXXZ PROC			; MPE::ExecuteSingleStep, COMDAT
; _this$ = ecx

; 2546 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2547 :   InvalidateICacheRegion(pcexec, pcexec);

  00003	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00009	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  0000f	83 86 84 02 00
	00 01		 add	 DWORD PTR [esi+644], 1
  00016	50		 push	 eax
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?InvalidateRegion@InstructionCache@@QAEXII@Z ; InstructionCache::InvalidateRegion

; 2548 :   nativeCodeCache->FlushRegion(pcexec, pcexec);

  0001d	8b 86 98 01 00
	00		 mov	 eax, DWORD PTR [esi+408]
  00023	8b 8e a8 02 00
	00		 mov	 ecx, DWORD PTR [esi+680]
  00029	50		 push	 eax
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ?FlushRegion@NativeCodeCache@@QAEXII@Z ; NativeCodeCache::FlushRegion

; 2549 :   FetchDecodeExecute();

  00030	8b ce		 mov	 ecx, esi
  00032	5e		 pop	 esi
  00033	e9 00 00 00 00	 jmp	 ?FetchDecodeExecute@MPE@@QAE_NXZ ; MPE::FetchDecodeExecute
?ExecuteSingleStep@MPE@@QAEXXZ ENDP			; MPE::ExecuteSingleStep
_TEXT	ENDS
END

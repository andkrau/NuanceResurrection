20301ad0	mv_v v1,v2
20301ad2	ld_s rz,r11
20301ad4	add #$00000003,r10
20301ad6	lsr #$00000002,r10
20301ad8	mv_s r9,r1
20301ada	mv_s r8,r2
20301adc	mv_s #$80000000,r3
20301ae2	mv_s r10,r0
20301ae4	cmp #$00000040,r10
20301ae8	lbra le,#$20301af0,nop
20301aec	mv_s #$00000040,r0
20301af0	add r0,>>#-2,r9
20301af4	jsr #$20301b68
20301af8	sub r0,r10
20301afa	add r0,>>#-2,r8
20301afe	cmp #$00000000,r10
20301b00	lbra ne,#$20301ad8,nop
20301b04	jmp (r11),nop
20301b08	rts
20301b0a	st_s r4,rzi1
20301b0c	st_s #$fffffffe,excephalten
20301b14	st_s #$00000001,intclr
20301b18	st_s #$00000001,excepclr
20301b1c	rts
20301b1e	st_s #$00000000,??register
20301b26	st_s #$20301a90,rzi1
20301b2e	st_s #$20301ac8,rzi1
20301b36	rts
20301b38	mv_s r4,r26
20301b3a	mv_s r5,r27
20301b3c	push v1
20301b3e	mv_s r0,r4
	sub r3,r3
20301b42	or #$00000001,<>#1,r3
20301b46	bra #$20301b74
20301b48	asl #$fffffff0,r0
20301b4a	or #$00000001,<>#5,r0
20301b4e	asl #$fffffff0,r0
20301b50	or #$00000001,<>#-13,r0
20301b54	or r3,r0
20301b56	bra #$20301b72
20301b58	sub r3,r3
20301b5a	or #$00000001,<>#1,r3
20301b5e	bra #$20301b68
20301b60	sub r3,r3
20301b62	or #$00000001,<>#1,r3
20301b66	bra #$20301b72
20301b68	mv_s r0,r4
20301b6a	asl #$fffffff0,r0
20301b6c	rts eq,nop
20301b6e	or #$00000001,<>#-13,r0
20301b72	push v1
20301b74	ld_s mdmactl,r4
20301b78	ld_s odmactl,r5
20301b7c	btst #$00000004,r4
20301b7e	lbra ne,#$20301b74,nop
	btst #$00000004,r5
20301b84	lbra ne,#$20301b74,nop
	btst #$0000001f,r1
20301b8a	mv_s #$20500600,r5
20301b90	lbra eq,#$20301b9a,nop
20301b94	mv_s #$20500500,r5
20301b9a	and #$00000001,r3,r4
20301b9e	asl #$fffffffc,r4
20301ba0	add #$20101be0,r4
20301ba6	st_v v0,(r4)
20301baa	add #$00000010,r5
20301bac	st_s r4,(r5)
20301bae	sub #$00000010,r5
20301bb0	btst #$0000001f,r3
20301bb2	lbra eq,#$20301bc2,nop
20301bb6	ld_s (r5),r4
20301bb8	nop
20301bba	bits #$00000004,>>#0,r4
20301bbe	lbra ne,#$20301bb6,nop
20301bc2	rts,nop
	pop v1
20301bc6	bra #$20301bb6
20301bc8	push v1
20301bca	mv_s #$20500500,r5
20301bd0	bra #$20301bb6
20301bd2	push v1
20301bd4	mv_s #$20500600,r5
20301bda	ld_s rz,r13
20301bdc	push v1
20301bde	ld_s intsrc,r15
20301be0	ld_s inten1,r14
20301be2	push v0
20301be4	and r14,r15
20301be6	btst #$00000003,r15
20301be8	jsr ne,#$20301c96,nop
20301bec	btst #$00000002,r15
20301bee	jsr ne,#$20301dea,nop
20301bf2	ld_s ??register,r1
20301bf6	btst #$0000001b,r15
20301bf8	jsr ne,(r1),nop
20301bfc	btst #$00000000,r15
20301bfe	jsr ne,#$20301b14,nop
20301c02	pop v0
20301c04	pop v1
20301c06	st_s r13,rz
20301c08	pop v2
20301c0a	st_s r12,cc
	rti rzi1
20301c0e	pop v3
20301c10	nop
20301c12	push v0
20301c14	push v1
20301c16	push v2
20301c18	push r31,rcc,rzi2,rz
20301c1a	ld_s ??register,r31
20301c1e	st_s #$20301c86,rz
20301c26	ld_s commctl,r0
20301c2a	ld_s comminfo,r1
20301c2e	btst #$0000001f,r0
20301c30	lbra eq,#$20301c86,nop
20301c34	bits #$00000007,>>#16,r0
	st_s #$00000010,intclr
20301c3c	ld_v commrecv,v1
	cmp #$0000004a,r0
20301c44	bits #$00000007,>>#16,r1
	jmp eq,#$20301de8,nop
20301c4c	cmp #$00000003,r0
20301c4e	bra ne,#$20301c58
	cmp #$000000d0,r1
20301c54	jmp eq,#$20301de6,nop
20301c58	st_v v0,(r31)
	add #$00000010,r31
20301c5e	st_v v1,(r31)
	add #$00000010,r31
20301c64	ld_s ??register,r0
	cmp #$20101da0,r31
20301c6e	lbra lt,#$20301c78,nop
20301c72	mv_s #$20101c20,r31
20301c78	cmp r0,r31
20301c7a	lbra eq,#$20301c92,nop
20301c7e	st_s r31,??register
20301c82	st_s #$00000008,intsrc
20301c86	pop r31,rcc,rzi2,rz
20301c88	pop v2
20301c8a	pop v1
	rti rzi2
20301c8e	pop v0
20301c90	nop
20301c92	st_s #$00000004,excepsrc
20301c96	st_s #$00000008,intclr
20301c9a	push v3,rz
20301c9c	ld_v ??register,v2
20301ca0	st_s #$20301c9c,rz
20301ca8	cmp r9,r8
20301caa	lbra eq,#$20301d46,nop
20301cae	ld_v (r9),v0
	add #$00000010,r9
20301cb4	ld_v (r9),v1
	add #$00000010,r9
20301cba	ld_s ??register,r3
	cmp #$20101da0,r9
20301cc4	lbra ne,#$20301cce,nop
20301cc8	mv_s #$20101c20,r9
20301cce	st_s r9,??register
20301cd2	cmp #$00000003,r0
20301cd4	lbra ne,#$20301d10,nop
20301cd8	ld_s ??register,r2
20301cdc	and #$000000f0,r1,r3
20301ce4	cmp #$000000a0,r3
	ld_s ??register,r3
20301cec	jmp eq,(r2),nop
	cmp #$000000c0,r1
20301cf4	jmp eq,#$20301ad0,nop
	cmp #$000000c2,r1
20301cfc	jmp eq,#$20301b08,nop
	cmp #$000000c3,r1
20301d04	jmp eq,#$20301b1c,nop
	cmp #$000000c4,r1
20301d0c	jmp eq,#$20301b2e,nop
20301d10	cmp #$00000000,r3
20301d12	jmp ne,(r3),nop
20301d16	add #$00000020,r10,r8
20301d1e	cmp #$20101e40,r8
20301d24	lbra ne,#$20301d2e,nop
20301d28	mv_s #$20101da0,r8
20301d2e	cmp r8,r11
20301d30	lbra eq,#$20301d42,nop
20301d34	st_v v0,(r10)
	add #$00000010,r10
20301d3a	st_v v1,(r10)
20301d3e	st_s r8,??register
20301d42	lbra #$20301c9c,nop
20301d46	pop v3,rz
20301d48	nop
20301d4a	rts,nop
20301d4c	push v2
20301d4e	ld_s commctl,r8
20301d52	ld_s comminfo,r7
20301d56	btst #$0000000f,r8
20301d58	lbra ne,#$20301d4e,nop
20301d5c	st_s r5,comminfo
	copy r8,r10
20301d62	st_s r4,commctl
	bits #$00000000,>>#14,r10
20301d6a	st_v v0,commxmit
	or r10,>>#-5,r8
20301d72	ld_s commctl,r11
20301d76	nop
20301d78	btst #$0000000e,r11
20301d7a	lbra ne,#$20301d5c,nop
	btst #$00000005,r11
20301d80	lbra ne,#$20301d5c,nop
	btst #$0000000f,r11
20301d86	lbra ne,#$20301d72,nop
20301d8a	st_s r8,commctl
	rts
20301d90	pop v2
20301d92	st_s r7,comminfo
20301d96	bra #$20301da6
20301d98	mv_s #$20301da8,r6
20301d9e	nop

;Start of minicommrecv routine
20301da0	mv_s #$20301dd6,r6
;commrecv_common:
20301da6	push v2
check_for_available_packet:
20301da8	ld_v ??register,v2
20301dac	nop
;compare queue2 tail pointer to queue2 head pointer
20301dae	cmp r10,r11
;branch to epilogue if queue2 tail pointer equals queue2 head pointer
20301db0	jmp eq,(r6),nop
	mv_s #$ffffffff,r4

;V0 = first vector from queue2 head
20301db6	ld_v (r11),v1
;increment head pointer by 16 bytes
20301dba	add #$00000010,r11
;V0 = second vector from queue2 head 
20301dbc	ld_v (r11),v0
;increment head pointer by 16 bytes
20301dc0	add #$00000010,r11
;compare incremented head pointer to beyond_queue2
20301dc2	cmp #$20101e40,r11
;if incremented head pointer is not equal to beyond_queue2, branch to no_adjust2
20301dc8	lbra ne,#$20301dd2,nop

;set head pointer to comm_packet_queue2_start
20301dcc	mv_s #$20101da0,r11

;no_adjust2:
20301dd2	st_s r11,??register
20301dd6	pop v2
20301dd8	rts,nop
20301dda	ld_s ??register,r1
20301dde	rts
20301de0	st_s r0,??register
20301de4	copy r1,r0
20301de6	rts,nop
20301de8	rts,nop
20301dea	st_s #$00000004,intclr
	rts,nop
20301df0	st_s r19,rzi2
	mul_sv v4,v2
	st_s r1,(r18)
	st_s r5,(r10)
	btst #$0000000d,r10
20301dfa	bra lt,#$20301dd0
